/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * pass Culture pro private API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import { getAuthenticationHeaders, handleGeneratedApiResponse, safeFetch } from 'api/apiHelpers'
import { E2E_LOCALHOST_ADDRESS, E2E_LOCALHOST_ADDRESS_ANDROID } from 'libs/e2e/constants'
import { EmptyResponse } from 'libs/fetch'

import { Configuration } from './configuration'
import { getIsE2e } from 'libs/e2e/getIsE2e'

// To avoid having to distribute e2e custom build, in e2e, we change the basePath to target e2e backend.
// On Android chrome and Android app, the backend is available on http://10.0.2.2:6001
// For others, the backend is available on http://127.0.0.1:6001
const E2E_BASE_URL = `http://${
(Platform.OS === 'web' && /Android/i.test(navigator.userAgent)) || Platform.OS === 'android'
? E2E_LOCALHOST_ADDRESS_ANDROID
: E2E_LOCALHOST_ADDRESS
}:6001`
const BASE_PATH = 'http://localhost:5001'.replace(/\/+$/, '')

/**
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>
}

/**
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string
  options: any
}

/**
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration?: Configuration
  constructor(configuration?: Configuration, protected basePath: string = BASE_PATH) {
    if (configuration) {
      this.configuration = configuration
      this.basePath = configuration.basePath || this.basePath
    }
  }

  public getConfiguration = async () => {
    const isE2e = await getIsE2e()
    return isE2e ? { ...this.configuration, basePath: E2E_BASE_URL } : this.configuration
  }
}

/**
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name = 'RequiredError'
  constructor(public field: string, msg?: string) {
    super(msg)
  }
}

/**
 * @export
 * @interface AdageCulturalPartnersResponseModel
 */
export interface AdageCulturalPartnersResponseModel {
  /**
   * @type {Array<CulturalPartner>}
   * @memberof AdageCulturalPartnersResponseModel
   */
  partners: Array<CulturalPartner>
}
/**
 * @export
 * @interface Address
 */
export interface Address {
  /**
   * @type {string}
   * @memberof Address
   */
  city: string
  /**
   * @type {string}
   * @memberof Address
   */
  postalCode: string
  /**
   * @type {string}
   * @memberof Address
   */
  street: string
}
/**
 * @export
 * @interface AddressResponseModel
 */
export interface AddressResponseModel {
  /**
   * @type {string}
   * @memberof AddressResponseModel
   */
  banId?: string | null
  /**
   * @type {string}
   * @memberof AddressResponseModel
   */
  city: string
  /**
   * @type {number}
   * @memberof AddressResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof AddressResponseModel
   */
  inseeCode?: string | null
  /**
   * @type {number}
   * @memberof AddressResponseModel
   */
  latitude: number
  /**
   * @type {number}
   * @memberof AddressResponseModel
   */
  longitude: number
  /**
   * @type {string}
   * @memberof AddressResponseModel
   */
  postalCode: string
  /**
   * @type {string}
   * @memberof AddressResponseModel
   */
  street?: string | null
}
/**
 * @export
 * @interface AttachImageFormModel
 */
export interface AttachImageFormModel {
  /**
   * @type {string}
   * @memberof AttachImageFormModel
   */
  credit: string
  /**
   * @type {number}
   * @memberof AttachImageFormModel
   */
  croppingRectHeight: number
  /**
   * @type {number}
   * @memberof AttachImageFormModel
   */
  croppingRectWidth: number
  /**
   * @type {number}
   * @memberof AttachImageFormModel
   */
  croppingRectX: number
  /**
   * @type {number}
   * @memberof AttachImageFormModel
   */
  croppingRectY: number
}
/**
 * @export
 * @interface AttachImageResponseModel
 */
export interface AttachImageResponseModel {
  /**
   * @type {string}
   * @memberof AttachImageResponseModel
   */
  imageUrl: string
}
/**
 * @export
 * @interface AudioDisabilityModel
 */
export interface AudioDisabilityModel {
  /**
   * @type {Array<string>}
   * @memberof AudioDisabilityModel
   */
  deafAndHardOfHearing?: Array<string>
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum BankAccountApplicationStatus {
  'en_construction' = 'en_construction',
  'en_instruction' = 'en_instruction',
  'accepte' = 'accepte',
  'refuse' = 'refuse',
  'sans_suite' = 'sans_suite',
  'a_corriger' = 'a_corriger',
}
/**
 * @export
 * @interface BankAccountResponseModel
 */
export interface BankAccountResponseModel {
  /**
   * @type {string}
   * @memberof BankAccountResponseModel
   */
  bic: string
  /**
   * @type {Date}
   * @memberof BankAccountResponseModel
   */
  dateCreated: Date
  /**
   * @type {Date}
   * @memberof BankAccountResponseModel
   */
  dateLastStatusUpdate?: Date | null
  /**
   * @type {number}
   * @memberof BankAccountResponseModel
   */
  dsApplicationId?: number | null
  /**
   * @type {number}
   * @memberof BankAccountResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof BankAccountResponseModel
   */
  isActive: boolean
  /**
   * @type {string}
   * @memberof BankAccountResponseModel
   */
  label: string
  /**
   * @type {Array<LinkedVenues>}
   * @memberof BankAccountResponseModel
   */
  linkedVenues: Array<LinkedVenues>
  /**
   * @type {string}
   * @memberof BankAccountResponseModel
   */
  obfuscatedIban: string
  /**
   * @type {BankAccountApplicationStatus}
   * @memberof BankAccountResponseModel
   */
  status: BankAccountApplicationStatus
}
/**
 * @export
 * @interface BannerMetaModel
 */
export interface BannerMetaModel {
  /**
   * @type {CropParams}
   * @memberof BannerMetaModel
   */
  crop_params?: CropParams
  /**
   * @type {string}
   * @memberof BannerMetaModel
   */
  image_credit?: string | null
  /**
   * @type {string}
   * @memberof BannerMetaModel
   */
  original_image_url?: string | null
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum BookingExportType {
  'csv' = 'csv',
  'excel' = 'excel',
}
/**
 * @export
 * @interface BookingRecapResponseBeneficiaryModel
 */
export interface BookingRecapResponseBeneficiaryModel {
  /**
   * @type {string}
   * @memberof BookingRecapResponseBeneficiaryModel
   */
  email?: string | null
  /**
   * @type {string}
   * @memberof BookingRecapResponseBeneficiaryModel
   */
  firstname?: string | null
  /**
   * @type {string}
   * @memberof BookingRecapResponseBeneficiaryModel
   */
  lastname?: string | null
  /**
   * @type {string}
   * @memberof BookingRecapResponseBeneficiaryModel
   */
  phonenumber?: string | null
}
/**
 * @export
 * @interface BookingRecapResponseBookingStatusHistoryModel
 */
export interface BookingRecapResponseBookingStatusHistoryModel {
  /**
   * @type {Date}
   * @memberof BookingRecapResponseBookingStatusHistoryModel
   */
  date?: Date | null
  /**
   * @type {BookingRecapStatus}
   * @memberof BookingRecapResponseBookingStatusHistoryModel
   */
  status: BookingRecapStatus
}
/**
 * @export
 * @interface BookingRecapResponseModel
 */
export interface BookingRecapResponseModel {
  /**
   * @type {BookingRecapResponseBeneficiaryModel}
   * @memberof BookingRecapResponseModel
   */
  beneficiary: BookingRecapResponseBeneficiaryModel
  /**
   * @type {number}
   * @memberof BookingRecapResponseModel
   */
  bookingAmount: number
  /**
   * @type {Date}
   * @memberof BookingRecapResponseModel
   */
  bookingDate: Date
  /**
   * @type {boolean}
   * @memberof BookingRecapResponseModel
   */
  bookingIsDuo: boolean
  /**
   * @type {string}
   * @memberof BookingRecapResponseModel
   */
  bookingPriceCategoryLabel?: string | null
  /**
   * @type {BookingRecapStatus}
   * @memberof BookingRecapResponseModel
   */
  bookingStatus: BookingRecapStatus
  /**
   * @type {Array<BookingRecapResponseBookingStatusHistoryModel>}
   * @memberof BookingRecapResponseModel
   */
  bookingStatusHistory: Array<BookingRecapResponseBookingStatusHistoryModel>
  /**
   * @type {string}
   * @memberof BookingRecapResponseModel
   */
  bookingToken?: string | null
  /**
   * @type {BookingRecapResponseStockModel}
   * @memberof BookingRecapResponseModel
   */
  stock: BookingRecapResponseStockModel
}
/**
 * @export
 * @interface BookingRecapResponseStockModel
 */
export interface BookingRecapResponseStockModel {
  /**
   * @type {Date}
   * @memberof BookingRecapResponseStockModel
   */
  eventBeginningDatetime?: Date | null
  /**
   * @type {number}
   * @memberof BookingRecapResponseStockModel
   */
  offerId: number
  /**
   * @type {boolean}
   * @memberof BookingRecapResponseStockModel
   */
  offerIsEducational: boolean
  /**
   * @type {string}
   * @memberof BookingRecapResponseStockModel
   */
  offerIsbn?: string | null
  /**
   * @type {string}
   * @memberof BookingRecapResponseStockModel
   */
  offerName: string
  /**
   * @type {number}
   * @memberof BookingRecapResponseStockModel
   */
  stockIdentifier: number
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum BookingRecapStatus {
  'booked' = 'booked',
  'validated' = 'validated',
  'cancelled' = 'cancelled',
  'reimbursed' = 'reimbursed',
  'confirmed' = 'confirmed',
  'pending' = 'pending',
}
/**
 * @export
 * @interface BookingStatusFilter
 */
export interface BookingStatusFilter {
}
/**
 * @export
 * @interface BookingStatusFilter1
 */
export interface BookingStatusFilter1 {
}
/**
 * @export
 * @interface BookingStatusFilter2
 */
export interface BookingStatusFilter2 {
}
/**
 * @export
 * @interface BookingStatusFilter3
 */
export interface BookingStatusFilter3 {
}
/**
 * @export
 * @interface BookingStatusFilter4
 */
export interface BookingStatusFilter4 {
}
/**
 * @export
 * @interface BookingStatusFilter5
 */
export interface BookingStatusFilter5 {
}
/**
 * @export
 * @interface BookingStatusHistoryResponseModel
 */
export interface BookingStatusHistoryResponseModel {
  /**
   * @type {string}
   * @memberof BookingStatusHistoryResponseModel
   */
  date: string
  /**
   * @type {string}
   * @memberof BookingStatusHistoryResponseModel
   */
  status: string
}
/**
 * @export
 * @interface BookingsExportQueryModel
 */
export interface BookingsExportQueryModel {
  /**
   * @type {string}
   * @memberof BookingsExportQueryModel
   */
  event_date: string
  /**
   * @type {BookingsExportStatusFilter}
   * @memberof BookingsExportQueryModel
   */
  status: BookingsExportStatusFilter
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum BookingsExportStatusFilter {
  'validated' = 'validated',
  'all' = 'all',
}
/**
 * @export
 * @interface CategoriesResponseModel
 */
export interface CategoriesResponseModel {
  /**
   * @type {Array<CategoryResponseModel>}
   * @memberof CategoriesResponseModel
   */
  categories: Array<CategoryResponseModel>
  /**
   * @type {Array<SubcategoryResponseModel>}
   * @memberof CategoriesResponseModel
   */
  subcategories: Array<SubcategoryResponseModel>
}
/**
 * @export
 * @interface CategoryResponseModel
 */
export interface CategoryResponseModel {
  /**
   * @type {string}
   * @memberof CategoryResponseModel
   */
  id: string
  /**
   * @type {boolean}
   * @memberof CategoryResponseModel
   */
  isSelectable: boolean
  /**
   * @type {string}
   * @memberof CategoryResponseModel
   */
  proLabel: string
}
/**
 * @export
 * @interface ChangePasswordBodyModel
 */
export interface ChangePasswordBodyModel {
  /**
   * @type {string}
   * @memberof ChangePasswordBodyModel
   */
  newConfirmationPassword: string
  /**
   * @type {string}
   * @memberof ChangePasswordBodyModel
   */
  newPassword: string
  /**
   * @type {string}
   * @memberof ChangePasswordBodyModel
   */
  oldPassword: string
}
/**
 * @export
 * @interface ChangeProEmailBody
 */
export interface ChangeProEmailBody {
  /**
   * @type {string}
   * @memberof ChangeProEmailBody
   */
  token: string
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum CollectiveBookingBankAccountStatus {
  'ACCEPTED' = 'ACCEPTED',
  'DRAFT' = 'DRAFT',
  'MISSING' = 'MISSING',
  'REJECTED' = 'REJECTED',
}
/**
 * @export
 * @interface CollectiveBookingByIdResponseModel
 */
export interface CollectiveBookingByIdResponseModel {
  /**
   * @type {CollectiveBookingBankAccountStatus}
   * @memberof CollectiveBookingByIdResponseModel
   */
  bankAccountStatus: CollectiveBookingBankAccountStatus
  /**
   * @type {Date}
   * @memberof CollectiveBookingByIdResponseModel
   */
  beginningDatetime: Date
  /**
   * @type {EducationalInstitutionResponseModel}
   * @memberof CollectiveBookingByIdResponseModel
   */
  educationalInstitution: EducationalInstitutionResponseModel
  /**
   * @type {CollectiveBookingEducationalRedactorResponseModel}
   * @memberof CollectiveBookingByIdResponseModel
   */
  educationalRedactor: CollectiveBookingEducationalRedactorResponseModel
  /**
   * @type {number}
   * @memberof CollectiveBookingByIdResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof CollectiveBookingByIdResponseModel
   */
  isCancellable: boolean
  /**
   * @type {number}
   * @memberof CollectiveBookingByIdResponseModel
   */
  numberOfTickets: number
  /**
   * @type {CollectiveOfferOfferVenueResponseModel}
   * @memberof CollectiveBookingByIdResponseModel
   */
  offerVenue: CollectiveOfferOfferVenueResponseModel
  /**
   * @type {number}
   * @memberof CollectiveBookingByIdResponseModel
   */
  offererId: number
  /**
   * @type {number}
   * @memberof CollectiveBookingByIdResponseModel
   */
  price: number
  /**
   * @type {Array<StudentLevels>}
   * @memberof CollectiveBookingByIdResponseModel
   */
  students: Array<StudentLevels>
  /**
   * @type {number}
   * @memberof CollectiveBookingByIdResponseModel
   */
  venueDMSApplicationId?: number | null
  /**
   * @type {number}
   * @memberof CollectiveBookingByIdResponseModel
   */
  venueId: number
  /**
   * @type {string}
   * @memberof CollectiveBookingByIdResponseModel
   */
  venuePostalCode?: string | null
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum CollectiveBookingCancellationReasons {
  'OFFERER' = 'OFFERER',
  'BENEFICIARY' = 'BENEFICIARY',
  'EXPIRED' = 'EXPIRED',
  'FRAUD' = 'FRAUD',
  'REFUSED_BY_INSTITUTE' = 'REFUSED_BY_INSTITUTE',
  'REFUSED_BY_HEADMASTER' = 'REFUSED_BY_HEADMASTER',
  'PUBLIC_API' = 'PUBLIC_API',
  'FINANCE_INCIDENT' = 'FINANCE_INCIDENT',
  'BACKOFFICE' = 'BACKOFFICE',
}
/**
 * @export
 * @interface CollectiveBookingCollectiveStockResponseModel
 */
export interface CollectiveBookingCollectiveStockResponseModel {
  /**
   * @type {string}
   * @memberof CollectiveBookingCollectiveStockResponseModel
   */
  bookingLimitDatetime?: string | null
  /**
   * @type {string}
   * @memberof CollectiveBookingCollectiveStockResponseModel
   */
  eventBeginningDatetime: string
  /**
   * @type {string}
   * @memberof CollectiveBookingCollectiveStockResponseModel
   */
  eventEndDatetime?: string | null
  /**
   * @type {string}
   * @memberof CollectiveBookingCollectiveStockResponseModel
   */
  eventStartDatetime: string
  /**
   * @type {number}
   * @memberof CollectiveBookingCollectiveStockResponseModel
   */
  numberOfTickets: number
  /**
   * @type {number}
   * @memberof CollectiveBookingCollectiveStockResponseModel
   */
  offerId: number
  /**
   * @type {boolean}
   * @memberof CollectiveBookingCollectiveStockResponseModel
   */
  offerIsEducational: boolean
  /**
   * @type {string}
   * @memberof CollectiveBookingCollectiveStockResponseModel
   */
  offerIsbn?: string | null
  /**
   * @type {string}
   * @memberof CollectiveBookingCollectiveStockResponseModel
   */
  offerName: string
}
/**
 * @export
 * @interface CollectiveBookingEducationalRedactorResponseModel
 */
export interface CollectiveBookingEducationalRedactorResponseModel {
  /**
   * @type {string}
   * @memberof CollectiveBookingEducationalRedactorResponseModel
   */
  civility?: string | null
  /**
   * @type {string}
   * @memberof CollectiveBookingEducationalRedactorResponseModel
   */
  email: string
  /**
   * @type {string}
   * @memberof CollectiveBookingEducationalRedactorResponseModel
   */
  firstName?: string | null
  /**
   * @type {number}
   * @memberof CollectiveBookingEducationalRedactorResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof CollectiveBookingEducationalRedactorResponseModel
   */
  lastName?: string | null
}
/**
 * @export
 * @interface CollectiveBookingResponseModel
 */
export interface CollectiveBookingResponseModel {
  /**
   * @type {number}
   * @memberof CollectiveBookingResponseModel
   */
  bookingAmount: number
  /**
   * @type {string}
   * @memberof CollectiveBookingResponseModel
   */
  bookingCancellationLimitDate: string
  /**
   * @type {CollectiveBookingCancellationReasons}
   * @memberof CollectiveBookingResponseModel
   */
  bookingCancellationReason?: CollectiveBookingCancellationReasons | null
  /**
   * @type {string}
   * @memberof CollectiveBookingResponseModel
   */
  bookingConfirmationDate?: string | null
  /**
   * @type {string}
   * @memberof CollectiveBookingResponseModel
   */
  bookingConfirmationLimitDate: string
  /**
   * @type {string}
   * @memberof CollectiveBookingResponseModel
   */
  bookingDate: string
  /**
   * @type {string}
   * @memberof CollectiveBookingResponseModel
   */
  bookingId: string
  /**
   * @type {boolean}
   * @memberof CollectiveBookingResponseModel
   */
  bookingIsDuo?: boolean
  /**
   * @type {string}
   * @memberof CollectiveBookingResponseModel
   */
  bookingStatus: string
  /**
   * @type {Array<BookingStatusHistoryResponseModel>}
   * @memberof CollectiveBookingResponseModel
   */
  bookingStatusHistory: Array<BookingStatusHistoryResponseModel>
  /**
   * @type {string}
   * @memberof CollectiveBookingResponseModel
   */
  bookingToken?: string | null
  /**
   * @type {EducationalInstitutionResponseModel}
   * @memberof CollectiveBookingResponseModel
   */
  institution: EducationalInstitutionResponseModel
  /**
   * @type {CollectiveBookingCollectiveStockResponseModel}
   * @memberof CollectiveBookingResponseModel
   */
  stock: CollectiveBookingCollectiveStockResponseModel
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum CollectiveBookingStatus {
  'PENDING' = 'PENDING',
  'CONFIRMED' = 'CONFIRMED',
  'USED' = 'USED',
  'CANCELLED' = 'CANCELLED',
  'REIMBURSED' = 'REIMBURSED',
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum CollectiveBookingStatusFilter {
  'booked' = 'booked',
  'validated' = 'validated',
  'reimbursed' = 'reimbursed',
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum CollectiveOfferDisplayedStatus {
  'ACTIVE' = 'ACTIVE',
  'PENDING' = 'PENDING',
  'REJECTED' = 'REJECTED',
  'PREBOOKED' = 'PREBOOKED',
  'BOOKED' = 'BOOKED',
  'INACTIVE' = 'INACTIVE',
  'EXPIRED' = 'EXPIRED',
  'ENDED' = 'ENDED',
}
/**
 * @export
 * @interface CollectiveOfferInstitutionModel
 */
export interface CollectiveOfferInstitutionModel {
  /**
   * @type {string}
   * @memberof CollectiveOfferInstitutionModel
   */
  city: string
  /**
   * @type {string}
   * @memberof CollectiveOfferInstitutionModel
   */
  institutionId: string
  /**
   * @type {string}
   * @memberof CollectiveOfferInstitutionModel
   */
  institutionType: string
  /**
   * @type {string}
   * @memberof CollectiveOfferInstitutionModel
   */
  name: string
  /**
   * @type {string}
   * @memberof CollectiveOfferInstitutionModel
   */
  postalCode: string
}
/**
 * @export
 * @interface CollectiveOfferOfferVenueResponseModel
 */
export interface CollectiveOfferOfferVenueResponseModel {
  /**
   * @type {OfferAddressType}
   * @memberof CollectiveOfferOfferVenueResponseModel
   */
  addressType: OfferAddressType
  /**
   * @type {string}
   * @memberof CollectiveOfferOfferVenueResponseModel
   */
  otherAddress: string
  /**
   * @type {number}
   * @memberof CollectiveOfferOfferVenueResponseModel
   */
  venueId?: number | null
}
/**
 * @export
 * @interface CollectiveOfferRedactorModel
 */
export interface CollectiveOfferRedactorModel {
  /**
   * @type {string}
   * @memberof CollectiveOfferRedactorModel
   */
  email: string
  /**
   * @type {string}
   * @memberof CollectiveOfferRedactorModel
   */
  firstName?: string | null
  /**
   * @type {string}
   * @memberof CollectiveOfferRedactorModel
   */
  lastName?: string | null
}
/**
 * @export
 * @interface CollectiveOfferResponseIdModel
 */
export interface CollectiveOfferResponseIdModel {
  /**
   * @type {number}
   * @memberof CollectiveOfferResponseIdModel
   */
  id: number
}
/**
 * @export
 * @interface CollectiveOfferResponseModel
 */
export interface CollectiveOfferResponseModel {
  /**
   * @type {CollectiveOffersBookingResponseModel}
   * @memberof CollectiveOfferResponseModel
   */
  booking?: CollectiveOffersBookingResponseModel | null
  /**
   * @type {EducationalInstitutionResponseModel}
   * @memberof CollectiveOfferResponseModel
   */
  educationalInstitution?: EducationalInstitutionResponseModel | null
  /**
   * @type {Array<EacFormat>}
   * @memberof CollectiveOfferResponseModel
   */
  formats?: Array<EacFormat> | null
  /**
   * @type {boolean}
   * @memberof CollectiveOfferResponseModel
   */
  hasBookingLimitDatetimesPassed: boolean
  /**
   * @type {number}
   * @memberof CollectiveOfferResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof CollectiveOfferResponseModel
   */
  imageCredit?: string | null
  /**
   * @type {string}
   * @memberof CollectiveOfferResponseModel
   */
  imageUrl?: string | null
  /**
   * @type {Array<string>}
   * @memberof CollectiveOfferResponseModel
   */
  interventionArea: Array<string>
  /**
   * @type {boolean}
   * @memberof CollectiveOfferResponseModel
   */
  isActive: boolean
  /**
   * @type {boolean}
   * @memberof CollectiveOfferResponseModel
   */
  isEditable: boolean
  /**
   * @type {boolean}
   * @memberof CollectiveOfferResponseModel
   */
  isEducational: boolean
  /**
   * @type {boolean}
   * @memberof CollectiveOfferResponseModel
   */
  isPublicApi: boolean
  /**
   * @type {boolean}
   * @memberof CollectiveOfferResponseModel
   */
  isShowcase: boolean
  /**
   * @type {string}
   * @memberof CollectiveOfferResponseModel
   */
  name: string
  /**
   * @type {NationalProgramModel}
   * @memberof CollectiveOfferResponseModel
   */
  nationalProgram?: NationalProgramModel | null
  /**
   * @type {OfferStatus}
   * @memberof CollectiveOfferResponseModel
   */
  status: OfferStatus
  /**
   * @type {Array<CollectiveOffersStockResponseModel>}
   * @memberof CollectiveOfferResponseModel
   */
  stocks: Array<CollectiveOffersStockResponseModel>
  /**
   * @type {SubcategoryIdEnum}
   * @memberof CollectiveOfferResponseModel
   */
  subcategoryId?: SubcategoryIdEnum | null
  /**
   * @type {string}
   * @memberof CollectiveOfferResponseModel
   */
  templateId?: string | null
  /**
   * @type {ListOffersVenueResponseModel}
   * @memberof CollectiveOfferResponseModel
   */
  venue: ListOffersVenueResponseModel
}
/**
 * @export
 * @interface CollectiveOfferTemplateBodyModel
 */
export interface CollectiveOfferTemplateBodyModel {
  /**
   * @type {string}
   * @memberof CollectiveOfferTemplateBodyModel
   */
  educationalPriceDetail?: string | null
}
/**
 * @export
 * @interface CollectiveOfferTemplateResponseIdModel
 */
export interface CollectiveOfferTemplateResponseIdModel {
  /**
   * @type {number}
   * @memberof CollectiveOfferTemplateResponseIdModel
   */
  id: number
}
/**
 * @export
 * @interface CollectiveOfferType
 */
export interface CollectiveOfferType {
}
/**
 * @export
 * @interface CollectiveOfferType1
 */
export interface CollectiveOfferType1 {
}
/**
 * @export
 * @interface CollectiveOfferVenueBodyModel
 */
export interface CollectiveOfferVenueBodyModel {
  /**
   * @type {OfferAddressType}
   * @memberof CollectiveOfferVenueBodyModel
   */
  addressType: OfferAddressType
  /**
   * @type {string}
   * @memberof CollectiveOfferVenueBodyModel
   */
  otherAddress: string
  /**
   * @type {number}
   * @memberof CollectiveOfferVenueBodyModel
   */
  venueId?: number | null
}
/**
 * @export
 * @interface CollectiveOffersBookingResponseModel
 */
export interface CollectiveOffersBookingResponseModel {
  /**
   * @type {string}
   * @memberof CollectiveOffersBookingResponseModel
   */
  booking_status: string
  /**
   * @type {number}
   * @memberof CollectiveOffersBookingResponseModel
   */
  id: number
}
/**
 * @export
 * @interface CollectiveOffersStockResponseModel
 */
export interface CollectiveOffersStockResponseModel {
  /**
   * @type {Date}
   * @memberof CollectiveOffersStockResponseModel
   */
  beginningDatetime?: Date | null
  /**
   * @type {Date}
   * @memberof CollectiveOffersStockResponseModel
   */
  bookingLimitDatetime?: Date | null
  /**
   * @type {boolean}
   * @memberof CollectiveOffersStockResponseModel
   */
  hasBookingLimitDatetimePassed: boolean
  /**
   * @type {number | string}
   * @memberof CollectiveOffersStockResponseModel
   */
  remainingQuantity: number | string
}
/**
 * @export
 * @interface CollectiveStockCreationBodyModel
 */
export interface CollectiveStockCreationBodyModel {
  /**
   * @type {Date}
   * @memberof CollectiveStockCreationBodyModel
   */
  beginningDatetime: Date
  /**
   * @type {Date}
   * @memberof CollectiveStockCreationBodyModel
   */
  bookingLimitDatetime?: Date | null
  /**
   * @type {string}
   * @memberof CollectiveStockCreationBodyModel
   */
  educationalPriceDetail?: string | null
  /**
   * @type {number}
   * @memberof CollectiveStockCreationBodyModel
   */
  numberOfTickets: number
  /**
   * @type {number}
   * @memberof CollectiveStockCreationBodyModel
   */
  offerId: number
  /**
   * @type {number}
   * @memberof CollectiveStockCreationBodyModel
   */
  totalPrice: number
}
/**
 * @export
 * @interface CollectiveStockEditionBodyModel
 */
export interface CollectiveStockEditionBodyModel {
  /**
   * @type {Date}
   * @memberof CollectiveStockEditionBodyModel
   */
  beginningDatetime?: Date | null
  /**
   * @type {Date}
   * @memberof CollectiveStockEditionBodyModel
   */
  bookingLimitDatetime?: Date | null
  /**
   * @type {string}
   * @memberof CollectiveStockEditionBodyModel
   */
  educationalPriceDetail?: string | null
  /**
   * @type {number}
   * @memberof CollectiveStockEditionBodyModel
   */
  numberOfTickets?: number | null
  /**
   * @type {number}
   * @memberof CollectiveStockEditionBodyModel
   */
  totalPrice?: number | null
}
/**
 * @export
 * @interface CollectiveStockResponseModel
 */
export interface CollectiveStockResponseModel {
  /**
   * @type {Date}
   * @memberof CollectiveStockResponseModel
   */
  beginningDatetime?: Date | null
  /**
   * @type {Date}
   * @memberof CollectiveStockResponseModel
   */
  bookingLimitDatetime?: Date | null
  /**
   * @type {string}
   * @memberof CollectiveStockResponseModel
   */
  educationalPriceDetail?: string | null
  /**
   * @type {Date}
   * @memberof CollectiveStockResponseModel
   */
  endDatetime?: Date | null
  /**
   * @type {number}
   * @memberof CollectiveStockResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof CollectiveStockResponseModel
   */
  isEducationalStockEditable: boolean
  /**
   * @type {number}
   * @memberof CollectiveStockResponseModel
   */
  numberOfTickets?: number | null
  /**
   * @type {number}
   * @memberof CollectiveStockResponseModel
   */
  price: number
  /**
   * @type {Date}
   * @memberof CollectiveStockResponseModel
   */
  startDatetime?: Date | null
}
/**
 * @export
 * @interface CombinedInvoiceListModel
 */
export interface CombinedInvoiceListModel {
  /**
   * @type {Array<string>}
   * @memberof CombinedInvoiceListModel
   */
  invoiceReferences: Array<string>
}
/**
 * @export
 * @interface Consent
 */
export interface Consent {
  /**
   * @type {Array<string>}
   * @memberof Consent
   */
  accepted: Array<string>
  /**
   * @type {Array<string>}
   * @memberof Consent
   */
  mandatory: Array<string>
  /**
   * @type {Array<string>}
   * @memberof Consent
   */
  refused: Array<string>
}
/**
 * @export
 * @interface CookieConsentRequest
 */
export interface CookieConsentRequest {
  /**
   * @type {Date}
   * @memberof CookieConsentRequest
   */
  choiceDatetime: Date
  /**
   * @type {Consent}
   * @memberof CookieConsentRequest
   */
  consent: Consent
  /**
   * @type {string}
   * @memberof CookieConsentRequest
   */
  deviceId: string
  /**
   * @type {number}
   * @memberof CookieConsentRequest
   */
  userId?: number | null
}
/**
 * @export
 * @interface CreateOffererQueryModel
 */
export interface CreateOffererQueryModel {
  /**
   * @type {string}
   * @memberof CreateOffererQueryModel
   */
  city: string
  /**
   * @type {number}
   * @memberof CreateOffererQueryModel
   */
  latitude?: number | null
  /**
   * @type {number}
   * @memberof CreateOffererQueryModel
   */
  longitude?: number | null
  /**
   * @type {string}
   * @memberof CreateOffererQueryModel
   */
  name: string
  /**
   * @type {string}
   * @memberof CreateOffererQueryModel
   */
  postalCode: string
  /**
   * @type {string}
   * @memberof CreateOffererQueryModel
   */
  siren: string
  /**
   * @type {string}
   * @memberof CreateOffererQueryModel
   */
  street?: string | null
}
/**
 * @export
 * @interface CreatePriceCategoryModel
 */
export interface CreatePriceCategoryModel {
  /**
   * @type {string}
   * @memberof CreatePriceCategoryModel
   */
  label: string
  /**
   * @type {number}
   * @memberof CreatePriceCategoryModel
   */
  price: number
}
/**
 * @export
 * @interface CreateThumbnailBodyModel
 */
export interface CreateThumbnailBodyModel {
  /**
   * @type {string}
   * @memberof CreateThumbnailBodyModel
   */
  credit?: string | null
  /**
   * @type {number}
   * @memberof CreateThumbnailBodyModel
   */
  croppingRectHeight?: number | null
  /**
   * @type {number}
   * @memberof CreateThumbnailBodyModel
   */
  croppingRectWidth?: number | null
  /**
   * @type {number}
   * @memberof CreateThumbnailBodyModel
   */
  croppingRectX?: number | null
  /**
   * @type {number}
   * @memberof CreateThumbnailBodyModel
   */
  croppingRectY?: number | null
  /**
   * @type {number}
   * @memberof CreateThumbnailBodyModel
   */
  offerId: number
}
/**
 * @export
 * @interface CreateThumbnailResponseModel
 */
export interface CreateThumbnailResponseModel {
  /**
   * @type {string}
   * @memberof CreateThumbnailResponseModel
   */
  credit?: string | null
  /**
   * @type {number}
   * @memberof CreateThumbnailResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof CreateThumbnailResponseModel
   */
  url: string
}
/**
 * @export
 * @interface CropParams
 */
export interface CropParams {
  /**
   * @type {number}
   * @memberof CropParams
   */
  height_crop_percent?: number
  /**
   * @type {number}
   * @memberof CropParams
   */
  width_crop_percent?: number
  /**
   * @type {number}
   * @memberof CropParams
   */
  x_crop_percent?: number
  /**
   * @type {number}
   * @memberof CropParams
   */
  y_crop_percent?: number
}
/**
 * @export
 * @interface CulturalPartner
 */
export interface CulturalPartner {
  /**
   * @type {string}
   * @memberof CulturalPartner
   */
  communeLibelle?: string | null
  /**
   * @type {number}
   * @memberof CulturalPartner
   */
  id: number
  /**
   * @type {string}
   * @memberof CulturalPartner
   */
  libelle: string
  /**
   * @type {string}
   * @memberof CulturalPartner
   */
  regionLibelle?: string | null
}
/**
 * @export
 * @interface DMSApplicationForEAC
 */
export interface DMSApplicationForEAC {
  /**
   * @type {number}
   * @memberof DMSApplicationForEAC
   */
  application: number
  /**
   * @type {Date}
   * @memberof DMSApplicationForEAC
   */
  buildDate?: Date | null
  /**
   * @type {Date}
   * @memberof DMSApplicationForEAC
   */
  depositDate: Date
  /**
   * @type {Date}
   * @memberof DMSApplicationForEAC
   */
  expirationDate?: Date | null
  /**
   * @type {Date}
   * @memberof DMSApplicationForEAC
   */
  instructionDate?: Date | null
  /**
   * @type {Date}
   * @memberof DMSApplicationForEAC
   */
  lastChangeDate: Date
  /**
   * @type {number}
   * @memberof DMSApplicationForEAC
   */
  procedure: number
  /**
   * @type {Date}
   * @memberof DMSApplicationForEAC
   */
  processingDate?: Date | null
  /**
   * @type {DMSApplicationstatus}
   * @memberof DMSApplicationForEAC
   */
  state: DMSApplicationstatus
  /**
   * @type {Date}
   * @memberof DMSApplicationForEAC
   */
  userDeletionDate?: Date | null
  /**
   * @type {number}
   * @memberof DMSApplicationForEAC
   */
  venueId: number
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum DMSApplicationstatus {
  'accepte' = 'accepte',
  'sans_suite' = 'sans_suite',
  'en_construction' = 'en_construction',
  'refuse' = 'refuse',
  'en_instruction' = 'en_instruction',
}
/**
 * @export
 * @interface DateRangeModel
 */
export interface DateRangeModel {
  /**
   * @type {Date}
   * @memberof DateRangeModel
   */
  end: Date
  /**
   * @type {Date}
   * @memberof DateRangeModel
   */
  start: Date
}
/**
 * @export
 * @interface DateRangeOnCreateModel
 */
export interface DateRangeOnCreateModel {
  /**
   * @type {Date}
   * @memberof DateRangeOnCreateModel
   */
  end: Date
  /**
   * @type {Date}
   * @memberof DateRangeOnCreateModel
   */
  start: Date
}
/**
 * @export
 * @interface DeleteFilteredStockListBody
 */
export interface DeleteFilteredStockListBody {
  /**
   * @type {string}
   * @memberof DeleteFilteredStockListBody
   */
  date?: string | null
  /**
   * @type {number}
   * @memberof DeleteFilteredStockListBody
   */
  price_category_id?: number | null
  /**
   * @type {string}
   * @memberof DeleteFilteredStockListBody
   */
  time?: string | null
}
/**
 * @export
 * @interface DeleteOfferRequestBody
 */
export interface DeleteOfferRequestBody {
  /**
   * @type {Array<number>}
   * @memberof DeleteOfferRequestBody
   */
  ids: Array<number>
}
/**
 * @export
 * @interface DeleteStockListBody
 */
export interface DeleteStockListBody {
  /**
   * @type {Array<number>}
   * @memberof DeleteStockListBody
   */
  ids_to_delete: Array<number>
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum EacFormat {
  'Atelier de pratique' = 'Atelier de pratique',
  'Concert' = 'Concert',
  'Conférence, rencontre' = 'Conférence, rencontre',
  'Festival, salon, congrès' = 'Festival, salon, congrès',
  'Projection audiovisuelle' = 'Projection audiovisuelle',
  'Représentation' = 'Représentation',
  'Visite guidée' = 'Visite guidée',
  'Visite libre' = 'Visite libre',
}
/**
 * @export
 * @interface EditPriceCategoryModel
 */
export interface EditPriceCategoryModel {
  /**
   * @type {number}
   * @memberof EditPriceCategoryModel
   */
  id: number
  /**
   * @type {string}
   * @memberof EditPriceCategoryModel
   */
  label?: string | null
  /**
   * @type {number}
   * @memberof EditPriceCategoryModel
   */
  price?: number | null
}
/**
 * @export
 * @interface EditVenueBodyModel
 */
export interface EditVenueBodyModel {
  /**
   * @type {boolean}
   * @memberof EditVenueBodyModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof EditVenueBodyModel
   */
  banId?: string | null
  /**
   * @type {string}
   * @memberof EditVenueBodyModel
   */
  bookingEmail?: string | null
  /**
   * @type {string}
   * @memberof EditVenueBodyModel
   */
  city?: string | null
  /**
   * @type {string}
   * @memberof EditVenueBodyModel
   */
  comment?: string | null
  /**
   * @type {VenueContactModel}
   * @memberof EditVenueBodyModel
   */
  contact?: VenueContactModel | null
  /**
   * @type {string}
   * @memberof EditVenueBodyModel
   */
  description?: string | null
  /**
   * @type {boolean}
   * @memberof EditVenueBodyModel
   */
  isAccessibilityAppliedOnAllOffers?: boolean | null
  /**
   * @type {boolean}
   * @memberof EditVenueBodyModel
   */
  isEmailAppliedOnAllOffers?: boolean | null
  /**
   * @type {boolean}
   * @memberof EditVenueBodyModel
   */
  isWithdrawalAppliedOnAllOffers?: boolean | null
  /**
   * @type {number | string}
   * @memberof EditVenueBodyModel
   */
  latitude?: number | string | null
  /**
   * @type {number | string}
   * @memberof EditVenueBodyModel
   */
  longitude?: number | string | null
  /**
   * @type {boolean}
   * @memberof EditVenueBodyModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof EditVenueBodyModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof EditVenueBodyModel
   */
  name?: string | null
  /**
   * @type {Array<OpeningHoursModel>}
   * @memberof EditVenueBodyModel
   */
  openingHours?: Array<OpeningHoursModel> | null
  /**
   * @type {string}
   * @memberof EditVenueBodyModel
   */
  postalCode?: string | null
  /**
   * @type {string}
   * @memberof EditVenueBodyModel
   */
  publicName?: string | null
  /**
   * @type {boolean}
   * @memberof EditVenueBodyModel
   */
  shouldSendMail?: boolean | null
  /**
   * @type {string}
   * @memberof EditVenueBodyModel
   */
  siret?: string | null
  /**
   * @type {string}
   * @memberof EditVenueBodyModel
   */
  street?: string | null
  /**
   * @type {number}
   * @memberof EditVenueBodyModel
   */
  venueLabelId?: number | null
  /**
   * @type {VenueTypeCode}
   * @memberof EditVenueBodyModel
   */
  venueTypeCode?: VenueTypeCode | null
  /**
   * @type {boolean}
   * @memberof EditVenueBodyModel
   */
  visualDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof EditVenueBodyModel
   */
  withdrawalDetails?: string | null
}
/**
 * @export
 * @interface EditVenueCollectiveDataBodyModel
 */
export interface EditVenueCollectiveDataBodyModel {
  /**
   * @type {string}
   * @memberof EditVenueCollectiveDataBodyModel
   */
  collectiveAccessInformation?: string | null
  /**
   * @type {string}
   * @memberof EditVenueCollectiveDataBodyModel
   */
  collectiveDescription?: string | null
  /**
   * @type {Array<number>}
   * @memberof EditVenueCollectiveDataBodyModel
   */
  collectiveDomains?: Array<number> | null
  /**
   * @type {string}
   * @memberof EditVenueCollectiveDataBodyModel
   */
  collectiveEmail?: string | null
  /**
   * @type {Array<string>}
   * @memberof EditVenueCollectiveDataBodyModel
   */
  collectiveInterventionArea?: Array<string> | null
  /**
   * @type {Array<string>}
   * @memberof EditVenueCollectiveDataBodyModel
   */
  collectiveNetwork?: Array<string> | null
  /**
   * @type {string}
   * @memberof EditVenueCollectiveDataBodyModel
   */
  collectivePhone?: string | null
  /**
   * @type {Array<StudentLevels>}
   * @memberof EditVenueCollectiveDataBodyModel
   */
  collectiveStudents?: Array<StudentLevels> | null
  /**
   * @type {string}
   * @memberof EditVenueCollectiveDataBodyModel
   */
  collectiveSubCategoryId?: string | null
  /**
   * @type {string}
   * @memberof EditVenueCollectiveDataBodyModel
   */
  collectiveWebsite?: string | null
  /**
   * @type {number}
   * @memberof EditVenueCollectiveDataBodyModel
   */
  venueEducationalStatusId?: number | null
}
/**
 * @export
 * @interface EducationalDomainResponseModel
 */
export interface EducationalDomainResponseModel {
  /**
   * @type {number}
   * @memberof EducationalDomainResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof EducationalDomainResponseModel
   */
  name: string
}
/**
 * @export
 * @interface EducationalDomainsResponseModel
 */
export interface EducationalDomainsResponseModel extends Array<EducationalDomainResponseModel> {
}
/**
 * @export
 * @interface EducationalInstitutionResponseModel
 */
export interface EducationalInstitutionResponseModel {
  /**
   * @type {string}
   * @memberof EducationalInstitutionResponseModel
   */
  city: string
  /**
   * @type {number}
   * @memberof EducationalInstitutionResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof EducationalInstitutionResponseModel
   */
  institutionId: string
  /**
   * @type {string}
   * @memberof EducationalInstitutionResponseModel
   */
  institutionType?: string | null
  /**
   * @type {string}
   * @memberof EducationalInstitutionResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof EducationalInstitutionResponseModel
   */
  phoneNumber: string
  /**
   * @type {string}
   * @memberof EducationalInstitutionResponseModel
   */
  postalCode: string
}
/**
 * @export
 * @interface EducationalInstitutionsQueryModel
 */
export interface EducationalInstitutionsQueryModel {
  /**
   * @type {number}
   * @memberof EducationalInstitutionsQueryModel
   */
  page?: number
  /**
   * @type {number}
   * @memberof EducationalInstitutionsQueryModel
   */
  perPageLimit?: number
}
/**
 * @export
 * @interface EducationalInstitutionsResponseModel
 */
export interface EducationalInstitutionsResponseModel {
  /**
   * @type {Array<EducationalInstitutionResponseModel>}
   * @memberof EducationalInstitutionsResponseModel
   */
  educationalInstitutions: Array<EducationalInstitutionResponseModel>
  /**
   * @type {number}
   * @memberof EducationalInstitutionsResponseModel
   */
  page: number
  /**
   * @type {number}
   * @memberof EducationalInstitutionsResponseModel
   */
  pages: number
  /**
   * @type {number}
   * @memberof EducationalInstitutionsResponseModel
   */
  total: number
}
/**
 * @export
 * @interface EducationalRedactor
 */
export interface EducationalRedactor {
  /**
   * @type {string}
   * @memberof EducationalRedactor
   */
  email: string
  /**
   * @type {string}
   * @memberof EducationalRedactor
   */
  gender?: string | null
  /**
   * @type {string}
   * @memberof EducationalRedactor
   */
  name: string
  /**
   * @type {string}
   * @memberof EducationalRedactor
   */
  surname: string
}
/**
 * @export
 * @interface EducationalRedactorQueryModel
 */
export interface EducationalRedactorQueryModel {
  /**
   * @type {string}
   * @memberof EducationalRedactorQueryModel
   */
  candidate: string
  /**
   * @type {string}
   * @memberof EducationalRedactorQueryModel
   */
  uai: string
}
/**
 * @export
 * @interface EducationalRedactorResponseModel
 */
export interface EducationalRedactorResponseModel {
  /**
   * @type {string}
   * @memberof EducationalRedactorResponseModel
   */
  civility?: string | null
  /**
   * @type {string}
   * @memberof EducationalRedactorResponseModel
   */
  email?: string | null
  /**
   * @type {string}
   * @memberof EducationalRedactorResponseModel
   */
  firstName?: string | null
  /**
   * @type {string}
   * @memberof EducationalRedactorResponseModel
   */
  lastName?: string | null
}
/**
 * @export
 * @interface EducationalRedactors
 */
export interface EducationalRedactors extends Array<EducationalRedactor> {
}
/**
 * @export
 * @interface EventDateScheduleAndPriceCategoriesCountModel
 */
export interface EventDateScheduleAndPriceCategoriesCountModel {
  /**
   * @type {string}
   * @memberof EventDateScheduleAndPriceCategoriesCountModel
   */
  eventDate: string
  /**
   * @type {number}
   * @memberof EventDateScheduleAndPriceCategoriesCountModel
   */
  priceCategoriesCount: number
  /**
   * @type {number}
   * @memberof EventDateScheduleAndPriceCategoriesCountModel
   */
  scheduleCount: number
}
/**
 * @export
 * @interface EventDatesInfos
 */
export interface EventDatesInfos extends Array<EventDateScheduleAndPriceCategoriesCountModel> {
}
/**
 * @export
 * @interface ExportType
 */
export interface ExportType {
}
/**
 * @export
 * @interface ExportType1
 */
export interface ExportType1 {
}
/**
 * @export
 * @interface ExportType2
 */
export interface ExportType2 {
}
/**
 * @export
 * @interface ExternalAccessibilityDataModel
 */
export interface ExternalAccessibilityDataModel {
  /**
   * @type {AudioDisabilityModel}
   * @memberof ExternalAccessibilityDataModel
   */
  audioDisability?: AudioDisabilityModel
  /**
   * @type {boolean}
   * @memberof ExternalAccessibilityDataModel
   */
  isAccessibleAudioDisability?: boolean
  /**
   * @type {boolean}
   * @memberof ExternalAccessibilityDataModel
   */
  isAccessibleMentalDisability?: boolean
  /**
   * @type {boolean}
   * @memberof ExternalAccessibilityDataModel
   */
  isAccessibleMotorDisability?: boolean
  /**
   * @type {boolean}
   * @memberof ExternalAccessibilityDataModel
   */
  isAccessibleVisualDisability?: boolean
  /**
   * @type {MentalDisabilityModel}
   * @memberof ExternalAccessibilityDataModel
   */
  mentalDisability?: MentalDisabilityModel
  /**
   * @type {MotorDisabilityModel}
   * @memberof ExternalAccessibilityDataModel
   */
  motorDisability?: MotorDisabilityModel
  /**
   * @type {VisualDisabilityModel}
   * @memberof ExternalAccessibilityDataModel
   */
  visualDisability?: VisualDisabilityModel
}
/**
 * @export
 * @interface FeatureResponseModel
 */
export interface FeatureResponseModel {
  /**
   * @type {string}
   * @memberof FeatureResponseModel
   */
  description: string
  /**
   * @type {string}
   * @memberof FeatureResponseModel
   */
  id: string
  /**
   * @type {boolean}
   * @memberof FeatureResponseModel
   */
  isActive: boolean
  /**
   * @type {string}
   * @memberof FeatureResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof FeatureResponseModel
   */
  nameKey: string
}
/**
 * @export
 * @interface FinanceBankAccountListResponseModel
 */
export interface FinanceBankAccountListResponseModel extends Array<FinanceBankAccountResponseModel> {
}
/**
 * @export
 * @interface FinanceBankAccountResponseModel
 */
export interface FinanceBankAccountResponseModel {
  /**
   * @type {number}
   * @memberof FinanceBankAccountResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof FinanceBankAccountResponseModel
   */
  label: string
}
/**
 * @export
 * @interface Format
 */
export interface Format {
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum GenderEnum {
  'M.' = 'M.',
  'Mme' = 'Mme',
}
/**
 * @export
 * @interface GenerateOffererApiKeyResponse
 */
export interface GenerateOffererApiKeyResponse {
  /**
   * @type {string}
   * @memberof GenerateOffererApiKeyResponse
   */
  apiKey: string
}
/**
 * @export
 * @interface GetCollectiveOfferCollectiveStockResponseModel
 */
export interface GetCollectiveOfferCollectiveStockResponseModel {
  /**
   * @type {Date}
   * @memberof GetCollectiveOfferCollectiveStockResponseModel
   */
  beginningDatetime?: Date | null
  /**
   * @type {Date}
   * @memberof GetCollectiveOfferCollectiveStockResponseModel
   */
  bookingLimitDatetime?: Date | null
  /**
   * @type {string}
   * @memberof GetCollectiveOfferCollectiveStockResponseModel
   */
  educationalPriceDetail?: string | null
  /**
   * @type {Date}
   * @memberof GetCollectiveOfferCollectiveStockResponseModel
   */
  endDatetime?: Date | null
  /**
   * @type {number}
   * @memberof GetCollectiveOfferCollectiveStockResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferCollectiveStockResponseModel
   */
  isBooked: boolean
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferCollectiveStockResponseModel
   */
  isCancellable: boolean
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferCollectiveStockResponseModel
   */
  isEducationalStockEditable: boolean
  /**
   * @type {number}
   * @memberof GetCollectiveOfferCollectiveStockResponseModel
   */
  numberOfTickets?: number | null
  /**
   * @type {number}
   * @memberof GetCollectiveOfferCollectiveStockResponseModel
   */
  price: number
  /**
   * @type {Date}
   * @memberof GetCollectiveOfferCollectiveStockResponseModel
   */
  startDatetime?: Date | null
}
/**
 * @export
 * @interface GetCollectiveOfferManagingOffererResponseModel
 */
export interface GetCollectiveOfferManagingOffererResponseModel {
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferManagingOffererResponseModel
   */
  allowedOnAdage: boolean
  /**
   * @type {number}
   * @memberof GetCollectiveOfferManagingOffererResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof GetCollectiveOfferManagingOffererResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof GetCollectiveOfferManagingOffererResponseModel
   */
  siren?: string | null
}
/**
 * @export
 * @interface GetCollectiveOfferProviderResponseModel
 */
export interface GetCollectiveOfferProviderResponseModel {
  /**
   * @type {string}
   * @memberof GetCollectiveOfferProviderResponseModel
   */
  name: string
}
/**
 * @export
 * @interface GetCollectiveOfferRequestResponseModel
 */
export interface GetCollectiveOfferRequestResponseModel {
  /**
   * @type {string}
   * @memberof GetCollectiveOfferRequestResponseModel
   */
  comment: string
  /**
   * @type {string}
   * @memberof GetCollectiveOfferRequestResponseModel
   */
  dateCreated?: string | null
  /**
   * @type {CollectiveOfferInstitutionModel}
   * @memberof GetCollectiveOfferRequestResponseModel
   */
  institution: CollectiveOfferInstitutionModel
  /**
   * @type {string}
   * @memberof GetCollectiveOfferRequestResponseModel
   */
  phoneNumber?: string | null
  /**
   * @type {CollectiveOfferRedactorModel}
   * @memberof GetCollectiveOfferRequestResponseModel
   */
  redactor: CollectiveOfferRedactorModel
  /**
   * @type {string}
   * @memberof GetCollectiveOfferRequestResponseModel
   */
  requestedDate?: string | null
  /**
   * @type {number}
   * @memberof GetCollectiveOfferRequestResponseModel
   */
  totalStudents?: number | null
  /**
   * @type {number}
   * @memberof GetCollectiveOfferRequestResponseModel
   */
  totalTeachers?: number | null
}
/**
 * @export
 * @interface GetCollectiveOfferResponseModel
 */
export interface GetCollectiveOfferResponseModel {
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {Array<string>}
   * @memberof GetCollectiveOfferResponseModel
   */
  bookingEmails: Array<string>
  /**
   * @type {GetCollectiveOfferCollectiveStockResponseModel}
   * @memberof GetCollectiveOfferResponseModel
   */
  collectiveStock?: GetCollectiveOfferCollectiveStockResponseModel | null
  /**
   * @type {string}
   * @memberof GetCollectiveOfferResponseModel
   */
  contactEmail?: string | null
  /**
   * @type {string}
   * @memberof GetCollectiveOfferResponseModel
   */
  contactPhone?: string | null
  /**
   * @type {Date}
   * @memberof GetCollectiveOfferResponseModel
   */
  dateCreated: Date
  /**
   * @type {string}
   * @memberof GetCollectiveOfferResponseModel
   */
  description: string
  /**
   * @type {Array<OfferDomain>}
   * @memberof GetCollectiveOfferResponseModel
   */
  domains: Array<OfferDomain>
  /**
   * @type {number}
   * @memberof GetCollectiveOfferResponseModel
   */
  durationMinutes?: number | null
  /**
   * @type {Array<EacFormat>}
   * @memberof GetCollectiveOfferResponseModel
   */
  formats?: Array<EacFormat> | null
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  hasBookingLimitDatetimesPassed: boolean
  /**
   * @type {number}
   * @memberof GetCollectiveOfferResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof GetCollectiveOfferResponseModel
   */
  imageCredit?: string | null
  /**
   * @type {string}
   * @memberof GetCollectiveOfferResponseModel
   */
  imageUrl?: string | null
  /**
   * @type {EducationalInstitutionResponseModel}
   * @memberof GetCollectiveOfferResponseModel
   */
  institution?: EducationalInstitutionResponseModel | null
  /**
   * @type {Array<string>}
   * @memberof GetCollectiveOfferResponseModel
   */
  interventionArea: Array<string>
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  isActive: boolean
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  isBookable: boolean
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  isCancellable: boolean
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  isEditable: boolean
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  isNonFreeOffer?: boolean | null
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  isPublicApi: boolean
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  isTemplate?: boolean
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  isVisibilityEditable: boolean
  /**
   * @type {number}
   * @memberof GetCollectiveOfferResponseModel
   */
  lastBookingId?: number | null
  /**
   * @type {CollectiveBookingStatus}
   * @memberof GetCollectiveOfferResponseModel
   */
  lastBookingStatus?: CollectiveBookingStatus | null
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetCollectiveOfferResponseModel
   */
  name: string
  /**
   * @type {NationalProgramModel}
   * @memberof GetCollectiveOfferResponseModel
   */
  nationalProgram?: NationalProgramModel | null
  /**
   * @type {number}
   * @memberof GetCollectiveOfferResponseModel
   */
  offerId?: number | null
  /**
   * @type {CollectiveOfferOfferVenueResponseModel}
   * @memberof GetCollectiveOfferResponseModel
   */
  offerVenue: CollectiveOfferOfferVenueResponseModel
  /**
   * @type {GetCollectiveOfferProviderResponseModel}
   * @memberof GetCollectiveOfferResponseModel
   */
  provider?: GetCollectiveOfferProviderResponseModel | null
  /**
   * @type {OfferStatus}
   * @memberof GetCollectiveOfferResponseModel
   */
  status: OfferStatus
  /**
   * @type {Array<StudentLevels>}
   * @memberof GetCollectiveOfferResponseModel
   */
  students: Array<StudentLevels>
  /**
   * @type {SubcategoryIdEnum}
   * @memberof GetCollectiveOfferResponseModel
   */
  subcategoryId?: SubcategoryIdEnum | null
  /**
   * @type {EducationalRedactorResponseModel}
   * @memberof GetCollectiveOfferResponseModel
   */
  teacher?: EducationalRedactorResponseModel | null
  /**
   * @type {number}
   * @memberof GetCollectiveOfferResponseModel
   */
  templateId?: number | null
  /**
   * @type {GetCollectiveOfferVenueResponseModel}
   * @memberof GetCollectiveOfferResponseModel
   */
  venue: GetCollectiveOfferVenueResponseModel
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferResponseModel
   */
  visualDisabilityCompliant?: boolean | null
}
/**
 * @export
 * @interface GetCollectiveOfferTemplateResponseModel
 */
export interface GetCollectiveOfferTemplateResponseModel {
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {Array<string>}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  bookingEmails: Array<string>
  /**
   * @type {string}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  contactEmail?: string | null
  /**
   * @type {OfferContactFormEnum}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  contactForm?: OfferContactFormEnum | null
  /**
   * @type {string}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  contactPhone?: string | null
  /**
   * @type {string}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  contactUrl?: string | null
  /**
   * @type {Date}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  dateCreated: Date
  /**
   * @type {TemplateDatesModel}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  dates?: TemplateDatesModel | null
  /**
   * @type {string}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  description: string
  /**
   * @type {Array<OfferDomain>}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  domains: Array<OfferDomain>
  /**
   * @type {number}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  durationMinutes?: number | null
  /**
   * @type {string}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  educationalPriceDetail?: string | null
  /**
   * @type {Array<EacFormat>}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  formats?: Array<EacFormat> | null
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  hasBookingLimitDatetimesPassed: boolean
  /**
   * @type {number}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  imageCredit?: string | null
  /**
   * @type {string}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  imageUrl?: string | null
  /**
   * @type {Array<string>}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  interventionArea: Array<string>
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  isActive: boolean
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  isCancellable: boolean
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  isEditable: boolean
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  isNonFreeOffer?: boolean | null
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  isTemplate?: boolean
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  name: string
  /**
   * @type {NationalProgramModel}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  nationalProgram?: NationalProgramModel | null
  /**
   * @type {number}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  offerId?: number | null
  /**
   * @type {CollectiveOfferOfferVenueResponseModel}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  offerVenue: CollectiveOfferOfferVenueResponseModel
  /**
   * @type {OfferStatus}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  status: OfferStatus
  /**
   * @type {Array<StudentLevels>}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  students: Array<StudentLevels>
  /**
   * @type {SubcategoryIdEnum}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  subcategoryId?: SubcategoryIdEnum | null
  /**
   * @type {GetCollectiveOfferVenueResponseModel}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  venue: GetCollectiveOfferVenueResponseModel
  /**
   * @type {boolean}
   * @memberof GetCollectiveOfferTemplateResponseModel
   */
  visualDisabilityCompliant?: boolean | null
}
/**
 * @export
 * @interface GetCollectiveOfferVenueResponseModel
 */
export interface GetCollectiveOfferVenueResponseModel {
  /**
   * @type {string}
   * @memberof GetCollectiveOfferVenueResponseModel
   */
  departementCode?: string | null
  /**
   * @type {number}
   * @memberof GetCollectiveOfferVenueResponseModel
   */
  id: number
  /**
   * @type {GetCollectiveOfferManagingOffererResponseModel}
   * @memberof GetCollectiveOfferVenueResponseModel
   */
  managingOfferer: GetCollectiveOfferManagingOffererResponseModel
  /**
   * @type {string}
   * @memberof GetCollectiveOfferVenueResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof GetCollectiveOfferVenueResponseModel
   */
  publicName?: string | null
}
/**
 * @export
 * @interface GetEducationalOffererResponseModel
 */
export interface GetEducationalOffererResponseModel {
  /**
   * @type {boolean}
   * @memberof GetEducationalOffererResponseModel
   */
  allowedOnAdage: boolean
  /**
   * @type {number}
   * @memberof GetEducationalOffererResponseModel
   */
  id: number
  /**
   * @type {Array<GetEducationalOffererVenueResponseModel>}
   * @memberof GetEducationalOffererResponseModel
   */
  managedVenues: Array<GetEducationalOffererVenueResponseModel>
  /**
   * @type {string}
   * @memberof GetEducationalOffererResponseModel
   */
  name: string
}
/**
 * @export
 * @interface GetEducationalOffererVenueResponseModel
 */
export interface GetEducationalOffererVenueResponseModel {
  /**
   * @type {boolean}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  city?: string | null
  /**
   * @type {string}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  collectiveEmail?: string | null
  /**
   * @type {Array<string>}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  collectiveInterventionArea?: Array<string> | null
  /**
   * @type {string}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  collectivePhone?: string | null
  /**
   * @type {string}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  collectiveSubCategoryId?: string | null
  /**
   * @type {number}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  isVirtual: boolean
  /**
   * @type {boolean}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  postalCode?: string | null
  /**
   * @type {string}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  publicName?: string | null
  /**
   * @type {string}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  street?: string | null
  /**
   * @type {boolean}
   * @memberof GetEducationalOffererVenueResponseModel
   */
  visualDisabilityCompliant?: boolean | null
}
/**
 * @export
 * @interface GetEducationalOfferersQueryModel
 */
export interface GetEducationalOfferersQueryModel {
  /**
   * @type {number}
   * @memberof GetEducationalOfferersQueryModel
   */
  offerer_id?: number | null
}
/**
 * @export
 * @interface GetEducationalOfferersResponseModel
 */
export interface GetEducationalOfferersResponseModel {
  /**
   * @type {Array<GetEducationalOffererResponseModel>}
   * @memberof GetEducationalOfferersResponseModel
   */
  educationalOfferers: Array<GetEducationalOffererResponseModel>
}
/**
 * @export
 * @interface GetIndividualOfferResponseModel
 */
export interface GetIndividualOfferResponseModel {
  /**
   * @type {GetOfferMediationResponseModel}
   * @memberof GetIndividualOfferResponseModel
   */
  activeMediation?: GetOfferMediationResponseModel | null
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetIndividualOfferResponseModel
   */
  bookingContact?: string | null
  /**
   * @type {string}
   * @memberof GetIndividualOfferResponseModel
   */
  bookingEmail?: string | null
  /**
   * @type {number}
   * @memberof GetIndividualOfferResponseModel
   */
  bookingsCount?: number | null
  /**
   * @type {Date}
   * @memberof GetIndividualOfferResponseModel
   */
  dateCreated: Date
  /**
   * @type {string}
   * @memberof GetIndividualOfferResponseModel
   */
  description?: string | null
  /**
   * @type {number}
   * @memberof GetIndividualOfferResponseModel
   */
  durationMinutes?: number | null
  /**
   * @type {string}
   * @memberof GetIndividualOfferResponseModel
   */
  externalTicketOfficeUrl?: string | null
  /**
   * @type {ModelObject}
   * @memberof GetIndividualOfferResponseModel
   */
  extraData?: ModelObject | null
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  hasBookingLimitDatetimesPassed: boolean
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  hasStocks: boolean
  /**
   * @type {number}
   * @memberof GetIndividualOfferResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  isActivable: boolean
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  isActive: boolean
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  isDigital: boolean
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  isDuo: boolean
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  isEditable: boolean
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  isEvent: boolean
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  isNational: boolean
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  isNonFreeOffer?: boolean | null
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  isThing: boolean
  /**
   * @type {GetOfferLastProviderResponseModel}
   * @memberof GetIndividualOfferResponseModel
   */
  lastProvider?: GetOfferLastProviderResponseModel | null
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetIndividualOfferResponseModel
   */
  name: string
  /**
   * @type {Array<PriceCategoryResponseModel>}
   * @memberof GetIndividualOfferResponseModel
   */
  priceCategories?: Array<PriceCategoryResponseModel> | null
  /**
   * @type {OfferStatus}
   * @memberof GetIndividualOfferResponseModel
   */
  status: OfferStatus
  /**
   * @type {SubcategoryIdEnum}
   * @memberof GetIndividualOfferResponseModel
   */
  subcategoryId: SubcategoryIdEnum
  /**
   * @type {string}
   * @memberof GetIndividualOfferResponseModel
   */
  thumbUrl?: string | null
  /**
   * @type {string}
   * @memberof GetIndividualOfferResponseModel
   */
  url?: string | null
  /**
   * @type {GetOfferVenueResponseModel}
   * @memberof GetIndividualOfferResponseModel
   */
  venue: GetOfferVenueResponseModel
  /**
   * @type {boolean}
   * @memberof GetIndividualOfferResponseModel
   */
  visualDisabilityCompliant?: boolean | null
  /**
   * @type {number}
   * @memberof GetIndividualOfferResponseModel
   */
  withdrawalDelay?: number | null
  /**
   * @type {string}
   * @memberof GetIndividualOfferResponseModel
   */
  withdrawalDetails?: string | null
  /**
   * @type {WithdrawalTypeEnum}
   * @memberof GetIndividualOfferResponseModel
   */
  withdrawalType?: WithdrawalTypeEnum | null
}
/**
 * @export
 * @interface GetMusicTypesResponse
 */
export interface GetMusicTypesResponse extends Array<MusicTypeResponse> {
}
/**
 * @export
 * @interface GetOfferLastProviderResponseModel
 */
export interface GetOfferLastProviderResponseModel {
  /**
   * @type {string}
   * @memberof GetOfferLastProviderResponseModel
   */
  name: string
}
/**
 * @export
 * @interface GetOfferManagingOffererResponseModel
 */
export interface GetOfferManagingOffererResponseModel {
  /**
   * @type {boolean}
   * @memberof GetOfferManagingOffererResponseModel
   */
  allowedOnAdage: boolean
  /**
   * @type {number}
   * @memberof GetOfferManagingOffererResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof GetOfferManagingOffererResponseModel
   */
  name: string
}
/**
 * @export
 * @interface GetOfferMediationResponseModel
 */
export interface GetOfferMediationResponseModel {
  /**
   * @type {string}
   * @memberof GetOfferMediationResponseModel
   */
  authorId?: string | null
  /**
   * @type {string}
   * @memberof GetOfferMediationResponseModel
   */
  credit?: string | null
  /**
   * @type {string}
   * @memberof GetOfferMediationResponseModel
   */
  thumbUrl?: string | null
}
/**
 * @export
 * @interface GetOfferStockResponseModel
 */
export interface GetOfferStockResponseModel {
  /**
   * @type {Date}
   * @memberof GetOfferStockResponseModel
   */
  activationCodesExpirationDatetime?: Date | null
  /**
   * @type {Date}
   * @memberof GetOfferStockResponseModel
   */
  beginningDatetime?: Date | null
  /**
   * @type {Date}
   * @memberof GetOfferStockResponseModel
   */
  bookingLimitDatetime?: Date | null
  /**
   * @type {number}
   * @memberof GetOfferStockResponseModel
   */
  bookingsQuantity: number
  /**
   * @type {boolean}
   * @memberof GetOfferStockResponseModel
   */
  hasActivationCode: boolean
  /**
   * @type {number}
   * @memberof GetOfferStockResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof GetOfferStockResponseModel
   */
  isEventDeletable: boolean
  /**
   * @type {number}
   * @memberof GetOfferStockResponseModel
   */
  price: number
  /**
   * @type {number}
   * @memberof GetOfferStockResponseModel
   */
  priceCategoryId?: number | null
  /**
   * @type {number}
   * @memberof GetOfferStockResponseModel
   */
  quantity?: number | null
  /**
   * @type {number | string}
   * @memberof GetOfferStockResponseModel
   */
  remainingQuantity?: number | string | null
}
/**
 * @export
 * @interface GetOfferVenueResponseModel
 */
export interface GetOfferVenueResponseModel {
  /**
   * @type {boolean}
   * @memberof GetOfferVenueResponseModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetOfferVenueResponseModel
   */
  bookingEmail?: string | null
  /**
   * @type {string}
   * @memberof GetOfferVenueResponseModel
   */
  city?: string | null
  /**
   * @type {string}
   * @memberof GetOfferVenueResponseModel
   */
  departementCode?: string | null
  /**
   * @type {number}
   * @memberof GetOfferVenueResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof GetOfferVenueResponseModel
   */
  isVirtual: boolean
  /**
   * @type {GetOfferManagingOffererResponseModel}
   * @memberof GetOfferVenueResponseModel
   */
  managingOfferer: GetOfferManagingOffererResponseModel
  /**
   * @type {boolean}
   * @memberof GetOfferVenueResponseModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof GetOfferVenueResponseModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetOfferVenueResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof GetOfferVenueResponseModel
   */
  postalCode?: string | null
  /**
   * @type {string}
   * @memberof GetOfferVenueResponseModel
   */
  publicName?: string | null
  /**
   * @type {string}
   * @memberof GetOfferVenueResponseModel
   */
  street?: string | null
  /**
   * @type {boolean}
   * @memberof GetOfferVenueResponseModel
   */
  visualDisabilityCompliant?: boolean | null
}
/**
 * @export
 * @interface GetOffererAddressResponseModel
 */
export interface GetOffererAddressResponseModel {
  /**
   * @type {string}
   * @memberof GetOffererAddressResponseModel
   */
  city: string
  /**
   * @type {number}
   * @memberof GetOffererAddressResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof GetOffererAddressResponseModel
   */
  isEditable: boolean
  /**
   * @type {string}
   * @memberof GetOffererAddressResponseModel
   */
  label: string
  /**
   * @type {string}
   * @memberof GetOffererAddressResponseModel
   */
  postalCode: string
  /**
   * @type {string}
   * @memberof GetOffererAddressResponseModel
   */
  street: string
}
/**
 * @export
 * @interface GetOffererAddressesResponseModel
 */
export interface GetOffererAddressesResponseModel extends Array<GetOffererAddressResponseModel> {
}
/**
 * @export
 * @interface GetOffererBankAccountsResponseModel
 */
export interface GetOffererBankAccountsResponseModel {
  /**
   * @type {Array<BankAccountResponseModel>}
   * @memberof GetOffererBankAccountsResponseModel
   */
  bankAccounts: Array<BankAccountResponseModel>
  /**
   * @type {number}
   * @memberof GetOffererBankAccountsResponseModel
   */
  id: number
  /**
   * @type {Array<ManagedVenues>}
   * @memberof GetOffererBankAccountsResponseModel
   */
  managedVenues: Array<ManagedVenues>
}
/**
 * @export
 * @interface GetOffererMemberResponseModel
 */
export interface GetOffererMemberResponseModel {
  /**
   * @type {string}
   * @memberof GetOffererMemberResponseModel
   */
  email: string
  /**
   * @type {OffererMemberStatus}
   * @memberof GetOffererMemberResponseModel
   */
  status: OffererMemberStatus
}
/**
 * @export
 * @interface GetOffererMembersResponseModel
 */
export interface GetOffererMembersResponseModel {
  /**
   * @type {Array<GetOffererMemberResponseModel>}
   * @memberof GetOffererMembersResponseModel
   */
  members: Array<GetOffererMemberResponseModel>
}
/**
 * @export
 * @interface GetOffererNameResponseModel
 */
export interface GetOffererNameResponseModel {
  /**
   * @type {boolean}
   * @memberof GetOffererNameResponseModel
   */
  allowedOnAdage: boolean
  /**
   * @type {number}
   * @memberof GetOffererNameResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof GetOffererNameResponseModel
   */
  name: string
}
/**
 * @export
 * @interface GetOffererResponseModel
 */
export interface GetOffererResponseModel {
  /**
   * @type {boolean}
   * @memberof GetOffererResponseModel
   */
  allowedOnAdage: boolean
  /**
   * @type {OffererApiKey}
   * @memberof GetOffererResponseModel
   */
  apiKey: OffererApiKey
  /**
   * @type {string}
   * @memberof GetOffererResponseModel
   */
  city: string
  /**
   * @type {Date}
   * @memberof GetOffererResponseModel
   */
  dateCreated: Date
  /**
   * @type {string}
   * @memberof GetOffererResponseModel
   */
  demarchesSimplifieesApplicationId?: string | null
  /**
   * @type {boolean}
   * @memberof GetOffererResponseModel
   */
  hasActiveOffer: boolean
  /**
   * @type {boolean}
   * @memberof GetOffererResponseModel
   */
  hasAvailablePricingPoints: boolean
  /**
   * @type {boolean}
   * @memberof GetOffererResponseModel
   */
  hasBankAccountWithPendingCorrections: boolean
  /**
   * @type {boolean}
   * @memberof GetOffererResponseModel
   */
  hasDigitalVenueAtLeastOneOffer: boolean
  /**
   * @type {boolean}
   * @memberof GetOffererResponseModel
   */
  hasNonFreeOffer: boolean
  /**
   * @type {boolean}
   * @memberof GetOffererResponseModel
   */
  hasPendingBankAccount: boolean
  /**
   * @type {boolean}
   * @memberof GetOffererResponseModel
   */
  hasValidBankAccount: boolean
  /**
   * @type {number}
   * @memberof GetOffererResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof GetOffererResponseModel
   */
  isActive: boolean
  /**
   * @type {boolean}
   * @memberof GetOffererResponseModel
   */
  isValidated: boolean
  /**
   * @type {Array<GetOffererVenueResponseModel>}
   * @memberof GetOffererResponseModel
   */
  managedVenues?: Array<GetOffererVenueResponseModel>
  /**
   * @type {string}
   * @memberof GetOffererResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof GetOffererResponseModel
   */
  postalCode: string
  /**
   * @type {string}
   * @memberof GetOffererResponseModel
   */
  siren?: string | null
  /**
   * @type {string}
   * @memberof GetOffererResponseModel
   */
  street?: string | null
  /**
   * @type {Array<number>}
   * @memberof GetOffererResponseModel
   */
  venuesWithNonFreeOffersWithoutBankAccounts: Array<number>
}
/**
 * @export
 * @interface GetOffererStatsResponseModel
 */
export interface GetOffererStatsResponseModel {
  /**
   * @type {OffererStatsDataModel}
   * @memberof GetOffererStatsResponseModel
   */
  jsonData: OffererStatsDataModel
  /**
   * @type {number}
   * @memberof GetOffererStatsResponseModel
   */
  offererId: number
  /**
   * @type {Date}
   * @memberof GetOffererStatsResponseModel
   */
  syncDate?: Date | null
}
/**
 * @export
 * @interface GetOffererV2StatsResponseModel
 */
export interface GetOffererV2StatsResponseModel {
  /**
   * @type {number}
   * @memberof GetOffererV2StatsResponseModel
   */
  pendingEducationalOffers: number
  /**
   * @type {number}
   * @memberof GetOffererV2StatsResponseModel
   */
  pendingPublicOffers: number
  /**
   * @type {number}
   * @memberof GetOffererV2StatsResponseModel
   */
  publishedEducationalOffers: number
  /**
   * @type {number}
   * @memberof GetOffererV2StatsResponseModel
   */
  publishedPublicOffers: number
}
/**
 * @export
 * @interface GetOffererVenueResponseModel
 */
export interface GetOffererVenueResponseModel {
  /**
   * @type {Date}
   * @memberof GetOffererVenueResponseModel
   */
  adageInscriptionDate?: Date | null
  /**
   * @type {boolean}
   * @memberof GetOffererVenueResponseModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {BannerMetaModel}
   * @memberof GetOffererVenueResponseModel
   */
  bannerMeta?: BannerMetaModel | null
  /**
   * @type {string}
   * @memberof GetOffererVenueResponseModel
   */
  bannerUrl?: string | null
  /**
   * @type {string}
   * @memberof GetOffererVenueResponseModel
   */
  bookingEmail?: string | null
  /**
   * @type {string}
   * @memberof GetOffererVenueResponseModel
   */
  city?: string | null
  /**
   * @type {Array<DMSApplicationForEAC>}
   * @memberof GetOffererVenueResponseModel
   */
  collectiveDmsApplications: Array<DMSApplicationForEAC>
  /**
   * @type {string}
   * @memberof GetOffererVenueResponseModel
   */
  comment?: string | null
  /**
   * @type {number}
   * @memberof GetOffererVenueResponseModel
   */
  demarchesSimplifieesApplicationId?: number | null
  /**
   * @type {string}
   * @memberof GetOffererVenueResponseModel
   */
  departementCode?: string | null
  /**
   * @type {boolean}
   * @memberof GetOffererVenueResponseModel
   */
  hasAdageId: boolean
  /**
   * @type {boolean}
   * @memberof GetOffererVenueResponseModel
   */
  hasCreatedOffer: boolean
  /**
   * @type {boolean}
   * @memberof GetOffererVenueResponseModel
   */
  hasVenueProviders: boolean
  /**
   * @type {number}
   * @memberof GetOffererVenueResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof GetOffererVenueResponseModel
   */
  isPermanent: boolean
  /**
   * @type {boolean}
   * @memberof GetOffererVenueResponseModel
   */
  isVirtual: boolean
  /**
   * @type {boolean}
   * @memberof GetOffererVenueResponseModel
   */
  isVisibleInApp?: boolean
  /**
   * @type {boolean}
   * @memberof GetOffererVenueResponseModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof GetOffererVenueResponseModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetOffererVenueResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof GetOffererVenueResponseModel
   */
  postalCode?: string | null
  /**
   * @type {string}
   * @memberof GetOffererVenueResponseModel
   */
  publicName?: string | null
  /**
   * @type {string}
   * @memberof GetOffererVenueResponseModel
   */
  siret?: string | null
  /**
   * @type {string}
   * @memberof GetOffererVenueResponseModel
   */
  street?: string | null
  /**
   * @type {VenueTypeCode}
   * @memberof GetOffererVenueResponseModel
   */
  venueTypeCode: VenueTypeCode
  /**
   * @type {boolean}
   * @memberof GetOffererVenueResponseModel
   */
  visualDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetOffererVenueResponseModel
   */
  withdrawalDetails?: string | null
}
/**
 * @export
 * @interface GetOfferersNamesQueryModel
 */
export interface GetOfferersNamesQueryModel {
  /**
   * @type {number}
   * @memberof GetOfferersNamesQueryModel
   */
  offerer_id?: number | null
  /**
   * @type {boolean}
   * @memberof GetOfferersNamesQueryModel
   */
  validated?: boolean | null
  /**
   * @type {boolean}
   * @memberof GetOfferersNamesQueryModel
   */
  validated_for_user?: boolean | null
}
/**
 * @export
 * @interface GetOfferersNamesResponseModel
 */
export interface GetOfferersNamesResponseModel {
  /**
   * @type {Array<GetOffererNameResponseModel>}
   * @memberof GetOfferersNamesResponseModel
   */
  offerersNames: Array<GetOffererNameResponseModel>
}
/**
 * @export
 * @interface GetStocksResponseModel
 */
export interface GetStocksResponseModel {
  /**
   * @type {boolean}
   * @memberof GetStocksResponseModel
   */
  hasStocks: boolean
  /**
   * @type {number}
   * @memberof GetStocksResponseModel
   */
  stockCount: number
  /**
   * @type {Array<GetOfferStockResponseModel>}
   * @memberof GetStocksResponseModel
   */
  stocks: Array<GetOfferStockResponseModel>
}
/**
 * @export
 * @interface GetVenueDomainResponseModel
 */
export interface GetVenueDomainResponseModel {
  /**
   * @type {number}
   * @memberof GetVenueDomainResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof GetVenueDomainResponseModel
   */
  name: string
}
/**
 * @export
 * @interface GetVenueListResponseModel
 */
export interface GetVenueListResponseModel {
  /**
   * @type {Array<VenueListItemResponseModel>}
   * @memberof GetVenueListResponseModel
   */
  venues: Array<VenueListItemResponseModel>
}
/**
 * @export
 * @interface GetVenueManagingOffererResponseModel
 */
export interface GetVenueManagingOffererResponseModel {
  /**
   * @type {boolean}
   * @memberof GetVenueManagingOffererResponseModel
   */
  allowedOnAdage: boolean
  /**
   * @type {string}
   * @memberof GetVenueManagingOffererResponseModel
   */
  city: string
  /**
   * @type {Date}
   * @memberof GetVenueManagingOffererResponseModel
   */
  dateCreated: Date
  /**
   * @type {string}
   * @memberof GetVenueManagingOffererResponseModel
   */
  demarchesSimplifieesApplicationId?: string | null
  /**
   * @type {number}
   * @memberof GetVenueManagingOffererResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof GetVenueManagingOffererResponseModel
   */
  isValidated: boolean
  /**
   * @type {string}
   * @memberof GetVenueManagingOffererResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof GetVenueManagingOffererResponseModel
   */
  postalCode: string
  /**
   * @type {string}
   * @memberof GetVenueManagingOffererResponseModel
   */
  siren?: string | null
  /**
   * @type {string}
   * @memberof GetVenueManagingOffererResponseModel
   */
  street?: string | null
}
/**
 * @export
 * @interface GetVenuePricingPointResponseModel
 */
export interface GetVenuePricingPointResponseModel {
  /**
   * @type {number}
   * @memberof GetVenuePricingPointResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof GetVenuePricingPointResponseModel
   */
  siret: string
  /**
   * @type {string}
   * @memberof GetVenuePricingPointResponseModel
   */
  venueName: string
}
/**
 * @export
 * @interface GetVenueResponseModel
 */
export interface GetVenueResponseModel {
  /**
   * @type {Date}
   * @memberof GetVenueResponseModel
   */
  adageInscriptionDate?: Date | null
  /**
   * @type {boolean}
   * @memberof GetVenueResponseModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  banId?: string | null
  /**
   * @type {BankAccountResponseModel}
   * @memberof GetVenueResponseModel
   */
  bankAccount?: BankAccountResponseModel | null
  /**
   * @type {BannerMetaModel}
   * @memberof GetVenueResponseModel
   */
  bannerMeta?: BannerMetaModel | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  bannerUrl?: string | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  bookingEmail?: string | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  city?: string | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  collectiveAccessInformation?: string | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  collectiveDescription?: string | null
  /**
   * @type {Array<DMSApplicationForEAC>}
   * @memberof GetVenueResponseModel
   */
  collectiveDmsApplications: Array<DMSApplicationForEAC>
  /**
   * @type {Array<GetVenueDomainResponseModel>}
   * @memberof GetVenueResponseModel
   */
  collectiveDomains: Array<GetVenueDomainResponseModel>
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  collectiveEmail?: string | null
  /**
   * @type {Array<string>}
   * @memberof GetVenueResponseModel
   */
  collectiveInterventionArea?: Array<string> | null
  /**
   * @type {LegalStatusResponseModel}
   * @memberof GetVenueResponseModel
   */
  collectiveLegalStatus?: LegalStatusResponseModel | null
  /**
   * @type {Array<string>}
   * @memberof GetVenueResponseModel
   */
  collectiveNetwork?: Array<string> | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  collectivePhone?: string | null
  /**
   * @type {Array<StudentLevels>}
   * @memberof GetVenueResponseModel
   */
  collectiveStudents?: Array<StudentLevels> | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  collectiveSubCategoryId?: string | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  collectiveWebsite?: string | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  comment?: string | null
  /**
   * @type {VenueContactModel}
   * @memberof GetVenueResponseModel
   */
  contact?: VenueContactModel | null
  /**
   * @type {Date}
   * @memberof GetVenueResponseModel
   */
  dateCreated: Date
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  demarchesSimplifieesApplicationId?: string | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  departementCode?: string | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  description?: string | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  dmsToken: string
  /**
   * @type {ExternalAccessibilityDataModel}
   * @memberof GetVenueResponseModel
   */
  externalAccessibilityData?: ExternalAccessibilityDataModel | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  externalAccessibilityId?: string | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  externalAccessibilityUrl?: string | null
  /**
   * @type {boolean}
   * @memberof GetVenueResponseModel
   */
  hasAdageId: boolean
  /**
   * @type {number}
   * @memberof GetVenueResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof GetVenueResponseModel
   */
  isPermanent?: boolean | null
  /**
   * @type {boolean}
   * @memberof GetVenueResponseModel
   */
  isVirtual: boolean
  /**
   * @type {boolean}
   * @memberof GetVenueResponseModel
   */
  isVisibleInApp?: boolean
  /**
   * @type {number}
   * @memberof GetVenueResponseModel
   */
  latitude?: number | null
  /**
   * @type {number}
   * @memberof GetVenueResponseModel
   */
  longitude?: number | null
  /**
   * @type {GetVenueManagingOffererResponseModel}
   * @memberof GetVenueResponseModel
   */
  managingOfferer: GetVenueManagingOffererResponseModel
  /**
   * @type {boolean}
   * @memberof GetVenueResponseModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof GetVenueResponseModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  name: string
  /**
   * @type {any}
   * @memberof GetVenueResponseModel
   */
  openingHours?: any | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  postalCode?: string | null
  /**
   * @type {GetVenuePricingPointResponseModel}
   * @memberof GetVenueResponseModel
   */
  pricingPoint?: GetVenuePricingPointResponseModel | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  publicName?: string | null
  /**
   * @type {number}
   * @memberof GetVenueResponseModel
   */
  reimbursementPointId?: number | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  siret?: string | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  street?: string | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  timezone: string
  /**
   * @type {number}
   * @memberof GetVenueResponseModel
   */
  venueLabelId?: number | null
  /**
   * @type {VenueTypeCode}
   * @memberof GetVenueResponseModel
   */
  venueTypeCode: VenueTypeCode
  /**
   * @type {boolean}
   * @memberof GetVenueResponseModel
   */
  visualDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof GetVenueResponseModel
   */
  withdrawalDetails?: string | null
}
/**
 * @export
 * @interface GetVenuesOfOffererFromSiretResponseModel
 */
export interface GetVenuesOfOffererFromSiretResponseModel {
  /**
   * @type {string}
   * @memberof GetVenuesOfOffererFromSiretResponseModel
   */
  offererName?: string | null
  /**
   * @type {string}
   * @memberof GetVenuesOfOffererFromSiretResponseModel
   */
  offererSiren?: string | null
  /**
   * @type {Array<VenueOfOffererFromSiretResponseModel>}
   * @memberof GetVenuesOfOffererFromSiretResponseModel
   */
  venues: Array<VenueOfOffererFromSiretResponseModel>
}
/**
 * @export
 * @interface HasInvoiceQueryModel
 */
export interface HasInvoiceQueryModel {
  /**
   * @type {number}
   * @memberof HasInvoiceQueryModel
   */
  offererId: number
}
/**
 * @export
 * @interface HasInvoiceResponseModel
 */
export interface HasInvoiceResponseModel {
  /**
   * @type {boolean}
   * @memberof HasInvoiceResponseModel
   */
  hasInvoice: boolean
}
/**
 * @export
 * @interface InviteMemberQueryModel
 */
export interface InviteMemberQueryModel {
  /**
   * @type {string}
   * @memberof InviteMemberQueryModel
   */
  email: string
}
/**
 * @export
 * @interface InvoiceListV2QueryModel
 */
export interface InvoiceListV2QueryModel {
  /**
   * @type {number}
   * @memberof InvoiceListV2QueryModel
   */
  bankAccountId?: number | null
  /**
   * @type {number}
   * @memberof InvoiceListV2QueryModel
   */
  offererId?: number | null
  /**
   * @type {string}
   * @memberof InvoiceListV2QueryModel
   */
  periodBeginningDate?: string | null
  /**
   * @type {string}
   * @memberof InvoiceListV2QueryModel
   */
  periodEndingDate?: string | null
}
/**
 * @export
 * @interface InvoiceListV2ResponseModel
 */
export interface InvoiceListV2ResponseModel extends Array<InvoiceResponseV2Model> {
}
/**
 * @export
 * @interface InvoiceResponseV2Model
 */
export interface InvoiceResponseV2Model {
  /**
   * @type {number}
   * @memberof InvoiceResponseV2Model
   */
  amount: number
  /**
   * @type {string}
   * @memberof InvoiceResponseV2Model
   */
  bankAccountLabel?: string | null
  /**
   * @type {Array<string>}
   * @memberof InvoiceResponseV2Model
   */
  cashflowLabels: Array<string>
  /**
   * @type {string}
   * @memberof InvoiceResponseV2Model
   */
  date: string
  /**
   * @type {string}
   * @memberof InvoiceResponseV2Model
   */
  reference: string
  /**
   * @type {string}
   * @memberof InvoiceResponseV2Model
   */
  url: string
}
/**
 * @export
 * @interface LegalStatusResponseModel
 */
export interface LegalStatusResponseModel {
  /**
   * @type {number}
   * @memberof LegalStatusResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof LegalStatusResponseModel
   */
  name: string
}
/**
 * @export
 * @interface LinkVenueToBankAccountBodyModel
 */
export interface LinkVenueToBankAccountBodyModel {
  /**
   * @type {Array<number>}
   * @memberof LinkVenueToBankAccountBodyModel
   */
  venues_ids: Array<number>
}
/**
 * @export
 * @interface LinkVenueToPricingPointBodyModel
 */
export interface LinkVenueToPricingPointBodyModel {
  /**
   * @type {number}
   * @memberof LinkVenueToPricingPointBodyModel
   */
  pricingPointId: number
}
/**
 * @export
 * @interface LinkedVenues
 */
export interface LinkedVenues {
  /**
   * @type {string}
   * @memberof LinkedVenues
   */
  commonName: string
  /**
   * @type {number}
   * @memberof LinkedVenues
   */
  id: number
}
/**
 * @export
 * @interface ListBookingsQueryModel
 */
export interface ListBookingsQueryModel {
  /**
   * @type {string}
   * @memberof ListBookingsQueryModel
   */
  bookingPeriodBeginningDate?: string | null
  /**
   * @type {string}
   * @memberof ListBookingsQueryModel
   */
  bookingPeriodEndingDate?: string | null
  /**
   * @type {BookingStatusFilter}
   * @memberof ListBookingsQueryModel
   */
  bookingStatusFilter?: BookingStatusFilter | null
  /**
   * @type {string}
   * @memberof ListBookingsQueryModel
   */
  eventDate?: string | null
  /**
   * @type {BookingExportType}
   * @memberof ListBookingsQueryModel
   */
  exportType?: BookingExportType | null
  /**
   * @type {number}
   * @memberof ListBookingsQueryModel
   */
  offerId?: number | null
  /**
   * @type {OfferType}
   * @memberof ListBookingsQueryModel
   */
  offerType?: OfferType | null
  /**
   * @type {number}
   * @memberof ListBookingsQueryModel
   */
  page?: number
  /**
   * @type {number}
   * @memberof ListBookingsQueryModel
   */
  venueId?: number | null
}
/**
 * @export
 * @interface ListBookingsResponseModel
 */
export interface ListBookingsResponseModel {
  /**
   * @type {Array<BookingRecapResponseModel>}
   * @memberof ListBookingsResponseModel
   */
  bookingsRecap: Array<BookingRecapResponseModel>
  /**
   * @type {number}
   * @memberof ListBookingsResponseModel
   */
  page: number
  /**
   * @type {number}
   * @memberof ListBookingsResponseModel
   */
  pages: number
  /**
   * @type {number}
   * @memberof ListBookingsResponseModel
   */
  total: number
}
/**
 * @export
 * @interface ListCollectiveBookingsQueryModel
 */
export interface ListCollectiveBookingsQueryModel {
  /**
   * @type {string}
   * @memberof ListCollectiveBookingsQueryModel
   */
  bookingPeriodBeginningDate?: string | null
  /**
   * @type {string}
   * @memberof ListCollectiveBookingsQueryModel
   */
  bookingPeriodEndingDate?: string | null
  /**
   * @type {CollectiveBookingStatusFilter}
   * @memberof ListCollectiveBookingsQueryModel
   */
  bookingStatusFilter?: CollectiveBookingStatusFilter | null
  /**
   * @type {string}
   * @memberof ListCollectiveBookingsQueryModel
   */
  eventDate?: string | null
  /**
   * @type {number}
   * @memberof ListCollectiveBookingsQueryModel
   */
  page?: number
  /**
   * @type {number}
   * @memberof ListCollectiveBookingsQueryModel
   */
  venueId?: number | null
}
/**
 * @export
 * @interface ListCollectiveBookingsResponseModel
 */
export interface ListCollectiveBookingsResponseModel {
  /**
   * @type {Array<CollectiveBookingResponseModel>}
   * @memberof ListCollectiveBookingsResponseModel
   */
  bookingsRecap: Array<CollectiveBookingResponseModel>
  /**
   * @type {number}
   * @memberof ListCollectiveBookingsResponseModel
   */
  page: number
  /**
   * @type {number}
   * @memberof ListCollectiveBookingsResponseModel
   */
  pages: number
  /**
   * @type {number}
   * @memberof ListCollectiveBookingsResponseModel
   */
  total: number
}
/**
 * @export
 * @interface ListCollectiveOffersQueryModel
 */
export interface ListCollectiveOffersQueryModel {
  /**
   * @type {string}
   * @memberof ListCollectiveOffersQueryModel
   */
  categoryId?: string | null
  /**
   * @type {CollectiveOfferType}
   * @memberof ListCollectiveOffersQueryModel
   */
  collectiveOfferType?: CollectiveOfferType | null
  /**
   * @type {string}
   * @memberof ListCollectiveOffersQueryModel
   */
  creationMode?: string | null
  /**
   * @type {EacFormat}
   * @memberof ListCollectiveOffersQueryModel
   */
  format?: EacFormat | null
  /**
   * @type {string}
   * @memberof ListCollectiveOffersQueryModel
   */
  nameOrIsbn?: string | null
  /**
   * @type {number}
   * @memberof ListCollectiveOffersQueryModel
   */
  offererId?: number | null
  /**
   * @type {string}
   * @memberof ListCollectiveOffersQueryModel
   */
  periodBeginningDate?: string | null
  /**
   * @type {string}
   * @memberof ListCollectiveOffersQueryModel
   */
  periodEndingDate?: string | null
  /**
   * @type {CollectiveOfferDisplayedStatus}
   * @memberof ListCollectiveOffersQueryModel
   */
  status?: CollectiveOfferDisplayedStatus | null
  /**
   * @type {number}
   * @memberof ListCollectiveOffersQueryModel
   */
  venueId?: number | null
}
/**
 * @export
 * @interface ListCollectiveOffersResponseModel
 */
export interface ListCollectiveOffersResponseModel extends Array<CollectiveOfferResponseModel> {
}
/**
 * @export
 * @interface ListFeatureResponseModel
 */
export interface ListFeatureResponseModel extends Array<FeatureResponseModel> {
}
/**
 * @export
 * @interface ListNationalProgramsResponseModel
 */
export interface ListNationalProgramsResponseModel extends Array<NationalProgramModel> {
}
/**
 * @export
 * @interface ListOffersOfferResponseModel
 */
export interface ListOffersOfferResponseModel {
  /**
   * @type {boolean}
   * @memberof ListOffersOfferResponseModel
   */
  hasBookingLimitDatetimesPassed: boolean
  /**
   * @type {number}
   * @memberof ListOffersOfferResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof ListOffersOfferResponseModel
   */
  isActive: boolean
  /**
   * @type {boolean}
   * @memberof ListOffersOfferResponseModel
   */
  isEditable: boolean
  /**
   * @type {boolean}
   * @memberof ListOffersOfferResponseModel
   */
  isEducational: boolean
  /**
   * @type {boolean}
   * @memberof ListOffersOfferResponseModel
   */
  isEvent: boolean
  /**
   * @type {boolean}
   * @memberof ListOffersOfferResponseModel
   */
  isShowcase?: boolean | null
  /**
   * @type {boolean}
   * @memberof ListOffersOfferResponseModel
   */
  isThing: boolean
  /**
   * @type {string}
   * @memberof ListOffersOfferResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof ListOffersOfferResponseModel
   */
  productIsbn?: string | null
  /**
   * @type {OfferStatus}
   * @memberof ListOffersOfferResponseModel
   */
  status: OfferStatus
  /**
   * @type {Array<ListOffersStockResponseModel>}
   * @memberof ListOffersOfferResponseModel
   */
  stocks: Array<ListOffersStockResponseModel>
  /**
   * @type {SubcategoryIdEnum}
   * @memberof ListOffersOfferResponseModel
   */
  subcategoryId: SubcategoryIdEnum
  /**
   * @type {string}
   * @memberof ListOffersOfferResponseModel
   */
  thumbUrl?: string | null
  /**
   * @type {ListOffersVenueResponseModel}
   * @memberof ListOffersOfferResponseModel
   */
  venue: ListOffersVenueResponseModel
}
/**
 * @export
 * @interface ListOffersQueryModel
 */
export interface ListOffersQueryModel {
  /**
   * @type {string}
   * @memberof ListOffersQueryModel
   */
  categoryId?: string | null
  /**
   * @type {CollectiveOfferType}
   * @memberof ListOffersQueryModel
   */
  collectiveOfferType?: CollectiveOfferType | null
  /**
   * @type {string}
   * @memberof ListOffersQueryModel
   */
  creationMode?: string | null
  /**
   * @type {string}
   * @memberof ListOffersQueryModel
   */
  nameOrIsbn?: string | null
  /**
   * @type {number}
   * @memberof ListOffersQueryModel
   */
  offererAddressId?: number | null
  /**
   * @type {number}
   * @memberof ListOffersQueryModel
   */
  offererId?: number | null
  /**
   * @type {string}
   * @memberof ListOffersQueryModel
   */
  periodBeginningDate?: string | null
  /**
   * @type {string}
   * @memberof ListOffersQueryModel
   */
  periodEndingDate?: string | null
  /**
   * @type {OfferStatus | CollectiveOfferDisplayedStatus}
   * @memberof ListOffersQueryModel
   */
  status?: OfferStatus | CollectiveOfferDisplayedStatus | null
  /**
   * @type {number}
   * @memberof ListOffersQueryModel
   */
  venueId?: number | null
}
/**
 * @export
 * @interface ListOffersResponseModel
 */
export interface ListOffersResponseModel extends Array<ListOffersOfferResponseModel> {
}
/**
 * @export
 * @interface ListOffersStockResponseModel
 */
export interface ListOffersStockResponseModel {
  /**
   * @type {Date}
   * @memberof ListOffersStockResponseModel
   */
  beginningDatetime?: Date | null
  /**
   * @type {number}
   * @memberof ListOffersStockResponseModel
   */
  bookingQuantity?: number | null
  /**
   * @type {boolean}
   * @memberof ListOffersStockResponseModel
   */
  hasBookingLimitDatetimePassed: boolean
  /**
   * @type {number}
   * @memberof ListOffersStockResponseModel
   */
  id: number
  /**
   * @type {number | string}
   * @memberof ListOffersStockResponseModel
   */
  remainingQuantity: number | string
}
/**
 * @export
 * @interface ListOffersVenueResponseModel
 */
export interface ListOffersVenueResponseModel {
  /**
   * @type {string}
   * @memberof ListOffersVenueResponseModel
   */
  departementCode?: string | null
  /**
   * @type {number}
   * @memberof ListOffersVenueResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof ListOffersVenueResponseModel
   */
  isVirtual: boolean
  /**
   * @type {string}
   * @memberof ListOffersVenueResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof ListOffersVenueResponseModel
   */
  offererName: string
  /**
   * @type {string}
   * @memberof ListOffersVenueResponseModel
   */
  publicName?: string | null
}
/**
 * @export
 * @interface ListProviderResponse
 */
export interface ListProviderResponse extends Array<ProviderResponse> {
}
/**
 * @export
 * @interface ListVenueProviderQuery
 */
export interface ListVenueProviderQuery {
  /**
   * @type {number}
   * @memberof ListVenueProviderQuery
   */
  venueId: number
}
/**
 * @export
 * @interface ListVenueProviderResponse
 */
export interface ListVenueProviderResponse {
  /**
   * @type {Array<VenueProviderResponse>}
   * @memberof ListVenueProviderResponse
   */
  venue_providers: Array<VenueProviderResponse>
}
/**
 * @export
 * @interface LoginUserBodyModel
 */
export interface LoginUserBodyModel {
  /**
   * @type {string}
   * @memberof LoginUserBodyModel
   */
  captchaToken?: string | null
  /**
   * @type {string}
   * @memberof LoginUserBodyModel
   */
  identifier: string
  /**
   * @type {string}
   * @memberof LoginUserBodyModel
   */
  password: string
}
/**
 * @export
 * @interface ManagedVenues
 */
export interface ManagedVenues {
  /**
   * @type {number}
   * @memberof ManagedVenues
   */
  bankAccountId?: number | null
  /**
   * @type {string}
   * @memberof ManagedVenues
   */
  commonName: string
  /**
   * @type {boolean}
   * @memberof ManagedVenues
   */
  hasPricingPoint: boolean
  /**
   * @type {number}
   * @memberof ManagedVenues
   */
  id: number
  /**
   * @type {string}
   * @memberof ManagedVenues
   */
  siret?: string | null
}
/**
 * @export
 * @interface MentalDisabilityModel
 */
export interface MentalDisabilityModel {
  /**
   * @type {string}
   * @memberof MentalDisabilityModel
   */
  trainedPersonnel?: string
}
/**
 * @export
 * @interface MotorDisabilityModel
 */
export interface MotorDisabilityModel {
  /**
   * @type {string}
   * @memberof MotorDisabilityModel
   */
  entrance?: string
  /**
   * @type {string}
   * @memberof MotorDisabilityModel
   */
  exterior?: string
  /**
   * @type {string}
   * @memberof MotorDisabilityModel
   */
  facilities?: string
  /**
   * @type {string}
   * @memberof MotorDisabilityModel
   */
  parking?: string
}
/**
 * @export
 * @interface MusicTypeResponse
 */
export interface MusicTypeResponse {
  /**
   * @type {boolean}
   * @memberof MusicTypeResponse
   */
  canBeEvent: boolean
  /**
   * @type {string}
   * @memberof MusicTypeResponse
   */
  gtl_id: string
  /**
   * @type {string}
   * @memberof MusicTypeResponse
   */
  label: string
}
/**
 * @export
 * @interface NationalProgramModel
 */
export interface NationalProgramModel {
  /**
   * @type {number}
   * @memberof NationalProgramModel
   */
  id: number
  /**
   * @type {string}
   * @memberof NationalProgramModel
   */
  name: string
}
/**
 * @export
 * @interface NavStateResponseModel
 */
export interface NavStateResponseModel {
  /**
   * @type {Date}
   * @memberof NavStateResponseModel
   */
  eligibilityDate?: Date | null
  /**
   * @type {Date}
   * @memberof NavStateResponseModel
   */
  newNavDate?: Date | null
}
/**
 * @export
 * @interface NewPasswordBodyModel
 */
export interface NewPasswordBodyModel {
  /**
   * @type {string}
   * @memberof NewPasswordBodyModel
   */
  newPassword: string
  /**
   * @type {string}
   * @memberof NewPasswordBodyModel
   */
  token: string
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum OfferAddressType {
  'offererVenue' = 'offererVenue',
  'school' = 'school',
  'other' = 'other',
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum OfferContactFormEnum {
  'form' = 'form',
}
/**
 * @export
 * @interface OfferDomain
 */
export interface OfferDomain {
  /**
   * @type {number}
   * @memberof OfferDomain
   */
  id: number
  /**
   * @type {string}
   * @memberof OfferDomain
   */
  name: string
}
/**
 * @export
 * @interface OfferImage
 */
export interface OfferImage {
  /**
   * @type {string}
   * @memberof OfferImage
   */
  credit?: string
  /**
   * @type {string}
   * @memberof OfferImage
   */
  url: string
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum OfferStatus {
  'ACTIVE' = 'ACTIVE',
  'PENDING' = 'PENDING',
  'EXPIRED' = 'EXPIRED',
  'REJECTED' = 'REJECTED',
  'SOLD_OUT' = 'SOLD_OUT',
  'INACTIVE' = 'INACTIVE',
  'DRAFT' = 'DRAFT',
}
/**
 * @export
 * @interface OfferType
 */
export interface OfferType {
}
/**
 * @export
 * @interface OfferType1
 */
export interface OfferType1 {
}
/**
 * @export
 * @interface OfferType2
 */
export interface OfferType2 {
}
/**
 * @export
 * @interface OffererAddressRequestModel
 */
export interface OffererAddressRequestModel {
  /**
   * @type {string}
   * @memberof OffererAddressRequestModel
   */
  inseeCode: string
  /**
   * @type {string}
   * @memberof OffererAddressRequestModel
   */
  label: string
  /**
   * @type {string}
   * @memberof OffererAddressRequestModel
   */
  street: string
}
/**
 * @export
 * @interface OffererAddressResponseModel
 */
export interface OffererAddressResponseModel {
  /**
   * @type {AddressResponseModel}
   * @memberof OffererAddressResponseModel
   */
  address: AddressResponseModel
  /**
   * @type {number}
   * @memberof OffererAddressResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof OffererAddressResponseModel
   */
  label: string
  /**
   * @type {number}
   * @memberof OffererAddressResponseModel
   */
  offererId: number
}
/**
 * @export
 * @interface OffererApiKey
 */
export interface OffererApiKey {
  /**
   * @type {number}
   * @memberof OffererApiKey
   */
  maxAllowed: number
  /**
   * @type {Array<string>}
   * @memberof OffererApiKey
   */
  prefixes: Array<string>
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum OffererMemberStatus {
  'validated' = 'validated',
  'pending' = 'pending',
}
/**
 * @export
 * @interface OffererStatsDataModel
 */
export interface OffererStatsDataModel {
  /**
   * @type {Array<OffererViewsModel>}
   * @memberof OffererStatsDataModel
   */
  dailyViews: Array<OffererViewsModel>
  /**
   * @type {Array<TopOffersResponseData>}
   * @memberof OffererStatsDataModel
   */
  topOffers: Array<TopOffersResponseData>
  /**
   * @type {number}
   * @memberof OffererStatsDataModel
   */
  totalViewsLast30Days: number
}
/**
 * @export
 * @interface OffererStatsResponseModel
 */
export interface OffererStatsResponseModel {
  /**
   * @type {string}
   * @memberof OffererStatsResponseModel
   */
  dashboardUrl: string
}
/**
 * @export
 * @interface OffererViewsModel
 */
export interface OffererViewsModel {
  /**
   * @type {string}
   * @memberof OffererViewsModel
   */
  eventDate: string
  /**
   * @type {number}
   * @memberof OffererViewsModel
   */
  numberOfViews: number
}
/**
 * @export
 * @interface OpeningHoursModel
 */
export interface OpeningHoursModel {
  /**
   * @type {Array<Array<string>>}
   * @memberof OpeningHoursModel
   */
  timespan?: Array<Array<string>> | null
  /**
   * @type {string}
   * @memberof OpeningHoursModel
   */
  weekday: string
}
/**
 * @export
 * @interface OrderBy
 */
export interface OrderBy extends StocksOrderedBy {
}
/**
 * @export
 * @interface PatchAllCollectiveOffersActiveStatusBodyModel
 */
export interface PatchAllCollectiveOffersActiveStatusBodyModel {
  /**
   * @type {string}
   * @memberof PatchAllCollectiveOffersActiveStatusBodyModel
   */
  categoryId?: string | null
  /**
   * @type {string}
   * @memberof PatchAllCollectiveOffersActiveStatusBodyModel
   */
  creationMode?: string | null
  /**
   * @type {boolean}
   * @memberof PatchAllCollectiveOffersActiveStatusBodyModel
   */
  isActive: boolean
  /**
   * @type {string}
   * @memberof PatchAllCollectiveOffersActiveStatusBodyModel
   */
  nameOrIsbn?: string | null
  /**
   * @type {number}
   * @memberof PatchAllCollectiveOffersActiveStatusBodyModel
   */
  offererId?: number | null
  /**
   * @type {Date}
   * @memberof PatchAllCollectiveOffersActiveStatusBodyModel
   */
  periodBeginningDate?: Date | null
  /**
   * @type {Date}
   * @memberof PatchAllCollectiveOffersActiveStatusBodyModel
   */
  periodEndingDate?: Date | null
  /**
   * @type {string}
   * @memberof PatchAllCollectiveOffersActiveStatusBodyModel
   */
  status?: string | null
  /**
   * @type {number}
   * @memberof PatchAllCollectiveOffersActiveStatusBodyModel
   */
  venueId?: number | null
}
/**
 * @export
 * @interface PatchAllOffersActiveStatusBodyModel
 */
export interface PatchAllOffersActiveStatusBodyModel {
  /**
   * @type {string}
   * @memberof PatchAllOffersActiveStatusBodyModel
   */
  categoryId?: string | null
  /**
   * @type {string}
   * @memberof PatchAllOffersActiveStatusBodyModel
   */
  creationMode?: string | null
  /**
   * @type {boolean}
   * @memberof PatchAllOffersActiveStatusBodyModel
   */
  isActive: boolean
  /**
   * @type {string}
   * @memberof PatchAllOffersActiveStatusBodyModel
   */
  nameOrIsbn?: string | null
  /**
   * @type {number}
   * @memberof PatchAllOffersActiveStatusBodyModel
   */
  offererId?: number | null
  /**
   * @type {string}
   * @memberof PatchAllOffersActiveStatusBodyModel
   */
  periodBeginningDate?: string | null
  /**
   * @type {string}
   * @memberof PatchAllOffersActiveStatusBodyModel
   */
  periodEndingDate?: string | null
  /**
   * @type {string}
   * @memberof PatchAllOffersActiveStatusBodyModel
   */
  status?: string | null
  /**
   * @type {number}
   * @memberof PatchAllOffersActiveStatusBodyModel
   */
  venueId?: number | null
}
/**
 * @export
 * @interface PatchCollectiveOfferActiveStatusBodyModel
 */
export interface PatchCollectiveOfferActiveStatusBodyModel {
  /**
   * @type {Array<number>}
   * @memberof PatchCollectiveOfferActiveStatusBodyModel
   */
  ids: Array<number>
  /**
   * @type {boolean}
   * @memberof PatchCollectiveOfferActiveStatusBodyModel
   */
  isActive: boolean
}
/**
 * @export
 * @interface PatchCollectiveOfferBodyModel
 */
export interface PatchCollectiveOfferBodyModel {
  /**
   * @type {boolean}
   * @memberof PatchCollectiveOfferBodyModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {Array<string>}
   * @memberof PatchCollectiveOfferBodyModel
   */
  bookingEmails?: Array<string> | null
  /**
   * @type {string}
   * @memberof PatchCollectiveOfferBodyModel
   */
  contactEmail?: string | null
  /**
   * @type {string}
   * @memberof PatchCollectiveOfferBodyModel
   */
  contactPhone?: string | null
  /**
   * @type {string}
   * @memberof PatchCollectiveOfferBodyModel
   */
  description?: string | null
  /**
   * @type {Array<number>}
   * @memberof PatchCollectiveOfferBodyModel
   */
  domains?: Array<number> | null
  /**
   * @type {number}
   * @memberof PatchCollectiveOfferBodyModel
   */
  durationMinutes?: number | null
  /**
   * @type {Array<EacFormat>}
   * @memberof PatchCollectiveOfferBodyModel
   */
  formats?: Array<EacFormat> | null
  /**
   * @type {Array<string>}
   * @memberof PatchCollectiveOfferBodyModel
   */
  interventionArea?: Array<string> | null
  /**
   * @type {boolean}
   * @memberof PatchCollectiveOfferBodyModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof PatchCollectiveOfferBodyModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof PatchCollectiveOfferBodyModel
   */
  name?: string | null
  /**
   * @type {number}
   * @memberof PatchCollectiveOfferBodyModel
   */
  nationalProgramId?: number | null
  /**
   * @type {CollectiveOfferVenueBodyModel}
   * @memberof PatchCollectiveOfferBodyModel
   */
  offerVenue?: CollectiveOfferVenueBodyModel | null
  /**
   * @type {Array<StudentLevels>}
   * @memberof PatchCollectiveOfferBodyModel
   */
  students?: Array<StudentLevels> | null
  /**
   * @type {SubcategoryIdEnum}
   * @memberof PatchCollectiveOfferBodyModel
   */
  subcategoryId?: SubcategoryIdEnum | null
  /**
   * @type {number}
   * @memberof PatchCollectiveOfferBodyModel
   */
  venueId?: number | null
  /**
   * @type {boolean}
   * @memberof PatchCollectiveOfferBodyModel
   */
  visualDisabilityCompliant?: boolean | null
}
/**
 * @export
 * @interface PatchCollectiveOfferEducationalInstitution
 */
export interface PatchCollectiveOfferEducationalInstitution {
  /**
   * @type {number}
   * @memberof PatchCollectiveOfferEducationalInstitution
   */
  educationalInstitutionId?: number | null
  /**
   * @type {string}
   * @memberof PatchCollectiveOfferEducationalInstitution
   */
  teacherEmail?: string | null
}
/**
 * @export
 * @interface PatchCollectiveOfferTemplateBodyModel
 */
export interface PatchCollectiveOfferTemplateBodyModel {
  /**
   * @type {boolean}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {Array<string>}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  bookingEmails?: Array<string> | null
  /**
   * @type {string}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  contactEmail?: string | null
  /**
   * @type {OfferContactFormEnum}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  contactForm?: OfferContactFormEnum | null
  /**
   * @type {string}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  contactPhone?: string | null
  /**
   * @type {string}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  contactUrl?: string | null
  /**
   * @type {DateRangeModel}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  dates?: DateRangeModel | null
  /**
   * @type {string}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  description?: string | null
  /**
   * @type {Array<number>}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  domains?: Array<number> | null
  /**
   * @type {number}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  durationMinutes?: number | null
  /**
   * @type {Array<EacFormat>}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  formats?: Array<EacFormat> | null
  /**
   * @type {Array<string>}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  interventionArea?: Array<string> | null
  /**
   * @type {boolean}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  name?: string | null
  /**
   * @type {number}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  nationalProgramId?: number | null
  /**
   * @type {CollectiveOfferVenueBodyModel}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  offerVenue?: CollectiveOfferVenueBodyModel | null
  /**
   * @type {string}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  priceDetail?: string | null
  /**
   * @type {Array<StudentLevels>}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  students?: Array<StudentLevels> | null
  /**
   * @type {SubcategoryIdEnum}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  subcategoryId?: SubcategoryIdEnum | null
  /**
   * @type {number}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  venueId?: number | null
  /**
   * @type {boolean}
   * @memberof PatchCollectiveOfferTemplateBodyModel
   */
  visualDisabilityCompliant?: boolean | null
}
/**
 * @export
 * @interface PatchOfferActiveStatusBodyModel
 */
export interface PatchOfferActiveStatusBodyModel {
  /**
   * @type {Array<number>}
   * @memberof PatchOfferActiveStatusBodyModel
   */
  ids: Array<number>
  /**
   * @type {boolean}
   * @memberof PatchOfferActiveStatusBodyModel
   */
  isActive: boolean
}
/**
 * @export
 * @interface PatchOfferBodyModel
 */
export interface PatchOfferBodyModel {
  /**
   * @type {boolean}
   * @memberof PatchOfferBodyModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof PatchOfferBodyModel
   */
  bookingContact?: string | null
  /**
   * @type {string}
   * @memberof PatchOfferBodyModel
   */
  bookingEmail?: string | null
  /**
   * @type {string}
   * @memberof PatchOfferBodyModel
   */
  description?: string | null
  /**
   * @type {number}
   * @memberof PatchOfferBodyModel
   */
  durationMinutes?: number | null
  /**
   * @type {string}
   * @memberof PatchOfferBodyModel
   */
  externalTicketOfficeUrl?: string | null
  /**
   * @type {ModelObject}
   * @memberof PatchOfferBodyModel
   */
  extraData?: ModelObject | null
  /**
   * @type {boolean}
   * @memberof PatchOfferBodyModel
   */
  isActive?: boolean | null
  /**
   * @type {boolean}
   * @memberof PatchOfferBodyModel
   */
  isDuo?: boolean | null
  /**
   * @type {boolean}
   * @memberof PatchOfferBodyModel
   */
  isNational?: boolean | null
  /**
   * @type {boolean}
   * @memberof PatchOfferBodyModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof PatchOfferBodyModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof PatchOfferBodyModel
   */
  name?: string | null
  /**
   * @type {boolean}
   * @memberof PatchOfferBodyModel
   */
  shouldSendMail?: boolean | null
  /**
   * @type {string}
   * @memberof PatchOfferBodyModel
   */
  url?: string | null
  /**
   * @type {boolean}
   * @memberof PatchOfferBodyModel
   */
  visualDisabilityCompliant?: boolean | null
  /**
   * @type {number}
   * @memberof PatchOfferBodyModel
   */
  withdrawalDelay?: number | null
  /**
   * @type {string}
   * @memberof PatchOfferBodyModel
   */
  withdrawalDetails?: string | null
  /**
   * @type {WithdrawalTypeEnum}
   * @memberof PatchOfferBodyModel
   */
  withdrawalType?: WithdrawalTypeEnum | null
}
/**
 * @export
 * @interface PatchOfferPublishBodyModel
 */
export interface PatchOfferPublishBodyModel {
  /**
   * @type {number}
   * @memberof PatchOfferPublishBodyModel
   */
  id: number
}
/**
 * @export
 * @interface PatchOffererAddressRequest
 */
export interface PatchOffererAddressRequest {
  /**
   * @type {string}
   * @memberof PatchOffererAddressRequest
   */
  label: string
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum PhoneValidationStatusType {
  'skipped-by-support' = 'skipped-by-support',
  'unvalidated' = 'unvalidated',
  'validated' = 'validated',
}
/**
 * @export
 * @interface PostCollectiveOfferBodyModel
 */
export interface PostCollectiveOfferBodyModel {
  /**
   * @type {boolean}
   * @memberof PostCollectiveOfferBodyModel
   */
  audioDisabilityCompliant?: boolean
  /**
   * @type {Array<string>}
   * @memberof PostCollectiveOfferBodyModel
   */
  bookingEmails: Array<string>
  /**
   * @type {string}
   * @memberof PostCollectiveOfferBodyModel
   */
  contactEmail?: string | null
  /**
   * @type {string}
   * @memberof PostCollectiveOfferBodyModel
   */
  contactPhone?: string | null
  /**
   * @type {string}
   * @memberof PostCollectiveOfferBodyModel
   */
  description: string
  /**
   * @type {Array<number>}
   * @memberof PostCollectiveOfferBodyModel
   */
  domains?: Array<number> | null
  /**
   * @type {number}
   * @memberof PostCollectiveOfferBodyModel
   */
  durationMinutes?: number | null
  /**
   * @type {Array<EacFormat>}
   * @memberof PostCollectiveOfferBodyModel
   */
  formats?: Array<EacFormat> | null
  /**
   * @type {Array<string>}
   * @memberof PostCollectiveOfferBodyModel
   */
  interventionArea?: Array<string> | null
  /**
   * @type {boolean}
   * @memberof PostCollectiveOfferBodyModel
   */
  mentalDisabilityCompliant?: boolean
  /**
   * @type {boolean}
   * @memberof PostCollectiveOfferBodyModel
   */
  motorDisabilityCompliant?: boolean
  /**
   * @type {string}
   * @memberof PostCollectiveOfferBodyModel
   */
  name: string
  /**
   * @type {number}
   * @memberof PostCollectiveOfferBodyModel
   */
  nationalProgramId?: number | null
  /**
   * @type {CollectiveOfferVenueBodyModel}
   * @memberof PostCollectiveOfferBodyModel
   */
  offerVenue: CollectiveOfferVenueBodyModel
  /**
   * @type {string}
   * @memberof PostCollectiveOfferBodyModel
   */
  offererId?: string | null
  /**
   * @type {Array<StudentLevels>}
   * @memberof PostCollectiveOfferBodyModel
   */
  students: Array<StudentLevels>
  /**
   * @type {string}
   * @memberof PostCollectiveOfferBodyModel
   */
  subcategoryId?: string | null
  /**
   * @type {number}
   * @memberof PostCollectiveOfferBodyModel
   */
  templateId?: number | null
  /**
   * @type {number}
   * @memberof PostCollectiveOfferBodyModel
   */
  venueId: number
  /**
   * @type {boolean}
   * @memberof PostCollectiveOfferBodyModel
   */
  visualDisabilityCompliant?: boolean
}
/**
 * @export
 * @interface PostCollectiveOfferTemplateBodyModel
 */
export interface PostCollectiveOfferTemplateBodyModel {
  /**
   * @type {boolean}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  audioDisabilityCompliant?: boolean
  /**
   * @type {Array<string>}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  bookingEmails: Array<string>
  /**
   * @type {string}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  contactEmail?: string | null
  /**
   * @type {OfferContactFormEnum}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  contactForm?: OfferContactFormEnum | null
  /**
   * @type {string}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  contactPhone?: string | null
  /**
   * @type {string}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  contactUrl?: string | null
  /**
   * @type {DateRangeOnCreateModel}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  dates?: DateRangeOnCreateModel | null
  /**
   * @type {string}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  description: string
  /**
   * @type {Array<number>}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  domains?: Array<number> | null
  /**
   * @type {number}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  durationMinutes?: number | null
  /**
   * @type {Array<EacFormat>}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  formats?: Array<EacFormat> | null
  /**
   * @type {Array<string>}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  interventionArea?: Array<string> | null
  /**
   * @type {boolean}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  mentalDisabilityCompliant?: boolean
  /**
   * @type {boolean}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  motorDisabilityCompliant?: boolean
  /**
   * @type {string}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  name: string
  /**
   * @type {number}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  nationalProgramId?: number | null
  /**
   * @type {CollectiveOfferVenueBodyModel}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  offerVenue: CollectiveOfferVenueBodyModel
  /**
   * @type {string}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  offererId?: string | null
  /**
   * @type {string}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  priceDetail?: string | null
  /**
   * @type {Array<StudentLevels>}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  students: Array<StudentLevels>
  /**
   * @type {string}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  subcategoryId?: string | null
  /**
   * @type {number}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  templateId?: number | null
  /**
   * @type {number}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  venueId: number
  /**
   * @type {boolean}
   * @memberof PostCollectiveOfferTemplateBodyModel
   */
  visualDisabilityCompliant?: boolean
}
/**
 * @export
 * @interface PostOfferBodyModel
 */
export interface PostOfferBodyModel {
  /**
   * @type {boolean}
   * @memberof PostOfferBodyModel
   */
  audioDisabilityCompliant: boolean
  /**
   * @type {string}
   * @memberof PostOfferBodyModel
   */
  bookingContact?: string | null
  /**
   * @type {string}
   * @memberof PostOfferBodyModel
   */
  bookingEmail?: string | null
  /**
   * @type {string}
   * @memberof PostOfferBodyModel
   */
  description?: string | null
  /**
   * @type {number}
   * @memberof PostOfferBodyModel
   */
  durationMinutes?: number | null
  /**
   * @type {string}
   * @memberof PostOfferBodyModel
   */
  externalTicketOfficeUrl?: string | null
  /**
   * @type {ModelObject}
   * @memberof PostOfferBodyModel
   */
  extraData?: ModelObject | null
  /**
   * @type {boolean}
   * @memberof PostOfferBodyModel
   */
  isDuo?: boolean | null
  /**
   * @type {boolean}
   * @memberof PostOfferBodyModel
   */
  isNational?: boolean | null
  /**
   * @type {boolean}
   * @memberof PostOfferBodyModel
   */
  mentalDisabilityCompliant: boolean
  /**
   * @type {boolean}
   * @memberof PostOfferBodyModel
   */
  motorDisabilityCompliant: boolean
  /**
   * @type {string}
   * @memberof PostOfferBodyModel
   */
  name: string
  /**
   * @type {string}
   * @memberof PostOfferBodyModel
   */
  subcategoryId: string
  /**
   * @type {string}
   * @memberof PostOfferBodyModel
   */
  url?: string | null
  /**
   * @type {number}
   * @memberof PostOfferBodyModel
   */
  venueId: number
  /**
   * @type {boolean}
   * @memberof PostOfferBodyModel
   */
  visualDisabilityCompliant: boolean
  /**
   * @type {number}
   * @memberof PostOfferBodyModel
   */
  withdrawalDelay?: number | null
  /**
   * @type {string}
   * @memberof PostOfferBodyModel
   */
  withdrawalDetails?: string | null
  /**
   * @type {WithdrawalTypeEnum}
   * @memberof PostOfferBodyModel
   */
  withdrawalType?: WithdrawalTypeEnum | null
}
/**
 * @export
 * @interface PostOffererResponseModel
 */
export interface PostOffererResponseModel {
  /**
   * @type {number}
   * @memberof PostOffererResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof PostOffererResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof PostOffererResponseModel
   */
  siren: string
}
/**
 * @export
 * @interface PostVenueBodyModel
 */
export interface PostVenueBodyModel {
  /**
   * @type {boolean}
   * @memberof PostVenueBodyModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof PostVenueBodyModel
   */
  banId?: string | null
  /**
   * @type {string}
   * @memberof PostVenueBodyModel
   */
  bookingEmail: string
  /**
   * @type {string}
   * @memberof PostVenueBodyModel
   */
  city: string
  /**
   * @type {string}
   * @memberof PostVenueBodyModel
   */
  comment?: string | null
  /**
   * @type {VenueContactModel}
   * @memberof PostVenueBodyModel
   */
  contact?: VenueContactModel | null
  /**
   * @type {string}
   * @memberof PostVenueBodyModel
   */
  description?: string | null
  /**
   * @type {number}
   * @memberof PostVenueBodyModel
   */
  latitude: number
  /**
   * @type {number}
   * @memberof PostVenueBodyModel
   */
  longitude: number
  /**
   * @type {number}
   * @memberof PostVenueBodyModel
   */
  managingOffererId: number
  /**
   * @type {boolean}
   * @memberof PostVenueBodyModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof PostVenueBodyModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof PostVenueBodyModel
   */
  name: string
  /**
   * @type {string}
   * @memberof PostVenueBodyModel
   */
  postalCode: string
  /**
   * @type {string}
   * @memberof PostVenueBodyModel
   */
  publicName?: string | null
  /**
   * @type {string}
   * @memberof PostVenueBodyModel
   */
  siret?: string | null
  /**
   * @type {string}
   * @memberof PostVenueBodyModel
   */
  street: string
  /**
   * @type {number}
   * @memberof PostVenueBodyModel
   */
  venueLabelId?: number | null
  /**
   * @type {string}
   * @memberof PostVenueBodyModel
   */
  venueTypeCode: string
  /**
   * @type {boolean}
   * @memberof PostVenueBodyModel
   */
  visualDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof PostVenueBodyModel
   */
  withdrawalDetails?: string | null
}
/**
 * @export
 * @interface PostVenueProviderBody
 */
export interface PostVenueProviderBody {
  /**
   * @type {boolean}
   * @memberof PostVenueProviderBody
   */
  isActive?: boolean | null
  /**
   * @type {boolean}
   * @memberof PostVenueProviderBody
   */
  isDuo?: boolean | null
  /**
   * @type {number}
   * @memberof PostVenueProviderBody
   */
  price?: number | null
  /**
   * @type {number}
   * @memberof PostVenueProviderBody
   */
  providerId: number
  /**
   * @type {number}
   * @memberof PostVenueProviderBody
   */
  quantity?: number | null
  /**
   * @type {number}
   * @memberof PostVenueProviderBody
   */
  venueId: number
  /**
   * @type {string}
   * @memberof PostVenueProviderBody
   */
  venueIdAtOfferProvider?: string | null
}
/**
 * @export
 * @interface PriceCategoryBody
 */
export interface PriceCategoryBody {
  /**
   * @type {Array<CreatePriceCategoryModel | EditPriceCategoryModel>}
   * @memberof PriceCategoryBody
   */
  priceCategories: Array<CreatePriceCategoryModel | EditPriceCategoryModel>
}
/**
 * @export
 * @interface PriceCategoryResponseModel
 */
export interface PriceCategoryResponseModel {
  /**
   * @type {number}
   * @memberof PriceCategoryResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof PriceCategoryResponseModel
   */
  label: string
  /**
   * @type {number}
   * @memberof PriceCategoryResponseModel
   */
  price: number
}
/**
 * @export
 * @interface ProFlagsQueryModel
 */
export interface ProFlagsQueryModel {
  /**
   * @type {any}
   * @memberof ProFlagsQueryModel
   */
  firebase: any
}
/**
 * @export
 * @interface ProUserCreationBodyV2Model
 */
export interface ProUserCreationBodyV2Model {
  /**
   * @type {boolean}
   * @memberof ProUserCreationBodyV2Model
   */
  contactOk: boolean
  /**
   * @type {string}
   * @memberof ProUserCreationBodyV2Model
   */
  email: string
  /**
   * @type {string}
   * @memberof ProUserCreationBodyV2Model
   */
  firstName: string
  /**
   * @type {string}
   * @memberof ProUserCreationBodyV2Model
   */
  lastName: string
  /**
   * @type {string}
   * @memberof ProUserCreationBodyV2Model
   */
  password: string
  /**
   * @type {string}
   * @memberof ProUserCreationBodyV2Model
   */
  phoneNumber: string
  /**
   * @type {string}
   * @memberof ProUserCreationBodyV2Model
   */
  token: string
}
/**
 * @export
 * @interface ProviderResponse
 */
export interface ProviderResponse {
  /**
   * @type {boolean}
   * @memberof ProviderResponse
   */
  hasOffererProvider: boolean
  /**
   * @type {number}
   * @memberof ProviderResponse
   */
  id: number
  /**
   * @type {boolean}
   * @memberof ProviderResponse
   */
  isActive: boolean
  /**
   * @type {string}
   * @memberof ProviderResponse
   */
  name: string
}
/**
 * @export
 * @interface ReimbursementCsvQueryModel
 */
export interface ReimbursementCsvQueryModel {
  /**
   * @type {number}
   * @memberof ReimbursementCsvQueryModel
   */
  bankAccountId?: number
  /**
   * @type {string}
   * @memberof ReimbursementCsvQueryModel
   */
  reimbursementPeriodBeginningDate?: string
  /**
   * @type {Date}
   * @memberof ReimbursementCsvQueryModel
   */
  reimbursementPeriodEndingDate?: Date
}
/**
 * @export
 * @interface ResetPasswordBodyModel
 */
export interface ResetPasswordBodyModel {
  /**
   * @type {string}
   * @memberof ResetPasswordBodyModel
   */
  email: string
  /**
   * @type {string}
   * @memberof ResetPasswordBodyModel
   */
  token: string
}
/**
 * @export
 * @interface SaveNewOnboardingDataQueryModel
 */
export interface SaveNewOnboardingDataQueryModel {
  /**
   * @type {string}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  banId?: string | null
  /**
   * @type {string}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  city: string
  /**
   * @type {boolean}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  createVenueWithoutSiret?: boolean
  /**
   * @type {number}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  latitude: number
  /**
   * @type {number}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  longitude: number
  /**
   * @type {string}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  postalCode: string
  /**
   * @type {string}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  publicName?: string | null
  /**
   * @type {string}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  siret: string
  /**
   * @type {string}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  street?: string | null
  /**
   * @type {Target}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  target: Target
  /**
   * @type {string}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  token: string
  /**
   * @type {string}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  venueTypeCode: string
  /**
   * @type {string}
   * @memberof SaveNewOnboardingDataQueryModel
   */
  webPresence: string
}
/**
 * @export
 * @interface SharedCurrentUserResponseModel
 */
export interface SharedCurrentUserResponseModel {
  /**
   * @type {string}
   * @memberof SharedCurrentUserResponseModel
   */
  activity?: string | null
  /**
   * @type {string}
   * @memberof SharedCurrentUserResponseModel
   */
  address?: string | null
  /**
   * @type {string}
   * @memberof SharedCurrentUserResponseModel
   */
  city?: string | null
  /**
   * @type {GenderEnum}
   * @memberof SharedCurrentUserResponseModel
   */
  civility?: GenderEnum | null
  /**
   * @type {Date}
   * @memberof SharedCurrentUserResponseModel
   */
  dateCreated: Date
  /**
   * @type {Date}
   * @memberof SharedCurrentUserResponseModel
   */
  dateOfBirth?: Date | null
  /**
   * @type {string}
   * @memberof SharedCurrentUserResponseModel
   */
  departementCode?: string | null
  /**
   * @type {string}
   * @memberof SharedCurrentUserResponseModel
   */
  email: string
  /**
   * @type {any}
   * @memberof SharedCurrentUserResponseModel
   */
  externalIds?: any | null
  /**
   * @type {string}
   * @memberof SharedCurrentUserResponseModel
   */
  firstName?: string | null
  /**
   * @type {boolean}
   * @memberof SharedCurrentUserResponseModel
   */
  hasPartnerPage?: boolean | null
  /**
   * @type {boolean}
   * @memberof SharedCurrentUserResponseModel
   */
  hasSeenProRgs?: boolean | null
  /**
   * @type {boolean}
   * @memberof SharedCurrentUserResponseModel
   */
  hasSeenProTutorials?: boolean | null
  /**
   * @type {boolean}
   * @memberof SharedCurrentUserResponseModel
   */
  hasUserOfferer?: boolean | null
  /**
   * @type {number}
   * @memberof SharedCurrentUserResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof SharedCurrentUserResponseModel
   */
  idPieceNumber?: string | null
  /**
   * @type {boolean}
   * @memberof SharedCurrentUserResponseModel
   */
  isAdmin: boolean
  /**
   * @type {boolean}
   * @memberof SharedCurrentUserResponseModel
   */
  isEmailValidated: boolean
  /**
   * @type {boolean}
   * @memberof SharedCurrentUserResponseModel
   */
  isImpersonated?: boolean
  /**
   * @type {Date}
   * @memberof SharedCurrentUserResponseModel
   */
  lastConnectionDate?: Date | null
  /**
   * @type {string}
   * @memberof SharedCurrentUserResponseModel
   */
  lastName?: string | null
  /**
   * @type {NavStateResponseModel}
   * @memberof SharedCurrentUserResponseModel
   */
  navState?: NavStateResponseModel | null
  /**
   * @type {boolean}
   * @memberof SharedCurrentUserResponseModel
   */
  needsToFillCulturalSurvey?: boolean | null
  /**
   * @type {any}
   * @memberof SharedCurrentUserResponseModel
   */
  notificationSubscriptions?: any | null
  /**
   * @type {string}
   * @memberof SharedCurrentUserResponseModel
   */
  phoneNumber?: string | null
  /**
   * @type {PhoneValidationStatusType}
   * @memberof SharedCurrentUserResponseModel
   */
  phoneValidationStatus?: PhoneValidationStatusType | null
  /**
   * @type {string}
   * @memberof SharedCurrentUserResponseModel
   */
  postalCode?: string | null
  /**
   * @type {Array<UserRole>}
   * @memberof SharedCurrentUserResponseModel
   */
  roles: Array<UserRole>
}
/**
 * @export
 * @interface SharedLoginUserResponseModel
 */
export interface SharedLoginUserResponseModel {
  /**
   * @type {string}
   * @memberof SharedLoginUserResponseModel
   */
  activity?: string | null
  /**
   * @type {string}
   * @memberof SharedLoginUserResponseModel
   */
  address?: string | null
  /**
   * @type {string}
   * @memberof SharedLoginUserResponseModel
   */
  city?: string | null
  /**
   * @type {GenderEnum}
   * @memberof SharedLoginUserResponseModel
   */
  civility?: GenderEnum | null
  /**
   * @type {Date}
   * @memberof SharedLoginUserResponseModel
   */
  dateCreated: Date
  /**
   * @type {Date}
   * @memberof SharedLoginUserResponseModel
   */
  dateOfBirth?: Date | null
  /**
   * @type {string}
   * @memberof SharedLoginUserResponseModel
   */
  departementCode?: string | null
  /**
   * @type {string}
   * @memberof SharedLoginUserResponseModel
   */
  email: string
  /**
   * @type {string}
   * @memberof SharedLoginUserResponseModel
   */
  firstName?: string | null
  /**
   * @type {boolean}
   * @memberof SharedLoginUserResponseModel
   */
  hasPartnerPage?: boolean | null
  /**
   * @type {boolean}
   * @memberof SharedLoginUserResponseModel
   */
  hasSeenProRgs?: boolean | null
  /**
   * @type {boolean}
   * @memberof SharedLoginUserResponseModel
   */
  hasSeenProTutorials?: boolean | null
  /**
   * @type {boolean}
   * @memberof SharedLoginUserResponseModel
   */
  hasUserOfferer?: boolean | null
  /**
   * @type {number}
   * @memberof SharedLoginUserResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof SharedLoginUserResponseModel
   */
  isAdmin: boolean
  /**
   * @type {boolean}
   * @memberof SharedLoginUserResponseModel
   */
  isEmailValidated: boolean
  /**
   * @type {Date}
   * @memberof SharedLoginUserResponseModel
   */
  lastConnectionDate?: Date | null
  /**
   * @type {string}
   * @memberof SharedLoginUserResponseModel
   */
  lastName?: string | null
  /**
   * @type {NavStateResponseModel}
   * @memberof SharedLoginUserResponseModel
   */
  navState?: NavStateResponseModel | null
  /**
   * @type {boolean}
   * @memberof SharedLoginUserResponseModel
   */
  needsToFillCulturalSurvey?: boolean | null
  /**
   * @type {string}
   * @memberof SharedLoginUserResponseModel
   */
  phoneNumber?: string | null
  /**
   * @type {string}
   * @memberof SharedLoginUserResponseModel
   */
  postalCode?: string | null
  /**
   * @type {Array<UserRole>}
   * @memberof SharedLoginUserResponseModel
   */
  roles: Array<UserRole>
}
/**
 * @export
 * @interface SirenInfo
 */
export interface SirenInfo {
  /**
   * @type {Address}
   * @memberof SirenInfo
   */
  address: Address
  /**
   * @type {string}
   * @memberof SirenInfo
   */
  ape_code: string
  /**
   * @type {string}
   * @memberof SirenInfo
   */
  name: string
  /**
   * @type {string}
   * @memberof SirenInfo
   */
  siren: string
}
/**
 * @export
 * @interface SiretInfo
 */
export interface SiretInfo {
  /**
   * @type {boolean}
   * @memberof SiretInfo
   */
  active: boolean
  /**
   * @type {Address}
   * @memberof SiretInfo
   */
  address: Address
  /**
   * @type {string}
   * @memberof SiretInfo
   */
  ape_code: string
  /**
   * @type {string}
   * @memberof SiretInfo
   */
  legal_category_code: string
  /**
   * @type {string}
   * @memberof SiretInfo
   */
  name: string
  /**
   * @type {string}
   * @memberof SiretInfo
   */
  siret: string
}
/**
 * @export
 * @interface Status
 */
export interface Status {
}
/**
 * @export
 * @interface StockCreationBodyModel
 */
export interface StockCreationBodyModel {
  /**
   * @type {Array<string>}
   * @memberof StockCreationBodyModel
   */
  activationCodes?: Array<string> | null
  /**
   * @type {Date}
   * @memberof StockCreationBodyModel
   */
  activationCodesExpirationDatetime?: Date | null
  /**
   * @type {Date}
   * @memberof StockCreationBodyModel
   */
  beginningDatetime?: Date | null
  /**
   * @type {Date}
   * @memberof StockCreationBodyModel
   */
  bookingLimitDatetime?: Date | null
  /**
   * @type {number}
   * @memberof StockCreationBodyModel
   */
  price?: number | null
  /**
   * @type {number}
   * @memberof StockCreationBodyModel
   */
  priceCategoryId?: number | null
  /**
   * @type {number}
   * @memberof StockCreationBodyModel
   */
  quantity?: number | null
}
/**
 * @export
 * @interface StockEditionBodyModel
 */
export interface StockEditionBodyModel {
  /**
   * @type {Date}
   * @memberof StockEditionBodyModel
   */
  beginningDatetime?: Date | null
  /**
   * @type {Date}
   * @memberof StockEditionBodyModel
   */
  bookingLimitDatetime?: Date | null
  /**
   * @type {number}
   * @memberof StockEditionBodyModel
   */
  id: number
  /**
   * @type {number}
   * @memberof StockEditionBodyModel
   */
  price?: number | null
  /**
   * @type {number}
   * @memberof StockEditionBodyModel
   */
  priceCategoryId?: number | null
  /**
   * @type {number}
   * @memberof StockEditionBodyModel
   */
  quantity?: number | null
}
/**
 * @export
 * @interface StockIdResponseModel
 */
export interface StockIdResponseModel {
  /**
   * @type {number}
   * @memberof StockIdResponseModel
   */
  id: number
}
/**
 * @export
 * @interface StockStatsResponseModel
 */
export interface StockStatsResponseModel {
  /**
   * @type {Date}
   * @memberof StockStatsResponseModel
   */
  newestStock?: Date | null
  /**
   * @type {Date}
   * @memberof StockStatsResponseModel
   */
  oldestStock?: Date | null
  /**
   * @type {number}
   * @memberof StockStatsResponseModel
   */
  remainingQuantity?: number | null
  /**
   * @type {number}
   * @memberof StockStatsResponseModel
   */
  stockCount?: number | null
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum StocksOrderedBy {
  'DATE' = 'DATE',
  'TIME' = 'TIME',
  'BEGINNING_DATETIME' = 'BEGINNING_DATETIME',
  'PRICE_CATEGORY_ID' = 'PRICE_CATEGORY_ID',
  'BOOKING_LIMIT_DATETIME' = 'BOOKING_LIMIT_DATETIME',
  'REMAINING_QUANTITY' = 'REMAINING_QUANTITY',
  'DN_BOOKED_QUANTITY' = 'DN_BOOKED_QUANTITY',
}
/**
 * @export
 * @interface StocksQueryModel
 */
export interface StocksQueryModel {
  /**
   * @type {string}
   * @memberof StocksQueryModel
   */
  date?: string | null
  /**
   * @type {StocksOrderedBy}
   * @memberof StocksQueryModel
   */
  order_by?: StocksOrderedBy
  /**
   * @type {boolean}
   * @memberof StocksQueryModel
   */
  order_by_desc?: boolean
  /**
   * @type {number}
   * @memberof StocksQueryModel
   */
  page?: number
  /**
   * @type {number}
   * @memberof StocksQueryModel
   */
  price_category_id?: number | null
  /**
   * @type {number}
   * @memberof StocksQueryModel
   */
  stocks_limit_per_page?: number
  /**
   * @type {string}
   * @memberof StocksQueryModel
   */
  time?: string | null
}
/**
 * @export
 * @interface StocksResponseModel
 */
export interface StocksResponseModel {
  /**
   * @type {number}
   * @memberof StocksResponseModel
   */
  stocks_count: number
}
/**
 * @export
 * @interface StocksUpsertBodyModel
 */
export interface StocksUpsertBodyModel {
  /**
   * @type {number}
   * @memberof StocksUpsertBodyModel
   */
  offerId: number
  /**
   * @type {Array<StockCreationBodyModel | StockEditionBodyModel>}
   * @memberof StocksUpsertBodyModel
   */
  stocks: Array<StockCreationBodyModel | StockEditionBodyModel>
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum StudentLevels {
  'Écoles Marseille - Maternelle' = 'Écoles Marseille - Maternelle',
  'Écoles Marseille - CP, CE1, CE2' = 'Écoles Marseille - CP, CE1, CE2',
  'Écoles Marseille - CM1, CM2' = 'Écoles Marseille - CM1, CM2',
  'Collège - 6e' = 'Collège - 6e',
  'Collège - 5e' = 'Collège - 5e',
  'Collège - 4e' = 'Collège - 4e',
  'Collège - 3e' = 'Collège - 3e',
  'CAP - 1re année' = 'CAP - 1re année',
  'CAP - 2e année' = 'CAP - 2e année',
  'Lycée - Seconde' = 'Lycée - Seconde',
  'Lycée - Première' = 'Lycée - Première',
  'Lycée - Terminale' = 'Lycée - Terminale',
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum SubcategoryIdEnum {
  'ABO_BIBLIOTHEQUE' = 'ABO_BIBLIOTHEQUE',
  'ABO_CONCERT' = 'ABO_CONCERT',
  'ABO_JEU_VIDEO' = 'ABO_JEU_VIDEO',
  'ABO_LIVRE_NUMERIQUE' = 'ABO_LIVRE_NUMERIQUE',
  'ABO_LUDOTHEQUE' = 'ABO_LUDOTHEQUE',
  'ABO_MEDIATHEQUE' = 'ABO_MEDIATHEQUE',
  'ABO_PLATEFORME_MUSIQUE' = 'ABO_PLATEFORME_MUSIQUE',
  'ABO_PLATEFORME_VIDEO' = 'ABO_PLATEFORME_VIDEO',
  'ABO_PRATIQUE_ART' = 'ABO_PRATIQUE_ART',
  'ABO_PRESSE_EN_LIGNE' = 'ABO_PRESSE_EN_LIGNE',
  'ABO_SPECTACLE' = 'ABO_SPECTACLE',
  'ACHAT_INSTRUMENT' = 'ACHAT_INSTRUMENT',
  'ACTIVATION_EVENT' = 'ACTIVATION_EVENT',
  'ACTIVATION_THING' = 'ACTIVATION_THING',
  'APP_CULTURELLE' = 'APP_CULTURELLE',
  'ATELIER_PRATIQUE_ART' = 'ATELIER_PRATIQUE_ART',
  'AUTRE_SUPPORT_NUMERIQUE' = 'AUTRE_SUPPORT_NUMERIQUE',
  'BON_ACHAT_INSTRUMENT' = 'BON_ACHAT_INSTRUMENT',
  'CAPTATION_MUSIQUE' = 'CAPTATION_MUSIQUE',
  'CARTE_CINE_ILLIMITE' = 'CARTE_CINE_ILLIMITE',
  'CARTE_CINE_MULTISEANCES' = 'CARTE_CINE_MULTISEANCES',
  'CARTE_JEUNES' = 'CARTE_JEUNES',
  'CARTE_MUSEE' = 'CARTE_MUSEE',
  'CINE_PLEIN_AIR' = 'CINE_PLEIN_AIR',
  'CINE_VENTE_DISTANCE' = 'CINE_VENTE_DISTANCE',
  'CONCERT' = 'CONCERT',
  'CONCOURS' = 'CONCOURS',
  'CONFERENCE' = 'CONFERENCE',
  'DECOUVERTE_METIERS' = 'DECOUVERTE_METIERS',
  'ESCAPE_GAME' = 'ESCAPE_GAME',
  'EVENEMENT_CINE' = 'EVENEMENT_CINE',
  'EVENEMENT_JEU' = 'EVENEMENT_JEU',
  'EVENEMENT_MUSIQUE' = 'EVENEMENT_MUSIQUE',
  'EVENEMENT_PATRIMOINE' = 'EVENEMENT_PATRIMOINE',
  'FESTIVAL_ART_VISUEL' = 'FESTIVAL_ART_VISUEL',
  'FESTIVAL_CINE' = 'FESTIVAL_CINE',
  'FESTIVAL_LIVRE' = 'FESTIVAL_LIVRE',
  'FESTIVAL_MUSIQUE' = 'FESTIVAL_MUSIQUE',
  'FESTIVAL_SPECTACLE' = 'FESTIVAL_SPECTACLE',
  'JEU_EN_LIGNE' = 'JEU_EN_LIGNE',
  'JEU_SUPPORT_PHYSIQUE' = 'JEU_SUPPORT_PHYSIQUE',
  'LIVESTREAM_EVENEMENT' = 'LIVESTREAM_EVENEMENT',
  'LIVESTREAM_MUSIQUE' = 'LIVESTREAM_MUSIQUE',
  'LIVESTREAM_PRATIQUE_ARTISTIQUE' = 'LIVESTREAM_PRATIQUE_ARTISTIQUE',
  'LIVRE_AUDIO_PHYSIQUE' = 'LIVRE_AUDIO_PHYSIQUE',
  'LIVRE_NUMERIQUE' = 'LIVRE_NUMERIQUE',
  'LIVRE_PAPIER' = 'LIVRE_PAPIER',
  'LOCATION_INSTRUMENT' = 'LOCATION_INSTRUMENT',
  'MATERIEL_ART_CREATIF' = 'MATERIEL_ART_CREATIF',
  'MUSEE_VENTE_DISTANCE' = 'MUSEE_VENTE_DISTANCE',
  'OEUVRE_ART' = 'OEUVRE_ART',
  'PARTITION' = 'PARTITION',
  'PLATEFORME_PRATIQUE_ARTISTIQUE' = 'PLATEFORME_PRATIQUE_ARTISTIQUE',
  'PRATIQUE_ART_VENTE_DISTANCE' = 'PRATIQUE_ART_VENTE_DISTANCE',
  'PODCAST' = 'PODCAST',
  'RENCONTRE_EN_LIGNE' = 'RENCONTRE_EN_LIGNE',
  'RENCONTRE_JEU' = 'RENCONTRE_JEU',
  'RENCONTRE' = 'RENCONTRE',
  'SALON' = 'SALON',
  'SEANCE_CINE' = 'SEANCE_CINE',
  'SEANCE_ESSAI_PRATIQUE_ART' = 'SEANCE_ESSAI_PRATIQUE_ART',
  'SPECTACLE_ENREGISTRE' = 'SPECTACLE_ENREGISTRE',
  'SPECTACLE_REPRESENTATION' = 'SPECTACLE_REPRESENTATION',
  'SPECTACLE_VENTE_DISTANCE' = 'SPECTACLE_VENTE_DISTANCE',
  'SUPPORT_PHYSIQUE_FILM' = 'SUPPORT_PHYSIQUE_FILM',
  'SUPPORT_PHYSIQUE_MUSIQUE_CD' = 'SUPPORT_PHYSIQUE_MUSIQUE_CD',
  'SUPPORT_PHYSIQUE_MUSIQUE_VINYLE' = 'SUPPORT_PHYSIQUE_MUSIQUE_VINYLE',
  'TELECHARGEMENT_LIVRE_AUDIO' = 'TELECHARGEMENT_LIVRE_AUDIO',
  'TELECHARGEMENT_MUSIQUE' = 'TELECHARGEMENT_MUSIQUE',
  'VISITE_GUIDEE' = 'VISITE_GUIDEE',
  'VISITE_VIRTUELLE' = 'VISITE_VIRTUELLE',
  'VISITE' = 'VISITE',
  'VOD' = 'VOD',
}
/**
 * @export
 * @interface SubcategoryResponseModel
 */
export interface SubcategoryResponseModel {
  /**
   * @type {string}
   * @memberof SubcategoryResponseModel
   */
  appLabel: string
  /**
   * @type {boolean}
   * @memberof SubcategoryResponseModel
   */
  canBeDuo: boolean
  /**
   * @type {boolean}
   * @memberof SubcategoryResponseModel
   */
  canBeEducational: boolean
  /**
   * @type {boolean}
   * @memberof SubcategoryResponseModel
   */
  canBeWithdrawable: boolean
  /**
   * @type {boolean}
   * @memberof SubcategoryResponseModel
   */
  canExpire: boolean
  /**
   * @type {string}
   * @memberof SubcategoryResponseModel
   */
  categoryId: string
  /**
   * @type {Array<string>}
   * @memberof SubcategoryResponseModel
   */
  conditionalFields: Array<string>
  /**
   * @type {string}
   * @memberof SubcategoryResponseModel
   */
  id: string
  /**
   * @type {boolean}
   * @memberof SubcategoryResponseModel
   */
  isDigitalDeposit: boolean
  /**
   * @type {boolean}
   * @memberof SubcategoryResponseModel
   */
  isEvent: boolean
  /**
   * @type {boolean}
   * @memberof SubcategoryResponseModel
   */
  isPhysicalDeposit: boolean
  /**
   * @type {boolean}
   * @memberof SubcategoryResponseModel
   */
  isSelectable: boolean
  /**
   * @type {string}
   * @memberof SubcategoryResponseModel
   */
  onlineOfflinePlatform: string
  /**
   * @type {string}
   * @memberof SubcategoryResponseModel
   */
  proLabel: string
  /**
   * @type {string}
   * @memberof SubcategoryResponseModel
   */
  reimbursementRule: string
  /**
   * @type {string}
   * @memberof SubcategoryResponseModel
   */
  searchGroupName?: string | null
}
/**
 * @export
 * @interface SubmitReviewRequestModel
 */
export interface SubmitReviewRequestModel {
  /**
   * @type {string}
   * @memberof SubmitReviewRequestModel
   */
  comment: string
  /**
   * @type {boolean}
   * @memberof SubmitReviewRequestModel
   */
  isConvenient: boolean
  /**
   * @type {boolean}
   * @memberof SubmitReviewRequestModel
   */
  isPleasant: boolean
  /**
   * @type {string}
   * @memberof SubmitReviewRequestModel
   */
  location: string
  /**
   * @type {number}
   * @memberof SubmitReviewRequestModel
   */
  offererId: number
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum Target {
  'EDUCATIONAL' = 'EDUCATIONAL',
  'INDIVIDUAL_AND_EDUCATIONAL' = 'INDIVIDUAL_AND_EDUCATIONAL',
  'INDIVIDUAL' = 'INDIVIDUAL',
}
/**
 * @export
 * @interface TemplateDatesModel
 */
export interface TemplateDatesModel {
  /**
   * @type {Date}
   * @memberof TemplateDatesModel
   */
  end: Date
  /**
   * @type {Date}
   * @memberof TemplateDatesModel
   */
  start: Date
}
/**
 * @export
 * @interface TopOffersResponseData
 */
export interface TopOffersResponseData {
  /**
   * @type {OfferImage}
   * @memberof TopOffersResponseData
   */
  image?: OfferImage
  /**
   * @type {number}
   * @memberof TopOffersResponseData
   */
  numberOfViews: number
  /**
   * @type {number}
   * @memberof TopOffersResponseData
   */
  offerId: number
  /**
   * @type {string}
   * @memberof TopOffersResponseData
   */
  offerName: string
}
/**
 * @export
 * @interface UserEmailValidationResponseModel
 */
export interface UserEmailValidationResponseModel {
  /**
   * @type {string}
   * @memberof UserEmailValidationResponseModel
   */
  newEmail?: string | null
}
/**
 * @export
 * @interface UserHasBookingResponse
 */
export interface UserHasBookingResponse {
  /**
   * @type {boolean}
   * @memberof UserHasBookingResponse
   */
  hasBookings: boolean
}
/**
 * @export
 * @interface UserIdentityBodyModel
 */
export interface UserIdentityBodyModel {
  /**
   * @type {string}
   * @memberof UserIdentityBodyModel
   */
  firstName: string
  /**
   * @type {string}
   * @memberof UserIdentityBodyModel
   */
  lastName: string
}
/**
 * @export
 * @interface UserIdentityResponseModel
 */
export interface UserIdentityResponseModel {
  /**
   * @type {string}
   * @memberof UserIdentityResponseModel
   */
  firstName: string
  /**
   * @type {string}
   * @memberof UserIdentityResponseModel
   */
  lastName: string
}
/**
 * @export
 * @interface UserPhoneBodyModel
 */
export interface UserPhoneBodyModel {
  /**
   * @type {string}
   * @memberof UserPhoneBodyModel
   */
  phoneNumber: string
}
/**
 * @export
 * @interface UserPhoneResponseModel
 */
export interface UserPhoneResponseModel {
  /**
   * @type {string}
   * @memberof UserPhoneResponseModel
   */
  phoneNumber: string
}
/**
 * @export
 * @interface UserResetEmailBodyModel
 */
export interface UserResetEmailBodyModel {
  /**
   * @type {string}
   * @memberof UserResetEmailBodyModel
   */
  email: string
  /**
   * @type {string}
   * @memberof UserResetEmailBodyModel
   */
  password: string
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum UserRole {
  'ADMIN' = 'ADMIN',
  'ANONYMIZED' = 'ANONYMIZED',
  'BENEFICIARY' = 'BENEFICIARY',
  'PRO' = 'PRO',
  'NON_ATTACHED_PRO' = 'NON_ATTACHED_PRO',
  'UNDERAGE_BENEFICIARY' = 'UNDERAGE_BENEFICIARY',
  'TEST' = 'TEST',
}
/**
 * @export
 * @interface ValidationError
 */
export interface ValidationError extends Array<ValidationErrorElement> {
}
/**
 * @export
 * @interface ValidationErrorElement
 */
export interface ValidationErrorElement {
  /**
   * @type {any}
   * @memberof ValidationErrorElement
   */
  ctx?: any
  /**
   * @type {Array<string>}
   * @memberof ValidationErrorElement
   */
  loc: Array<string>
  /**
   * @type {string}
   * @memberof ValidationErrorElement
   */
  msg: string
  /**
   * @type {string}
   * @memberof ValidationErrorElement
   */
  type: string
}
/**
 * @export
 * @interface VenueContactModel
 */
export interface VenueContactModel {
  /**
   * @type {string}
   * @memberof VenueContactModel
   */
  email?: string | null
  /**
   * @type {string}
   * @memberof VenueContactModel
   */
  phoneNumber?: string | null
  /**
   * @type {{ [key: string]: string; }}
   * @memberof VenueContactModel
   */
  socialMedias?: { [key: string]: string; } | null
  /**
   * @type {string}
   * @memberof VenueContactModel
   */
  website?: string | null
}
/**
 * @export
 * @interface VenueLabelListResponseModel
 */
export interface VenueLabelListResponseModel extends Array<VenueLabelResponseModel> {
}
/**
 * @export
 * @interface VenueLabelResponseModel
 */
export interface VenueLabelResponseModel {
  /**
   * @type {number}
   * @memberof VenueLabelResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof VenueLabelResponseModel
   */
  label: string
}
/**
 * @export
 * @interface VenueListItemResponseModel
 */
export interface VenueListItemResponseModel {
  /**
   * @type {boolean}
   * @memberof VenueListItemResponseModel
   */
  audioDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof VenueListItemResponseModel
   */
  bookingEmail?: string | null
  /**
   * @type {string}
   * @memberof VenueListItemResponseModel
   */
  collectiveSubCategoryId?: string | null
  /**
   * @type {ExternalAccessibilityDataModel}
   * @memberof VenueListItemResponseModel
   */
  externalAccessibilityData?: ExternalAccessibilityDataModel | null
  /**
   * @type {boolean}
   * @memberof VenueListItemResponseModel
   */
  hasCreatedOffer: boolean
  /**
   * @type {number}
   * @memberof VenueListItemResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof VenueListItemResponseModel
   */
  isVirtual: boolean
  /**
   * @type {number}
   * @memberof VenueListItemResponseModel
   */
  managingOffererId: number
  /**
   * @type {boolean}
   * @memberof VenueListItemResponseModel
   */
  mentalDisabilityCompliant?: boolean | null
  /**
   * @type {boolean}
   * @memberof VenueListItemResponseModel
   */
  motorDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof VenueListItemResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof VenueListItemResponseModel
   */
  offererName: string
  /**
   * @type {string}
   * @memberof VenueListItemResponseModel
   */
  publicName?: string | null
  /**
   * @type {string}
   * @memberof VenueListItemResponseModel
   */
  siret?: string | null
  /**
   * @type {VenueTypeCode}
   * @memberof VenueListItemResponseModel
   */
  venueTypeCode: VenueTypeCode
  /**
   * @type {boolean}
   * @memberof VenueListItemResponseModel
   */
  visualDisabilityCompliant?: boolean | null
  /**
   * @type {string}
   * @memberof VenueListItemResponseModel
   */
  withdrawalDetails?: string | null
}
/**
 * @export
 * @interface VenueListQueryModel
 */
export interface VenueListQueryModel {
  /**
   * @type {boolean}
   * @memberof VenueListQueryModel
   */
  activeOfferersOnly?: boolean | null
  /**
   * @type {number}
   * @memberof VenueListQueryModel
   */
  offererId?: number | null
  /**
   * @type {boolean}
   * @memberof VenueListQueryModel
   */
  validated?: boolean | null
}
/**
 * @export
 * @interface VenueOfOffererFromSiretResponseModel
 */
export interface VenueOfOffererFromSiretResponseModel {
  /**
   * @type {number}
   * @memberof VenueOfOffererFromSiretResponseModel
   */
  id: number
  /**
   * @type {boolean}
   * @memberof VenueOfOffererFromSiretResponseModel
   */
  isPermanent: boolean
  /**
   * @type {string}
   * @memberof VenueOfOffererFromSiretResponseModel
   */
  name: string
  /**
   * @type {string}
   * @memberof VenueOfOffererFromSiretResponseModel
   */
  publicName?: string | null
  /**
   * @type {string}
   * @memberof VenueOfOffererFromSiretResponseModel
   */
  siret?: string | null
}
/**
 * @export
 * @interface VenueProviderResponse
 */
export interface VenueProviderResponse {
  /**
   * @type {number}
   * @memberof VenueProviderResponse
   */
  id: number
  /**
   * @type {boolean}
   * @memberof VenueProviderResponse
   */
  isActive: boolean
  /**
   * @type {boolean}
   * @memberof VenueProviderResponse
   */
  isDuo?: boolean | null
  /**
   * @type {boolean}
   * @memberof VenueProviderResponse
   */
  isFromAllocineProvider: boolean
  /**
   * @type {Date}
   * @memberof VenueProviderResponse
   */
  lastSyncDate?: Date | null
  /**
   * @type {number}
   * @memberof VenueProviderResponse
   */
  price?: number | null
  /**
   * @type {ProviderResponse}
   * @memberof VenueProviderResponse
   */
  provider: ProviderResponse
  /**
   * @type {number}
   * @memberof VenueProviderResponse
   */
  quantity?: number | null
  /**
   * @type {number}
   * @memberof VenueProviderResponse
   */
  venueId: number
  /**
   * @type {string}
   * @memberof VenueProviderResponse
   */
  venueIdAtOfferProvider?: string | null
}
/**
 * @export
 * @interface VenueResponseModel
 */
export interface VenueResponseModel {
  /**
   * @type {number}
   * @memberof VenueResponseModel
   */
  id: number
}
/**
 * @export
 * @interface VenueStatsResponseModel
 */
export interface VenueStatsResponseModel {
  /**
   * @type {number}
   * @memberof VenueStatsResponseModel
   */
  activeBookingsQuantity: number
  /**
   * @type {number}
   * @memberof VenueStatsResponseModel
   */
  activeOffersCount: number
  /**
   * @type {number}
   * @memberof VenueStatsResponseModel
   */
  soldOutOffersCount: number
  /**
   * @type {number}
   * @memberof VenueStatsResponseModel
   */
  validatedBookingsQuantity: number
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum VenueTypeCode {
  'Lieu administratif' = 'Lieu administratif',
  'Cours et pratique artistiques' = 'Cours et pratique artistiques',
  'Librairie' = 'Librairie',
  'Musique - Salle de concerts' = 'Musique - Salle de concerts',
  'Magasin arts créatifs' = 'Magasin arts créatifs',
  'Centre culturel' = 'Centre culturel',
  'Offre numérique' = 'Offre numérique',
  'Magasin de distribution de produits culturels' = 'Magasin de distribution de produits culturels',
  'Festival' = 'Festival',
  'Jeux / Jeux vidéos' = 'Jeux / Jeux vidéos',
  'Bibliothèque ou médiathèque' = 'Bibliothèque ou médiathèque',
  'Cinéma - Salle de projections' = 'Cinéma - Salle de projections',
  'Musée' = 'Musée',
  'Musique - Magasin d’instruments' = 'Musique - Magasin d’instruments',
  'Autre' = 'Autre',
  'Patrimoine et tourisme' = 'Patrimoine et tourisme',
  'Spectacle vivant' = 'Spectacle vivant',
  'Musique - Disquaire' = 'Musique - Disquaire',
  'Culture scientifique' = 'Culture scientifique',
  'Cinéma itinérant' = 'Cinéma itinérant',
  'Arts visuels, arts plastiques et galeries' = 'Arts visuels, arts plastiques et galeries',
}
/**
 * @export
 * @interface VenueTypeListResponseModel
 */
export interface VenueTypeListResponseModel extends Array<VenueTypeResponseModel> {
}
/**
 * @export
 * @interface VenueTypeResponseModel
 */
export interface VenueTypeResponseModel {
  /**
   * @type {string}
   * @memberof VenueTypeResponseModel
   */
  id: string
  /**
   * @type {string}
   * @memberof VenueTypeResponseModel
   */
  label: string
}
/**
 * @export
 * @interface VenuesEducationalStatusResponseModel
 */
export interface VenuesEducationalStatusResponseModel {
  /**
   * @type {number}
   * @memberof VenuesEducationalStatusResponseModel
   */
  id: number
  /**
   * @type {string}
   * @memberof VenuesEducationalStatusResponseModel
   */
  name: string
}
/**
 * @export
 * @interface VenuesEducationalStatusesResponseModel
 */
export interface VenuesEducationalStatusesResponseModel {
  /**
   * @type {Array<VenuesEducationalStatusResponseModel>}
   * @memberof VenuesEducationalStatusesResponseModel
   */
  statuses: Array<VenuesEducationalStatusResponseModel>
}
/**
 * @export
 * @interface VisualDisabilityModel
 */
export interface VisualDisabilityModel {
  /**
   * @type {Array<string>}
   * @memberof VisualDisabilityModel
   */
  audioDescription?: Array<string>
  /**
   * @type {string}
   * @memberof VisualDisabilityModel
   */
  soundBeacon?: string
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum WithdrawalTypeEnum {
  'by_email' = 'by_email',
  'in_app' = 'in_app',
  'no_ticket' = 'no_ticket',
  'on_site' = 'on_site',
}

/**
 * DefaultApi - fetch parameter creator
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * @summary attach_offer_image <POST>
     * @param {number} offer_id 
     * @param {string} [credit] 
     * @param {number} [croppingRectHeight] 
     * @param {number} [croppingRectWidth] 
     * @param {number} [croppingRectX] 
     * @param {number} [croppingRectY] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachOfferImage(offer_id: number, credit?: string, croppingRectHeight?: number, croppingRectWidth?: number, croppingRectX?: number, croppingRectY?: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling attachOfferImage.'
        )
      }
      const pathname = `/collective/offers/{offer_id}/image`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      if (credit !== undefined) {
        localVarFormParams.set('credit', credit as any)
      }
      if (croppingRectHeight !== undefined) {
        localVarFormParams.set('croppingRectHeight', croppingRectHeight as any)
      }
      if (croppingRectWidth !== undefined) {
        localVarFormParams.set('croppingRectWidth', croppingRectWidth as any)
      }
      if (croppingRectX !== undefined) {
        localVarFormParams.set('croppingRectX', croppingRectX as any)
      }
      if (croppingRectY !== undefined) {
        localVarFormParams.set('croppingRectY', croppingRectY as any)
      }
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary attach_offer_template_image <POST>
     * @param {number} offer_id 
     * @param {string} [credit] 
     * @param {number} [croppingRectHeight] 
     * @param {number} [croppingRectWidth] 
     * @param {number} [croppingRectX] 
     * @param {number} [croppingRectY] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachOfferTemplateImage(offer_id: number, credit?: string, croppingRectHeight?: number, croppingRectWidth?: number, croppingRectX?: number, croppingRectY?: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling attachOfferTemplateImage.'
        )
      }
      const pathname = `/collective/offers-template/{offer_id}/image`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      if (credit !== undefined) {
        localVarFormParams.set('credit', credit as any)
      }
      if (croppingRectHeight !== undefined) {
        localVarFormParams.set('croppingRectHeight', croppingRectHeight as any)
      }
      if (croppingRectWidth !== undefined) {
        localVarFormParams.set('croppingRectWidth', croppingRectWidth as any)
      }
      if (croppingRectX !== undefined) {
        localVarFormParams.set('croppingRectX', croppingRectX as any)
      }
      if (croppingRectY !== undefined) {
        localVarFormParams.set('croppingRectY', croppingRectY as any)
      }
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary cancel_collective_offer_booking <PATCH>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cancelCollectiveOfferBooking(offer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling cancelCollectiveOfferBooking.'
        )
      }
      const pathname = `/collective/offers/{offer_id}/cancel_booking`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary check_activation_token_exists <GET>
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkActivationTokenExists(token: string, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'token' is not null or undefined
      if (token === null || token === undefined) {
        throw new RequiredError(
          'token',
          'Required parameter token was null or undefined when calling checkActivationTokenExists.'
        )
      }
      const pathname = `/users/token/{token}`.replace(
        `{${'token'}}`,
        encodeURIComponent(String(token))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary connect_as <GET>
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async connectAs(token: string, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'token' is not null or undefined
      if (token === null || token === undefined) {
        throw new RequiredError(
          'token',
          'Required parameter token was null or undefined when calling connectAs.'
        )
      }
      const pathname = `/users/connect-as/{token}`.replace(
        `{${'token'}}`,
        encodeURIComponent(String(token))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary cookies_consent <POST>
     * @param {CookieConsentRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cookiesConsent(body?: CookieConsentRequest, options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/cookies`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"CookieConsentRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary create_collective_offer <POST>
     * @param {PostCollectiveOfferBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCollectiveOffer(body?: PostCollectiveOfferBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/collective/offers`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PostCollectiveOfferBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary create_collective_offer_template <POST>
     * @param {PostCollectiveOfferTemplateBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCollectiveOfferTemplate(body?: PostCollectiveOfferTemplateBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/collective/offers-template`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PostCollectiveOfferTemplateBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary create_collective_offer_template_from_collective_offer <POST>
     * @param {number} offer_id 
     * @param {CollectiveOfferTemplateBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCollectiveOfferTemplateFromCollectiveOffer(offer_id: number, body?: CollectiveOfferTemplateBodyModel, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling createCollectiveOfferTemplateFromCollectiveOffer.'
        )
      }
      const pathname = `/collective/offers-template/{offer_id}/`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"CollectiveOfferTemplateBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary create_collective_stock <POST>
     * @param {CollectiveStockCreationBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCollectiveStock(body?: CollectiveStockCreationBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/collective/stocks`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"CollectiveStockCreationBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary create_offerer <POST>
     * @param {CreateOffererQueryModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOfferer(body?: CreateOffererQueryModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/offerers`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"CreateOffererQueryModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary create_offerer_address <POST>
     * @param {number} offerer_id 
     * @param {OffererAddressRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOffererAddress(offerer_id: number, body?: OffererAddressRequestModel, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offerer_id' is not null or undefined
      if (offerer_id === null || offerer_id === undefined) {
        throw new RequiredError(
          'offerer_id',
          'Required parameter offerer_id was null or undefined when calling createOffererAddress.'
        )
      }
      const pathname = `/offerers/{offerer_id}/addresses`.replace(
        `{${'offerer_id'}}`,
        encodeURIComponent(String(offerer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"OffererAddressRequestModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary create_thumbnail <POST>
     * @param {string} [credit] 
     * @param {number} [croppingRectHeight] 
     * @param {number} [croppingRectWidth] 
     * @param {number} [croppingRectX] 
     * @param {number} [croppingRectY] 
     * @param {number} [offerId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createThumbnail(credit?: string, croppingRectHeight?: number, croppingRectWidth?: number, croppingRectX?: number, croppingRectY?: number, offerId?: number, options: any = {}): Promise<FetchArgs> {
      const pathname = `/offers/thumbnails/`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      if (credit !== undefined) {
        localVarFormParams.set('credit', credit as any)
      }
      if (croppingRectHeight !== undefined) {
        localVarFormParams.set('croppingRectHeight', croppingRectHeight as any)
      }
      if (croppingRectWidth !== undefined) {
        localVarFormParams.set('croppingRectWidth', croppingRectWidth as any)
      }
      if (croppingRectX !== undefined) {
        localVarFormParams.set('croppingRectX', croppingRectX as any)
      }
      if (croppingRectY !== undefined) {
        localVarFormParams.set('croppingRectY', croppingRectY as any)
      }
      if (offerId !== undefined) {
        localVarFormParams.set('offerId', offerId as any)
      }
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary create_venue_provider <POST>
     * @param {PostVenueProviderBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createVenueProvider(body?: PostVenueProviderBody, options: any = {}): Promise<FetchArgs> {
      const pathname = `/venueProviders`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PostVenueProviderBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary delete_all_filtered_stocks <POST>
     * @param {number} offer_id 
     * @param {DeleteFilteredStockListBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAllFilteredStocks(offer_id: number, body?: DeleteFilteredStockListBody, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling deleteAllFilteredStocks.'
        )
      }
      const pathname = `/offers/{offer_id}/stocks/all-delete`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"DeleteFilteredStockListBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary delete_api_key <DELETE>
     * @param {string} api_key_prefix 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteApiKey(api_key_prefix: string, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'api_key_prefix' is not null or undefined
      if (api_key_prefix === null || api_key_prefix === undefined) {
        throw new RequiredError(
          'api_key_prefix',
          'Required parameter api_key_prefix was null or undefined when calling deleteApiKey.'
        )
      }
      const pathname = `/offerers/api_keys/{api_key_prefix}`.replace(
        `{${'api_key_prefix'}}`,
        encodeURIComponent(String(api_key_prefix))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary delete_draft_offers <POST>
     * @param {DeleteOfferRequestBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDraftOffers(body?: DeleteOfferRequestBody, options: any = {}): Promise<FetchArgs> {
      const pathname = `/offers/delete-draft`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"DeleteOfferRequestBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary delete_offer_image <DELETE>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOfferImage(offer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling deleteOfferImage.'
        )
      }
      const pathname = `/collective/offers/{offer_id}/image`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary delete_offer_template_image <DELETE>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOfferTemplateImage(offer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling deleteOfferTemplateImage.'
        )
      }
      const pathname = `/collective/offers-template/{offer_id}/image`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary delete_price_category <DELETE>
     * @param {number} offer_id 
     * @param {number} price_category_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePriceCategory(offer_id: number, price_category_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling deletePriceCategory.'
        )
      }
      // verify required parameter 'price_category_id' is not null or undefined
      if (price_category_id === null || price_category_id === undefined) {
        throw new RequiredError(
          'price_category_id',
          'Required parameter price_category_id was null or undefined when calling deletePriceCategory.'
        )
      }
      const pathname = `/offers/{offer_id}/price_categories/{price_category_id}`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      ).replace(
        `{${'price_category_id'}}`,
        encodeURIComponent(String(price_category_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary delete_stock <DELETE>
     * @param {number} stock_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteStock(stock_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'stock_id' is not null or undefined
      if (stock_id === null || stock_id === undefined) {
        throw new RequiredError(
          'stock_id',
          'Required parameter stock_id was null or undefined when calling deleteStock.'
        )
      }
      const pathname = `/stocks/{stock_id}`.replace(
        `{${'stock_id'}}`,
        encodeURIComponent(String(stock_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary delete_stocks <POST>
     * @param {number} offer_id 
     * @param {DeleteStockListBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteStocks(offer_id: number, body?: DeleteStockListBody, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling deleteStocks.'
        )
      }
      const pathname = `/offers/{offer_id}/stocks/delete`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"DeleteStockListBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary delete_thumbnail <DELETE>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteThumbnail(offer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling deleteThumbnail.'
        )
      }
      const pathname = `/offers/thumbnails/{offer_id}`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary delete_venue_banner <DELETE>
     * @param {number} venue_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVenueBanner(venue_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'venue_id' is not null or undefined
      if (venue_id === null || venue_id === undefined) {
        throw new RequiredError(
          'venue_id',
          'Required parameter venue_id was null or undefined when calling deleteVenueBanner.'
        )
      }
      const pathname = `/venues/{venue_id}/banner`.replace(
        `{${'venue_id'}}`,
        encodeURIComponent(String(venue_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary delete_venue_provider <DELETE>
     * @param {number} venue_provider_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVenueProvider(venue_provider_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'venue_provider_id' is not null or undefined
      if (venue_provider_id === null || venue_provider_id === undefined) {
        throw new RequiredError(
          'venue_provider_id',
          'Required parameter venue_provider_id was null or undefined when calling deleteVenueProvider.'
        )
      }
      const pathname = `/venueProviders/{venue_provider_id}`.replace(
        `{${'venue_provider_id'}}`,
        encodeURIComponent(String(venue_provider_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary duplicate_collective_offer <POST>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async duplicateCollectiveOffer(offer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling duplicateCollectiveOffer.'
        )
      }
      const pathname = `/collective/offers/{offer_id}/duplicate`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary edit_collective_offer <PATCH>
     * @param {number} offer_id 
     * @param {PatchCollectiveOfferBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editCollectiveOffer(offer_id: number, body?: PatchCollectiveOfferBodyModel, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling editCollectiveOffer.'
        )
      }
      const pathname = `/collective/offers/{offer_id}`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PatchCollectiveOfferBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary edit_collective_offer_template <PATCH>
     * @param {number} offer_id 
     * @param {PatchCollectiveOfferTemplateBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editCollectiveOfferTemplate(offer_id: number, body?: PatchCollectiveOfferTemplateBodyModel, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling editCollectiveOfferTemplate.'
        )
      }
      const pathname = `/collective/offers-template/{offer_id}`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PatchCollectiveOfferTemplateBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary edit_collective_stock <PATCH>
     * @param {number} collective_stock_id 
     * @param {CollectiveStockEditionBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editCollectiveStock(collective_stock_id: number, body?: CollectiveStockEditionBodyModel, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'collective_stock_id' is not null or undefined
      if (collective_stock_id === null || collective_stock_id === undefined) {
        throw new RequiredError(
          'collective_stock_id',
          'Required parameter collective_stock_id was null or undefined when calling editCollectiveStock.'
        )
      }
      const pathname = `/collective/stocks/{collective_stock_id}`.replace(
        `{${'collective_stock_id'}}`,
        encodeURIComponent(String(collective_stock_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"CollectiveStockEditionBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary edit_venue <PATCH>
     * @param {number} venue_id 
     * @param {EditVenueBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editVenue(venue_id: number, body?: EditVenueBodyModel, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'venue_id' is not null or undefined
      if (venue_id === null || venue_id === undefined) {
        throw new RequiredError(
          'venue_id',
          'Required parameter venue_id was null or undefined when calling editVenue.'
        )
      }
      const pathname = `/venues/{venue_id}`.replace(
        `{${'venue_id'}}`,
        encodeURIComponent(String(venue_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"EditVenueBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary edit_venue_collective_data <PATCH>
     * @param {number} venue_id 
     * @param {EditVenueCollectiveDataBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editVenueCollectiveData(venue_id: number, body?: EditVenueCollectiveDataBodyModel, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'venue_id' is not null or undefined
      if (venue_id === null || venue_id === undefined) {
        throw new RequiredError(
          'venue_id',
          'Required parameter venue_id was null or undefined when calling editVenueCollectiveData.'
        )
      }
      const pathname = `/venues/{venue_id}/collective-data`.replace(
        `{${'venue_id'}}`,
        encodeURIComponent(String(venue_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"EditVenueCollectiveDataBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary export_bookings_for_offer_as_csv <GET>
     * @param {number} offer_id 
     * @param {BookingsExportStatusFilter} status 
     * @param {string} event_date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exportBookingsForOfferAsCsv(offer_id: number, status: BookingsExportStatusFilter, event_date: string, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling exportBookingsForOfferAsCsv.'
        )
      }
      // verify required parameter 'status' is not null or undefined
      if (status === null || status === undefined) {
        throw new RequiredError(
          'status',
          'Required parameter status was null or undefined when calling exportBookingsForOfferAsCsv.'
        )
      }
      // verify required parameter 'event_date' is not null or undefined
      if (event_date === null || event_date === undefined) {
        throw new RequiredError(
          'event_date',
          'Required parameter event_date was null or undefined when calling exportBookingsForOfferAsCsv.'
        )
      }
      const pathname = `/bookings/offer/{offer_id}/csv`.concat(`?status=${ status }`).concat(`?event_date=${ event_date }`).replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary export_bookings_for_offer_as_excel <GET>
     * @param {number} offer_id 
     * @param {BookingsExportStatusFilter} status 
     * @param {string} event_date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exportBookingsForOfferAsExcel(offer_id: number, status: BookingsExportStatusFilter, event_date: string, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling exportBookingsForOfferAsExcel.'
        )
      }
      // verify required parameter 'status' is not null or undefined
      if (status === null || status === undefined) {
        throw new RequiredError(
          'status',
          'Required parameter status was null or undefined when calling exportBookingsForOfferAsExcel.'
        )
      }
      // verify required parameter 'event_date' is not null or undefined
      if (event_date === null || event_date === undefined) {
        throw new RequiredError(
          'event_date',
          'Required parameter event_date was null or undefined when calling exportBookingsForOfferAsExcel.'
        )
      }
      const pathname = `/bookings/offer/{offer_id}/excel`.concat(`?status=${ status }`).concat(`?event_date=${ event_date }`).replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary fetch_venue_labels <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchVenueLabels(options: any = {}): Promise<FetchArgs> {
      const pathname = `/venue-labels`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary generate_api_key_route <POST>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async generateApiKeyRoute(offerer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offerer_id' is not null or undefined
      if (offerer_id === null || offerer_id === undefined) {
        throw new RequiredError(
          'offerer_id',
          'Required parameter offerer_id was null or undefined when calling generateApiKeyRoute.'
        )
      }
      const pathname = `/offerers/{offerer_id}/api_keys`.replace(
        `{${'offerer_id'}}`,
        encodeURIComponent(String(offerer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_autocomplete_educational_redactors_for_uai <GET>
     * @param {string} uai 
     * @param {string} candidate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAutocompleteEducationalRedactorsForUai(uai: string, candidate: string, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'uai' is not null or undefined
      if (uai === null || uai === undefined) {
        throw new RequiredError(
          'uai',
          'Required parameter uai was null or undefined when calling getAutocompleteEducationalRedactorsForUai.'
        )
      }
      // verify required parameter 'candidate' is not null or undefined
      if (candidate === null || candidate === undefined) {
        throw new RequiredError(
          'candidate',
          'Required parameter candidate was null or undefined when calling getAutocompleteEducationalRedactorsForUai.'
        )
      }
      const pathname = `/collective/offers/redactors`.concat(`?uai=${ uai }`).concat(`?candidate=${ candidate }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_bank_accounts <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBankAccounts(options: any = {}): Promise<FetchArgs> {
      const pathname = `/finance/bank-accounts`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_bookings_csv <GET>
     * @param {number} [page] 
     * @param {number} [venueId] 
     * @param {number} [offerId] 
     * @param {string} [eventDate] 
     * @param {BookingStatusFilter} [bookingStatusFilter] 
     * @param {string} [bookingPeriodBeginningDate] 
     * @param {string} [bookingPeriodEndingDate] 
     * @param {OfferType} [offerType] 
     * @param {ExportType} [exportType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBookingsCsv(page?: number, venueId?: number, offerId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, offerType?: OfferType, exportType?: ExportType, options: any = {}): Promise<FetchArgs> {
      const pathname = `/bookings/csv`.concat(`?page=${ page }`).concat(`?venueId=${ venueId }`).concat(`?offerId=${ offerId }`).concat(`?eventDate=${ eventDate }`).concat(`?bookingStatusFilter=${ bookingStatusFilter }`).concat(`?bookingPeriodBeginningDate=${ bookingPeriodBeginningDate }`).concat(`?bookingPeriodEndingDate=${ bookingPeriodEndingDate }`).concat(`?offerType=${ offerType }`).concat(`?exportType=${ exportType }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_bookings_excel <GET>
     * @param {number} [page] 
     * @param {number} [venueId] 
     * @param {number} [offerId] 
     * @param {string} [eventDate] 
     * @param {BookingStatusFilter1} [bookingStatusFilter] 
     * @param {string} [bookingPeriodBeginningDate] 
     * @param {string} [bookingPeriodEndingDate] 
     * @param {OfferType1} [offerType] 
     * @param {ExportType1} [exportType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBookingsExcel(page?: number, venueId?: number, offerId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter1, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, offerType?: OfferType1, exportType?: ExportType1, options: any = {}): Promise<FetchArgs> {
      const pathname = `/bookings/excel`.concat(`?page=${ page }`).concat(`?venueId=${ venueId }`).concat(`?offerId=${ offerId }`).concat(`?eventDate=${ eventDate }`).concat(`?bookingStatusFilter=${ bookingStatusFilter }`).concat(`?bookingPeriodBeginningDate=${ bookingPeriodBeginningDate }`).concat(`?bookingPeriodEndingDate=${ bookingPeriodEndingDate }`).concat(`?offerType=${ offerType }`).concat(`?exportType=${ exportType }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_bookings_pro <GET>
     * @param {number} [page] 
     * @param {number} [venueId] 
     * @param {number} [offerId] 
     * @param {string} [eventDate] 
     * @param {BookingStatusFilter2} [bookingStatusFilter] 
     * @param {string} [bookingPeriodBeginningDate] 
     * @param {string} [bookingPeriodEndingDate] 
     * @param {OfferType2} [offerType] 
     * @param {ExportType2} [exportType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBookingsPro(page?: number, venueId?: number, offerId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter2, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, offerType?: OfferType2, exportType?: ExportType2, options: any = {}): Promise<FetchArgs> {
      const pathname = `/bookings/pro`.concat(`?page=${ page }`).concat(`?venueId=${ venueId }`).concat(`?offerId=${ offerId }`).concat(`?eventDate=${ eventDate }`).concat(`?bookingStatusFilter=${ bookingStatusFilter }`).concat(`?bookingPeriodBeginningDate=${ bookingPeriodBeginningDate }`).concat(`?bookingPeriodEndingDate=${ bookingPeriodEndingDate }`).concat(`?offerType=${ offerType }`).concat(`?exportType=${ exportType }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_categories <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCategories(options: any = {}): Promise<FetchArgs> {
      const pathname = `/offers/categories`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_collective_booking_by_id <GET>
     * @param {number} booking_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveBookingById(booking_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'booking_id' is not null or undefined
      if (booking_id === null || booking_id === undefined) {
        throw new RequiredError(
          'booking_id',
          'Required parameter booking_id was null or undefined when calling getCollectiveBookingById.'
        )
      }
      const pathname = `/collective/bookings/{booking_id}`.replace(
        `{${'booking_id'}}`,
        encodeURIComponent(String(booking_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_collective_bookings_csv <GET>
     * @param {number} [page] 
     * @param {number} [venueId] 
     * @param {string} [eventDate] 
     * @param {BookingStatusFilter3} [bookingStatusFilter] 
     * @param {string} [bookingPeriodBeginningDate] 
     * @param {string} [bookingPeriodEndingDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveBookingsCsv(page?: number, venueId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter3, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, options: any = {}): Promise<FetchArgs> {
      const pathname = `/collective/bookings/csv`.concat(`?page=${ page }`).concat(`?venueId=${ venueId }`).concat(`?eventDate=${ eventDate }`).concat(`?bookingStatusFilter=${ bookingStatusFilter }`).concat(`?bookingPeriodBeginningDate=${ bookingPeriodBeginningDate }`).concat(`?bookingPeriodEndingDate=${ bookingPeriodEndingDate }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_collective_bookings_excel <GET>
     * @param {number} [page] 
     * @param {number} [venueId] 
     * @param {string} [eventDate] 
     * @param {BookingStatusFilter4} [bookingStatusFilter] 
     * @param {string} [bookingPeriodBeginningDate] 
     * @param {string} [bookingPeriodEndingDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveBookingsExcel(page?: number, venueId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter4, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, options: any = {}): Promise<FetchArgs> {
      const pathname = `/collective/bookings/excel`.concat(`?page=${ page }`).concat(`?venueId=${ venueId }`).concat(`?eventDate=${ eventDate }`).concat(`?bookingStatusFilter=${ bookingStatusFilter }`).concat(`?bookingPeriodBeginningDate=${ bookingPeriodBeginningDate }`).concat(`?bookingPeriodEndingDate=${ bookingPeriodEndingDate }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_collective_bookings_pro <GET>
     * @param {number} [page] 
     * @param {number} [venueId] 
     * @param {string} [eventDate] 
     * @param {BookingStatusFilter5} [bookingStatusFilter] 
     * @param {string} [bookingPeriodBeginningDate] 
     * @param {string} [bookingPeriodEndingDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveBookingsPro(page?: number, venueId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter5, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, options: any = {}): Promise<FetchArgs> {
      const pathname = `/collective/bookings/pro`.concat(`?page=${ page }`).concat(`?venueId=${ venueId }`).concat(`?eventDate=${ eventDate }`).concat(`?bookingStatusFilter=${ bookingStatusFilter }`).concat(`?bookingPeriodBeginningDate=${ bookingPeriodBeginningDate }`).concat(`?bookingPeriodEndingDate=${ bookingPeriodEndingDate }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_collective_offer <GET>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveOffer(offer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling getCollectiveOffer.'
        )
      }
      const pathname = `/collective/offers/{offer_id}`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_collective_offer_request <GET>
     * @param {number} request_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveOfferRequest(request_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'request_id' is not null or undefined
      if (request_id === null || request_id === undefined) {
        throw new RequiredError(
          'request_id',
          'Required parameter request_id was null or undefined when calling getCollectiveOfferRequest.'
        )
      }
      const pathname = `/collective/offers-template/request/{request_id}`.replace(
        `{${'request_id'}}`,
        encodeURIComponent(String(request_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_collective_offer_template <GET>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveOfferTemplate(offer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling getCollectiveOfferTemplate.'
        )
      }
      const pathname = `/collective/offers-template/{offer_id}`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_collective_offers <GET>
     * @param {string} [nameOrIsbn] 
     * @param {number} [offererId] 
     * @param {Status} [status] 
     * @param {number} [venueId] 
     * @param {string} [categoryId] 
     * @param {string} [creationMode] 
     * @param {string} [periodBeginningDate] 
     * @param {string} [periodEndingDate] 
     * @param {CollectiveOfferType} [collectiveOfferType] 
     * @param {Format} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveOffers(nameOrIsbn?: string, offererId?: number, status?: Status, venueId?: number, categoryId?: string, creationMode?: string, periodBeginningDate?: string, periodEndingDate?: string, collectiveOfferType?: CollectiveOfferType, format?: Format, options: any = {}): Promise<FetchArgs> {
      const pathname = `/collective/offers`.concat(`?nameOrIsbn=${ nameOrIsbn }`).concat(`?offererId=${ offererId }`).concat(`?status=${ status }`).concat(`?venueId=${ venueId }`).concat(`?categoryId=${ categoryId }`).concat(`?creationMode=${ creationMode }`).concat(`?periodBeginningDate=${ periodBeginningDate }`).concat(`?periodEndingDate=${ periodEndingDate }`).concat(`?collectiveOfferType=${ collectiveOfferType }`).concat(`?format=${ format }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_combined_invoices <GET>
     * @param {Array<string>} invoiceReferences 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCombinedInvoices(invoiceReferences: Array<string>, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'invoiceReferences' is not null or undefined
      if (invoiceReferences === null || invoiceReferences === undefined) {
        throw new RequiredError(
          'invoiceReferences',
          'Required parameter invoiceReferences was null or undefined when calling getCombinedInvoices.'
        )
      }
      const pathname = `/finance/combined-invoices`.concat(`?invoiceReferences=${ invoiceReferences }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_educational_institutions <GET>
     * @param {number} [perPageLimit] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEducationalInstitutions(perPageLimit?: number, page?: number, options: any = {}): Promise<FetchArgs> {
      const pathname = `/educational_institutions`.concat(`?perPageLimit=${ perPageLimit }`).concat(`?page=${ page }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_educational_partners <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEducationalPartners(options: any = {}): Promise<FetchArgs> {
      const pathname = `/cultural-partners`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_invoices_v2 <GET>
     * @param {string} [periodBeginningDate] 
     * @param {string} [periodEndingDate] 
     * @param {number} [bankAccountId] 
     * @param {number} [offererId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInvoicesV2(periodBeginningDate?: string, periodEndingDate?: string, bankAccountId?: number, offererId?: number, options: any = {}): Promise<FetchArgs> {
      const pathname = `/v2/finance/invoices`.concat(`?periodBeginningDate=${ periodBeginningDate }`).concat(`?periodEndingDate=${ periodEndingDate }`).concat(`?bankAccountId=${ bankAccountId }`).concat(`?offererId=${ offererId }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_music_types <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMusicTypes(options: any = {}): Promise<FetchArgs> {
      const pathname = `/offers/music-types`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_national_programs <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNationalPrograms(options: any = {}): Promise<FetchArgs> {
      const pathname = `/national-programs`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_offer <GET>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffer(offer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling getOffer.'
        )
      }
      const pathname = `/offers/{offer_id}`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_offer_price_categories_and_schedules_by_dates <GET>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOfferPriceCategoriesAndSchedulesByDates(offer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling getOfferPriceCategoriesAndSchedulesByDates.'
        )
      }
      const pathname = `/bookings/dates/{offer_id}`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_offerer <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOfferer(offerer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offerer_id' is not null or undefined
      if (offerer_id === null || offerer_id === undefined) {
        throw new RequiredError(
          'offerer_id',
          'Required parameter offerer_id was null or undefined when calling getOfferer.'
        )
      }
      const pathname = `/offerers/{offerer_id}`.replace(
        `{${'offerer_id'}}`,
        encodeURIComponent(String(offerer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_offerer_addresses <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffererAddresses(offerer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offerer_id' is not null or undefined
      if (offerer_id === null || offerer_id === undefined) {
        throw new RequiredError(
          'offerer_id',
          'Required parameter offerer_id was null or undefined when calling getOffererAddresses.'
        )
      }
      const pathname = `/offerers/{offerer_id}/addresses`.replace(
        `{${'offerer_id'}}`,
        encodeURIComponent(String(offerer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_offerer_bank_accounts_and_attached_venues <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffererBankAccountsAndAttachedVenues(offerer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offerer_id' is not null or undefined
      if (offerer_id === null || offerer_id === undefined) {
        throw new RequiredError(
          'offerer_id',
          'Required parameter offerer_id was null or undefined when calling getOffererBankAccountsAndAttachedVenues.'
        )
      }
      const pathname = `/offerers/{offerer_id}/bank-accounts`.replace(
        `{${'offerer_id'}}`,
        encodeURIComponent(String(offerer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_offerer_members <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffererMembers(offerer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offerer_id' is not null or undefined
      if (offerer_id === null || offerer_id === undefined) {
        throw new RequiredError(
          'offerer_id',
          'Required parameter offerer_id was null or undefined when calling getOffererMembers.'
        )
      }
      const pathname = `/offerers/{offerer_id}/members`.replace(
        `{${'offerer_id'}}`,
        encodeURIComponent(String(offerer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_offerer_stats <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffererStats(offerer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offerer_id' is not null or undefined
      if (offerer_id === null || offerer_id === undefined) {
        throw new RequiredError(
          'offerer_id',
          'Required parameter offerer_id was null or undefined when calling getOffererStats.'
        )
      }
      const pathname = `/offerers/{offerer_id}/stats`.replace(
        `{${'offerer_id'}}`,
        encodeURIComponent(String(offerer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_offerer_stats_dashboard_url <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffererStatsDashboardUrl(offerer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offerer_id' is not null or undefined
      if (offerer_id === null || offerer_id === undefined) {
        throw new RequiredError(
          'offerer_id',
          'Required parameter offerer_id was null or undefined when calling getOffererStatsDashboardUrl.'
        )
      }
      const pathname = `/offerers/{offerer_id}/dashboard`.replace(
        `{${'offerer_id'}}`,
        encodeURIComponent(String(offerer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_offerer_v2_stats <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffererV2Stats(offerer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offerer_id' is not null or undefined
      if (offerer_id === null || offerer_id === undefined) {
        throw new RequiredError(
          'offerer_id',
          'Required parameter offerer_id was null or undefined when calling getOffererV2Stats.'
        )
      }
      const pathname = `/offerers/{offerer_id}/v2/stats`.replace(
        `{${'offerer_id'}}`,
        encodeURIComponent(String(offerer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_profile <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProfile(options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/current`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_providers_by_venue <GET>
     * @param {number} venue_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProvidersByVenue(venue_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'venue_id' is not null or undefined
      if (venue_id === null || venue_id === undefined) {
        throw new RequiredError(
          'venue_id',
          'Required parameter venue_id was null or undefined when calling getProvidersByVenue.'
        )
      }
      const pathname = `/venueProviders/{venue_id}`.replace(
        `{${'venue_id'}}`,
        encodeURIComponent(String(venue_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_reimbursements_csv <GET>
     * @param {number} [bankAccountId] 
     * @param {string} [reimbursementPeriodBeginningDate] 
     * @param {Date} [reimbursementPeriodEndingDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getReimbursementsCsv(bankAccountId?: number, reimbursementPeriodBeginningDate?: string, reimbursementPeriodEndingDate?: Date, options: any = {}): Promise<FetchArgs> {
      const pathname = `/reimbursements/csv`.concat(`?bankAccountId=${ bankAccountId }`).concat(`?reimbursementPeriodBeginningDate=${ reimbursementPeriodBeginningDate }`).concat(`?reimbursementPeriodEndingDate=${ reimbursementPeriodEndingDate }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_siren_info <GET>
     * @param {string} siren 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSirenInfo(siren: string, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'siren' is not null or undefined
      if (siren === null || siren === undefined) {
        throw new RequiredError(
          'siren',
          'Required parameter siren was null or undefined when calling getSirenInfo.'
        )
      }
      const pathname = `/sirene/siren/{siren}`.replace(
        `{${'siren'}}`,
        encodeURIComponent(String(siren))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_siret_info <GET>
     * @param {string} siret 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSiretInfo(siret: string, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'siret' is not null or undefined
      if (siret === null || siret === undefined) {
        throw new RequiredError(
          'siret',
          'Required parameter siret was null or undefined when calling getSiretInfo.'
        )
      }
      const pathname = `/sirene/siret/{siret}`.replace(
        `{${'siret'}}`,
        encodeURIComponent(String(siret))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_stocks <GET>
     * @param {number} offer_id 
     * @param {string} [date] 
     * @param {string} [time] 
     * @param {number} [price_category_id] 
     * @param {OrderBy} [order_by] 
     * @param {boolean} [order_by_desc] 
     * @param {number} [page] 
     * @param {number} [stocks_limit_per_page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStocks(offer_id: number, date?: string, time?: string, price_category_id?: number, order_by?: OrderBy, order_by_desc?: boolean, page?: number, stocks_limit_per_page?: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling getStocks.'
        )
      }
      const pathname = `/offers/{offer_id}/stocks/`.concat(`?date=${ date }`).concat(`?time=${ time }`).concat(`?price_category_id=${ price_category_id }`).concat(`?order_by=${ order_by }`).concat(`?order_by_desc=${ order_by_desc }`).concat(`?page=${ page }`).concat(`?stocks_limit_per_page=${ stocks_limit_per_page }`).replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_stocks_stats <GET>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStocksStats(offer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling getStocksStats.'
        )
      }
      const pathname = `/offers/{offer_id}/stocks-stats`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_user_email_pending_validation <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserEmailPendingValidation(options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/email_pending_validation`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_user_has_bookings <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserHasBookings(options: any = {}): Promise<FetchArgs> {
      const pathname = `/bookings/pro/userHasBookings`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_user_has_collective_bookings <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserHasCollectiveBookings(options: any = {}): Promise<FetchArgs> {
      const pathname = `/collective/bookings/pro/userHasBookings`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_venue <GET>
     * @param {number} venue_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenue(venue_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'venue_id' is not null or undefined
      if (venue_id === null || venue_id === undefined) {
        throw new RequiredError(
          'venue_id',
          'Required parameter venue_id was null or undefined when calling getVenue.'
        )
      }
      const pathname = `/venues/{venue_id}`.replace(
        `{${'venue_id'}}`,
        encodeURIComponent(String(venue_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_venue_stats <GET>
     * @param {number} venue_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenueStats(venue_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'venue_id' is not null or undefined
      if (venue_id === null || venue_id === undefined) {
        throw new RequiredError(
          'venue_id',
          'Required parameter venue_id was null or undefined when calling getVenueStats.'
        )
      }
      const pathname = `/venues/{venue_id}/stats`.replace(
        `{${'venue_id'}}`,
        encodeURIComponent(String(venue_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_venue_stats_dashboard_url <GET>
     * @param {number} venue_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenueStatsDashboardUrl(venue_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'venue_id' is not null or undefined
      if (venue_id === null || venue_id === undefined) {
        throw new RequiredError(
          'venue_id',
          'Required parameter venue_id was null or undefined when calling getVenueStatsDashboardUrl.'
        )
      }
      const pathname = `/venues/{venue_id}/dashboard`.replace(
        `{${'venue_id'}}`,
        encodeURIComponent(String(venue_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_venue_types <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenueTypes(options: any = {}): Promise<FetchArgs> {
      const pathname = `/venue-types`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_venues <GET>
     * @param {boolean} [validated] 
     * @param {boolean} [activeOfferersOnly] 
     * @param {number} [offererId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenues(validated?: boolean, activeOfferersOnly?: boolean, offererId?: number, options: any = {}): Promise<FetchArgs> {
      const pathname = `/venues`.concat(`?validated=${ validated }`).concat(`?activeOfferersOnly=${ activeOfferersOnly }`).concat(`?offererId=${ offererId }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_venues_educational_statuses <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenuesEducationalStatuses(options: any = {}): Promise<FetchArgs> {
      const pathname = `/venues-educational-statuses`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary get_venues_of_offerer_from_siret <GET>
     * @param {string} siret 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenuesOfOffererFromSiret(siret: string, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'siret' is not null or undefined
      if (siret === null || siret === undefined) {
        throw new RequiredError(
          'siret',
          'Required parameter siret was null or undefined when calling getVenuesOfOffererFromSiret.'
        )
      }
      const pathname = `/venues/siret/{siret}`.replace(
        `{${'siret'}}`,
        encodeURIComponent(String(siret))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary has_invoice <GET>
     * @param {number} offererId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hasInvoice(offererId: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offererId' is not null or undefined
      if (offererId === null || offererId === undefined) {
        throw new RequiredError(
          'offererId',
          'Required parameter offererId was null or undefined when calling hasInvoice.'
        )
      }
      const pathname = `/v2/finance/has-invoice`.concat(`?offererId=${ offererId }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary invite_member <POST>
     * @param {number} offerer_id 
     * @param {InviteMemberQueryModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async inviteMember(offerer_id: number, body?: InviteMemberQueryModel, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offerer_id' is not null or undefined
      if (offerer_id === null || offerer_id === undefined) {
        throw new RequiredError(
          'offerer_id',
          'Required parameter offerer_id was null or undefined when calling inviteMember.'
        )
      }
      const pathname = `/offerers/{offerer_id}/invite`.replace(
        `{${'offerer_id'}}`,
        encodeURIComponent(String(offerer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"InviteMemberQueryModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary link_venue_to_bank_account <PATCH>
     * @param {number} offerer_id 
     * @param {number} bank_account_id 
     * @param {LinkVenueToBankAccountBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async linkVenueToBankAccount(offerer_id: number, bank_account_id: number, body?: LinkVenueToBankAccountBodyModel, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offerer_id' is not null or undefined
      if (offerer_id === null || offerer_id === undefined) {
        throw new RequiredError(
          'offerer_id',
          'Required parameter offerer_id was null or undefined when calling linkVenueToBankAccount.'
        )
      }
      // verify required parameter 'bank_account_id' is not null or undefined
      if (bank_account_id === null || bank_account_id === undefined) {
        throw new RequiredError(
          'bank_account_id',
          'Required parameter bank_account_id was null or undefined when calling linkVenueToBankAccount.'
        )
      }
      const pathname = `/offerers/{offerer_id}/bank-accounts/{bank_account_id}`.replace(
        `{${'offerer_id'}}`,
        encodeURIComponent(String(offerer_id))
      ).replace(
        `{${'bank_account_id'}}`,
        encodeURIComponent(String(bank_account_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"LinkVenueToBankAccountBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary link_venue_to_pricing_point <POST>
     * @param {number} venue_id 
     * @param {LinkVenueToPricingPointBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async linkVenueToPricingPoint(venue_id: number, body?: LinkVenueToPricingPointBodyModel, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'venue_id' is not null or undefined
      if (venue_id === null || venue_id === undefined) {
        throw new RequiredError(
          'venue_id',
          'Required parameter venue_id was null or undefined when calling linkVenueToPricingPoint.'
        )
      }
      const pathname = `/venues/{venue_id}/pricing-point`.replace(
        `{${'venue_id'}}`,
        encodeURIComponent(String(venue_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"LinkVenueToPricingPointBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary list_educational_domains <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listEducationalDomains(options: any = {}): Promise<FetchArgs> {
      const pathname = `/collective/educational-domains`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary list_educational_offerers <GET>
     * @param {number} [offerer_id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listEducationalOfferers(offerer_id?: number, options: any = {}): Promise<FetchArgs> {
      const pathname = `/offerers/educational`.concat(`?offerer_id=${ offerer_id }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary list_features <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listFeatures(options: any = {}): Promise<FetchArgs> {
      const pathname = `/features`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary list_offerers_names <GET>
     * @param {boolean} [validated] 
     * @param {boolean} [validated_for_user] 
     * @param {number} [offerer_id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOfferersNames(validated?: boolean, validated_for_user?: boolean, offerer_id?: number, options: any = {}): Promise<FetchArgs> {
      const pathname = `/offerers/names`.concat(`?validated=${ validated }`).concat(`?validated_for_user=${ validated_for_user }`).concat(`?offerer_id=${ offerer_id }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary list_offers <GET>
     * @param {string} [nameOrIsbn] 
     * @param {number} [offererId] 
     * @param {Status} [status] 
     * @param {number} [venueId] 
     * @param {string} [categoryId] 
     * @param {string} [creationMode] 
     * @param {string} [periodBeginningDate] 
     * @param {string} [periodEndingDate] 
     * @param {CollectiveOfferType1} [collectiveOfferType] 
     * @param {number} [offererAddressId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOffers(nameOrIsbn?: string, offererId?: number, status?: Status, venueId?: number, categoryId?: string, creationMode?: string, periodBeginningDate?: string, periodEndingDate?: string, collectiveOfferType?: CollectiveOfferType1, offererAddressId?: number, options: any = {}): Promise<FetchArgs> {
      const pathname = `/offers`.concat(`?nameOrIsbn=${ nameOrIsbn }`).concat(`?offererId=${ offererId }`).concat(`?status=${ status }`).concat(`?venueId=${ venueId }`).concat(`?categoryId=${ categoryId }`).concat(`?creationMode=${ creationMode }`).concat(`?periodBeginningDate=${ periodBeginningDate }`).concat(`?periodEndingDate=${ periodEndingDate }`).concat(`?collectiveOfferType=${ collectiveOfferType }`).concat(`?offererAddressId=${ offererAddressId }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary list_venue_providers <GET>
     * @param {number} venueId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listVenueProviders(venueId: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'venueId' is not null or undefined
      if (venueId === null || venueId === undefined) {
        throw new RequiredError(
          'venueId',
          'Required parameter venueId was null or undefined when calling listVenueProviders.'
        )
      }
      const pathname = `/venueProviders`.concat(`?venueId=${ venueId }`)
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_all_collective_offers_active_status <PATCH>
     * @param {PatchAllCollectiveOffersActiveStatusBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchAllCollectiveOffersActiveStatus(body?: PatchAllCollectiveOffersActiveStatusBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/collective/offers/all-active-status`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PatchAllCollectiveOffersActiveStatusBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_all_offers_active_status <PATCH>
     * @param {PatchAllOffersActiveStatusBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchAllOffersActiveStatus(body?: PatchAllOffersActiveStatusBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/offers/all-active-status`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PatchAllOffersActiveStatusBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_collective_offer_publication <PATCH>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchCollectiveOfferPublication(offer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling patchCollectiveOfferPublication.'
        )
      }
      const pathname = `/collective/offers/{offer_id}/publish`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_collective_offer_template_publication <PATCH>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchCollectiveOfferTemplatePublication(offer_id: number, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling patchCollectiveOfferTemplatePublication.'
        )
      }
      const pathname = `/collective/offers-template/{offer_id}/publish`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_collective_offers_active_status <PATCH>
     * @param {PatchCollectiveOfferActiveStatusBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchCollectiveOffersActiveStatus(body?: PatchCollectiveOfferActiveStatusBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/collective/offers/active-status`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PatchCollectiveOfferActiveStatusBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_collective_offers_educational_institution <PATCH>
     * @param {number} offer_id 
     * @param {PatchCollectiveOfferEducationalInstitution} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchCollectiveOffersEducationalInstitution(offer_id: number, body?: PatchCollectiveOfferEducationalInstitution, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling patchCollectiveOffersEducationalInstitution.'
        )
      }
      const pathname = `/collective/offers/{offer_id}/educational_institution`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PatchCollectiveOfferEducationalInstitution" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_collective_offers_template_active_status <PATCH>
     * @param {PatchCollectiveOfferActiveStatusBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchCollectiveOffersTemplateActiveStatus(body?: PatchCollectiveOfferActiveStatusBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/collective/offers-template/active-status`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PatchCollectiveOfferActiveStatusBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_offer <PATCH>
     * @param {number} offer_id 
     * @param {PatchOfferBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchOffer(offer_id: number, body?: PatchOfferBodyModel, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling patchOffer.'
        )
      }
      const pathname = `/offers/{offer_id}`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PatchOfferBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_offerer_address <PATCH>
     * @param {number} offerer_id 
     * @param {number} offerer_address_id 
     * @param {PatchOffererAddressRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchOffererAddress(offerer_id: number, offerer_address_id: number, body?: PatchOffererAddressRequest, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offerer_id' is not null or undefined
      if (offerer_id === null || offerer_id === undefined) {
        throw new RequiredError(
          'offerer_id',
          'Required parameter offerer_id was null or undefined when calling patchOffererAddress.'
        )
      }
      // verify required parameter 'offerer_address_id' is not null or undefined
      if (offerer_address_id === null || offerer_address_id === undefined) {
        throw new RequiredError(
          'offerer_address_id',
          'Required parameter offerer_address_id was null or undefined when calling patchOffererAddress.'
        )
      }
      const pathname = `/offerers/{offerer_id}/address/{offerer_address_id}`.replace(
        `{${'offerer_id'}}`,
        encodeURIComponent(String(offerer_id))
      ).replace(
        `{${'offerer_address_id'}}`,
        encodeURIComponent(String(offerer_address_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PatchOffererAddressRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_offers_active_status <PATCH>
     * @param {PatchOfferActiveStatusBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchOffersActiveStatus(body?: PatchOfferActiveStatusBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/offers/active-status`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PatchOfferActiveStatusBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_pro_user_rgs_seen <PATCH>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchProUserRgsSeen(options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/rgs-seen`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_publish_offer <PATCH>
     * @param {PatchOfferPublishBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchPublishOffer(body?: PatchOfferPublishBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/offers/publish`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PatchOfferPublishBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_user_identity <PATCH>
     * @param {UserIdentityBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchUserIdentity(body?: UserIdentityBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/identity`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"UserIdentityBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_user_phone <PATCH>
     * @param {UserPhoneBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchUserPhone(body?: UserPhoneBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/phone`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"UserPhoneBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_user_tuto_seen <PATCH>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchUserTutoSeen(options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/tuto-seen`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary patch_validate_email <PATCH>
     * @param {ChangeProEmailBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchValidateEmail(body?: ChangeProEmailBody, options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/validate_email`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"ChangeProEmailBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary post_change_password <POST>
     * @param {ChangePasswordBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postChangePassword(body?: ChangePasswordBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/password`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"ChangePasswordBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary post_create_venue <POST>
     * @param {PostVenueBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postCreateVenue(body?: PostVenueBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/venues`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PostVenueBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary post_new_password <POST>
     * @param {NewPasswordBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postNewPassword(body?: NewPasswordBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/new-password`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"NewPasswordBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary post_new_pro_nav <POST>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postNewProNav(options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/new-pro-nav`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary post_offer <POST>
     * @param {PostOfferBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postOffer(body?: PostOfferBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/offers`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PostOfferBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary post_price_categories <POST>
     * @param {number} offer_id 
     * @param {PriceCategoryBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postPriceCategories(offer_id: number, body?: PriceCategoryBody, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'offer_id' is not null or undefined
      if (offer_id === null || offer_id === undefined) {
        throw new RequiredError(
          'offer_id',
          'Required parameter offer_id was null or undefined when calling postPriceCategories.'
        )
      }
      const pathname = `/offers/{offer_id}/price_categories`.replace(
        `{${'offer_id'}}`,
        encodeURIComponent(String(offer_id))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PriceCategoryBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary post_pro_flags <POST>
     * @param {ProFlagsQueryModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postProFlags(body?: ProFlagsQueryModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/pro_flags`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"ProFlagsQueryModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary post_user_email <POST>
     * @param {UserResetEmailBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postUserEmail(body?: UserResetEmailBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/email`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"UserResetEmailBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary reset_password <POST>
     * @param {ResetPasswordBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetPassword(body?: ResetPasswordBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/reset-password`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"ResetPasswordBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary save_new_onboarding_data <POST>
     * @param {SaveNewOnboardingDataQueryModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async saveNewOnboardingData(body?: SaveNewOnboardingDataQueryModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/offerers/new`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"SaveNewOnboardingDataQueryModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary signin <POST>
     * @param {LoginUserBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signin(body?: LoginUserBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/signin`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"LoginUserBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary signout <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signout(options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/signout`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'GET' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary signup_pro_V2 <POST>
     * @param {ProUserCreationBodyV2Model} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signupProV2(body?: ProUserCreationBodyV2Model, options: any = {}): Promise<FetchArgs> {
      const pathname = `/v2/users/signup/pro`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"ProUserCreationBodyV2Model" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary submit_new_nav_review <POST>
     * @param {SubmitReviewRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submitNewNavReview(body?: SubmitReviewRequestModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/users/log-new-nav-review`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"SubmitReviewRequestModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary update_venue_provider <PUT>
     * @param {PostVenueProviderBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateVenueProvider(body?: PostVenueProviderBody, options: any = {}): Promise<FetchArgs> {
      const pathname = `/venueProviders`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"PostVenueProviderBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary upsert_stocks <POST>
     * @param {StocksUpsertBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async upsertStocks(body?: StocksUpsertBodyModel, options: any = {}): Promise<FetchArgs> {
      const pathname = `/stocks/bulk`
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'POST' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>"StocksUpsertBodyModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "")
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
    /**
     * @summary validate_user <PATCH>
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async validateUser(token: string, options: any = {}): Promise<FetchArgs> {
      // verify required parameter 'token' is not null or undefined
      if (token === null || token === undefined) {
        throw new RequiredError(
          'token',
          'Required parameter token was null or undefined when calling validateUser.'
        )
      }
      const pathname = `/validate/user/{token}`.replace(
        `{${'token'}}`,
        encodeURIComponent(String(token))
      )
      let secureOptions = Object.assign(options, { credentials: 'omit' })
      const localVarRequestOptions = Object.assign({ method: 'PATCH' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = function(api: DefaultApi, configuration?: Configuration) {
  return {
    /**
     * 
     * @summary attach_offer_image <POST>
     * @param {number} offer_id 
     * @param {string} [credit] 
     * @param {number} [croppingRectHeight] 
     * @param {number} [croppingRectWidth] 
     * @param {number} [croppingRectX] 
     * @param {number} [croppingRectY] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachOfferImage(offer_id: number, credit?: string, croppingRectHeight?: number, croppingRectWidth?: number, croppingRectX?: number, croppingRectY?: number, options?: any): Promise<AttachImageResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).attachOfferImage(offer_id, credit, croppingRectHeight, croppingRectWidth, croppingRectX, croppingRectY, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary attach_offer_template_image <POST>
     * @param {number} offer_id 
     * @param {string} [credit] 
     * @param {number} [croppingRectHeight] 
     * @param {number} [croppingRectWidth] 
     * @param {number} [croppingRectX] 
     * @param {number} [croppingRectY] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachOfferTemplateImage(offer_id: number, credit?: string, croppingRectHeight?: number, croppingRectWidth?: number, croppingRectX?: number, croppingRectY?: number, options?: any): Promise<AttachImageResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).attachOfferTemplateImage(offer_id, credit, croppingRectHeight, croppingRectWidth, croppingRectX, croppingRectY, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary cancel_collective_offer_booking <PATCH>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cancelCollectiveOfferBooking(offer_id: number, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).cancelCollectiveOfferBooking(offer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary check_activation_token_exists <GET>
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkActivationTokenExists(token: string, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).checkActivationTokenExists(token, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary connect_as <GET>
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async connectAs(token: string, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).connectAs(token, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary cookies_consent <POST>
     * @param {CookieConsentRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cookiesConsent(body?: CookieConsentRequest, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).cookiesConsent(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary create_collective_offer <POST>
     * @param {PostCollectiveOfferBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCollectiveOffer(body?: PostCollectiveOfferBodyModel, options?: any): Promise<CollectiveOfferResponseIdModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).createCollectiveOffer(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary create_collective_offer_template <POST>
     * @param {PostCollectiveOfferTemplateBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCollectiveOfferTemplate(body?: PostCollectiveOfferTemplateBodyModel, options?: any): Promise<CollectiveOfferResponseIdModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).createCollectiveOfferTemplate(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary create_collective_offer_template_from_collective_offer <POST>
     * @param {number} offer_id 
     * @param {CollectiveOfferTemplateBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCollectiveOfferTemplateFromCollectiveOffer(offer_id: number, body?: CollectiveOfferTemplateBodyModel, options?: any): Promise<CollectiveOfferTemplateResponseIdModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).createCollectiveOfferTemplateFromCollectiveOffer(offer_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary create_collective_stock <POST>
     * @param {CollectiveStockCreationBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCollectiveStock(body?: CollectiveStockCreationBodyModel, options?: any): Promise<CollectiveStockResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).createCollectiveStock(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary create_offerer <POST>
     * @param {CreateOffererQueryModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOfferer(body?: CreateOffererQueryModel, options?: any): Promise<PostOffererResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).createOfferer(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary create_offerer_address <POST>
     * @param {number} offerer_id 
     * @param {OffererAddressRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOffererAddress(offerer_id: number, body?: OffererAddressRequestModel, options?: any): Promise<OffererAddressResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).createOffererAddress(offerer_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary create_thumbnail <POST>
     * @param {string} [credit] 
     * @param {number} [croppingRectHeight] 
     * @param {number} [croppingRectWidth] 
     * @param {number} [croppingRectX] 
     * @param {number} [croppingRectY] 
     * @param {number} [offerId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createThumbnail(credit?: string, croppingRectHeight?: number, croppingRectWidth?: number, croppingRectX?: number, croppingRectY?: number, offerId?: number, options?: any): Promise<CreateThumbnailResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).createThumbnail(credit, croppingRectHeight, croppingRectWidth, croppingRectX, croppingRectY, offerId, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary create_venue_provider <POST>
     * @param {PostVenueProviderBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createVenueProvider(body?: PostVenueProviderBody, options?: any): Promise<VenueProviderResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).createVenueProvider(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary delete_all_filtered_stocks <POST>
     * @param {number} offer_id 
     * @param {DeleteFilteredStockListBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAllFilteredStocks(offer_id: number, body?: DeleteFilteredStockListBody, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).deleteAllFilteredStocks(offer_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary delete_api_key <DELETE>
     * @param {string} api_key_prefix 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteApiKey(api_key_prefix: string, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).deleteApiKey(api_key_prefix, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary delete_draft_offers <POST>
     * @param {DeleteOfferRequestBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDraftOffers(body?: DeleteOfferRequestBody, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).deleteDraftOffers(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary delete_offer_image <DELETE>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOfferImage(offer_id: number, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).deleteOfferImage(offer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary delete_offer_template_image <DELETE>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOfferTemplateImage(offer_id: number, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).deleteOfferTemplateImage(offer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary delete_price_category <DELETE>
     * @param {number} offer_id 
     * @param {number} price_category_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePriceCategory(offer_id: number, price_category_id: number, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).deletePriceCategory(offer_id, price_category_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary delete_stock <DELETE>
     * @param {number} stock_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteStock(stock_id: number, options?: any): Promise<StockIdResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).deleteStock(stock_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary delete_stocks <POST>
     * @param {number} offer_id 
     * @param {DeleteStockListBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteStocks(offer_id: number, body?: DeleteStockListBody, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).deleteStocks(offer_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary delete_thumbnail <DELETE>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteThumbnail(offer_id: number, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).deleteThumbnail(offer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary delete_venue_banner <DELETE>
     * @param {number} venue_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVenueBanner(venue_id: number, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).deleteVenueBanner(venue_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary delete_venue_provider <DELETE>
     * @param {number} venue_provider_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVenueProvider(venue_provider_id: number, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).deleteVenueProvider(venue_provider_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary duplicate_collective_offer <POST>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async duplicateCollectiveOffer(offer_id: number, options?: any): Promise<GetCollectiveOfferResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).duplicateCollectiveOffer(offer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary edit_collective_offer <PATCH>
     * @param {number} offer_id 
     * @param {PatchCollectiveOfferBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editCollectiveOffer(offer_id: number, body?: PatchCollectiveOfferBodyModel, options?: any): Promise<GetCollectiveOfferResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).editCollectiveOffer(offer_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary edit_collective_offer_template <PATCH>
     * @param {number} offer_id 
     * @param {PatchCollectiveOfferTemplateBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editCollectiveOfferTemplate(offer_id: number, body?: PatchCollectiveOfferTemplateBodyModel, options?: any): Promise<GetCollectiveOfferTemplateResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).editCollectiveOfferTemplate(offer_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary edit_collective_stock <PATCH>
     * @param {number} collective_stock_id 
     * @param {CollectiveStockEditionBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editCollectiveStock(collective_stock_id: number, body?: CollectiveStockEditionBodyModel, options?: any): Promise<CollectiveStockResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).editCollectiveStock(collective_stock_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary edit_venue <PATCH>
     * @param {number} venue_id 
     * @param {EditVenueBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editVenue(venue_id: number, body?: EditVenueBodyModel, options?: any): Promise<GetVenueResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).editVenue(venue_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary edit_venue_collective_data <PATCH>
     * @param {number} venue_id 
     * @param {EditVenueCollectiveDataBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editVenueCollectiveData(venue_id: number, body?: EditVenueCollectiveDataBodyModel, options?: any): Promise<GetVenueResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).editVenueCollectiveData(venue_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary export_bookings_for_offer_as_csv <GET>
     * @param {number} offer_id 
     * @param {BookingsExportStatusFilter} status 
     * @param {string} event_date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exportBookingsForOfferAsCsv(offer_id: number, status: BookingsExportStatusFilter, event_date: string, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).exportBookingsForOfferAsCsv(offer_id, status, event_date, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary export_bookings_for_offer_as_excel <GET>
     * @param {number} offer_id 
     * @param {BookingsExportStatusFilter} status 
     * @param {string} event_date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exportBookingsForOfferAsExcel(offer_id: number, status: BookingsExportStatusFilter, event_date: string, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).exportBookingsForOfferAsExcel(offer_id, status, event_date, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary fetch_venue_labels <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchVenueLabels(options?: any): Promise<VenueLabelListResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).fetchVenueLabels(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary generate_api_key_route <POST>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async generateApiKeyRoute(offerer_id: number, options?: any): Promise<GenerateOffererApiKeyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).generateApiKeyRoute(offerer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_autocomplete_educational_redactors_for_uai <GET>
     * @param {string} uai 
     * @param {string} candidate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAutocompleteEducationalRedactorsForUai(uai: string, candidate: string, options?: any): Promise<EducationalRedactors> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getAutocompleteEducationalRedactorsForUai(uai, candidate, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_bank_accounts <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBankAccounts(options?: any): Promise<FinanceBankAccountListResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getBankAccounts(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_bookings_csv <GET>
     * @param {number} [page] 
     * @param {number} [venueId] 
     * @param {number} [offerId] 
     * @param {string} [eventDate] 
     * @param {BookingStatusFilter} [bookingStatusFilter] 
     * @param {string} [bookingPeriodBeginningDate] 
     * @param {string} [bookingPeriodEndingDate] 
     * @param {OfferType} [offerType] 
     * @param {ExportType} [exportType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBookingsCsv(page?: number, venueId?: number, offerId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, offerType?: OfferType, exportType?: ExportType, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getBookingsCsv(page, venueId, offerId, eventDate, bookingStatusFilter, bookingPeriodBeginningDate, bookingPeriodEndingDate, offerType, exportType, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_bookings_excel <GET>
     * @param {number} [page] 
     * @param {number} [venueId] 
     * @param {number} [offerId] 
     * @param {string} [eventDate] 
     * @param {BookingStatusFilter1} [bookingStatusFilter] 
     * @param {string} [bookingPeriodBeginningDate] 
     * @param {string} [bookingPeriodEndingDate] 
     * @param {OfferType1} [offerType] 
     * @param {ExportType1} [exportType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBookingsExcel(page?: number, venueId?: number, offerId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter1, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, offerType?: OfferType1, exportType?: ExportType1, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getBookingsExcel(page, venueId, offerId, eventDate, bookingStatusFilter, bookingPeriodBeginningDate, bookingPeriodEndingDate, offerType, exportType, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_bookings_pro <GET>
     * @param {number} [page] 
     * @param {number} [venueId] 
     * @param {number} [offerId] 
     * @param {string} [eventDate] 
     * @param {BookingStatusFilter2} [bookingStatusFilter] 
     * @param {string} [bookingPeriodBeginningDate] 
     * @param {string} [bookingPeriodEndingDate] 
     * @param {OfferType2} [offerType] 
     * @param {ExportType2} [exportType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBookingsPro(page?: number, venueId?: number, offerId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter2, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, offerType?: OfferType2, exportType?: ExportType2, options?: any): Promise<ListBookingsResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getBookingsPro(page, venueId, offerId, eventDate, bookingStatusFilter, bookingPeriodBeginningDate, bookingPeriodEndingDate, offerType, exportType, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_categories <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCategories(options?: any): Promise<CategoriesResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getCategories(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_collective_booking_by_id <GET>
     * @param {number} booking_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveBookingById(booking_id: number, options?: any): Promise<CollectiveBookingByIdResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getCollectiveBookingById(booking_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_collective_bookings_csv <GET>
     * @param {number} [page] 
     * @param {number} [venueId] 
     * @param {string} [eventDate] 
     * @param {BookingStatusFilter3} [bookingStatusFilter] 
     * @param {string} [bookingPeriodBeginningDate] 
     * @param {string} [bookingPeriodEndingDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveBookingsCsv(page?: number, venueId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter3, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getCollectiveBookingsCsv(page, venueId, eventDate, bookingStatusFilter, bookingPeriodBeginningDate, bookingPeriodEndingDate, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_collective_bookings_excel <GET>
     * @param {number} [page] 
     * @param {number} [venueId] 
     * @param {string} [eventDate] 
     * @param {BookingStatusFilter4} [bookingStatusFilter] 
     * @param {string} [bookingPeriodBeginningDate] 
     * @param {string} [bookingPeriodEndingDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveBookingsExcel(page?: number, venueId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter4, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getCollectiveBookingsExcel(page, venueId, eventDate, bookingStatusFilter, bookingPeriodBeginningDate, bookingPeriodEndingDate, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_collective_bookings_pro <GET>
     * @param {number} [page] 
     * @param {number} [venueId] 
     * @param {string} [eventDate] 
     * @param {BookingStatusFilter5} [bookingStatusFilter] 
     * @param {string} [bookingPeriodBeginningDate] 
     * @param {string} [bookingPeriodEndingDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveBookingsPro(page?: number, venueId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter5, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, options?: any): Promise<ListCollectiveBookingsResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getCollectiveBookingsPro(page, venueId, eventDate, bookingStatusFilter, bookingPeriodBeginningDate, bookingPeriodEndingDate, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_collective_offer <GET>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveOffer(offer_id: number, options?: any): Promise<GetCollectiveOfferResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getCollectiveOffer(offer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_collective_offer_request <GET>
     * @param {number} request_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveOfferRequest(request_id: number, options?: any): Promise<GetCollectiveOfferRequestResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getCollectiveOfferRequest(request_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_collective_offer_template <GET>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveOfferTemplate(offer_id: number, options?: any): Promise<GetCollectiveOfferTemplateResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getCollectiveOfferTemplate(offer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_collective_offers <GET>
     * @param {string} [nameOrIsbn] 
     * @param {number} [offererId] 
     * @param {Status} [status] 
     * @param {number} [venueId] 
     * @param {string} [categoryId] 
     * @param {string} [creationMode] 
     * @param {string} [periodBeginningDate] 
     * @param {string} [periodEndingDate] 
     * @param {CollectiveOfferType} [collectiveOfferType] 
     * @param {Format} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectiveOffers(nameOrIsbn?: string, offererId?: number, status?: Status, venueId?: number, categoryId?: string, creationMode?: string, periodBeginningDate?: string, periodEndingDate?: string, collectiveOfferType?: CollectiveOfferType, format?: Format, options?: any): Promise<ListCollectiveOffersResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getCollectiveOffers(nameOrIsbn, offererId, status, venueId, categoryId, creationMode, periodBeginningDate, periodEndingDate, collectiveOfferType, format, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_combined_invoices <GET>
     * @param {Array<string>} invoiceReferences 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCombinedInvoices(invoiceReferences: Array<string>, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getCombinedInvoices(invoiceReferences, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_educational_institutions <GET>
     * @param {number} [perPageLimit] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEducationalInstitutions(perPageLimit?: number, page?: number, options?: any): Promise<EducationalInstitutionsResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getEducationalInstitutions(perPageLimit, page, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_educational_partners <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEducationalPartners(options?: any): Promise<AdageCulturalPartnersResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getEducationalPartners(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_invoices_v2 <GET>
     * @param {string} [periodBeginningDate] 
     * @param {string} [periodEndingDate] 
     * @param {number} [bankAccountId] 
     * @param {number} [offererId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInvoicesV2(periodBeginningDate?: string, periodEndingDate?: string, bankAccountId?: number, offererId?: number, options?: any): Promise<InvoiceListV2ResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getInvoicesV2(periodBeginningDate, periodEndingDate, bankAccountId, offererId, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_music_types <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMusicTypes(options?: any): Promise<GetMusicTypesResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getMusicTypes(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_national_programs <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNationalPrograms(options?: any): Promise<ListNationalProgramsResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getNationalPrograms(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_offer <GET>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffer(offer_id: number, options?: any): Promise<GetIndividualOfferResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getOffer(offer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_offer_price_categories_and_schedules_by_dates <GET>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOfferPriceCategoriesAndSchedulesByDates(offer_id: number, options?: any): Promise<EventDatesInfos> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getOfferPriceCategoriesAndSchedulesByDates(offer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_offerer <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOfferer(offerer_id: number, options?: any): Promise<GetOffererResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getOfferer(offerer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_offerer_addresses <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffererAddresses(offerer_id: number, options?: any): Promise<GetOffererAddressesResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getOffererAddresses(offerer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_offerer_bank_accounts_and_attached_venues <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffererBankAccountsAndAttachedVenues(offerer_id: number, options?: any): Promise<GetOffererBankAccountsResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getOffererBankAccountsAndAttachedVenues(offerer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_offerer_members <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffererMembers(offerer_id: number, options?: any): Promise<GetOffererMembersResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getOffererMembers(offerer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_offerer_stats <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffererStats(offerer_id: number, options?: any): Promise<GetOffererStatsResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getOffererStats(offerer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_offerer_stats_dashboard_url <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffererStatsDashboardUrl(offerer_id: number, options?: any): Promise<OffererStatsResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getOffererStatsDashboardUrl(offerer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_offerer_v2_stats <GET>
     * @param {number} offerer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOffererV2Stats(offerer_id: number, options?: any): Promise<GetOffererV2StatsResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getOffererV2Stats(offerer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_profile <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProfile(options?: any): Promise<SharedCurrentUserResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getProfile(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_providers_by_venue <GET>
     * @param {number} venue_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProvidersByVenue(venue_id: number, options?: any): Promise<ListProviderResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getProvidersByVenue(venue_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_reimbursements_csv <GET>
     * @param {number} [bankAccountId] 
     * @param {string} [reimbursementPeriodBeginningDate] 
     * @param {Date} [reimbursementPeriodEndingDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getReimbursementsCsv(bankAccountId?: number, reimbursementPeriodBeginningDate?: string, reimbursementPeriodEndingDate?: Date, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getReimbursementsCsv(bankAccountId, reimbursementPeriodBeginningDate, reimbursementPeriodEndingDate, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_siren_info <GET>
     * @param {string} siren 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSirenInfo(siren: string, options?: any): Promise<SirenInfo> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getSirenInfo(siren, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_siret_info <GET>
     * @param {string} siret 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSiretInfo(siret: string, options?: any): Promise<SiretInfo> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getSiretInfo(siret, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_stocks <GET>
     * @param {number} offer_id 
     * @param {string} [date] 
     * @param {string} [time] 
     * @param {number} [price_category_id] 
     * @param {OrderBy} [order_by] 
     * @param {boolean} [order_by_desc] 
     * @param {number} [page] 
     * @param {number} [stocks_limit_per_page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStocks(offer_id: number, date?: string, time?: string, price_category_id?: number, order_by?: OrderBy, order_by_desc?: boolean, page?: number, stocks_limit_per_page?: number, options?: any): Promise<GetStocksResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getStocks(offer_id, date, time, price_category_id, order_by, order_by_desc, page, stocks_limit_per_page, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_stocks_stats <GET>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStocksStats(offer_id: number, options?: any): Promise<StockStatsResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getStocksStats(offer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_user_email_pending_validation <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserEmailPendingValidation(options?: any): Promise<UserEmailValidationResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getUserEmailPendingValidation(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_user_has_bookings <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserHasBookings(options?: any): Promise<UserHasBookingResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getUserHasBookings(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_user_has_collective_bookings <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserHasCollectiveBookings(options?: any): Promise<UserHasBookingResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getUserHasCollectiveBookings(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_venue <GET>
     * @param {number} venue_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenue(venue_id: number, options?: any): Promise<GetVenueResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getVenue(venue_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_venue_stats <GET>
     * @param {number} venue_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenueStats(venue_id: number, options?: any): Promise<VenueStatsResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getVenueStats(venue_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_venue_stats_dashboard_url <GET>
     * @param {number} venue_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenueStatsDashboardUrl(venue_id: number, options?: any): Promise<OffererStatsResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getVenueStatsDashboardUrl(venue_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_venue_types <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenueTypes(options?: any): Promise<VenueTypeListResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getVenueTypes(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_venues <GET>
     * @param {boolean} [validated] 
     * @param {boolean} [activeOfferersOnly] 
     * @param {number} [offererId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenues(validated?: boolean, activeOfferersOnly?: boolean, offererId?: number, options?: any): Promise<GetVenueListResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getVenues(validated, activeOfferersOnly, offererId, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_venues_educational_statuses <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenuesEducationalStatuses(options?: any): Promise<VenuesEducationalStatusesResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getVenuesEducationalStatuses(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary get_venues_of_offerer_from_siret <GET>
     * @param {string} siret 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVenuesOfOffererFromSiret(siret: string, options?: any): Promise<GetVenuesOfOffererFromSiretResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getVenuesOfOffererFromSiret(siret, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary has_invoice <GET>
     * @param {number} offererId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hasInvoice(offererId: number, options?: any): Promise<HasInvoiceResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).hasInvoice(offererId, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary invite_member <POST>
     * @param {number} offerer_id 
     * @param {InviteMemberQueryModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async inviteMember(offerer_id: number, body?: InviteMemberQueryModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).inviteMember(offerer_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary link_venue_to_bank_account <PATCH>
     * @param {number} offerer_id 
     * @param {number} bank_account_id 
     * @param {LinkVenueToBankAccountBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async linkVenueToBankAccount(offerer_id: number, bank_account_id: number, body?: LinkVenueToBankAccountBodyModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).linkVenueToBankAccount(offerer_id, bank_account_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary link_venue_to_pricing_point <POST>
     * @param {number} venue_id 
     * @param {LinkVenueToPricingPointBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async linkVenueToPricingPoint(venue_id: number, body?: LinkVenueToPricingPointBodyModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).linkVenueToPricingPoint(venue_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary list_educational_domains <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listEducationalDomains(options?: any): Promise<EducationalDomainsResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).listEducationalDomains(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary list_educational_offerers <GET>
     * @param {number} [offerer_id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listEducationalOfferers(offerer_id?: number, options?: any): Promise<GetEducationalOfferersResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).listEducationalOfferers(offerer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary list_features <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listFeatures(options?: any): Promise<ListFeatureResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).listFeatures(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary list_offerers_names <GET>
     * @param {boolean} [validated] 
     * @param {boolean} [validated_for_user] 
     * @param {number} [offerer_id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOfferersNames(validated?: boolean, validated_for_user?: boolean, offerer_id?: number, options?: any): Promise<GetOfferersNamesResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).listOfferersNames(validated, validated_for_user, offerer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary list_offers <GET>
     * @param {string} [nameOrIsbn] 
     * @param {number} [offererId] 
     * @param {Status} [status] 
     * @param {number} [venueId] 
     * @param {string} [categoryId] 
     * @param {string} [creationMode] 
     * @param {string} [periodBeginningDate] 
     * @param {string} [periodEndingDate] 
     * @param {CollectiveOfferType1} [collectiveOfferType] 
     * @param {number} [offererAddressId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOffers(nameOrIsbn?: string, offererId?: number, status?: Status, venueId?: number, categoryId?: string, creationMode?: string, periodBeginningDate?: string, periodEndingDate?: string, collectiveOfferType?: CollectiveOfferType1, offererAddressId?: number, options?: any): Promise<ListOffersResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).listOffers(nameOrIsbn, offererId, status, venueId, categoryId, creationMode, periodBeginningDate, periodEndingDate, collectiveOfferType, offererAddressId, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary list_venue_providers <GET>
     * @param {number} venueId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listVenueProviders(venueId: number, options?: any): Promise<ListVenueProviderResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).listVenueProviders(venueId, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_all_collective_offers_active_status <PATCH>
     * @param {PatchAllCollectiveOffersActiveStatusBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchAllCollectiveOffersActiveStatus(body?: PatchAllCollectiveOffersActiveStatusBodyModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchAllCollectiveOffersActiveStatus(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_all_offers_active_status <PATCH>
     * @param {PatchAllOffersActiveStatusBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchAllOffersActiveStatus(body?: PatchAllOffersActiveStatusBodyModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchAllOffersActiveStatus(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_collective_offer_publication <PATCH>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchCollectiveOfferPublication(offer_id: number, options?: any): Promise<GetCollectiveOfferResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchCollectiveOfferPublication(offer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_collective_offer_template_publication <PATCH>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchCollectiveOfferTemplatePublication(offer_id: number, options?: any): Promise<GetCollectiveOfferTemplateResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchCollectiveOfferTemplatePublication(offer_id, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_collective_offers_active_status <PATCH>
     * @param {PatchCollectiveOfferActiveStatusBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchCollectiveOffersActiveStatus(body?: PatchCollectiveOfferActiveStatusBodyModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchCollectiveOffersActiveStatus(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_collective_offers_educational_institution <PATCH>
     * @param {number} offer_id 
     * @param {PatchCollectiveOfferEducationalInstitution} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchCollectiveOffersEducationalInstitution(offer_id: number, body?: PatchCollectiveOfferEducationalInstitution, options?: any): Promise<GetCollectiveOfferResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchCollectiveOffersEducationalInstitution(offer_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_collective_offers_template_active_status <PATCH>
     * @param {PatchCollectiveOfferActiveStatusBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchCollectiveOffersTemplateActiveStatus(body?: PatchCollectiveOfferActiveStatusBodyModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchCollectiveOffersTemplateActiveStatus(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_offer <PATCH>
     * @param {number} offer_id 
     * @param {PatchOfferBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchOffer(offer_id: number, body?: PatchOfferBodyModel, options?: any): Promise<GetIndividualOfferResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchOffer(offer_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_offerer_address <PATCH>
     * @param {number} offerer_id 
     * @param {number} offerer_address_id 
     * @param {PatchOffererAddressRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchOffererAddress(offerer_id: number, offerer_address_id: number, body?: PatchOffererAddressRequest, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchOffererAddress(offerer_id, offerer_address_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_offers_active_status <PATCH>
     * @param {PatchOfferActiveStatusBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchOffersActiveStatus(body?: PatchOfferActiveStatusBodyModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchOffersActiveStatus(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_pro_user_rgs_seen <PATCH>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchProUserRgsSeen(options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchProUserRgsSeen(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_publish_offer <PATCH>
     * @param {PatchOfferPublishBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchPublishOffer(body?: PatchOfferPublishBodyModel, options?: any): Promise<GetIndividualOfferResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchPublishOffer(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_user_identity <PATCH>
     * @param {UserIdentityBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchUserIdentity(body?: UserIdentityBodyModel, options?: any): Promise<UserIdentityResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchUserIdentity(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_user_phone <PATCH>
     * @param {UserPhoneBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchUserPhone(body?: UserPhoneBodyModel, options?: any): Promise<UserPhoneResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchUserPhone(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_user_tuto_seen <PATCH>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchUserTutoSeen(options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchUserTutoSeen(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary patch_validate_email <PATCH>
     * @param {ChangeProEmailBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchValidateEmail(body?: ChangeProEmailBody, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).patchValidateEmail(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary post_change_password <POST>
     * @param {ChangePasswordBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postChangePassword(body?: ChangePasswordBodyModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postChangePassword(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary post_create_venue <POST>
     * @param {PostVenueBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postCreateVenue(body?: PostVenueBodyModel, options?: any): Promise<VenueResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postCreateVenue(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary post_new_password <POST>
     * @param {NewPasswordBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postNewPassword(body?: NewPasswordBodyModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postNewPassword(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary post_new_pro_nav <POST>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postNewProNav(options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postNewProNav(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary post_offer <POST>
     * @param {PostOfferBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postOffer(body?: PostOfferBodyModel, options?: any): Promise<GetIndividualOfferResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postOffer(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary post_price_categories <POST>
     * @param {number} offer_id 
     * @param {PriceCategoryBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postPriceCategories(offer_id: number, body?: PriceCategoryBody, options?: any): Promise<GetIndividualOfferResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postPriceCategories(offer_id, body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary post_pro_flags <POST>
     * @param {ProFlagsQueryModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postProFlags(body?: ProFlagsQueryModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postProFlags(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary post_user_email <POST>
     * @param {UserResetEmailBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postUserEmail(body?: UserResetEmailBodyModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postUserEmail(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary reset_password <POST>
     * @param {ResetPasswordBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetPassword(body?: ResetPasswordBodyModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).resetPassword(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary save_new_onboarding_data <POST>
     * @param {SaveNewOnboardingDataQueryModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async saveNewOnboardingData(body?: SaveNewOnboardingDataQueryModel, options?: any): Promise<PostOffererResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).saveNewOnboardingData(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary signin <POST>
     * @param {LoginUserBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signin(body?: LoginUserBodyModel, options?: any): Promise<SharedLoginUserResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).signin(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary signout <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signout(options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).signout(options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary signup_pro_V2 <POST>
     * @param {ProUserCreationBodyV2Model} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signupProV2(body?: ProUserCreationBodyV2Model, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).signupProV2(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary submit_new_nav_review <POST>
     * @param {SubmitReviewRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submitNewNavReview(body?: SubmitReviewRequestModel, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).submitNewNavReview(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary update_venue_provider <PUT>
     * @param {PostVenueProviderBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateVenueProvider(body?: PostVenueProviderBody, options?: any): Promise<VenueProviderResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).updateVenueProvider(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary upsert_stocks <POST>
     * @param {StocksUpsertBodyModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async upsertStocks(body?: StocksUpsertBodyModel, options?: any): Promise<StocksResponseModel> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).upsertStocks(body, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
    /**
     * 
     * @summary validate_user <PATCH>
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async validateUser(token: string, options?: any): Promise<EmptyResponse> {
      const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).validateUser(token, options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
    * 
    * @summary attach_offer_image <POST>
    * @param {number} offer_id 
    * @param {string} [credit] 
    * @param {number} [croppingRectHeight] 
    * @param {number} [croppingRectWidth] 
    * @param {number} [croppingRectX] 
    * @param {number} [croppingRectY] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async attachOfferImage(offer_id: number, credit?: string, croppingRectHeight?: number, croppingRectWidth?: number, croppingRectX?: number, croppingRectY?: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).attachOfferImage(offer_id, credit, croppingRectHeight, croppingRectWidth, croppingRectX, croppingRectY, options)
  }
  /**
    * 
    * @summary attach_offer_template_image <POST>
    * @param {number} offer_id 
    * @param {string} [credit] 
    * @param {number} [croppingRectHeight] 
    * @param {number} [croppingRectWidth] 
    * @param {number} [croppingRectX] 
    * @param {number} [croppingRectY] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async attachOfferTemplateImage(offer_id: number, credit?: string, croppingRectHeight?: number, croppingRectWidth?: number, croppingRectX?: number, croppingRectY?: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).attachOfferTemplateImage(offer_id, credit, croppingRectHeight, croppingRectWidth, croppingRectX, croppingRectY, options)
  }
  /**
    * 
    * @summary cancel_collective_offer_booking <PATCH>
    * @param {number} offer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async cancelCollectiveOfferBooking(offer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).cancelCollectiveOfferBooking(offer_id, options)
  }
  /**
    * 
    * @summary check_activation_token_exists <GET>
    * @param {string} token 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async checkActivationTokenExists(token: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).checkActivationTokenExists(token, options)
  }
  /**
    * 
    * @summary connect_as <GET>
    * @param {string} token 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async connectAs(token: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).connectAs(token, options)
  }
  /**
    * 
    * @summary cookies_consent <POST>
    * @param {CookieConsentRequest} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async cookiesConsent(body?: CookieConsentRequest, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).cookiesConsent(body, options)
  }
  /**
    * 
    * @summary create_collective_offer <POST>
    * @param {PostCollectiveOfferBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async createCollectiveOffer(body?: PostCollectiveOfferBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).createCollectiveOffer(body, options)
  }
  /**
    * 
    * @summary create_collective_offer_template <POST>
    * @param {PostCollectiveOfferTemplateBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async createCollectiveOfferTemplate(body?: PostCollectiveOfferTemplateBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).createCollectiveOfferTemplate(body, options)
  }
  /**
    * 
    * @summary create_collective_offer_template_from_collective_offer <POST>
    * @param {number} offer_id 
    * @param {CollectiveOfferTemplateBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async createCollectiveOfferTemplateFromCollectiveOffer(offer_id: number, body?: CollectiveOfferTemplateBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).createCollectiveOfferTemplateFromCollectiveOffer(offer_id, body, options)
  }
  /**
    * 
    * @summary create_collective_stock <POST>
    * @param {CollectiveStockCreationBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async createCollectiveStock(body?: CollectiveStockCreationBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).createCollectiveStock(body, options)
  }
  /**
    * 
    * @summary create_offerer <POST>
    * @param {CreateOffererQueryModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async createOfferer(body?: CreateOffererQueryModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).createOfferer(body, options)
  }
  /**
    * 
    * @summary create_offerer_address <POST>
    * @param {number} offerer_id 
    * @param {OffererAddressRequestModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async createOffererAddress(offerer_id: number, body?: OffererAddressRequestModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).createOffererAddress(offerer_id, body, options)
  }
  /**
    * 
    * @summary create_thumbnail <POST>
    * @param {string} [credit] 
    * @param {number} [croppingRectHeight] 
    * @param {number} [croppingRectWidth] 
    * @param {number} [croppingRectX] 
    * @param {number} [croppingRectY] 
    * @param {number} [offerId] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async createThumbnail(credit?: string, croppingRectHeight?: number, croppingRectWidth?: number, croppingRectX?: number, croppingRectY?: number, offerId?: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).createThumbnail(credit, croppingRectHeight, croppingRectWidth, croppingRectX, croppingRectY, offerId, options)
  }
  /**
    * 
    * @summary create_venue_provider <POST>
    * @param {PostVenueProviderBody} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async createVenueProvider(body?: PostVenueProviderBody, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).createVenueProvider(body, options)
  }
  /**
    * 
    * @summary delete_all_filtered_stocks <POST>
    * @param {number} offer_id 
    * @param {DeleteFilteredStockListBody} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async deleteAllFilteredStocks(offer_id: number, body?: DeleteFilteredStockListBody, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).deleteAllFilteredStocks(offer_id, body, options)
  }
  /**
    * 
    * @summary delete_api_key <DELETE>
    * @param {string} api_key_prefix 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async deleteApiKey(api_key_prefix: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).deleteApiKey(api_key_prefix, options)
  }
  /**
    * 
    * @summary delete_draft_offers <POST>
    * @param {DeleteOfferRequestBody} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async deleteDraftOffers(body?: DeleteOfferRequestBody, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).deleteDraftOffers(body, options)
  }
  /**
    * 
    * @summary delete_offer_image <DELETE>
    * @param {number} offer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async deleteOfferImage(offer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).deleteOfferImage(offer_id, options)
  }
  /**
    * 
    * @summary delete_offer_template_image <DELETE>
    * @param {number} offer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async deleteOfferTemplateImage(offer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).deleteOfferTemplateImage(offer_id, options)
  }
  /**
    * 
    * @summary delete_price_category <DELETE>
    * @param {number} offer_id 
    * @param {number} price_category_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async deletePriceCategory(offer_id: number, price_category_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).deletePriceCategory(offer_id, price_category_id, options)
  }
  /**
    * 
    * @summary delete_stock <DELETE>
    * @param {number} stock_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async deleteStock(stock_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).deleteStock(stock_id, options)
  }
  /**
    * 
    * @summary delete_stocks <POST>
    * @param {number} offer_id 
    * @param {DeleteStockListBody} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async deleteStocks(offer_id: number, body?: DeleteStockListBody, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).deleteStocks(offer_id, body, options)
  }
  /**
    * 
    * @summary delete_thumbnail <DELETE>
    * @param {number} offer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async deleteThumbnail(offer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).deleteThumbnail(offer_id, options)
  }
  /**
    * 
    * @summary delete_venue_banner <DELETE>
    * @param {number} venue_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async deleteVenueBanner(venue_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).deleteVenueBanner(venue_id, options)
  }
  /**
    * 
    * @summary delete_venue_provider <DELETE>
    * @param {number} venue_provider_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async deleteVenueProvider(venue_provider_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).deleteVenueProvider(venue_provider_id, options)
  }
  /**
    * 
    * @summary duplicate_collective_offer <POST>
    * @param {number} offer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async duplicateCollectiveOffer(offer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).duplicateCollectiveOffer(offer_id, options)
  }
  /**
    * 
    * @summary edit_collective_offer <PATCH>
    * @param {number} offer_id 
    * @param {PatchCollectiveOfferBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async editCollectiveOffer(offer_id: number, body?: PatchCollectiveOfferBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).editCollectiveOffer(offer_id, body, options)
  }
  /**
    * 
    * @summary edit_collective_offer_template <PATCH>
    * @param {number} offer_id 
    * @param {PatchCollectiveOfferTemplateBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async editCollectiveOfferTemplate(offer_id: number, body?: PatchCollectiveOfferTemplateBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).editCollectiveOfferTemplate(offer_id, body, options)
  }
  /**
    * 
    * @summary edit_collective_stock <PATCH>
    * @param {number} collective_stock_id 
    * @param {CollectiveStockEditionBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async editCollectiveStock(collective_stock_id: number, body?: CollectiveStockEditionBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).editCollectiveStock(collective_stock_id, body, options)
  }
  /**
    * 
    * @summary edit_venue <PATCH>
    * @param {number} venue_id 
    * @param {EditVenueBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async editVenue(venue_id: number, body?: EditVenueBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).editVenue(venue_id, body, options)
  }
  /**
    * 
    * @summary edit_venue_collective_data <PATCH>
    * @param {number} venue_id 
    * @param {EditVenueCollectiveDataBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async editVenueCollectiveData(venue_id: number, body?: EditVenueCollectiveDataBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).editVenueCollectiveData(venue_id, body, options)
  }
  /**
    * 
    * @summary export_bookings_for_offer_as_csv <GET>
    * @param {number} offer_id 
    * @param {BookingsExportStatusFilter} status 
    * @param {string} event_date 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async exportBookingsForOfferAsCsv(offer_id: number, status: BookingsExportStatusFilter, event_date: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).exportBookingsForOfferAsCsv(offer_id, status, event_date, options)
  }
  /**
    * 
    * @summary export_bookings_for_offer_as_excel <GET>
    * @param {number} offer_id 
    * @param {BookingsExportStatusFilter} status 
    * @param {string} event_date 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async exportBookingsForOfferAsExcel(offer_id: number, status: BookingsExportStatusFilter, event_date: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).exportBookingsForOfferAsExcel(offer_id, status, event_date, options)
  }
  /**
    * 
    * @summary fetch_venue_labels <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async fetchVenueLabels(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).fetchVenueLabels(options)
  }
  /**
    * 
    * @summary generate_api_key_route <POST>
    * @param {number} offerer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async generateApiKeyRoute(offerer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).generateApiKeyRoute(offerer_id, options)
  }
  /**
    * 
    * @summary get_autocomplete_educational_redactors_for_uai <GET>
    * @param {string} uai 
    * @param {string} candidate 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getAutocompleteEducationalRedactorsForUai(uai: string, candidate: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getAutocompleteEducationalRedactorsForUai(uai, candidate, options)
  }
  /**
    * 
    * @summary get_bank_accounts <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getBankAccounts(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getBankAccounts(options)
  }
  /**
    * 
    * @summary get_bookings_csv <GET>
    * @param {number} [page] 
    * @param {number} [venueId] 
    * @param {number} [offerId] 
    * @param {string} [eventDate] 
    * @param {BookingStatusFilter} [bookingStatusFilter] 
    * @param {string} [bookingPeriodBeginningDate] 
    * @param {string} [bookingPeriodEndingDate] 
    * @param {OfferType} [offerType] 
    * @param {ExportType} [exportType] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getBookingsCsv(page?: number, venueId?: number, offerId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, offerType?: OfferType, exportType?: ExportType, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getBookingsCsv(page, venueId, offerId, eventDate, bookingStatusFilter, bookingPeriodBeginningDate, bookingPeriodEndingDate, offerType, exportType, options)
  }
  /**
    * 
    * @summary get_bookings_excel <GET>
    * @param {number} [page] 
    * @param {number} [venueId] 
    * @param {number} [offerId] 
    * @param {string} [eventDate] 
    * @param {BookingStatusFilter1} [bookingStatusFilter] 
    * @param {string} [bookingPeriodBeginningDate] 
    * @param {string} [bookingPeriodEndingDate] 
    * @param {OfferType1} [offerType] 
    * @param {ExportType1} [exportType] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getBookingsExcel(page?: number, venueId?: number, offerId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter1, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, offerType?: OfferType1, exportType?: ExportType1, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getBookingsExcel(page, venueId, offerId, eventDate, bookingStatusFilter, bookingPeriodBeginningDate, bookingPeriodEndingDate, offerType, exportType, options)
  }
  /**
    * 
    * @summary get_bookings_pro <GET>
    * @param {number} [page] 
    * @param {number} [venueId] 
    * @param {number} [offerId] 
    * @param {string} [eventDate] 
    * @param {BookingStatusFilter2} [bookingStatusFilter] 
    * @param {string} [bookingPeriodBeginningDate] 
    * @param {string} [bookingPeriodEndingDate] 
    * @param {OfferType2} [offerType] 
    * @param {ExportType2} [exportType] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getBookingsPro(page?: number, venueId?: number, offerId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter2, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, offerType?: OfferType2, exportType?: ExportType2, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getBookingsPro(page, venueId, offerId, eventDate, bookingStatusFilter, bookingPeriodBeginningDate, bookingPeriodEndingDate, offerType, exportType, options)
  }
  /**
    * 
    * @summary get_categories <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getCategories(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getCategories(options)
  }
  /**
    * 
    * @summary get_collective_booking_by_id <GET>
    * @param {number} booking_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getCollectiveBookingById(booking_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getCollectiveBookingById(booking_id, options)
  }
  /**
    * 
    * @summary get_collective_bookings_csv <GET>
    * @param {number} [page] 
    * @param {number} [venueId] 
    * @param {string} [eventDate] 
    * @param {BookingStatusFilter3} [bookingStatusFilter] 
    * @param {string} [bookingPeriodBeginningDate] 
    * @param {string} [bookingPeriodEndingDate] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getCollectiveBookingsCsv(page?: number, venueId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter3, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getCollectiveBookingsCsv(page, venueId, eventDate, bookingStatusFilter, bookingPeriodBeginningDate, bookingPeriodEndingDate, options)
  }
  /**
    * 
    * @summary get_collective_bookings_excel <GET>
    * @param {number} [page] 
    * @param {number} [venueId] 
    * @param {string} [eventDate] 
    * @param {BookingStatusFilter4} [bookingStatusFilter] 
    * @param {string} [bookingPeriodBeginningDate] 
    * @param {string} [bookingPeriodEndingDate] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getCollectiveBookingsExcel(page?: number, venueId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter4, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getCollectiveBookingsExcel(page, venueId, eventDate, bookingStatusFilter, bookingPeriodBeginningDate, bookingPeriodEndingDate, options)
  }
  /**
    * 
    * @summary get_collective_bookings_pro <GET>
    * @param {number} [page] 
    * @param {number} [venueId] 
    * @param {string} [eventDate] 
    * @param {BookingStatusFilter5} [bookingStatusFilter] 
    * @param {string} [bookingPeriodBeginningDate] 
    * @param {string} [bookingPeriodEndingDate] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getCollectiveBookingsPro(page?: number, venueId?: number, eventDate?: string, bookingStatusFilter?: BookingStatusFilter5, bookingPeriodBeginningDate?: string, bookingPeriodEndingDate?: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getCollectiveBookingsPro(page, venueId, eventDate, bookingStatusFilter, bookingPeriodBeginningDate, bookingPeriodEndingDate, options)
  }
  /**
    * 
    * @summary get_collective_offer <GET>
    * @param {number} offer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getCollectiveOffer(offer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getCollectiveOffer(offer_id, options)
  }
  /**
    * 
    * @summary get_collective_offer_request <GET>
    * @param {number} request_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getCollectiveOfferRequest(request_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getCollectiveOfferRequest(request_id, options)
  }
  /**
    * 
    * @summary get_collective_offer_template <GET>
    * @param {number} offer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getCollectiveOfferTemplate(offer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getCollectiveOfferTemplate(offer_id, options)
  }
  /**
    * 
    * @summary get_collective_offers <GET>
    * @param {string} [nameOrIsbn] 
    * @param {number} [offererId] 
    * @param {Status} [status] 
    * @param {number} [venueId] 
    * @param {string} [categoryId] 
    * @param {string} [creationMode] 
    * @param {string} [periodBeginningDate] 
    * @param {string} [periodEndingDate] 
    * @param {CollectiveOfferType} [collectiveOfferType] 
    * @param {Format} [format] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getCollectiveOffers(nameOrIsbn?: string, offererId?: number, status?: Status, venueId?: number, categoryId?: string, creationMode?: string, periodBeginningDate?: string, periodEndingDate?: string, collectiveOfferType?: CollectiveOfferType, format?: Format, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getCollectiveOffers(nameOrIsbn, offererId, status, venueId, categoryId, creationMode, periodBeginningDate, periodEndingDate, collectiveOfferType, format, options)
  }
  /**
    * 
    * @summary get_combined_invoices <GET>
    * @param {Array<string>} invoiceReferences 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getCombinedInvoices(invoiceReferences: Array<string>, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getCombinedInvoices(invoiceReferences, options)
  }
  /**
    * 
    * @summary get_educational_institutions <GET>
    * @param {number} [perPageLimit] 
    * @param {number} [page] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getEducationalInstitutions(perPageLimit?: number, page?: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getEducationalInstitutions(perPageLimit, page, options)
  }
  /**
    * 
    * @summary get_educational_partners <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getEducationalPartners(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getEducationalPartners(options)
  }
  /**
    * 
    * @summary get_invoices_v2 <GET>
    * @param {string} [periodBeginningDate] 
    * @param {string} [periodEndingDate] 
    * @param {number} [bankAccountId] 
    * @param {number} [offererId] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getInvoicesV2(periodBeginningDate?: string, periodEndingDate?: string, bankAccountId?: number, offererId?: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getInvoicesV2(periodBeginningDate, periodEndingDate, bankAccountId, offererId, options)
  }
  /**
    * 
    * @summary get_music_types <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getMusicTypes(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getMusicTypes(options)
  }
  /**
    * 
    * @summary get_national_programs <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getNationalPrograms(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getNationalPrograms(options)
  }
  /**
    * 
    * @summary get_offer <GET>
    * @param {number} offer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getOffer(offer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getOffer(offer_id, options)
  }
  /**
    * 
    * @summary get_offer_price_categories_and_schedules_by_dates <GET>
    * @param {number} offer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getOfferPriceCategoriesAndSchedulesByDates(offer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getOfferPriceCategoriesAndSchedulesByDates(offer_id, options)
  }
  /**
    * 
    * @summary get_offerer <GET>
    * @param {number} offerer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getOfferer(offerer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getOfferer(offerer_id, options)
  }
  /**
    * 
    * @summary get_offerer_addresses <GET>
    * @param {number} offerer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getOffererAddresses(offerer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getOffererAddresses(offerer_id, options)
  }
  /**
    * 
    * @summary get_offerer_bank_accounts_and_attached_venues <GET>
    * @param {number} offerer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getOffererBankAccountsAndAttachedVenues(offerer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getOffererBankAccountsAndAttachedVenues(offerer_id, options)
  }
  /**
    * 
    * @summary get_offerer_members <GET>
    * @param {number} offerer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getOffererMembers(offerer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getOffererMembers(offerer_id, options)
  }
  /**
    * 
    * @summary get_offerer_stats <GET>
    * @param {number} offerer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getOffererStats(offerer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getOffererStats(offerer_id, options)
  }
  /**
    * 
    * @summary get_offerer_stats_dashboard_url <GET>
    * @param {number} offerer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getOffererStatsDashboardUrl(offerer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getOffererStatsDashboardUrl(offerer_id, options)
  }
  /**
    * 
    * @summary get_offerer_v2_stats <GET>
    * @param {number} offerer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getOffererV2Stats(offerer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getOffererV2Stats(offerer_id, options)
  }
  /**
    * 
    * @summary get_profile <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getProfile(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getProfile(options)
  }
  /**
    * 
    * @summary get_providers_by_venue <GET>
    * @param {number} venue_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getProvidersByVenue(venue_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getProvidersByVenue(venue_id, options)
  }
  /**
    * 
    * @summary get_reimbursements_csv <GET>
    * @param {number} [bankAccountId] 
    * @param {string} [reimbursementPeriodBeginningDate] 
    * @param {Date} [reimbursementPeriodEndingDate] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getReimbursementsCsv(bankAccountId?: number, reimbursementPeriodBeginningDate?: string, reimbursementPeriodEndingDate?: Date, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getReimbursementsCsv(bankAccountId, reimbursementPeriodBeginningDate, reimbursementPeriodEndingDate, options)
  }
  /**
    * 
    * @summary get_siren_info <GET>
    * @param {string} siren 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getSirenInfo(siren: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getSirenInfo(siren, options)
  }
  /**
    * 
    * @summary get_siret_info <GET>
    * @param {string} siret 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getSiretInfo(siret: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getSiretInfo(siret, options)
  }
  /**
    * 
    * @summary get_stocks <GET>
    * @param {number} offer_id 
    * @param {string} [date] 
    * @param {string} [time] 
    * @param {number} [price_category_id] 
    * @param {OrderBy} [order_by] 
    * @param {boolean} [order_by_desc] 
    * @param {number} [page] 
    * @param {number} [stocks_limit_per_page] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getStocks(offer_id: number, date?: string, time?: string, price_category_id?: number, order_by?: OrderBy, order_by_desc?: boolean, page?: number, stocks_limit_per_page?: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getStocks(offer_id, date, time, price_category_id, order_by, order_by_desc, page, stocks_limit_per_page, options)
  }
  /**
    * 
    * @summary get_stocks_stats <GET>
    * @param {number} offer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getStocksStats(offer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getStocksStats(offer_id, options)
  }
  /**
    * 
    * @summary get_user_email_pending_validation <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getUserEmailPendingValidation(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getUserEmailPendingValidation(options)
  }
  /**
    * 
    * @summary get_user_has_bookings <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getUserHasBookings(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getUserHasBookings(options)
  }
  /**
    * 
    * @summary get_user_has_collective_bookings <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getUserHasCollectiveBookings(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getUserHasCollectiveBookings(options)
  }
  /**
    * 
    * @summary get_venue <GET>
    * @param {number} venue_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getVenue(venue_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getVenue(venue_id, options)
  }
  /**
    * 
    * @summary get_venue_stats <GET>
    * @param {number} venue_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getVenueStats(venue_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getVenueStats(venue_id, options)
  }
  /**
    * 
    * @summary get_venue_stats_dashboard_url <GET>
    * @param {number} venue_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getVenueStatsDashboardUrl(venue_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getVenueStatsDashboardUrl(venue_id, options)
  }
  /**
    * 
    * @summary get_venue_types <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getVenueTypes(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getVenueTypes(options)
  }
  /**
    * 
    * @summary get_venues <GET>
    * @param {boolean} [validated] 
    * @param {boolean} [activeOfferersOnly] 
    * @param {number} [offererId] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getVenues(validated?: boolean, activeOfferersOnly?: boolean, offererId?: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getVenues(validated, activeOfferersOnly, offererId, options)
  }
  /**
    * 
    * @summary get_venues_educational_statuses <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getVenuesEducationalStatuses(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getVenuesEducationalStatuses(options)
  }
  /**
    * 
    * @summary get_venues_of_offerer_from_siret <GET>
    * @param {string} siret 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async getVenuesOfOffererFromSiret(siret: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).getVenuesOfOffererFromSiret(siret, options)
  }
  /**
    * 
    * @summary has_invoice <GET>
    * @param {number} offererId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async hasInvoice(offererId: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).hasInvoice(offererId, options)
  }
  /**
    * 
    * @summary invite_member <POST>
    * @param {number} offerer_id 
    * @param {InviteMemberQueryModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async inviteMember(offerer_id: number, body?: InviteMemberQueryModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).inviteMember(offerer_id, body, options)
  }
  /**
    * 
    * @summary link_venue_to_bank_account <PATCH>
    * @param {number} offerer_id 
    * @param {number} bank_account_id 
    * @param {LinkVenueToBankAccountBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async linkVenueToBankAccount(offerer_id: number, bank_account_id: number, body?: LinkVenueToBankAccountBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).linkVenueToBankAccount(offerer_id, bank_account_id, body, options)
  }
  /**
    * 
    * @summary link_venue_to_pricing_point <POST>
    * @param {number} venue_id 
    * @param {LinkVenueToPricingPointBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async linkVenueToPricingPoint(venue_id: number, body?: LinkVenueToPricingPointBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).linkVenueToPricingPoint(venue_id, body, options)
  }
  /**
    * 
    * @summary list_educational_domains <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async listEducationalDomains(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).listEducationalDomains(options)
  }
  /**
    * 
    * @summary list_educational_offerers <GET>
    * @param {number} [offerer_id] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async listEducationalOfferers(offerer_id?: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).listEducationalOfferers(offerer_id, options)
  }
  /**
    * 
    * @summary list_features <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async listFeatures(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).listFeatures(options)
  }
  /**
    * 
    * @summary list_offerers_names <GET>
    * @param {boolean} [validated] 
    * @param {boolean} [validated_for_user] 
    * @param {number} [offerer_id] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async listOfferersNames(validated?: boolean, validated_for_user?: boolean, offerer_id?: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).listOfferersNames(validated, validated_for_user, offerer_id, options)
  }
  /**
    * 
    * @summary list_offers <GET>
    * @param {string} [nameOrIsbn] 
    * @param {number} [offererId] 
    * @param {Status} [status] 
    * @param {number} [venueId] 
    * @param {string} [categoryId] 
    * @param {string} [creationMode] 
    * @param {string} [periodBeginningDate] 
    * @param {string} [periodEndingDate] 
    * @param {CollectiveOfferType1} [collectiveOfferType] 
    * @param {number} [offererAddressId] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async listOffers(nameOrIsbn?: string, offererId?: number, status?: Status, venueId?: number, categoryId?: string, creationMode?: string, periodBeginningDate?: string, periodEndingDate?: string, collectiveOfferType?: CollectiveOfferType1, offererAddressId?: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).listOffers(nameOrIsbn, offererId, status, venueId, categoryId, creationMode, periodBeginningDate, periodEndingDate, collectiveOfferType, offererAddressId, options)
  }
  /**
    * 
    * @summary list_venue_providers <GET>
    * @param {number} venueId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async listVenueProviders(venueId: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).listVenueProviders(venueId, options)
  }
  /**
    * 
    * @summary patch_all_collective_offers_active_status <PATCH>
    * @param {PatchAllCollectiveOffersActiveStatusBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchAllCollectiveOffersActiveStatus(body?: PatchAllCollectiveOffersActiveStatusBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchAllCollectiveOffersActiveStatus(body, options)
  }
  /**
    * 
    * @summary patch_all_offers_active_status <PATCH>
    * @param {PatchAllOffersActiveStatusBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchAllOffersActiveStatus(body?: PatchAllOffersActiveStatusBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchAllOffersActiveStatus(body, options)
  }
  /**
    * 
    * @summary patch_collective_offer_publication <PATCH>
    * @param {number} offer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchCollectiveOfferPublication(offer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchCollectiveOfferPublication(offer_id, options)
  }
  /**
    * 
    * @summary patch_collective_offer_template_publication <PATCH>
    * @param {number} offer_id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchCollectiveOfferTemplatePublication(offer_id: number, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchCollectiveOfferTemplatePublication(offer_id, options)
  }
  /**
    * 
    * @summary patch_collective_offers_active_status <PATCH>
    * @param {PatchCollectiveOfferActiveStatusBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchCollectiveOffersActiveStatus(body?: PatchCollectiveOfferActiveStatusBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchCollectiveOffersActiveStatus(body, options)
  }
  /**
    * 
    * @summary patch_collective_offers_educational_institution <PATCH>
    * @param {number} offer_id 
    * @param {PatchCollectiveOfferEducationalInstitution} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchCollectiveOffersEducationalInstitution(offer_id: number, body?: PatchCollectiveOfferEducationalInstitution, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchCollectiveOffersEducationalInstitution(offer_id, body, options)
  }
  /**
    * 
    * @summary patch_collective_offers_template_active_status <PATCH>
    * @param {PatchCollectiveOfferActiveStatusBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchCollectiveOffersTemplateActiveStatus(body?: PatchCollectiveOfferActiveStatusBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchCollectiveOffersTemplateActiveStatus(body, options)
  }
  /**
    * 
    * @summary patch_offer <PATCH>
    * @param {number} offer_id 
    * @param {PatchOfferBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchOffer(offer_id: number, body?: PatchOfferBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchOffer(offer_id, body, options)
  }
  /**
    * 
    * @summary patch_offerer_address <PATCH>
    * @param {number} offerer_id 
    * @param {number} offerer_address_id 
    * @param {PatchOffererAddressRequest} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchOffererAddress(offerer_id: number, offerer_address_id: number, body?: PatchOffererAddressRequest, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchOffererAddress(offerer_id, offerer_address_id, body, options)
  }
  /**
    * 
    * @summary patch_offers_active_status <PATCH>
    * @param {PatchOfferActiveStatusBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchOffersActiveStatus(body?: PatchOfferActiveStatusBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchOffersActiveStatus(body, options)
  }
  /**
    * 
    * @summary patch_pro_user_rgs_seen <PATCH>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchProUserRgsSeen(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchProUserRgsSeen(options)
  }
  /**
    * 
    * @summary patch_publish_offer <PATCH>
    * @param {PatchOfferPublishBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchPublishOffer(body?: PatchOfferPublishBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchPublishOffer(body, options)
  }
  /**
    * 
    * @summary patch_user_identity <PATCH>
    * @param {UserIdentityBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchUserIdentity(body?: UserIdentityBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchUserIdentity(body, options)
  }
  /**
    * 
    * @summary patch_user_phone <PATCH>
    * @param {UserPhoneBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchUserPhone(body?: UserPhoneBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchUserPhone(body, options)
  }
  /**
    * 
    * @summary patch_user_tuto_seen <PATCH>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchUserTutoSeen(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchUserTutoSeen(options)
  }
  /**
    * 
    * @summary patch_validate_email <PATCH>
    * @param {ChangeProEmailBody} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async patchValidateEmail(body?: ChangeProEmailBody, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).patchValidateEmail(body, options)
  }
  /**
    * 
    * @summary post_change_password <POST>
    * @param {ChangePasswordBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async postChangePassword(body?: ChangePasswordBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).postChangePassword(body, options)
  }
  /**
    * 
    * @summary post_create_venue <POST>
    * @param {PostVenueBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async postCreateVenue(body?: PostVenueBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).postCreateVenue(body, options)
  }
  /**
    * 
    * @summary post_new_password <POST>
    * @param {NewPasswordBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async postNewPassword(body?: NewPasswordBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).postNewPassword(body, options)
  }
  /**
    * 
    * @summary post_new_pro_nav <POST>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async postNewProNav(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).postNewProNav(options)
  }
  /**
    * 
    * @summary post_offer <POST>
    * @param {PostOfferBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async postOffer(body?: PostOfferBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).postOffer(body, options)
  }
  /**
    * 
    * @summary post_price_categories <POST>
    * @param {number} offer_id 
    * @param {PriceCategoryBody} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async postPriceCategories(offer_id: number, body?: PriceCategoryBody, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).postPriceCategories(offer_id, body, options)
  }
  /**
    * 
    * @summary post_pro_flags <POST>
    * @param {ProFlagsQueryModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async postProFlags(body?: ProFlagsQueryModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).postProFlags(body, options)
  }
  /**
    * 
    * @summary post_user_email <POST>
    * @param {UserResetEmailBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async postUserEmail(body?: UserResetEmailBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).postUserEmail(body, options)
  }
  /**
    * 
    * @summary reset_password <POST>
    * @param {ResetPasswordBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async resetPassword(body?: ResetPasswordBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).resetPassword(body, options)
  }
  /**
    * 
    * @summary save_new_onboarding_data <POST>
    * @param {SaveNewOnboardingDataQueryModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async saveNewOnboardingData(body?: SaveNewOnboardingDataQueryModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).saveNewOnboardingData(body, options)
  }
  /**
    * 
    * @summary signin <POST>
    * @param {LoginUserBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async signin(body?: LoginUserBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).signin(body, options)
  }
  /**
    * 
    * @summary signout <GET>
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async signout(options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).signout(options)
  }
  /**
    * 
    * @summary signup_pro_V2 <POST>
    * @param {ProUserCreationBodyV2Model} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async signupProV2(body?: ProUserCreationBodyV2Model, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).signupProV2(body, options)
  }
  /**
    * 
    * @summary submit_new_nav_review <POST>
    * @param {SubmitReviewRequestModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async submitNewNavReview(body?: SubmitReviewRequestModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).submitNewNavReview(body, options)
  }
  /**
    * 
    * @summary update_venue_provider <PUT>
    * @param {PostVenueProviderBody} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async updateVenueProvider(body?: PostVenueProviderBody, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).updateVenueProvider(body, options)
  }
  /**
    * 
    * @summary upsert_stocks <POST>
    * @param {StocksUpsertBodyModel} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async upsertStocks(body?: StocksUpsertBodyModel, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).upsertStocks(body, options)
  }
  /**
    * 
    * @summary validate_user <PATCH>
    * @param {string} token 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DefaultApi
    */
  public async validateUser(token: string, options?: any) {
    const configuration = await this.getConfiguration()
    return DefaultApiFp(this, configuration).validateUser(token, options)
  }
}
