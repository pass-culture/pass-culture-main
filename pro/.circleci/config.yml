version: 2.1
orbs:
  slack: circleci/slack@4.2

###################
#  EXECUTORS
###################

executors:

  node-gcp:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/node-gcp:14
        auth:
          username: _json_key  # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

###################
#  REFERENCES
###################

references:

  working_directory: &working_directory
    ~/pass-culture-main/pro

###################
#  COMMANDS
###################

commands:

  authenticate_gcp:
    description: Authenticate to a GCP project
    parameters:
      gcp_key_name:
        type: env_var_name
    steps:
      - run: echo ${<< parameters.gcp_key_name >>} > ${HOME}/gcp-key.json
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${GCP_PROJECT}


  build:
    description: Build the pro webapp
    parameters:
      node_env:
        type: string
    steps:
      - run: |
          cd ~/pass-culture-main/pro
          yarn install

          set -a; source ~/pass-culture-main/config/run_envs/<< parameters.node_env >>;
          # TODO : Remove once env variables are cleaned in every app
          export NODE_ENV=<< parameters.node_env >>

          yarn build:testing

  push-to-bucket:
    description: Push the built pro to a cloudstorage bucket
    parameters:
      bucket_name:
        type: string
      build_path:
        type: string
    steps:
      - run: |
          set +eo pipefail
          gsutil rsync -r << parameters.build_path >> gs://<< parameters.bucket_name >>

###################
#  JOBS
###################

jobs:
  quality:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/
    steps:
      - run:
          name: Initialization environment
          command: |
            git clone --single-branch --branch $CIRCLE_BRANCH https://github.com/betagouv/pass-culture-main.git pass-culture-main || git clone https://github.com/betagouv/pass-culture-main.git pass-culture-main
            cd pass-culture-main
            git clone --single-branch --branch $CIRCLE_BRANCH https://github.com/betagouv/pass-culture-api.git api || git clone https://github.com/betagouv/pass-culture-api.git api
            ./install_lib_ci.sh
      - checkout:
          path: *working_directory
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "~/pass-culture-main/pro/yarn.lock" }}
      - run:
          name: Install dependencies
          working_directory: *working_directory
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install
            yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "~/pass-culture-main/pro/yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Running linter
          working_directory: *working_directory
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install
            yarn lint:js

  unit-tests:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/
    steps:
      - run:
          name: Initialization environment
          command: |
            git clone --single-branch --branch $CIRCLE_BRANCH https://github.com/betagouv/pass-culture-main.git pass-culture-main || git clone https://github.com/betagouv/pass-culture-main.git pass-culture-main
            cd pass-culture-main
            git clone --single-branch --branch $CIRCLE_BRANCH https://github.com/betagouv/pass-culture-api.git api || git clone https://github.com/betagouv/pass-culture-api.git api
            ./install_lib_ci.sh
      - checkout:
          path: *working_directory
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "~/pass-culture-main/pro/yarn.lock" }}
      - run:
          name: Install dependencies
          working_directory: *working_directory
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install
            yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "~/pass-culture-main/pro/yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Running Unit Tests
          working_directory: *working_directory
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install
            yarn test:unit --coverage --silent
            yarn coveralls || echo "Encountered an error while running coveralls"
            bash <(curl -s https://codecov.io/bash) || echo "Encountered an error while uploading to codecov"

  e2e-tests:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/
    steps:
      - run:
          name: Initialization environment
          command: |
            git clone --single-branch --branch $CIRCLE_BRANCH https://github.com/betagouv/pass-culture-main.git pass-culture-main || git clone https://github.com/betagouv/pass-culture-main.git pass-culture-main
            cd pass-culture-main
            git clone --single-branch --branch $CIRCLE_BRANCH https://github.com/betagouv/pass-culture-api.git api || git clone https://github.com/betagouv/pass-culture-api.git api
            ./install_lib_ci_with_chrome.sh
      - checkout:
          path: *working_directory
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "~/pass-culture-main/pro/yarn.lock" }}
      - run:
          name: Install dependencies
          working_directory: *working_directory
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install
            yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "~/pass-culture-main/pro/yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Running API server
          command: |
           cd ~/pass-culture-main
           ./pc start-backend
          background: true
      - run:
          name: Running Frontend
          working_directory: *working_directory
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install
            yarn start
          background: true
      - run:
          name: Running testcafe sandbox
          command: |
            cd pass-culture-main
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            ./pc sandbox --name=testcafe
      - run:
          name: Running end2end tests
          working_directory: *working_directory
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install
            dockerize -wait http://localhost:3001 -timeout 5m -wait-retry-interval 5s
            yarn test:cafe
      - store_artifacts:
         path: ~/pass-culture-main/pro/testcafe_screenshots

  deploy-pro:
    executor: node-gcp
    steps:
      - run:
          name: Checkout main
          command: |
            git clone --single-branch --branch $CIRCLE_BRANCH https://github.com/betagouv/pass-culture-main.git ~/pass-culture-main || git clone https://github.com/betagouv/pass-culture-main.git ~/pass-culture-main
      - checkout:
          path: ~/pass-culture-main/pro
      - authenticate_gcp:
          gcp_key_name: GCP_METIER_KEY
      - build:
          node_env: testing
      - push-to-bucket:
          build_path: ~/pass-culture-main/pro/build/
          bucket_name: ${GCP_PROJECT}-testing-pro
      - slack/notify:
          event: fail
          channel: stream-pro
          template: basic_fail_1

###################
#  WORKFLOWS
###################

workflows:
  version: 2
  commit:
    jobs:
      - unit-tests
      - e2e-tests
      - quality
      - deploy-pro:
          filters:
            branches:
              only:
                - master
          context:
            - GCP
            - GCP_EHP
            - Slack
          requires:
            - unit-tests
            - e2e-tests
            - quality
