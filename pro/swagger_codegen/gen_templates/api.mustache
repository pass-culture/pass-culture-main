/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import { OpenAPIConfig } from 'apiClient/core/OpenAPI'
import { request } from 'apiClient/customRequest'
import { ApiRequestOptions } from 'apiClient/core/ApiRequestOptions'
import { CancelablePromise } from 'apiClient/core/CancelablePromise'

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|',
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: OpenAPIConfig

  constructor(configuration: OpenAPIConfig) {
    this.configuration = configuration
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name = 'RequiredError'
  constructor(public field: string, msg?: string) {
    super(msg)
  }
}

{{#models}}
{{#model}}{{#isEnum}}{{>modelEnum}}{{/isEnum}}{{^isEnum}}{{#isObject}}{{>modelGeneric}}{{/isObject}}{{^isObject}}{{>modelAlias}}{{/isObject}}{{/isEnum}}{{/model}}
{{/models}}
{{#apiInfo}}{{#apis}}{{#operations}}
/**
 * {{classname}} - fetch parameter creator{{#description}}
 * {{&description}}{{/description}}
 * @export
 */
export const {{classname}}FetchParamCreator = function (configuration: OpenAPIConfig) {
  return {
  {{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
     {{/allParams}}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: any = {}): ApiRequestOptions {
  {{#allParams}}
  {{#required}}
      // verify required parameter '{{paramName}}' is not null or undefined
      if ({{paramName}} === null || {{paramName}} === undefined) {
        throw new RequiredError('{{paramName}}','Required parameter {{paramName}} was null or undefined when calling {{nickname}}.')
      }
  {{/required}}
  {{/allParams}}
      const localVarPath = `{{{path}}}`{{#pathParams}}
        .replace(`{${'{{baseName}}'}}`, encodeURIComponent(String({{paramName}}))){{/pathParams}}
      const localVarRequestOptions = Object.assign({ method: '{{httpMethod}}', url: localVarPath }, options)
      const localVarHeaderParameter = {} as any
  {{#hasFormParams}}
      const localVarFormParams = new URLSearchParams()
  {{/hasFormParams}}
  {{#hasQueryParams}}
      const localVarQueryParameter = {} as any
  {{/hasQueryParams}}


  {{#authMethods}}
      // authentication {{name}} required
      {{#isApiKey}}
      {{#isKeyInHeader}}
      if (configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey('{{keyParamName}}')
					: configuration.apiKey
        localVarHeaderParameter['{{keyParamName}}'] = localVarApiKeyValue
      }
      {{/isKeyInHeader}}
      {{#isKeyInQuery}}
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey('{{keyParamName}}')
					: configuration.apiKey
        localVarQueryParameter['{{keyParamName}}'] = localVarApiKeyValue
      }
      {{/isKeyInQuery}}
      {{/isApiKey}}
      {{#isBasic}}
      // http basic authentication required
      if ((configuration.username || configuration.password)) {
        localVarHeaderParameter['Authorization'] = 'Basic ' + btoa(configuration.username + ':' + configuration.password)
      }
      {{/isBasic}}
      {{#isOAuth}}
      // oauth required
      if (configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken('{{name}}', [{{#each scopes}}'{{@key}}'{{^@last}}, {{/@last}}{{/each}}])
					: configuration.accessToken
        localVarHeaderParameter['Authorization'] = 'Bearer ' + localVarAccessTokenValue
      }
      {{/isOAuth}}

  {{/authMethods}}
  {{#queryParams}}
      {{#isListContainer}}
      if ({{paramName}}) {
      {{#isCollectionFormatMulti}}
        localVarQueryParameter['{{baseName}}'] = {{paramName}}
      {{/isCollectionFormatMulti}}
      {{^isCollectionFormatMulti}}
        localVarQueryParameter['{{baseName}}'] = {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}'])
      {{/isCollectionFormatMulti}}
      }
      {{/isListContainer}}
      {{^isListContainer}}
      if ({{paramName}} !== undefined) {
        {{#isDateTime}}
        localVarQueryParameter['{{baseName}}'] = ({{paramName}} as any).toISOString()
        {{/isDateTime}}
        {{^isDateTime}}
        {{#isDate}}
        localVarQueryParameter['{{baseName}}'] = ({{paramName}} as any).toISOString()
        {{/isDate}}
        {{^isDate}}
        localVarQueryParameter['{{baseName}}'] = {{paramName}}
        {{/isDate}}
        {{/isDateTime}}
      }
      {{/isListContainer}}

  {{/queryParams}}
  {{#headerParams}}
      {{#isListContainer}}
      if ({{paramName}}) {
        localVarHeaderParameter['{{baseName}}'] = {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']))
      }
      {{/isListContainer}}
      {{^isListContainer}}
      if ({{paramName}} !== undefined && {{paramName}} !== null) {
        localVarHeaderParameter['{{baseName}}'] = String({{paramName}})
      }
      {{/isListContainer}}

  {{/headerParams}}
  {{#formParams}}
      {{#isListContainer}}
      if ({{paramName}}) {
      {{#isCollectionFormatMulti}}
        {{paramName}}.forEach((element) => {
          localVarFormParams.append('{{baseName}}', element as any)
        })
      {{/isCollectionFormatMulti}}
      {{^isCollectionFormatMulti}}
          localVarFormParams.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']))
      {{/isCollectionFormatMulti}}
      }
      {{/isListContainer}}
      {{^isListContainer}}
      if ({{paramName}} !== undefined) {
        localVarFormParams.set('{{baseName}}', {{paramName}} as any)
      }
      {{/isListContainer}}

  {{/formParams}}
  {{#hasFormParams}}
      localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded'

  {{/hasFormParams}}
  {{#bodyParam}}
      {{^consumes}}
      localVarHeaderParameter['Content-Type'] = 'application/json'
      {{/consumes}}
      {{#consumes.0}}
      localVarHeaderParameter['Content-Type'] = '{{{mediaType}}}'
      {{/consumes.0}}

  {{/bodyParam}}
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
  {{#hasFormParams}}
      localVarRequestOptions.body = localVarFormParams.toString()
  {{/hasFormParams}}
  {{#bodyParam}}
      localVarRequestOptions.body =  {{paramName}} || ''
  {{/bodyParam}}

      return localVarRequestOptions
    },
  {{/operation}}
  }
}

/**
 * {{classname}} - functional programming interface{{#description}}
 * {{{description}}}{{/description}}
 * @export
 */
export const {{classname}}Fp = function(configuration: OpenAPIConfig) {
  return {
  {{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
     {{/allParams}}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: any): CancelablePromise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Response{{/returnType}}> {
      const localVarApiRequestOptions = {{classname}}FetchParamCreator(configuration).{{nickname}}({{#allParams}}{{paramName}}, {{/allParams}}options)
      return request(configuration, localVarApiRequestOptions)
    },
  {{/operation}}
  }
}

/**
 * {{classname}} - factory interface{{#description}}
 * {{&description}}{{/description}}
 * @export
 */
export const {{classname}}Factory = function (configuration: OpenAPIConfig) {
  return {
  {{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
     {{/allParams}}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: any) {
      return {{classname}}Fp(configuration).{{nickname}}({{#allParams}}{{paramName}}, {{/allParams}}options)
    },
  {{/operation}}
  }
}

{{#withInterfaces}}
/**
 * {{classname}} - interface{{#description}}
 * {{&description}}{{/description}}
 * @export
 * @interface {{classname}}
 */
export interface {{classname}}Interface {
{{#operation}}
  /**
   * {{&notes}}
   {{#summary}}
   * @summary {{&summary}}
   {{/summary}}
   {{#allParams}}
   * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
   {{/allParams}}
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof {{classname}}Interface
   */
  {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: any): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}>

{{/operation}}
}

{{/withInterfaces}}
/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{{description}}}{{/description}}
 * @export
 * @class {{classname}}
 * @extends {BaseAPI}
 */
{{#withInterfaces}}
export class {{classname}} extends BaseAPI implements {{classname}}Interface {
{{/withInterfaces}}
{{^withInterfaces}}
export class {{classname}} extends BaseAPI {
{{/withInterfaces}}
  {{#operation}}
  /**
   * {{&notes}}
   {{#summary}}
   * @summary {{&summary}}
   {{/summary}}
   {{#allParams}}
   * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
   {{/allParams}}
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof {{classname}}
   */
  public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: any) {
    return {{classname}}Fp(this.configuration).{{nickname}}({{#allParams}}{{paramName}}, {{/allParams}}options)
  }

  {{/operation}}
}
{{/operations}}{{/apis}}{{/apiInfo}}
