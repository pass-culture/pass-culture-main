// generated using `ESLINT=STRICT_CONFIG yarn eslint ./src/ -f json -o ./scripts/eslintOutput.json`
const output = [
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/Root.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/app/App.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/app/AppContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/app/AppLayout.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/app/PortalContainer.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/app/RedirectToMaintenance.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/app/__specs__/App.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/app/__specs__/AppContainer.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/app/__specs__/PortalContainer.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hocs/index.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hocs/with-query-router/__specs__/ withQueryRouter.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hocs/with-query-router/__specs__/selectQueryParamsFromQueryString.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hocs/with-query-router/__specs__/utils.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hocs/with-query-router/getObjectWithMappedKeys.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hocs/with-query-router/index.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hocs/with-query-router/selectQueryParamsFromQueryString.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hocs/with-query-router/withQueryRouter.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (382). Maximum allowed is 150.',
        line: 12,
        column: 32,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 393,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (382). Maximum allowed is 150.',
        line: 12,
        column: 49,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 393,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (16). Maximum allowed is 15.',
        line: 63,
        column: 14,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 103,
        endColumn: 6,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (17). Maximum allowed is 15.',
        line: 270,
        column: 28,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 298,
        endColumn: 6,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (24). Maximum allowed is 15.',
        line: 300,
        column: 24,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 340,
        endColumn: 6,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (337). Maximum allowed is 300.',
        line: 353,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 396,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 6,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import invert from 'lodash.invert'\nimport uniq from 'lodash.uniq'\nimport PropTypes from 'prop-types'\nimport React, { PureComponent } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { stringify } from 'utils/query-string'\n\nimport { getObjectWithMappedKeys } from './getObjectWithMappedKeys'\nimport { selectQueryParamsFromQueryString } from './selectQueryParamsFromQueryString'\n\nexport const withQueryRouter = (config = {}) => WrappedComponent => {\n  const { mapper, translater } = config\n  const creationKey = config.creationKey || 'creation'\n  const modificationKey = config.modificationKey || 'modification'\n\n  let invertedMapper\n  if (mapper) {\n    invertedMapper = invert(mapper)\n  }\n\n  class _withQueryRouter extends PureComponent {\n    constructor(props) {\n      super(props)\n      this.query = {\n        add: this.add,\n        change: this.change,\n        changeToCreation: this.changeToCreation,\n        changeToModification: this.changeToModification,\n        changeToReadOnly: this.changeToReadOnly,\n        clear: this.clear,\n        context: this.context,\n        parse: this.parse,\n        remove: this.remove,\n        translate: this.translate,\n      }\n    }\n\n    add = (key, value) => {\n      const queryParams = this.parse()\n\n      let nextValue = value\n      const previousValue = queryParams[key]\n      if (previousValue && previousValue.length) {\n        const args = previousValue.split(',').concat([value])\n        args.sort()\n        nextValue = args.join(',')\n      } else if (typeof previousValue === 'undefined') {\n        /* eslint-disable no-console */\n        console.warn(\n          `Weird did you forget to mention this ${key} query param in your withQueryRouter hoc?`\n        )\n      }\n\n      this.change({ [key]: nextValue })\n    }\n\n    clear = () => {\n      const { history, location } = this.props\n      history.push(location.pathname)\n    }\n\n    change = (notTranslatedQueryParamsUpdater, changeConfig = {}) => {\n      const { history, location } = this.props\n      const queryParams = this.parse()\n\n      const historyMethod = changeConfig.historyMethod || 'push'\n      const pathname = changeConfig.pathname || location.pathname\n\n      let queryParamsUpdater = notTranslatedQueryParamsUpdater\n      if (translater) {\n        queryParamsUpdater = translater(queryParamsUpdater)\n      } else if (mapper) {\n        queryParamsUpdater = getObjectWithMappedKeys(queryParamsUpdater, invertedMapper)\n      }\n\n      const queryParamsUpdaterKeys = Object.keys(queryParamsUpdater)\n      const concatenatedQueryParamKeys = Object.keys(queryParams).concat(queryParamsUpdaterKeys)\n      const queryParamsKeys = uniq(concatenatedQueryParamKeys)\n\n      const nextQueryParams = {}\n      queryParamsKeys.forEach(queryParamsKey => {\n        if (queryParamsUpdater[queryParamsKey]) {\n          nextQueryParams[queryParamsKey] = queryParamsUpdater[queryParamsKey]\n          return\n        }\n        if (\n          queryParamsUpdater[queryParamsKey] !== null &&\n          typeof queryParams[queryParamsKey] !== 'undefined'\n        ) {\n          nextQueryParams[queryParamsKey] = queryParams[queryParamsKey]\n          return\n        }\n        if (queryParamsUpdater[queryParamsKey] === '') {\n          nextQueryParams[queryParamsKey] = null\n        }\n      })\n\n      const nextLocationSearch = stringify(nextQueryParams)\n      const changedPath = `${pathname}?${nextLocationSearch}`\n\n      history[historyMethod](changedPath)\n    }\n\n    context = (config = {}) => {\n      const { key } = config\n      if (key) {\n        return this.contextWithEntityInSearch(config)\n      }\n      return this.contextWithEntityInPathname(config)\n    }\n\n    contextWithEntityInPathname = (config = {}) => {\n      const {\n        location: { pathname },\n      } = this.props\n      const queryParams = this.parse()\n\n      const re = new RegExp(`(${creationKey})$`)\n      const matchedResults = pathname.match(re)\n      const matchedKey = matchedResults && matchedResults[0]\n      if (matchedKey) {\n        return this.creationContextWithEntityInPathname(config)\n      }\n\n      if (Object.keys(queryParams).includes(modificationKey)) {\n        return this.modificationContextWithEntityInPathname(config)\n      }\n\n      return this.readOnlyContextWithEntityInPathname()\n    }\n\n    creationContextWithEntityInPathname = (config = {}) => {\n      const { id } = config\n      if (id) {\n        if (id === creationKey) {\n          return {\n            isCreatedEntity: true,\n            isModifiedEntity: false,\n            method: 'POST',\n            readOnly: false,\n          }\n        }\n        return {\n          isCreatedEntity: false,\n          isModifiedEntity: false,\n          readOnly: true,\n        }\n      }\n      return {\n        isCreatedEntity: true,\n        isModifiedEntity: false,\n\n        method: 'POST',\n        readOnly: false,\n      }\n    }\n\n    modificationContextWithEntityInPathname = (config = {}) => {\n      const { id } = config\n      const {\n        location: { pathname },\n      } = this.props\n      if (id) {\n        if (pathname.endsWith(id)) {\n          return {\n            isCreatedEntity: false,\n            isModifiedEntity: true,\n            method: 'PATCH',\n            readOnly: false,\n          }\n        }\n        return {\n          isCreatedEntity: false,\n          isModifiedEntity: false,\n          readOnly: true,\n        }\n      }\n\n      return {\n        isCreatedEntity: false,\n        isModifiedEntity: true,\n        method: 'PATCH',\n        readOnly: false,\n      }\n    }\n\n    readOnlyContextWithEntityInPathname = () => {\n      return {\n        isCreatedEntity: false,\n        isModifiedEntity: false,\n        method: null,\n        readOnly: true,\n      }\n    }\n\n    contextWithEntityInSearch = (config = {}) => {\n      const { id, key } = config\n      const queryParams = this.parse()\n      let paramKey = key\n      let paramValue = queryParams[paramKey]\n\n      const isCreationSearch =\n        paramValue === creationKey || (creationKey.test && creationKey.test(paramValue))\n      if (!id && isCreationSearch) {\n        return this.creationContextWithEntityInSearch(config)\n      }\n\n      if (!paramValue) {\n        paramKey = `${key}${id}`\n        paramValue = queryParams[paramKey]\n      }\n      if (paramValue === modificationKey) {\n        return this.modificationContextWithEntityInSearch(config)\n      }\n\n      return this.readOnlyContextWithEntityInSearch(config)\n    }\n\n    creationContextWithEntityInSearch = (config = {}) => {\n      const { key } = config\n      return {\n        isCreatedEntity: true,\n        isModifiedEntity: false,\n        key,\n        method: 'POST',\n        readOnly: false,\n      }\n    }\n\n    modificationContextWithEntityInSearch = (config = {}) => {\n      const { key } = config\n      return {\n        isCreatedEntity: false,\n        isModifiedEntity: true,\n        key,\n        method: 'PATCH',\n        readOnly: false,\n      }\n    }\n\n    readOnlyContextWithEntityInSearch = (config = {}) => {\n      const { key } = config\n      return {\n        isCreatedEntity: false,\n        isModifiedEntity: false,\n        key,\n        method: null,\n        readOnly: true,\n      }\n    }\n\n    changeToCreation = (queryParamsUpdater, contextConfig = {}) => {\n      const { key } = contextConfig\n      const { location } = this.props\n      const { pathname } = location\n\n      const creationChange = Object.assign({}, queryParamsUpdater)\n      if (!key) {\n        const creationPathname = `${pathname}/${creationKey}`\n        this.change(creationChange, { pathname: creationPathname })\n        return\n      }\n\n      creationChange[key] = creationKey\n\n      this.change(creationChange)\n    }\n\n    changeToModification = (queryParamsUpdater, contextConfig = {}) => {\n      const { id, key } = contextConfig\n      const { location } = this.props\n      const { pathname } = location\n\n      const modificationChange = Object.assign({}, queryParamsUpdater)\n\n      if (!key) {\n        modificationChange[modificationKey] = ''\n        if (id) {\n          const modifiedPathname = `${pathname}/${id}`\n          this.change(modificationChange, { pathname: modifiedPathname })\n          return\n        }\n        this.change(modificationChange)\n        return\n      }\n\n      const queryParams = this.parse()\n      Object.keys(queryParams).forEach(queryKey => {\n        if (queryKey.startsWith(key)) {\n          modificationChange[queryKey] = null\n        }\n      })\n      const nextQueryKey = `${key}${id}`\n      modificationChange[nextQueryKey] = modificationKey\n\n      this.change(modificationChange)\n    }\n\n    changeToReadOnly = (queryParamsUpdater, contextConfig = {}) => {\n      const { id, key } = contextConfig\n      const { location } = this.props\n      const { pathname } = location\n      const queryParams = this.parse()\n\n      const readOnlyChange = Object.assign({}, queryParamsUpdater)\n      if (!key) {\n        if (pathname.endsWith(creationKey)) {\n          let readOnlyPathname = pathname.slice(0, -creationKey.length - 1)\n          if (id) {\n            readOnlyPathname = `${readOnlyPathname}/${id}`\n          }\n\n          this.change(readOnlyChange, { pathname: readOnlyPathname })\n          return\n        }\n\n        if (typeof queryParams[modificationKey] !== 'undefined') {\n          readOnlyChange[modificationKey] = null\n          if (id) {\n            const readOnlyPathname = pathname.slice(0, -id.length - 1)\n            this.change(readOnlyChange, { pathname: readOnlyPathname })\n            return\n          }\n          this.change(readOnlyChange)\n          return\n        }\n\n        console.warn('tried to changeToReadOnly but did not find a pathname context')\n        return\n      }\n\n      Object.keys(queryParams).forEach(queryKey => {\n        if (queryKey.startsWith(key)) {\n          readOnlyChange[queryKey] = null\n        }\n      })\n\n      this.change(readOnlyChange)\n    }\n\n    parse = () => {\n      const { location } = this.props\n      return selectQueryParamsFromQueryString(location.search)\n    }\n\n    remove = (key, value) => {\n      const queryParams = this.parse()\n\n      const previousValue = queryParams[key]\n      if (previousValue && previousValue.length) {\n        let nextValue = previousValue.replace(`,${value}`, '').replace(value, '')\n        if (nextValue[0] === ',') {\n          nextValue = nextValue.slice(1)\n        }\n        this.change({ [key]: nextValue })\n      } else if (typeof previousValue === 'undefined') {\n        console.warn(\n          `Weird did you forget to mention this ${key} query param in your withQueryRouter hoc?`\n        )\n      }\n    }\n\n    translate = () => {\n      const queryParams = this.parse()\n      if (translater) {\n        return translater(queryParams)\n      }\n      if (mapper) {\n        return getObjectWithMappedKeys(queryParams, mapper)\n      }\n      return queryParams\n    }\n\n    render() {\n      return (\n        <WrappedComponent\n          {...this.props}\n          query={this.query}\n        />\n      )\n    }\n  }\n\n  _withQueryRouter.propTypes = {\n    history: PropTypes.shape().isRequired,\n    location: PropTypes.shape().isRequired,\n  }\n\n  _withQueryRouter.WrappedComponent = WrappedComponent\n\n  return withRouter(_withQueryRouter)\n}\n\nexport default withQueryRouter\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hocs/withFrenchQueryRouter.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hocs/withTracking.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hooks/__specs/UseFrenchQueryTestingExample.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hooks/__specs/useFrenchQuery.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hooks/useActiveFeature.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hooks/useFrenchQuery.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/hooks/useOnClickOrFocusOutside.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/ActionsBarPortal/ActionsBarPortal.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/ActionsBarPortal/__specs__/ActionsBarPortal.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Banner/Banner.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Banner/InternalBanner.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Banner/__specs__/Banner.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Banner/__specs__/InternalBanner.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Breadcrumb.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/CsvTable/CsvTable.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/CsvTable/CsvTableContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/CsvTable/__specs__/CsvTable.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (163). Maximum allowed is 150.',
        line: 8,
        column: 50,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 170,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { shallow } from 'enzyme'\nimport React from 'react'\n\nimport HeaderContainer from '../../Header/HeaderContainer'\nimport Spinner from '../../Spinner'\nimport CsvTable from '../CsvTable'\n\ndescribe('src | components | layout | CsvTable', () => {\n  let props\n  let dataFromCsv\n\n  beforeEach(() => {\n    props = {\n      currentUser: {\n        publicName: 'super nom',\n      },\n      downloadFileOrNotifyAnError: jest.fn(),\n    }\n    dataFromCsv = {\n      data: [\n        ['data1', 'data2'],\n        ['data3', 'data4'],\n      ],\n      headers: ['column1', 'column2'],\n    }\n    props.downloadFileOrNotifyAnError.mockReturnValue(Promise.resolve().then(() => dataFromCsv))\n  })\n\n  describe('render', () => {\n    it('should render a CsvTable component with default state', () => {\n      // when\n      const wrapper = shallow(<CsvTable {...props} />)\n\n      // then\n      expect(wrapper.state()).toStrictEqual({\n        dataFromCsv: {},\n        isLoading: true,\n      })\n    })\n\n    it('should render a Header component with the right props', () => {\n      // when\n      const wrapper = shallow(<CsvTable {...props} />)\n\n      // then\n      const header = wrapper.find(HeaderContainer)\n      expect(header).toHaveLength(1)\n    })\n\n    it('should render a Spinner component by default when CsvTable is mounted', () => {\n      // when\n      const wrapper = shallow(<CsvTable {...props} />)\n\n      // then\n      const spinner = wrapper.find(Spinner)\n      expect(spinner).toHaveLength(1)\n    })\n\n    it('should not render a Spinner component when isLoading value from state is false', () => {\n      // when\n      const wrapper = shallow(<CsvTable {...props} />)\n      wrapper.setState({ isLoading: false })\n\n      // then\n      const spinner = wrapper.find(Spinner)\n      expect(spinner).toHaveLength(0)\n    })\n\n    it('should open a new window for printing when clicking on print button', () => {\n      // given\n      jest.spyOn(global, 'print').mockImplementation()\n      const wrapper = shallow(<CsvTable {...props} />)\n      wrapper.setState({\n        dataFromCsv: dataFromCsv,\n        isLoading: false,\n      })\n      const printButton = wrapper.find('#csv-print-button')\n\n      // then\n      printButton.simulate('click')\n\n      // then\n      expect(global.print).toHaveBeenCalledWith()\n    })\n\n    it('should display a message when there is no data to display and isLoading value from state is false', () => {\n      // when\n      const wrapper = shallow(<CsvTable {...props} />)\n      wrapper.setState({\n        dataFromCsv: {},\n        isLoading: false,\n      })\n\n      // then\n      const noDataContainer = wrapper.find('.no-data-container')\n      expect(noDataContainer).toHaveLength(1)\n      expect(noDataContainer.text()).toBe(\"Il n’y a pas de données à afficher.\")\n    })\n\n    it('should load data from csv when CsvTable component is mounted', async () => {\n      // when\n      const wrapper = await shallow(<CsvTable {...props} />)\n\n      // then\n      expect(props.downloadFileOrNotifyAnError).toHaveBeenCalledWith()\n      expect(wrapper.state()).toStrictEqual({\n        dataFromCsv: {\n          data: [\n            ['data1', 'data2'],\n            ['data3', 'data4'],\n          ],\n          headers: ['column1', 'column2'],\n        },\n        isLoading: false,\n      })\n    })\n\n    describe('when data from csv is provided and isLoading value from state is false', () => {\n      it('should render a table header with 2 columns', () => {\n        // when\n        const wrapper = shallow(<CsvTable {...props} />)\n        wrapper.setState({\n          dataFromCsv: dataFromCsv,\n          isLoading: false,\n        })\n\n        // then\n        const thElements = wrapper.find('thead tr th')\n        expect(thElements).toHaveLength(2)\n      })\n\n      it('should render a tbody with two lines', () => {\n        // when\n        const wrapper = shallow(<CsvTable {...props} />)\n        wrapper.setState({\n          dataFromCsv: dataFromCsv,\n          isLoading: false,\n        })\n\n        // then\n        const trElements = wrapper.find('tbody tr')\n        const firstTrElement = trElements.at(0).find('td')\n        const secondTrElement = trElements.at(1).find('td')\n        expect(trElements).toHaveLength(2)\n        expect(firstTrElement).toHaveLength(2)\n        expect(firstTrElement.at(0).text()).toBe('data1')\n        expect(firstTrElement.at(1).text()).toBe('data2')\n        expect(secondTrElement).toHaveLength(2)\n        expect(secondTrElement.at(0).text()).toBe('data3')\n        expect(secondTrElement.at(1).text()).toBe('data4')\n      })\n\n      it('should render a print button with the right props', () => {\n        // when\n        const wrapper = shallow(<CsvTable {...props} />)\n        wrapper.setState({\n          dataFromCsv: dataFromCsv,\n          isLoading: false,\n        })\n\n        // then\n        const printButton = wrapper.find('#csv-print-button')\n        expect(printButton).toHaveLength(1)\n        expect(printButton.prop('className')).toBe('button is-primary')\n        expect(printButton.prop('onClick')).toStrictEqual(expect.any(Function))\n        expect(printButton.text()).toBe('Imprimer')\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/CsvTable/__specs__/CsvTableContainer.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (62). Maximum allowed is 50.',
        line: 3,
        column: 70,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 64,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { mapDispatchToProps } from '../CsvTableContainer'\n\ndescribe('src | components | layout | CsvTable | CsvTableContainer', () => {\n  let dispatch\n  let props\n\n  beforeEach(() => {\n    dispatch = jest.fn()\n    props = {\n      location: {\n        state: '/path-to-csv',\n      },\n    }\n\n    global.fetch = url => {\n      if (url.includes('reimbursements/csv')) {\n        return new Response('foo;foo')\n      }\n      throw new Error()\n    }\n  })\n\n  describe('mapDispatchToProps', () => {\n    it('should return an object containing two functions', () => {\n      // when\n      const result = mapDispatchToProps(dispatch, props)\n\n      // then\n      expect(result).toStrictEqual({\n        downloadFileOrNotifyAnError: expect.any(Function),\n      })\n    })\n\n    describe('downloadFileOrNotifyAnError', () => {\n      it('should return a csv parsed as an object when data fetching succeed', async () => {\n        // given\n        props.location.state = 'reimbursements/csv'\n        const functions = mapDispatchToProps(dispatch, props)\n        const { downloadFileOrNotifyAnError } = functions\n\n        // when\n        const result = await downloadFileOrNotifyAnError()\n\n        // then\n        expect(result).toStrictEqual({\n          data: [],\n          headers: ['foo', 'foo'],\n        })\n      })\n\n      it('should throw an Error when data retrieval failed', async () => {\n        // given\n        props.location.state = '/fake-path'\n        const functions = mapDispatchToProps(dispatch, props)\n        const { downloadFileOrNotifyAnError } = functions\n\n        // when\n        await expect(downloadFileOrNotifyAnError())\n          .rejects\n          .toThrow('Erreur lors du téléchargement des données.')\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/CsvTableButton/CsvTableButton.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/CsvTableButton/CsvTableButtonContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/CsvTableButton/__specs__/CsvTableButton.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/CsvTableButton/utils/__specs__/csvConverter.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (87). Maximum allowed is 50.',
        line: 3,
        column: 64,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 89,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import csvConverter from '../csvConverter'\n\ndescribe('src | components | layout | CsvTableButton | utils', () => {\n  it('should return an object containing csv headers and data', () => {\n    // given\n    const csv = 'Column1;Column2\\nData1;Data2\\nData3;Data4'\n\n    // when\n    const result = csvConverter(csv)\n\n    // then\n    expect(result).toStrictEqual({\n      data: [\n        ['Data1', 'Data2'],\n        ['Data3', 'Data4'],\n      ],\n      headers: ['Column1', 'Column2'],\n    })\n  })\n\n  it('should return an object containing csv headers and data ignoring empty lines', () => {\n    // given\n    const csv = 'Column1;Column2\\nData1;Data2\\nData3;Data4\\n'\n\n    // when\n    const result = csvConverter(csv)\n\n    // then\n    expect(result).toStrictEqual({\n      data: [\n        ['Data1', 'Data2'],\n        ['Data3', 'Data4'],\n      ],\n      headers: ['Column1', 'Column2'],\n    })\n  })\n\n  it('should ignore quotes of quoted column', () => {\n    // given\n    const csv = 'Column1;Column2\\nData1;\"Data2\"\\nData3;\"Data4\"\\n'\n\n    // when\n    const result = csvConverter(csv)\n\n    // then\n    expect(result).toStrictEqual({\n      data: [\n        ['Data1', 'Data2'],\n        ['Data3', 'Data4'],\n      ],\n      headers: ['Column1', 'Column2'],\n    })\n  })\n\n  it('should ignore delimiter when inside quoted column', () => {\n    // given\n    const csv = 'Column1;Column2\\nData1;\"Data;2\"\\nData3;\"Data;4\"\\n'\n\n    // when\n    const result = csvConverter(csv)\n\n    // then\n    expect(result).toStrictEqual({\n      data: [\n        ['Data1', 'Data;2'],\n        ['Data3', 'Data;4'],\n      ],\n      headers: ['Column1', 'Column2'],\n    })\n  })\n\n  it('should keep quotes when not quoting a column', () => {\n    // given\n    const csv =\n      'Column1;Column2\\n\"Data with some \"\"quotes\"\" 1\";Data2\\n\"Other data with \"\"quotes\"\"\";Data4\\n'\n\n    // when\n    const result = csvConverter(csv)\n\n    // then\n    expect(result).toStrictEqual({\n      data: [\n        ['Data with some \"quotes\" 1', 'Data2'],\n        ['Other data with \"quotes\"', 'Data4'],\n      ],\n      headers: ['Column1', 'Column2'],\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/CsvTableButton/utils/csvConverter.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/DialogBox/CloseButton.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/DialogBox/DialogBox.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/DownloadButton/DownloadButton.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/DownloadButton/DownloadButtonContainer.js',
    messages: [
      {
        ruleId: 'max-statements',
        severity: 1,
        message:
          "Async arrow function 'downloadFileOrNotifyAnError' has too many statements (16). Maximum allowed is 15.",
        line: 11,
        column: 34,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 43,
        endColumn: 6,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { connect } from 'react-redux'\n\nimport { showNotification } from 'store/reducers/notificationReducer'\n\nimport DownloadButton from './DownloadButton'\n\nexport const mapDispatchToProps = (dispatch, ownProps) => {\n  const { filename, href, mimeType } = ownProps\n\n  return {\n    downloadFileOrNotifyAnError: async () => {\n      try {\n        const result = await fetch(href, { credentials: 'include' })\n        const { status } = result\n\n        if (status === 200) {\n          const text = await result.text()\n          const fakeLink = document.createElement('a')\n          const blob = new Blob([text], { type: mimeType })\n          const date = new Date().toISOString()\n\n          // Ce n'est pas terrible mais nous n'avons pas trouvé mieux.\n          // Aucun code d'avant ne faisait que l'on téléchargeait un fichier\n          // avec l'extension CSV.\n          fakeLink.href = URL.createObjectURL(blob)\n          fakeLink.setAttribute('download', `${filename}-${date}.csv`)\n          document.body.appendChild(fakeLink)\n          fakeLink.click()\n          document.body.removeChild(fakeLink)\n\n          return\n        }\n\n        dispatch(\n          showNotification({\n            text: 'Il y a une erreur avec le chargement du fichier csv.',\n            type: 'error',\n          })\n        )\n      } catch (error) {\n        console.log('error', error)\n      }\n    },\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(DownloadButton)\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/DownloadButton/__specs__/DownloadButton.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Header/Header.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Header/HeaderContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Header/__specs__/Header.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Header/_constants.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Icon.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Insert/Insert.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Insert/__specs__/Insert.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/LegalInfos/LegalInfos.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Logo.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Main/Main.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Main/index.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Main/mapStateToProps.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Notification/Notification.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Notification/NotificationContainer.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Notification/__specs__/Notification.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Notification/_constants.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/PageTitle/PageTitle.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/PageTitle/__specs__/PageTitle.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/PageTitle/_constants.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/RouteLeavingGuard/RouteLeavingGuard.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/RouteLeavingGuard/__specs__/RouteLeavingGuard.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Spinner.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/SubmitButton/SubmitButton.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/SubmitButton/SubmitButton.stories.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/SubmitButton/__specs__/SubmitButton.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Thumb.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Titles/Titles.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Titles/__specs__/HeroSection.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Tutorial/Step/CreateOffer.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Tutorial/Step/CreateVenue.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Tutorial/Step/ManageBookings.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Tutorial/Step/Welcome.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Tutorial/TutorialDialog.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Tutorial/TutorialDialogContainer.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Tutorial/__specs__/TutorialDialog.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (168). Maximum allowed is 150.',
        line: 34,
        column: 28,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 201,
        endColumn: 2,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 132,
        column: 21,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 134,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 143,
        column: 21,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 145,
        endColumn: 12,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { act, fireEvent, render, screen } from '@testing-library/react'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport TutorialDialogContainer from 'components/layout/Tutorial/TutorialDialogContainer'\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\n\njest.mock('repository/pcapi/pcapi', () => ({\n  setHasSeenTutos: jest.fn().mockResolvedValue({}),\n}))\n\nconst stepTitles = [\n  'Bienvenue dans l’espace acteurs culturels',\n  'Gérer vos lieux culturels',\n  'Créer une offre',\n  'Suivre et gérer vos réservations',\n]\n\nconst renderTutorialDialog = async (store, props = {}) => {\n  return await act(async () => {\n    return render(\n      <Provider store={store}>\n        <MemoryRouter>\n          <TutorialDialogContainer {...props} />\n        </MemoryRouter>\n      </Provider>\n    )\n  })\n}\n\ndescribe('tutorial modal', () => {\n  let store\n\n  beforeEach(() => {\n    store = configureTestStore({})\n  })\n\n  it('should show tutorial dialog if user has not seen it yet', async () => {\n    store = configureTestStore({\n      data: {\n        users: [\n          {\n            id: 'test_id',\n            hasSeenProTutorials: false,\n          },\n        ],\n      },\n    })\n\n    const props = {}\n    await renderTutorialDialog(store, props)\n\n    expect(screen.getByText(stepTitles[0])).toBeInTheDocument()\n  })\n\n  it(\"shouldn't show tutorial dialog if user has already seen it\", async () => {\n    store = configureTestStore({\n      data: {\n        users: [\n          {\n            id: 'test_id',\n            hasSeenProTutorials: true,\n          },\n        ],\n      },\n    })\n    const props = {}\n\n    await renderTutorialDialog(store, props)\n\n    expect(screen.queryByText(stepTitles[0])).not.toBeInTheDocument()\n  })\n\n  describe('interacting with navigation buttons', () => {\n    let buttonNext\n    beforeEach(async () => {\n      store = configureTestStore({\n        data: {\n          users: [\n            {\n              id: 'test_id',\n              hasSeenProTutorials: false,\n            },\n          ],\n        },\n      })\n\n      await renderTutorialDialog(store)\n      buttonNext = screen.getByText('Suivant')\n    })\n\n    describe('from first step', () => {\n      it('should disabled \"previous\" button', async () => {\n        const buttonPrevious = screen.getByText('Précédent')\n        expect(buttonPrevious).toHaveAttribute('disabled')\n      })\n\n      it('should show change steps when clicking on \"next\"', async () => {\n        expect(screen.getByText(stepTitles[0])).toBeInTheDocument()\n\n        await fireEvent.click(buttonNext)\n        expect(screen.getByText(stepTitles[1])).toBeInTheDocument()\n\n        await fireEvent.click(buttonNext)\n        expect(screen.getByText(stepTitles[2])).toBeInTheDocument()\n\n        await fireEvent.click(buttonNext)\n        expect(screen.getByText(stepTitles[3])).toBeInTheDocument()\n      })\n    })\n\n    describe('from last step', () => {\n      let buttonPrevious\n\n      beforeEach(async () => {\n        await fireEvent.click(buttonNext)\n        await fireEvent.click(buttonNext)\n        await fireEvent.click(buttonNext)\n\n        buttonPrevious = screen.getByText('Précédent')\n      })\n\n      describe('when clicking on finish button', () => {\n        it('should close tutorial', async () => {\n          const buttonFinish = screen.queryByText('Terminer')\n          expect(buttonFinish).toBeInTheDocument()\n\n          expect(screen.getByTestId('tutorial-container')).toBeInTheDocument()\n          await act(async () => {\n            await fireEvent.click(buttonFinish)\n          })\n          expect(screen.queryByTestId('tutorial-container')).not.toBeInTheDocument()\n        })\n\n        it('should call set has seen tutos function', async () => {\n          const buttonFinish = screen.queryByText('Terminer')\n          expect(buttonFinish).toBeInTheDocument()\n\n          expect(screen.getByTestId('tutorial-container')).toBeInTheDocument()\n          await act(async () => {\n            await fireEvent.click(buttonFinish)\n          })\n          expect(pcapi.setHasSeenTutos).toHaveBeenCalledWith()\n        })\n      })\n\n      it('should change step when clicking on \"next\"', async () => {\n        expect(screen.getByText(stepTitles[3])).toBeInTheDocument()\n\n        await fireEvent.click(buttonPrevious)\n        expect(screen.getByText(stepTitles[2])).toBeInTheDocument()\n\n        await fireEvent.click(buttonPrevious)\n        expect(screen.getByText(stepTitles[1])).toBeInTheDocument()\n\n        await fireEvent.click(buttonPrevious)\n        expect(screen.getByText(stepTitles[0])).toBeInTheDocument()\n      })\n    })\n\n    it('should change step when clicking on \"previous\"', async () => {\n      await fireEvent.click(buttonNext)\n      await fireEvent.click(buttonNext)\n      await fireEvent.click(buttonNext)\n\n      const buttonPrevious = screen.queryByText('Précédent')\n\n      expect(screen.getByText(stepTitles[3])).toBeInTheDocument()\n\n      await fireEvent.click(buttonPrevious)\n      expect(screen.getByText(stepTitles[2])).toBeInTheDocument()\n\n      await fireEvent.click(buttonPrevious)\n      expect(screen.getByText(stepTitles[1])).toBeInTheDocument()\n\n      await fireEvent.click(buttonPrevious)\n      expect(screen.getByText(stepTitles[0])).toBeInTheDocument()\n    })\n\n    it('should go on the right step when clicking on dots', async () => {\n      const navDottes = screen.queryAllByTestId('nav-dot')\n\n      expect(screen.getByText(stepTitles[0])).toBeInTheDocument()\n\n      await fireEvent.click(navDottes[3])\n      expect(screen.getByText(stepTitles[3])).toBeInTheDocument()\n\n      await fireEvent.click(navDottes[1])\n      expect(screen.getByText(stepTitles[1])).toBeInTheDocument()\n\n      await fireEvent.click(navDottes[0])\n      expect(screen.getByText(stepTitles[0])).toBeInTheDocument()\n\n      await fireEvent.click(navDottes[2])\n      expect(screen.getByText(stepTitles[2])).toBeInTheDocument()\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/Tutorial/_constants.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/__specs__/Icon.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/__specs__/Logo.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/FieldErrors.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/CheckboxField.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/DateField/InputWithCalendar.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/HiddenField.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/NumberField.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/PasswordField.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/SirenField/SirenField.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/SirenField/__specs__/SirenField.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/SirenField/__specs__/formatSiren.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (66). Maximum allowed is 50.',
        line: 3,
        column: 78,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 68,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import formatSiren from '../formatSiren'\n\ndescribe('src | components | pages | OffererCreation | siren | formatSiren', () => {\n  describe('when siren is undefined', () => {\n    it('should return an empty string', () => {\n      // given\n      const siren = undefined\n\n      // when\n      const formatedSiret = formatSiren(siren)\n\n      // then\n      expect(formatedSiret).toBe('')\n    })\n  })\n\n  describe('when siren given is an empty string', () => {\n    it('should return an empty string', () => {\n      // given\n      const siren = ''\n\n      // when\n      const formatedSiret = formatSiren(siren)\n\n      // then\n      expect(formatedSiret).toBe('')\n    })\n  })\n\n  describe('when siren given is not a number', () => {\n    it('should return a string with only numbers', () => {\n      // given\n      const siren = '100F'\n\n      // when\n      const formatedSiret = formatSiren(siren)\n\n      // then\n      expect(formatedSiret).toBe('100')\n    })\n  })\n\n  describe('when value given is a valid SIRET', () => {\n    it('returns a formatted siren', () => {\n      // given\n      const siren = '41816609600069'\n\n      // when\n      const formatedSiret = formatSiren(siren)\n\n      // then\n      expect(formatedSiret).toBe('418166096')\n    })\n  })\n\n  describe('when value given is a valid SIREN', () => {\n    it('should ignore whitespaces', () => {\n      // given\n      const siren = '418    166 096'\n\n      // when\n      const formatedSiret = formatSiren(siren)\n\n      // then\n      expect(formatedSiret).toBe('418166096')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/SirenField/formatSiren.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/TextField.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/TextareaField.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/__specs__/CheckboxField.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/__specs__/HiddenField.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/__specs__/NumberField.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/__specs__/PasswordField.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/fields/__specs__/TextField.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/form/utils/getRequiredValidate.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/CheckboxInput/CheckboxInput.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/DateInput/DateInput.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/DurationInput/DurationInput.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/DurationInput/__specs__/DurationInput.spec.jsx',
    messages: [
      {
        ruleId: 'testing-library/no-dom-import',
        severity: 1,
        message:
          'import from DOM Testing Library is restricted, import from @testing-library/react instead',
        line: 2,
        column: 1,
        nodeType: 'ImportDeclaration',
        messageId: 'noDomImportFramework',
        endLine: 2,
        endColumn: 49,
        fix: { range: [61, 83], text: "'@testing-library/react'" },
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (185). Maximum allowed is 150.',
        line: 13,
        column: 55,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 197,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (16). Maximum allowed is 15.',
        line: 13,
        column: 55,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 197,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 1,
    source:
      "import '@testing-library/jest-dom'\nimport { fireEvent } from '@testing-library/dom'\nimport { render, screen } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport React from 'react'\n\nimport DurationInput from '../DurationInput'\n\nconst renderDurationInput = async props => {\n  await render(<DurationInput {...props} />)\n}\n\ndescribe('src | components | inputs | DurationInput', () => {\n  let props\n\n  beforeEach(() => {\n    props = {\n      label: 'Durée',\n      name: 'duration',\n      onChange: jest.fn(),\n    }\n  })\n\n  it('should display an input with correct name and placeholder', async () => {\n    // When\n    await renderDurationInput(props)\n\n    // Then\n    const durationInput = screen.getByRole('textbox')\n    expect(durationInput).toBeInTheDocument()\n    expect(durationInput).toHaveAttribute('name', props.name)\n    expect(durationInput).toHaveProperty('placeholder', 'HH:MM')\n  })\n\n  it('should init input with empty text when no initial duration is provided', async () => {\n    // When\n    await renderDurationInput(props)\n\n    // Then\n    const durationInput = screen.getByRole('textbox')\n    expect(durationInput).toHaveValue('')\n  })\n\n  it('should init input with duration in minutes converted in hours and minutes', async () => {\n    // Given\n    props.initialDurationInMinutes = 75\n\n    // When\n    await renderDurationInput(props)\n\n    // Then\n    const durationInput = screen.getByRole('textbox')\n    expect(durationInput).toHaveValue('1:15')\n  })\n\n  it('should pad minutes with 0 when initial duration in hours has less than 10 minutes', async () => {\n    // Given\n    props.initialDurationInMinutes = 60\n\n    // When\n    await renderDurationInput(props)\n\n    // Then\n    const durationInput = screen.getByRole('textbox')\n    expect(durationInput).toHaveValue('1:00')\n  })\n\n  it('should call onChange prop function with updated duration in minutes when user leave field', async () => {\n    // Given\n    await renderDurationInput(props)\n    const durationInput = screen.getByRole('textbox')\n    await userEvent.type(durationInput, '1:25')\n\n    // When\n    fireEvent.blur(durationInput)\n\n    // Then\n    expect(props.onChange).toHaveBeenCalledWith(85)\n    expect(durationInput).toHaveValue('1:25')\n  })\n\n  it('should consider as minute a single digit after \":\" when user leave field', async () => {\n    // Given\n    await renderDurationInput(props)\n    const durationInput = screen.getByRole('textbox')\n    userEvent.type(durationInput, '1:7')\n\n    // When\n    fireEvent.blur(durationInput)\n\n    // Then\n    expect(props.onChange).toHaveBeenCalledWith(67)\n    expect(durationInput).toHaveValue('1:07')\n  })\n\n  it('should consider as hours numbers with no \":\" when user leave field', async () => {\n    // Given\n    await renderDurationInput(props)\n    const durationInput = screen.getByRole('textbox')\n    userEvent.type(durationInput, '3')\n\n    // When\n    fireEvent.blur(durationInput)\n\n    // Then\n    expect(props.onChange).toHaveBeenCalledWith(180)\n    expect(durationInput).toHaveValue('3:00')\n  })\n\n  it('should call onChange prop function with null when user remove the duration', async () => {\n    // Given\n    await renderDurationInput(props)\n    const durationInput = screen.getByRole('textbox')\n    await userEvent.type(durationInput, '1:25')\n    fireEvent.blur(durationInput)\n    await userEvent.clear(durationInput)\n\n    // When\n    fireEvent.blur(durationInput)\n\n    // Then\n    expect(props.onChange).toHaveBeenLastCalledWith(null)\n    expect(durationInput).toHaveValue('')\n  })\n\n  it('should accept only numeric caracters', async () => {\n    // Given\n    await renderDurationInput(props)\n    const durationInput = screen.getByRole('textbox')\n\n    // When\n    await userEvent.type(durationInput, 'Accélérer1:13')\n\n    // Then\n    expect(durationInput).toHaveValue('1:13')\n  })\n\n  it('should accept only one hours-minutes separator', async () => {\n    // Given\n    await renderDurationInput(props)\n    const durationInput = screen.getByRole('textbox')\n\n    // When\n    await userEvent.type(durationInput, '1:34:23')\n\n    // Then\n    expect(durationInput).toHaveValue('1:34')\n  })\n\n  it('should accept only minutes with two digits', async () => {\n    // Given\n    await renderDurationInput(props)\n    const durationInput = screen.getByRole('textbox')\n\n    // When\n    await userEvent.type(durationInput, '1:346')\n\n    // Then\n    expect(durationInput).toHaveValue('1:34')\n  })\n\n  it('should not accept minutes to be over 59', async () => {\n    // Given\n    await renderDurationInput(props)\n    const durationInput = screen.getByRole('textbox')\n\n    // When\n    await userEvent.type(durationInput, '1:60')\n\n    // Then\n    expect(durationInput).toHaveValue('1:6')\n  })\n\n  it('should accept minutes equal to 59', async () => {\n    // Given\n    await renderDurationInput(props)\n    const durationInput = screen.getByRole('textbox')\n\n    // When\n    await userEvent.type(durationInput, '1:59')\n\n    // Then\n    expect(durationInput).toHaveValue('1:59')\n  })\n\n  it('should not accept minutes without hours', async () => {\n    // Given\n    await renderDurationInput(props)\n    const durationInput = screen.getByRole('textbox')\n\n    // When\n    await userEvent.type(durationInput, ':59')\n\n    // Then\n    expect(durationInput).toHaveValue('59')\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/Errors/InputError.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/PeriodSelector/InputWithCalendar.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/PeriodSelector/PeriodSelector.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/PeriodSelector/__specs__/PeriodSelector.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/RadioInput/RadioInput.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/Select.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/TextInput/TextInput.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/TextInput/__specs__/TextInput.spec.jsx',
    messages: [
      {
        ruleId: 'testing-library/no-dom-import',
        severity: 1,
        message:
          'import from DOM Testing Library is restricted, import from @testing-library/react instead',
        line: 2,
        column: 1,
        nodeType: 'ImportDeclaration',
        messageId: 'noDomImportFramework',
        endLine: 2,
        endColumn: 49,
        fix: { range: [61, 83], text: "'@testing-library/react'" },
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 1,
    source:
      "import '@testing-library/jest-dom'\nimport { fireEvent } from '@testing-library/dom'\nimport { render, screen } from '@testing-library/react'\nimport React from 'react'\n\nimport TextInput from '../TextInput'\n\ndescribe('src | components | layout | form | TextInput', () => {\n  let props\n  beforeEach(() => {\n    props = {\n      label: 'Label du champ',\n      name: 'text-input',\n      onChange: jest.fn(),\n      placeholder: 'My placeholder',\n      required: true,\n      type: 'text',\n      value: 'Some value',\n    }\n  })\n\n  it('should display a text input with the provided value', () => {\n    // when\n    render(<TextInput {...props} />)\n\n    // then\n    expect(screen.getByLabelText(props.label)).toBeInTheDocument()\n    expect(screen.getByLabelText(props.label)).toHaveAttribute('value', props.value)\n  })\n\n  it('should call onChange function when value changes', async () => {\n    // given\n    render(<TextInput {...props} />)\n    const offerTypeInput = await screen.findByLabelText(props.label)\n    const newValue = 'My new value'\n\n    // when\n    fireEvent.change(offerTypeInput, { target: { value: newValue } })\n\n    // then\n    expect(props.onChange).toHaveBeenCalledTimes(1)\n  })\n\n  it('should not display a length count when input has only a max length', () => {\n    // given\n    props.maxLength = 20\n\n    // when\n    render(<TextInput {...props} />)\n\n    // then\n    expect(screen.queryByText(`${props.value.length}/${props.maxLength}`)).not.toBeInTheDocument()\n  })\n\n  it('should display remainging characters when input has a max length and ask character count', () => {\n    // given\n    props.maxLength = 20\n    props.countCharacters = true\n\n    // when\n    render(<TextInput {...props} />)\n\n    // then\n    expect(screen.getByText(`${props.value.length}/${props.maxLength}`)).toBeInTheDocument()\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/TextInputWithIcon/TextInputWithIcon.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/TextareaInput.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/TimeInput/TimeInput.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/layout/inputs/__specs__/Select.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/matomo/Matomo.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/matomo/MatomoContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/matomo/__specs__/Matomo.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/matomo/__specs__/MatomoContainer.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/matomo/trackEventWrapper.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecap.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/BookingsRecapTable.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/BeneficiaryCell.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/BookingDateCell.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/BookingIsDuoCell.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/BookingOfferCell.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/BookingStatusCell.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/BookingStatusCellHistory.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/BookingTokenCell.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/__specs__/BeneficiaryCell.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/__specs__/BookingDateCell.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/__specs__/BookingOfferCell.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/__specs__/BookingStatusCell.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (214). Maximum allowed is 150.',
        line: 23,
        column: 43,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 236,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (175). Maximum allowed is 150.',
        line: 61,
        column: 23,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 235,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { render, screen } from '@testing-library/react'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport { configureTestStore } from 'store/testUtils'\n\nimport BookingStatusCell from '../BookingStatusCell'\n\nconst renderBookingStatusCell = props => {\n  const store = configureTestStore()\n\n  return render(\n    <Provider store={store}>\n      <MemoryRouter>\n        <BookingStatusCell {...props} />\n      </MemoryRouter>\n    </Provider>\n  )\n}\n\ndescribe('bookings | bookingsStatusCell', () => {\n  it('should display the status label', () => {\n    // Given\n    const props = {\n      bookingRecapInfo: {\n        original: {\n          stock: {\n            event_beginning_datetime: '2020-06-05T16:31:59.102163+02:00',\n            offer_name: 'Matrix',\n            type: 'event',\n          },\n          booking_is_duo: true,\n          beneficiary: {\n            email: 'loulou.duck@example.com',\n            firstname: 'Loulou',\n            lastname: 'Duck',\n          },\n          booking_date: '2020-01-04T20:31:12+01:00',\n          booking_token: '5U7M6U',\n          booking_status: 'validated',\n          booking_status_history: [\n            {\n              status: 'booked',\n              date: '2020-01-04T20:31:12+01:00',\n            },\n          ],\n        },\n      },\n    }\n\n    // When\n    renderBookingStatusCell(props)\n\n    // Then\n    const title = screen.getByText('validé', { selector: 'span' })\n    expect(title).toBeInTheDocument()\n  })\n\n  describe('tooltip', () => {\n    it('should display the offer title and history title and amount when it is not free', () => {\n      // Given\n      const expectedHistoryTitle = 'Historique'\n      const props = {\n        bookingRecapInfo: {\n          original: {\n            stock: {\n              event_beginning_datetime: '2020-06-05T16:31:59.102163+02:00',\n              offer_name: 'Matrix',\n              type: 'event',\n            },\n            booking_is_duo: true,\n            beneficiary: {\n              email: 'loulou.duck@example.com',\n              firstname: 'Loulou',\n              lastname: 'Duck',\n            },\n            booking_date: '2020-01-04T20:31:12+01:00',\n            booking_token: '5U7M6U',\n            booking_status: 'booked',\n            booking_amount: '10',\n            booking_status_history: [\n              {\n                status: 'booked',\n                date: '2020-01-04T20:31:12+01:00',\n              },\n            ],\n          },\n        },\n      }\n\n      // When\n      renderBookingStatusCell(props)\n\n      // Then\n      const title = screen.getByText(expectedHistoryTitle, { selector: 'div' })\n      expect(title).toBeInTheDocument()\n      const offer = screen.getByText('Matrix', { selector: 'div' })\n      expect(offer).toBeInTheDocument()\n      const amount = screen.getByText(`Prix : 10 €`, { selector: 'div' })\n      expect(amount).toBeInTheDocument()\n    })\n\n    it('should display the booking amount when it is not free', () => {\n      // Given\n      const props = {\n        bookingRecapInfo: {\n          original: {\n            stock: {\n              event_beginning_datetime: '2020-06-05T16:31:59.102163+02:00',\n              offer_name: 'Matrix',\n              type: 'event',\n            },\n            booking_is_duo: true,\n            beneficiary: {\n              email: 'loulou.duck@example.com',\n              firstname: 'Loulou',\n              lastname: 'Duck',\n            },\n            booking_date: '2020-01-04T20:31:12+01:00',\n            booking_token: '5U7M6U',\n            booking_status: 'booked',\n            booking_amount: '10',\n            booking_status_history: [\n              {\n                status: 'booked',\n                date: '2020-01-04T20:31:12+01:00',\n              },\n            ],\n          },\n        },\n      }\n\n      // When\n      renderBookingStatusCell(props)\n\n      // Then\n      const offer = screen.getByText('Matrix', { selector: 'div' })\n      expect(offer).toBeInTheDocument()\n      const amount = screen.getByText('Prix : 10 €', { selector: 'div' })\n      expect(amount).toBeInTheDocument()\n    })\n\n    it('should display the appropriate message when the offer is free', () => {\n      // Given\n      const props = {\n        bookingRecapInfo: {\n          original: {\n            stock: {\n              event_beginning_datetime: '2020-06-05T16:31:59.102163+02:00',\n              offer_name: 'Matrix',\n              type: 'event',\n            },\n            booking_is_duo: true,\n            beneficiary: {\n              email: 'loulou.duck@example.com',\n              firstname: 'Loulou',\n              lastname: 'Duck',\n            },\n            booking_date: '2020-01-04T20:31:12+01:00',\n            booking_token: '5U7M6U',\n            booking_status: 'booked',\n            booking_status_history: [\n              {\n                status: 'booked',\n                date: '2020-01-04T20:31:12+01:00',\n              },\n            ],\n          },\n        },\n      }\n\n      // When\n      renderBookingStatusCell(props)\n\n      // Then\n      const offer = screen.getByText('Matrix', { selector: 'div' })\n      expect(offer).toBeInTheDocument()\n      const amount = screen.getByText('Prix : Gratuit', { selector: 'div' })\n      expect(amount).toBeInTheDocument()\n    })\n\n    it('should display all the history dates present in booking recap history', () => {\n      // Given\n      const expectedNumberOfHistoryDates = 3\n      const props = {\n        bookingRecapInfo: {\n          original: {\n            stock: {\n              event_beginning_datetime: '2020-06-05T16:31:59.102163+02:00',\n              offer_name: 'Matrix',\n              type: 'event',\n            },\n            booking_is_duo: true,\n            beneficiary: {\n              email: 'loulou.duck@example.com',\n              firstname: 'Loulou',\n              lastname: 'Duck',\n            },\n            booking_date: '2020-01-04T20:31:12+01:00',\n            booking_token: '5U7M6U',\n            booking_status: 'booked',\n            booking_status_history: [\n              {\n                status: 'booked',\n                date: '2020-01-04T20:31:12+01:00',\n              },\n              {\n                status: 'validated',\n                date: '2020-01-05T20:31:12+01:00',\n              },\n              {\n                status: 'reimbursed',\n                date: '2020-01-06T20:31:12+01:00',\n              },\n            ],\n          },\n        },\n      }\n\n      // When\n      renderBookingStatusCell(props)\n\n      // Then\n      const historyCellReserved = screen.getByText('Réservé : 04/01/2020 20:31')\n      expect(historyCellReserved).toBeInTheDocument()\n      const historyCellValidated = screen.getByText('Réservation validée : 05/01/2020 20:31')\n      expect(historyCellValidated).toBeInTheDocument()\n      const historyCellReimbursed = screen.getByText('Remboursée : 06/01/2020')\n      expect(historyCellReimbursed).toBeInTheDocument()\n      const numberOfHistoryItemsDisplayed = screen.getAllByRole('listitem')\n      expect(numberOfHistoryItemsDisplayed).toHaveLength(expectedNumberOfHistoryDates)\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/__specs__/BookingStatusCellHistory.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/__specs__/BookingTokenCell.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/CellsFormatter/utils/bookingStatusConverter.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Filters/FilterByBookingStatus.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Filters/FilterByOmniSearch.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Filters/Filters.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Filters/__specs__/FilterByBookingStatus.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (194). Maximum allowed is 150.',
        line: 6,
        column: 48,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 199,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { mount } from 'enzyme'\nimport React from 'react'\n\nimport FilterByBookingStatus from '../FilterByBookingStatus'\n\ndescribe('components | FilterByBookingStatus', () => {\n  let props\n  beforeEach(() => {\n    props = {\n      bookingsRecap: [\n        {\n          stock: {\n            offer_name: 'Avez-vous déjà vu',\n            type: 'thing',\n          },\n          beneficiary: {\n            lastname: 'Klepi',\n            firstname: 'Sonia',\n            email: 'sonia.klepi@example.com',\n          },\n          booking_date: '2020-04-03T12:00:00Z',\n          booking_token: 'ZEHBGD',\n          booking_status: 'booked',\n          booking_is_duo: false,\n          venue_identifier: 'AE',\n          booking_status_history: [\n            {\n              status: 'booked',\n              date: '2020-04-03T12:00:00Z',\n            },\n          ],\n        },\n        {\n          stock: {\n            offer_name: 'Avez-vous déjà vu',\n            type: 'thing',\n          },\n          beneficiary: {\n            lastname: 'Klepi',\n            firstname: 'Sonia',\n            email: 'sonia.klepi@example.com',\n          },\n          booking_date: '2020-04-03T12:00:00Z',\n          booking_token: 'ZEHBGD',\n          booking_status: 'validated',\n          booking_is_duo: true,\n          venue_identifier: 'AF',\n          booking_status_history: [\n            {\n              status: 'booked',\n              date: '2020-04-03T12:00:00Z',\n            },\n          ],\n        },\n      ],\n      bookingStatuses: [],\n      updateGlobalFilters: jest.fn(),\n    }\n  })\n\n  it('should display a black filter icon', () => {\n    // when\n    const wrapper = mount(<FilterByBookingStatus {...props} />)\n\n    // then\n    const filterIcon = wrapper.find('img')\n    expect(filterIcon.prop('src')).toContain('ico-filter-status-black.svg')\n    expect(filterIcon.prop('alt')).toBe('Filtrer par statut')\n  })\n\n  it('should not display status filters', () => {\n    // when\n    const wrapper = mount(<FilterByBookingStatus {...props} />)\n\n    // then\n    const checkbox = wrapper.find('input')\n    const label = wrapper.find('label')\n    expect(checkbox).toHaveLength(0)\n    expect(label).toHaveLength(0)\n  })\n\n  describe('on focus on the filter icon', () => {\n    it('should display a red filter icon', () => {\n      // given\n      const wrapper = mount(<FilterByBookingStatus {...props} />)\n\n      // when\n      wrapper.find('button').simulate('focus')\n\n      // then\n      const filterIcon = wrapper.find('img')\n      expect(filterIcon.prop('src')).toContain('ico-filter-status-red.svg')\n      expect(filterIcon.prop('alt')).toBe('Filtrer par statut')\n    })\n\n    it('should show filters with all available status in data', () => {\n      // given\n      const wrapper = mount(<FilterByBookingStatus {...props} />)\n      const filterIcon = wrapper.find('img')\n\n      // when\n      filterIcon.simulate('focus')\n\n      // then\n      const checkbox = wrapper.find('input')\n      const label = wrapper.find('label')\n      expect(checkbox).toHaveLength(2)\n      expect(checkbox.at(0).props()).toStrictEqual({\n        checked: true,\n        id: 'bs-booked',\n        name: 'booked',\n        onChange: expect.any(Function),\n        type: 'checkbox',\n      })\n      expect(checkbox.at(1).props()).toStrictEqual({\n        checked: true,\n        id: 'bs-validated',\n        name: 'validated',\n        onChange: expect.any(Function),\n        type: 'checkbox',\n      })\n      expect(label).toHaveLength(2)\n      expect(label.at(0).text()).toBe('réservé')\n      expect(label.at(1).text()).toBe('validé')\n    })\n\n    it('should not hide filters on click on a checkbox', () => {\n      // given\n      const wrapper = mount(<FilterByBookingStatus {...props} />)\n      const filterIcon = wrapper.find('img')\n      filterIcon.simulate('focus')\n\n      const checkbox = wrapper.find('input').at(0)\n\n      // when\n      checkbox.simulate('mouseDown')\n      filterIcon.simulate('blur')\n      checkbox.simulate('mouseUp')\n\n      // then\n      const label = wrapper.find('label')\n      expect(label).toHaveLength(2)\n    })\n\n    it('should add value to filters when unchecking on a checkbox', () => {\n      // given\n      const wrapper = mount(<FilterByBookingStatus {...props} />)\n      wrapper.find('img').simulate('focus')\n\n      const checkbox = wrapper.find('input').at(0)\n\n      // when\n      checkbox.simulate('change', { target: { name: 'validated', checked: false } })\n\n      // then\n      expect(props.updateGlobalFilters).toHaveBeenCalledWith({\n        bookingStatus: ['validated'],\n      })\n    })\n\n    it('should remove value from filters when checking the checkbox', () => {\n      // given\n      const propsWithInitialFilter = {\n        ...props,\n        bookingStatuses: ['validated'],\n      }\n      const wrapper = mount(<FilterByBookingStatus {...propsWithInitialFilter} />)\n      wrapper.find('img').simulate('focus')\n\n      const checkbox = wrapper.find('input').at(0)\n\n      // when\n      checkbox.simulate('change', { target: { name: 'validated', checked: true } })\n\n      // then\n      expect(props.updateGlobalFilters).toHaveBeenCalledWith({\n        bookingStatus: [],\n      })\n    })\n\n    it('should add value to already filtered booking status when clicking on a checkbox', () => {\n      // given\n      const wrapper = mount(<FilterByBookingStatus {...props} />)\n      wrapper.find('img').simulate('focus')\n\n      const validatedStatusCheckbox = wrapper.find('input').at(0)\n      validatedStatusCheckbox.simulate('change', { target: { name: 'validated', checked: false } })\n      const bookedStatusCheckbox = wrapper.find('input').at(1)\n\n      // when\n      bookedStatusCheckbox.simulate('change', { target: { name: 'booked', checked: false } })\n\n      // then\n      expect(props.updateGlobalFilters).toHaveBeenCalledWith({\n        bookingStatus: ['validated', 'booked'],\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Filters/__specs__/FilterByOmniSearch.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Filters/__specs__/Filters.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Filters/_constants.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Filters/getAvailableBookingStatuses.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Header/Header.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Header/__specs__/Header.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/NB_BOOKINGS_PER_PAGE.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/NoFilteredBookings/NoFilteredBookings.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/NoFilteredBookings/__specs__/NoFilteredBookings.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Table/Body/TableBody.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Table/Head/TableHead.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Table/Head/__specs__/Head.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (203). Maximum allowed is 150.',
        line: 8,
        column: 59,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 210,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { shallow } from 'enzyme'\nimport React from 'react'\n\nimport Icon from 'components/layout/Icon'\n\nimport TableHead from '../TableHead'\n\ndescribe('components | pages | TableWrapper | TableHead', () => {\n  it('should render one line with all columns', () => {\n    // Given\n    const props = {\n      headerGroups: [\n        {\n          id: 1,\n          headers: [\n            {\n              id: 1,\n              headerTitle: 'Offres',\n              render: jest.fn(() => (\n                <span>\n                  Offres\n                </span>\n              )),\n              getHeaderProps: jest.fn(),\n              getSortByToggleProps: jest.fn(),\n            },\n            {\n              id: 2,\n              headerTitle: 'Beneficiaires',\n              render: jest.fn(() => (\n                <span>\n                  Beneficiaires\n                </span>\n              )),\n              getHeaderProps: jest.fn(),\n              getSortByToggleProps: jest.fn(),\n            },\n          ],\n        },\n      ],\n    }\n\n    // When\n    const wrapper = shallow(<TableHead {...props} />)\n\n    // Then\n    expect(wrapper.find('th')).toHaveLength(2)\n    expect(wrapper.find('th').at(0).text()).toBe('Offres')\n    expect(wrapper.find('th').at(1).text()).toBe('Beneficiaires')\n  })\n\n  it('should return no line when there is no headers', () => {\n    // Given\n    const props = {\n      headerGroups: [],\n    }\n\n    // When\n    const wrapper = shallow(<TableHead {...props} />)\n\n    // Then\n    expect(wrapper.find('tr')).toHaveLength(0)\n  })\n\n  it('should render one line with default sorting icon when column is sortable', () => {\n    // Given\n    const props = {\n      headerGroups: [\n        {\n          id: 1,\n          headers: [\n            {\n              id: 1,\n              headerTitle: 'Offres',\n              render: jest.fn(() => (\n                <span>\n                  Offres\n                </span>\n              )),\n              getHeaderProps: jest.fn(),\n              getSortByToggleProps: jest.fn(),\n              canSort: true,\n            },\n          ],\n        },\n      ],\n    }\n\n    // When\n    const wrapper = shallow(<TableHead {...props} />)\n\n    // Then\n    const firstColumn = wrapper.find('th')\n    expect(firstColumn).toHaveLength(1)\n    expect(firstColumn.find({ children: 'Offres' })).toHaveLength(1)\n    const defaultSortingIcon = firstColumn.find(Icon)\n    expect(defaultSortingIcon).toHaveLength(1)\n    expect(defaultSortingIcon.prop('svg')).toBe('ico-unfold')\n  })\n\n  it('should render one line with no default sorting icon when column is not sortable', () => {\n    // Given\n    const props = {\n      headerGroups: [\n        {\n          id: 1,\n          headers: [\n            {\n              id: 1,\n              headerTitle: 'Offres',\n              render: jest.fn(() => (\n                <span>\n                  Offres\n                </span>\n              )),\n              getHeaderProps: jest.fn(),\n              getSortByToggleProps: jest.fn(),\n              canSort: false,\n            },\n          ],\n        },\n      ],\n    }\n\n    // When\n    const wrapper = shallow(<TableHead {...props} />)\n\n    // Then\n    const firstColumn = wrapper.find('th')\n    expect(firstColumn).toHaveLength(1)\n    expect(firstColumn.find({ children: 'Offres' })).toHaveLength(1)\n    const defaultSortingIcon = firstColumn.find(Icon)\n    expect(defaultSortingIcon).toHaveLength(0)\n  })\n\n  it('should render one line with icon sorted ASC when column is sorted by ASC', () => {\n    // Given\n    const props = {\n      headerGroups: [\n        {\n          id: 1,\n          headers: [\n            {\n              id: 1,\n              headerTitle: 'Offres',\n              render: jest.fn(() => (\n                <span>\n                  Offres\n                </span>\n              )),\n              getHeaderProps: jest.fn(),\n              getSortByToggleProps: jest.fn(),\n              canSort: true,\n              isSorted: true,\n            },\n          ],\n        },\n      ],\n    }\n\n    // When\n    const wrapper = shallow(<TableHead {...props} />)\n\n    // Then\n    const firstColumn = wrapper.find('th')\n    expect(firstColumn).toHaveLength(1)\n    expect(firstColumn.find({ children: 'Offres' })).toHaveLength(1)\n    const defaultSortingIcon = firstColumn.find(Icon)\n    expect(defaultSortingIcon).toHaveLength(1)\n    expect(defaultSortingIcon.prop('svg')).toBe('ico-arrow-down-r')\n  })\n\n  it('should render one line with icon sorted DESC when column is sorted by DESC', () => {\n    // Given\n    const props = {\n      headerGroups: [\n        {\n          id: 1,\n          headers: [\n            {\n              id: 1,\n              headerTitle: 'Offres',\n              render: jest.fn(() => (\n                <span>\n                  Offres\n                </span>\n              )),\n              getHeaderProps: jest.fn(),\n              getSortByToggleProps: jest.fn(),\n              canSort: true,\n              isSorted: true,\n              isSortedDesc: true,\n            },\n          ],\n        },\n      ],\n    }\n\n    // When\n    const wrapper = shallow(<TableHead {...props} />)\n\n    // Then\n    const firstColumn = wrapper.find('th')\n    expect(firstColumn).toHaveLength(1)\n    expect(firstColumn.find({ children: 'Offres' })).toHaveLength(1)\n    const defaultSortingIcon = firstColumn.find(Icon)\n    expect(defaultSortingIcon).toHaveLength(1)\n    expect(defaultSortingIcon.prop('svg')).toBe('ico-arrow-up-r')\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Table/Paginate/TablePagination.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Table/Paginate/__specs__/Paginate.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Table/TableFrame.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Table/TableWrapper.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/Table/__specs__/TableFrame.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (328). Maximum allowed is 150.',
        line: 16,
        column: 37,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 343,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (174). Maximum allowed is 150.',
        line: 169,
        column: 26,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 342,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (322). Maximum allowed is 300.',
        line: 320,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 344,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "/* eslint-disable react/prop-types */\nimport { mount } from 'enzyme'\nimport React from 'react'\nimport * as reactTable from 'react-table'\n\nimport TableHead from '../Head/TableHead'\nimport TablePagination from '../Paginate/TablePagination'\nimport TableFrame from '../TableFrame'\n\nconst CellMock = ({ offer: { offer_name: offerName } }) => (\n  <span>\n    {offerName}\n  </span>\n)\n\ndescribe('components | TableFrame', () => {\n  it('should render a TableHead component with the right props', () => {\n    // Given\n    const mockedValues = {\n      canPreviousPage: true,\n      canNextPage: true,\n      getTableProps: jest.fn(() => ({})),\n      getTableBodyProps: jest.fn(() => ({})),\n      headerGroups: [\n        {\n          id: 1,\n          headers: [\n            {\n              id: 1,\n              headerTitle: 'Offres',\n              render: jest.fn(() => (\n                <span>\n                  Offres\n                </span>\n              )),\n              getHeaderProps: jest.fn(),\n              getSortByToggleProps: jest.fn(),\n            },\n            {\n              id: 2,\n              headerTitle: 'Beneficiaires',\n              render: jest.fn(() => (\n                <span>\n                  Beneficiaires\n                </span>\n              )),\n              getHeaderProps: jest.fn(),\n              getSortByToggleProps: jest.fn(),\n            },\n          ],\n        },\n      ],\n      nextPage: jest.fn(),\n      previousPage: jest.fn(),\n      prepareRow: jest.fn(),\n      page: [],\n      pageCount: 1,\n      state: {\n        pageIndex: 0,\n      },\n    }\n    const useTableSpy = jest\n      .spyOn(reactTable, 'useTable')\n      .mockImplementationOnce(() => mockedValues)\n    const props = {\n      columns: [\n        {\n          id: 1,\n          headerTitle: 'Stock',\n          accessor: 'stock',\n          getHeaderProps: jest.fn(),\n          getSortByToggleProps: jest.fn(),\n        },\n        {\n          id: 2,\n          headerTitle: 'Beneficiaire',\n          accessor: 'beneficiary',\n          getHeaderProps: jest.fn(),\n          getSortByToggleProps: jest.fn(),\n        },\n      ],\n      currentPage: 0,\n      data: [{}],\n      nbBookings: 1,\n      nbBookingsPerPage: 1,\n      updateCurrentPage: jest.fn(),\n    }\n\n    useTableSpy.mockReturnValue(mockedValues)\n\n    // When\n    const table = mount(<TableFrame {...props} />)\n\n    // Then\n    const tableHead = table.find(TableHead)\n    expect(tableHead).toHaveLength(1)\n    expect(tableHead.props()).toStrictEqual({\n      headerGroups: mockedValues.headerGroups,\n    })\n  })\n\n  it('should display the correct numbers of rows', () => {\n    // Given\n    const props = {\n      columns: [\n        {\n          id: 1,\n          headerTitle: 'Stock',\n          accessor: 'stock',\n          // eslint-disable-next-line react/display-name, react/no-multi-comp\n          Cell: function ({ value }) {\n            return <CellMock offer={value} />\n          },\n          getHeaderProps: jest.fn(),\n          getSortByToggleProps: jest.fn(),\n        },\n        {\n          id: 2,\n          headerTitle: 'Beneficiaire',\n          accessor: 'beneficiary',\n          // eslint-disable-next-line react/display-name, react/no-multi-comp\n          Cell: function ({ value }) {\n            return <CellMock offer={value} />\n          },\n          getHeaderProps: jest.fn(),\n          getSortByToggleProps: jest.fn(),\n        },\n      ],\n      data: [\n        {\n          stock: {\n            offer_name: 'Avez-vous déjà vu',\n          },\n          beneficiary: {\n            lastname: 'Klepi',\n            firstname: 'Sonia',\n            email: 'sonia.klepi@example.com',\n          },\n          booking_date: '2020-04-03T12:00:00Z',\n          booking_token: 'ZEHBGD',\n        },\n        {\n          stock: {\n            offer_name: 'Avez-vous déjà vu',\n          },\n          beneficiary: {\n            lastname: 'Klepi',\n            firstname: 'Sonia',\n            email: 'sonia.klepi@example.com',\n          },\n          booking_date: '2020-04-03T12:00:00Z',\n          booking_token: 'ZEHBGD',\n        },\n      ],\n      nbBookings: 2,\n      nbBookingsPerPage: 2,\n      currentPage: 0,\n      updateCurrentPage: jest.fn(),\n    }\n\n    // When\n    const table = mount(<TableFrame {...props} />)\n\n    // Then\n    const tableRowsNumber = table.find('tbody > tr').length\n    expect(tableRowsNumber).toBe(2)\n  })\n\n  describe('pagination', () => {\n    it('should render a TablePagination component with the right props', () => {\n      // Given\n      const props = {\n        columns: [\n          {\n            id: 1,\n            headerTitle: 'Stock',\n            accessor: 'stock',\n            // eslint-disable-next-line react/display-name, react/no-multi-comp\n            Cell: function ({ value }) {\n              return <CellMock offer={value} />\n            },\n            getHeaderProps: jest.fn(),\n            getSortByToggleProps: jest.fn(),\n          },\n        ],\n        data: [\n          { stock: { offer_name: 'Avez-vous déjà vu 1' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 2' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 3' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 4' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 5' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 6' } },\n        ],\n        nbBookings: 6,\n        nbBookingsPerPage: 5,\n        currentPage: 0,\n        updateCurrentPage: jest.fn(),\n      }\n\n      // When\n      const wrapper = mount(<TableFrame {...props} />)\n\n      // Then\n      const paginate = wrapper.find(TablePagination)\n      expect(paginate).toHaveLength(1)\n      expect(paginate.props()).toStrictEqual({\n        canNextPage: true,\n        canPreviousPage: false,\n        currentPage: 1,\n        nbPages: 2,\n        nextPage: expect.any(Function),\n        previousPage: expect.any(Function),\n      })\n    })\n\n    it('should render five bookings on page 1', () => {\n      // Given\n      const props = {\n        columns: [\n          {\n            id: 1,\n            headerTitle: 'Stock',\n            accessor: 'stock',\n            // eslint-disable-next-line react/display-name, react/no-multi-comp\n            Cell: function ({ value }) {\n              return <CellMock offer={value} />\n            },\n            getHeaderProps: jest.fn(),\n            getSortByToggleProps: jest.fn(),\n          },\n        ],\n        data: [\n          { stock: { offer_name: 'Avez-vous déjà vu 1' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 2' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 3' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 4' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 5' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 6' } },\n        ],\n        nbBookings: 6,\n        nbBookingsPerPage: 5,\n        currentPage: 0,\n        updateCurrentPage: jest.fn(),\n      }\n\n      // When\n      const wrapper = mount(<TableFrame {...props} />)\n\n      // Then\n      const bookingsOnPageOne = wrapper.find('tbody').find('tr')\n      expect(bookingsOnPageOne.at(0).text()).toBe('Avez-vous déjà vu 1')\n      expect(bookingsOnPageOne.at(1).text()).toBe('Avez-vous déjà vu 2')\n      expect(bookingsOnPageOne.at(2).text()).toBe('Avez-vous déjà vu 3')\n      expect(bookingsOnPageOne.at(3).text()).toBe('Avez-vous déjà vu 4')\n      expect(bookingsOnPageOne.at(4).text()).toBe('Avez-vous déjà vu 5')\n      expect(bookingsOnPageOne).toHaveLength(5)\n    })\n\n    it('should render one booking on page 2 when clicking on next page', () => {\n      // Given\n      const props = {\n        columns: [\n          {\n            id: 1,\n            headerTitle: 'Stock',\n            accessor: 'stock',\n            // eslint-disable-next-line react/display-name, react/no-multi-comp\n            Cell: function ({ value }) {\n              return <CellMock offer={value} />\n            },\n            getHeaderProps: jest.fn(),\n            getSortByToggleProps: jest.fn(),\n          },\n        ],\n        data: [\n          { stock: { offer_name: 'Avez-vous déjà vu 1' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 2' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 3' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 4' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 5' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 6' } },\n        ],\n        nbBookings: 6,\n        nbBookingsPerPage: 5,\n        currentPage: 0,\n        updateCurrentPage: jest.fn(),\n      }\n      const wrapper = mount(<TableFrame {...props} />)\n      const paginate = wrapper.find(TablePagination)\n      const nextPageButton = paginate.find('button').at(1)\n\n      // When\n      nextPageButton.simulate('click')\n\n      // Then\n      const bookingsOnPageTwo = wrapper.find('tbody').find('tr')\n      expect(bookingsOnPageTwo).toHaveLength(1)\n      expect(bookingsOnPageTwo.at(0).text()).toBe('Avez-vous déjà vu 6')\n      expect(props.updateCurrentPage).toHaveBeenCalledTimes(1)\n      expect(props.updateCurrentPage).toHaveBeenCalledWith(1)\n    })\n\n    it('should go to previous when clicking on previous page button', () => {\n      // Given\n      const props = {\n        columns: [\n          {\n            id: 1,\n            headerTitle: 'Stock',\n            accessor: 'stock',\n            // eslint-disable-next-line react/display-name, react/no-multi-comp\n            Cell: function ({ value }) {\n              return <CellMock offer={value} />\n            },\n            getHeaderProps: jest.fn(),\n            getSortByToggleProps: jest.fn(),\n          },\n        ],\n        data: [\n          { stock: { offer_name: 'Avez-vous déjà vu 1' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 2' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 3' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 4' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 5' } },\n          { stock: { offer_name: 'Avez-vous déjà vu 6' } },\n        ],\n        nbBookings: 6,\n        nbBookingsPerPage: 5,\n        currentPage: 1,\n        updateCurrentPage: jest.fn(),\n      }\n      const wrapper = mount(<TableFrame {...props} />)\n      const paginate = wrapper.find(TablePagination)\n\n      // When\n      const previousPageButton = paginate.find('button').at(0)\n      previousPageButton.simulate('click')\n\n      // Then\n      expect(props.updateCurrentPage).toHaveBeenNthCalledWith(1, 0)\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/__specs__/BookingsRecapTable.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (960). Maximum allowed is 150.',
        line: 28,
        column: 45,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 987,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (16). Maximum allowed is 15.',
        line: 28,
        column: 45,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 987,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (16). Maximum allowed is 15.',
        line: 109,
        column: 50,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 165,
        endColumn: 4,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (20). Maximum allowed is 15.',
        line: 214,
        column: 47,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 283,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (930). Maximum allowed is 300.',
        line: 318,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 988,
        endColumn: 1,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (25). Maximum allowed is 15.',
        line: 407,
        column: 69,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 512,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 6,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { mount, shallow } from 'enzyme'\nimport React from 'react'\n\nimport { ReactComponent } from 'utils/svgrMock'\n\nimport BookingsRecapTable from '../BookingsRecapTable'\nimport BeneficiaryCell from '../CellsFormatter/BeneficiaryCell'\nimport BookingDateCell from '../CellsFormatter/BookingDateCell'\nimport BookingIsDuoCell from '../CellsFormatter/BookingIsDuoCell'\nimport BookingOfferCell from '../CellsFormatter/BookingOfferCell'\nimport BookingStatusCell from '../CellsFormatter/BookingStatusCell'\nimport BookingTokenCell from '../CellsFormatter/BookingTokenCell'\nimport { ALL_BOOKING_STATUS, EMPTY_FILTER_VALUE } from '../Filters/_constants'\nimport Filters from '../Filters/Filters'\nimport Header from '../Header/Header'\nimport { NB_BOOKINGS_PER_PAGE } from '../NB_BOOKINGS_PER_PAGE'\nimport NoFilteredBookings from '../NoFilteredBookings/NoFilteredBookings'\nimport TablePagination from '../Table/Paginate/TablePagination'\nimport TableFrame from '../Table/TableFrame'\nimport filterBookingsRecap from '../utils/filterBookingsRecap'\n\njest.mock('../NB_BOOKINGS_PER_PAGE', () => ({\n  NB_BOOKINGS_PER_PAGE: 1,\n}))\njest.mock('lodash.debounce', () => jest.fn(callback => callback))\njest.mock('../utils/filterBookingsRecap', () => jest.fn())\n\ndescribe('components | BookingsRecapTable', () => {\n  it('should render a TableContainer component with columns and data props', () => {\n    // Given\n    const bookingsRecap = [\n      {\n        stock: {\n          offer_name: 'Avez-vous déjà vu',\n          type: 'thing',\n        },\n        beneficiary: {\n          lastname: 'Klepi',\n          firstname: 'Sonia',\n          email: 'sonia.klepi@example.com',\n        },\n        booking_amount: 10,\n        booking_date: '2020-04-03T12:00:00Z',\n        booking_token: 'ZEHBGD',\n        booking_status: 'validated',\n        booking_is_duo: false,\n        venue_identifier: 'AE',\n        booking_status_history: [\n          {\n            status: 'booked',\n            date: '2020-04-03T12:00:00Z',\n          },\n          {\n            status: 'validated',\n            date: '2020-05-03T12:00:00Z',\n          },\n        ],\n      },\n      {\n        stock: {\n          offer_name: 'Avez-vous déjà vu',\n          type: 'thing',\n        },\n        beneficiary: {\n          lastname: 'Klepi',\n          firstname: 'Sonia',\n          email: 'sonia.klepi@example.com',\n        },\n        booking_amount: 10,\n        booking_date: '2020-04-03T12:00:00Z',\n        booking_token: 'ZEHBGD',\n        booking_status: 'validated',\n        booking_is_duo: true,\n        venue_identifier: 'AF',\n        booking_status_history: [\n          {\n            status: 'booked',\n            date: '2020-04-03T12:00:00Z',\n          },\n          {\n            status: 'validated',\n            date: '2020-05-03T12:00:00Z',\n          },\n        ],\n      },\n    ]\n    filterBookingsRecap.mockReturnValue(bookingsRecap)\n    const props = {\n      bookingsRecap: bookingsRecap,\n      isLoading: false,\n    }\n\n    // When\n    const wrapper = shallow(<BookingsRecapTable {...props} />)\n    const table = wrapper.find(TableFrame)\n\n    // Then\n    expect(table).toHaveLength(1)\n    expect(table.props()).toStrictEqual({\n      columns: wrapper.state('columns'),\n      data: bookingsRecap,\n      nbBookings: 2,\n      nbBookingsPerPage: NB_BOOKINGS_PER_PAGE,\n      currentPage: 0,\n      updateCurrentPage: expect.any(Function),\n    })\n  })\n\n  it('should render the expected table headers', () => {\n    // Given\n    const props = {\n      bookingsRecap: [\n        {\n          stock: {\n            offer_name: 'Avez-vous déjà vu',\n            type: 'thing',\n          },\n          beneficiary: {\n            lastname: 'Klepi',\n            firstname: 'Sonia',\n            email: 'sonia.klepi@example.com',\n          },\n          booking_amount: 10,\n          booking_date: '2020-04-03T12:00:00Z',\n          booking_token: 'ZEHBGD',\n          booking_status: 'validated',\n          booking_is_duo: true,\n          venue: {\n            identifier: 'AE',\n            name: 'Librairie Kléber',\n          },\n          booking_status_history: [\n            {\n              status: 'booked',\n              date: '2020-04-03T12:00:00Z',\n            },\n            {\n              status: 'validated',\n              date: '2020-05-12T12:00:00Z',\n            },\n          ],\n        },\n      ],\n      isLoading: false,\n    }\n    filterBookingsRecap.mockReturnValue(props.bookingsRecap)\n\n    // When\n    const wrapper = mount(<BookingsRecapTable {...props} />)\n\n    // Then\n    const firstHeader = wrapper.find('th').at(0)\n    const secondHeader = wrapper.find('th').at(1)\n    const thirdHeader = wrapper.find('th').at(2)\n    const fourthHeader = wrapper.find('th').at(3)\n    const fifthHeader = wrapper.find('th').at(4)\n    const sixthHeader = wrapper.find('th').at(5)\n    expect(wrapper.find('th')).toHaveLength(6)\n    expect(firstHeader.text()).toBe(\"Nom de l'offre\")\n    expect(secondHeader.text()).toBe('')\n    expect(thirdHeader.text()).toBe('Bénéficiaire')\n    expect(fourthHeader.text()).toBe('Réservation')\n    expect(fifthHeader.text()).toBe('Contremarque')\n    expect(sixthHeader.text()).toContain('Statut')\n  })\n\n  it('should render a filter icon in \"statut\" header', () => {\n    // Given\n    const props = {\n      bookingsRecap: [\n        {\n          stock: {\n            offer_name: 'Avez-vous déjà vu',\n            type: 'thing',\n          },\n          beneficiary: {\n            lastname: 'Klepi',\n            firstname: 'Sonia',\n            email: 'sonia.klepi@example.com',\n          },\n          booking_amount: 10,\n          booking_date: '2020-04-03T12:00:00Z',\n          booking_token: 'ZEHBGD',\n          booking_status: 'validated',\n          booking_is_duo: true,\n          venue: {\n            identifier: 'AE',\n            name: 'Librairie Kléber',\n          },\n          booking_status_history: [\n            {\n              status: 'booked',\n              date: '2020-04-03T12:00:00Z',\n            },\n            {\n              status: 'validated',\n              date: '2020-05-12T12:00:00Z',\n            },\n          ],\n        },\n      ],\n      isLoading: false,\n    }\n    filterBookingsRecap.mockReturnValue(props.bookingsRecap)\n\n    // When\n    const wrapper = mount(<BookingsRecapTable {...props} />)\n\n    // Then\n    const sixthHeader = wrapper.find('th').at(5)\n    expect(sixthHeader.find('img').prop('src')).toContain('ico-filter-status-black.svg')\n  })\n\n  it('should render the expected table rows', () => {\n    // Given\n    const bookingsRecap = [\n      {\n        stock: {\n          offer_name: 'Avez-vous déjà vu',\n          type: 'thing',\n        },\n        beneficiary: {\n          lastname: 'Klepi',\n          firstname: 'Sonia',\n          email: 'sonia.klepi@example.com',\n        },\n        booking_amount: 10,\n        booking_date: '2020-04-03T12:00:00Z',\n        booking_token: 'ZEHBGD',\n        booking_status: 'validated',\n        booking_is_duo: true,\n        venue: {\n          identifier: 'AE',\n          name: 'Librairie Kléber',\n        },\n        booking_status_history: [\n          {\n            status: 'booked',\n            date: '2020-04-03T12:00:00Z',\n          },\n          {\n            status: 'validated',\n            date: '2020-04-13T12:00:00Z',\n          },\n        ],\n      },\n    ]\n    filterBookingsRecap.mockReturnValue(bookingsRecap)\n\n    const props = {\n      bookingsRecap: bookingsRecap,\n      isLoading: false,\n    }\n\n    // When\n    const wrapper = mount(<BookingsRecapTable {...props} />)\n\n    // Then\n    const bookingOfferCell = wrapper.find(BookingOfferCell)\n    expect(bookingOfferCell).toHaveLength(1)\n    expect(bookingOfferCell.props()).toStrictEqual({\n      offer: { offer_name: 'Avez-vous déjà vu', type: 'thing' },\n    })\n    const duoCell = wrapper.find(BookingIsDuoCell)\n    expect(duoCell.find(ReactComponent).props()).toMatchObject({\n      title: 'Réservation DUO',\n    })\n    const beneficiaryCell = wrapper.find(BeneficiaryCell)\n    expect(beneficiaryCell).toHaveLength(1)\n    expect(beneficiaryCell.props()).toStrictEqual({\n      beneficiaryInfos: { email: 'sonia.klepi@example.com', firstname: 'Sonia', lastname: 'Klepi' },\n    })\n    const bookingDateCell = wrapper.find(BookingDateCell)\n    expect(bookingDateCell).toHaveLength(1)\n    expect(bookingDateCell.props()).toStrictEqual({\n      bookingDateTimeIsoString: '2020-04-03T12:00:00Z',\n    })\n    const bookingTokenCell = wrapper.find(BookingTokenCell)\n    expect(bookingTokenCell).toHaveLength(1)\n    expect(bookingTokenCell.props()).toStrictEqual({ bookingToken: 'ZEHBGD' })\n    const bookingStatusCell = wrapper.find(BookingStatusCell)\n    expect(bookingStatusCell).toHaveLength(1)\n  })\n\n  it('should render the expected table with max given number of hits per page', () => {\n    // Given\n    const bookingsRecap = [\n      {\n        stock: {\n          offer_name: 'Avez-vous déjà vu',\n          type: 'thing',\n        },\n        beneficiary: {\n          lastname: 'Klepi',\n          firstname: 'Sonia',\n          email: 'sonia.klepi@example.com',\n        },\n        booking_amount: 10,\n        booking_date: '2020-04-03T12:00:00Z',\n        booking_is_duo: false,\n        booking_token: 'ZEHBGD',\n        booking_status: 'validated',\n        venue: {\n          identifier: 'AE',\n          name: 'Librairie Kléber',\n        },\n        booking_status_history: [\n          {\n            status: 'booked',\n            date: '2020-04-03T12:00:00Z',\n          },\n          {\n            status: 'validated',\n            date: '2020-05-01T12:00:00Z',\n          },\n        ],\n      },\n    ]\n    filterBookingsRecap.mockReturnValue(bookingsRecap)\n    const props = {\n      bookingsRecap: bookingsRecap,\n      isLoading: false,\n    }\n\n    // When\n    const wrapper = mount(<BookingsRecapTable {...props} />)\n\n    // Then\n    const table = wrapper.find(TableFrame)\n    expect(table).toHaveLength(1)\n    expect(table.props()).toStrictEqual({\n      columns: wrapper.state('columns'),\n      data: bookingsRecap,\n      nbBookings: 1,\n      nbBookingsPerPage: NB_BOOKINGS_PER_PAGE,\n      currentPage: 0,\n      updateCurrentPage: expect.any(Function),\n    })\n  })\n\n  it('should render a Header component when there is at least one filtered booking', () => {\n    // given\n    const bookingsRecap = [\n      {\n        stock: {\n          offer_name: 'Avez-vous déjà vu',\n          type: 'thing',\n        },\n        beneficiary: {\n          lastname: 'Klepi',\n          firstname: 'Sonia',\n          email: 'sonia.klepi@example.com',\n        },\n        booking_amount: 10,\n        booking_date: '2020-04-03T12:00:00Z',\n        booking_token: 'ZEHBGD',\n        booking_status: 'validated',\n        booking_is_duo: false,\n        venue_identifier: 'AE',\n        booking_status_history: [\n          {\n            status: 'booked',\n            date: '2020-04-03T12:00:00Z',\n          },\n          {\n            status: 'validated',\n            date: '2020-06-01T12:00:00Z',\n          },\n        ],\n      },\n    ]\n    filterBookingsRecap.mockReturnValue(bookingsRecap)\n    const props = {\n      bookingsRecap: bookingsRecap,\n      isLoading: false,\n    }\n\n    // When\n    const wrapper = shallow(<BookingsRecapTable {...props} />)\n\n    // Then\n    const header = wrapper.find(Header)\n    expect(header).toHaveLength(1)\n    expect(header.props()).toStrictEqual({\n      bookingsRecapFiltered: bookingsRecap,\n      isLoading: false,\n    })\n  })\n\n  it('should not render a Header component when there is no filtered booking', () => {\n    // given\n    const bookingsRecap = []\n    const props = {\n      bookingsRecap: bookingsRecap,\n      isLoading: false,\n    }\n    filterBookingsRecap.mockReturnValue(bookingsRecap)\n\n    // When\n    const wrapper = shallow(<BookingsRecapTable {...props} />)\n\n    // Then\n    const header = wrapper.find(Header)\n    expect(header).toHaveLength(0)\n  })\n\n  it('should update currentPage when clicking on next page button', () => {\n    // Given\n    const bookingsRecap = [\n      {\n        stock: {\n          offer_name: 'Avez-vous déjà vu',\n          type: 'thing',\n        },\n        beneficiary: {\n          lastname: 'Klepi',\n          firstname: 'Sonia',\n          email: 'sonia.klepi@example.com',\n        },\n        booking_amount: 10,\n        booking_date: '2020-04-03T12:00:00Z',\n        booking_token: 'ZEHBGD',\n        booking_status: 'validated',\n        booking_is_duo: true,\n        venue: {\n          identifier: 'AE',\n          name: 'Librairie Kléber',\n        },\n        booking_status_history: [\n          {\n            status: 'booked',\n            date: '2020-04-03T12:00:00Z',\n          },\n          {\n            status: 'validated',\n            date: '2020-04-23T12:00:00Z',\n          },\n        ],\n      },\n      {\n        stock: {\n          offer_name: 'Avez-vous déjà vu',\n          type: 'thing',\n        },\n        beneficiary: {\n          lastname: 'Klepi',\n          firstname: 'Sonia',\n          email: 'sonia.klepi@example.com',\n        },\n        booking_amount: 10,\n        booking_date: '2020-04-03T12:00:00Z',\n        booking_token: 'ZEHBGD',\n        booking_status: 'validated',\n        booking_is_duo: true,\n        venue: {\n          identifier: 'AE',\n          name: 'Librairie Kléber',\n        },\n        booking_status_history: [\n          {\n            status: 'booked',\n            date: '2020-04-03T12:00:00Z',\n          },\n          {\n            status: 'validated',\n            date: '2020-05-06T12:00:00Z',\n          },\n        ],\n      },\n    ]\n    filterBookingsRecap.mockReturnValue(bookingsRecap)\n\n    const props = {\n      bookingsRecap: bookingsRecap,\n      isLoading: false,\n    }\n\n    // When\n    const wrapper = mount(<BookingsRecapTable {...props} />)\n    const paginate = wrapper.find(TablePagination)\n    const nextPageButton = paginate.find('button').at(1)\n    nextPageButton.simulate('click')\n\n    // Then\n    const table = wrapper.find(TableFrame)\n    expect(table.prop('nbBookingsPerPage')).toBe(1)\n\n    const bookingOfferCell = wrapper.find(BookingOfferCell)\n    expect(bookingOfferCell).toHaveLength(1)\n    expect(bookingOfferCell.props()).toStrictEqual({\n      offer: { offer_name: 'Avez-vous déjà vu', type: 'thing' },\n    })\n    const duoCell = wrapper.find(BookingIsDuoCell)\n    expect(duoCell.find(ReactComponent).props()).toStrictEqual({\n      title: 'Réservation DUO',\n    })\n    const beneficiaryCell = wrapper.find(BeneficiaryCell)\n    expect(beneficiaryCell).toHaveLength(1)\n    expect(beneficiaryCell.props()).toStrictEqual({\n      beneficiaryInfos: { email: 'sonia.klepi@example.com', firstname: 'Sonia', lastname: 'Klepi' },\n    })\n    const bookingDateCell = wrapper.find(BookingDateCell)\n    expect(bookingDateCell).toHaveLength(1)\n    expect(bookingDateCell.props()).toStrictEqual({\n      bookingDateTimeIsoString: '2020-04-03T12:00:00Z',\n    })\n    const bookingTokenCell = wrapper.find(BookingTokenCell)\n    expect(bookingTokenCell).toHaveLength(1)\n    expect(bookingTokenCell.props()).toStrictEqual({ bookingToken: 'ZEHBGD' })\n    const bookingStatusCell = wrapper.find(BookingStatusCell)\n    expect(bookingStatusCell).toHaveLength(1)\n  })\n\n  it('should render filters component with expected props', () => {\n    // given\n    const bookingsRecap = []\n    const props = {\n      bookingsRecap: bookingsRecap,\n      isLoading: true,\n    }\n    filterBookingsRecap.mockReturnValueOnce(bookingsRecap)\n\n    // When\n    const wrapper = shallow(<BookingsRecapTable {...props} />)\n\n    // Then\n    const filters = wrapper.find(Filters)\n    expect(filters.props()).toStrictEqual({\n      isLoading: true,\n      updateGlobalFilters: expect.any(Function),\n    })\n  })\n\n  it('should not apply filters when component didnt receive new data', () => {\n    // given\n    const bookingsRecap = [\n      {\n        stock: {\n          offer_name: 'Avez-vous déjà vu',\n          type: 'thing',\n        },\n        beneficiary: {\n          lastname: 'Klepi',\n          firstname: 'Sonia',\n          email: 'sonia.klepi@example.com',\n        },\n        booking_amount: 10,\n        booking_date: '2020-04-03T12:00:00Z',\n        booking_token: 'ZEHBGD',\n        booking_status: 'validated',\n        booking_is_duo: false,\n        venue_identifier: 'AE',\n      },\n    ]\n    filterBookingsRecap.mockReturnValue(bookingsRecap)\n    const props = {\n      bookingsRecap: bookingsRecap,\n      isLoading: false,\n    }\n\n    const wrapper = shallow(<BookingsRecapTable {...props} />)\n\n    // When\n    wrapper.setProps(props)\n\n    // Then\n    const table = wrapper.find(TableFrame)\n    expect(table.props()).toStrictEqual({\n      columns: expect.any(Object),\n      currentPage: 0,\n      data: props.bookingsRecap,\n      nbBookings: props.bookingsRecap.length,\n      nbBookingsPerPage: 1,\n      updateCurrentPage: expect.any(Function),\n    })\n  })\n\n  it('should apply filters when component received new data', () => {\n    // given\n    filterBookingsRecap.mockReturnValue([\n      {\n        stock: {\n          offer_name: 'Avez-vous déjà vu',\n          type: 'thing',\n        },\n        beneficiary: {\n          lastname: 'Klepi',\n          firstname: 'Sonia',\n          email: 'sonia.klepi@example.com',\n        },\n        booking_amount: 10,\n        booking_date: '2020-04-03T12:00:00Z',\n        booking_token: 'ZEHBGD',\n        booking_status: 'validated',\n        booking_is_duo: false,\n        venue_identifier: 'AE',\n      },\n    ])\n    const booking = {\n      stock: {\n        offer_name: 'Avez-vous déjà vu',\n        type: 'thing',\n      },\n      beneficiary: {\n        lastname: 'Klepi',\n        firstname: 'Sonia',\n        email: 'sonia.klepi@example.com',\n      },\n      booking_amount: 10,\n      booking_date: '2020-04-03T12:00:00Z',\n      booking_token: 'ZEHBGD',\n      booking_status: 'validated',\n      booking_is_duo: false,\n      venue_identifier: 'AE',\n    }\n    const bookingsRecap = [booking]\n    const newBooking = {\n      stock: {\n        offer_name: 'Merlin enchanteur',\n        type: 'thing',\n      },\n      beneficiary: {\n        lastname: 'Klepi',\n        firstname: 'Sonia',\n        email: 'sonia.klepi@example.com',\n      },\n      booking_amount: 10,\n      booking_date: '2020-04-03T12:00:00Z',\n      booking_token: 'ZEHBGD',\n      booking_status: 'validated',\n      booking_is_duo: false,\n      venue_identifier: 'AE',\n    }\n    const props = {\n      bookingsRecap: bookingsRecap,\n      isLoading: false,\n    }\n    const wrapper = shallow(<BookingsRecapTable {...props} />)\n\n    // When\n    wrapper.setState({ filters: { offerName: 'Avez' } })\n    const expectedBookingsRecap = [...props.bookingsRecap].concat([newBooking])\n    wrapper.setProps({\n      bookingsRecap: expectedBookingsRecap,\n    })\n\n    // Then\n    const table = wrapper.find(TableFrame)\n    expect(table.props()).toStrictEqual({\n      columns: expect.any(Object),\n      currentPage: 0,\n      data: [booking],\n      nbBookings: 1,\n      nbBookingsPerPage: 1,\n      updateCurrentPage: expect.any(Function),\n    })\n    expect(filterBookingsRecap).toHaveBeenCalledWith(expectedBookingsRecap, {\n      offerName: 'Avez',\n    })\n  })\n\n  it('should render a NoFilteredBookings when no bookings', () => {\n    // given\n    filterBookingsRecap.mockReturnValue([])\n    const booking = {\n      stock: {\n        offer_name: 'Avez-vous déjà vu',\n        type: 'thing',\n      },\n      beneficiary: {\n        lastname: 'Klepi',\n        firstname: 'Sonia',\n        email: 'sonia.klepi@example.com',\n      },\n      booking_amount: 10,\n      booking_date: '2020-04-03T12:00:00Z',\n      booking_token: 'ZEHBGD',\n      booking_status: 'validated',\n      booking_is_duo: false,\n      venue: {\n        identifier: 'AE',\n        name: 'Librairie Kléber',\n      },\n      booking_status_history: [\n        {\n          status: 'booked',\n          date: '2020-04-03T12:00:00Z',\n        },\n        {\n          status: 'validated',\n          date: '2020-04-14T12:00:00Z',\n        },\n      ],\n    }\n    const props = {\n      bookingsRecap: [booking],\n      isLoading: false,\n    }\n    const wrapper = mount(<BookingsRecapTable {...props} />)\n    const input = wrapper.find(Filters).find({ placeholder: \"Rechercher par nom d'offre\" })\n\n    // When\n    input.simulate('change', { target: { value: 'not findable' } })\n\n    // Then\n    const table = wrapper.find(TableFrame)\n    expect(table).toHaveLength(0)\n    const noFilteredBookings = wrapper.find(NoFilteredBookings)\n    expect(noFilteredBookings).toHaveLength(1)\n    expect(noFilteredBookings.props()).toStrictEqual({\n      resetFilters: expect.any(Function),\n    })\n  })\n\n  it('should reset filters when clicking on \"afficher toutes les réservations\"', async () => {\n    // given\n    const props = {\n      bookingsRecap: [\n        {\n          stock: {\n            offer_name: 'Avez-vous déjà vu',\n            type: 'thing',\n          },\n          beneficiary: {\n            lastname: 'Klepi',\n            firstname: 'Sonia',\n            email: 'sonia.klepi@example.com',\n          },\n          booking_amount: 10,\n          booking_date: '2020-04-03T12:00:00Z',\n          booking_token: 'ZEHBGD',\n          booking_status: 'validated',\n          booking_is_duo: false,\n          venue: {\n            identifier: 'AE',\n            name: 'Librairie Kléber',\n          },\n          booking_status_history: [\n            {\n              status: 'booked',\n              date: '2020-04-03T12:00:00Z',\n            },\n            {\n              status: 'validated',\n              date: '2020-04-16T12:00:00Z',\n            },\n          ],\n        },\n      ],\n      isLoading: false,\n    }\n    filterBookingsRecap.mockReturnValue([])\n    const wrapper = mount(<BookingsRecapTable {...props} />)\n\n    const offerNameInput = wrapper.find(Filters).find({ placeholder: \"Rechercher par nom d'offre\" })\n    await offerNameInput.simulate('change', { target: { value: 'not findable' } })\n\n    const noFilteredBookings = wrapper.find(NoFilteredBookings)\n    const displayAllBookingsButton = noFilteredBookings.find({\n      children: 'afficher toutes les réservations',\n    })\n\n    // When\n    await displayAllBookingsButton.simulate('click')\n\n    // Then\n    const offerName = wrapper.find(Filters).find({ placeholder: \"Rechercher par nom d'offre\" })\n    expect(offerName.text()).toBe('')\n  })\n\n  it('should apply default filters when mounting component with bookings', () => {\n    // Given\n    const props = {\n      bookingsRecap: [],\n      isLoading: true,\n    }\n    filterBookingsRecap.mockReturnValue([\n      {\n        stock: {\n          offer_name: 'Avez-vous déjà vu',\n          type: 'thing',\n        },\n        beneficiary: {\n          lastname: 'Klepi',\n          firstname: 'Sonia',\n          email: 'sonia.klepi@example.com',\n        },\n        booking_amount: 10,\n        booking_date: '2020-04-03T12:00:00Z',\n        booking_token: 'ZEHBGD',\n        booking_status: 'validated',\n        booking_is_duo: false,\n        venue_identifier: 'AE',\n        booking_status_history: [\n          {\n            status: 'booked',\n            date: '2020-04-03T12:00:00Z',\n          },\n          {\n            status: 'validated',\n            date: '2020-04-16T12:00:00Z',\n          },\n        ],\n      },\n    ])\n    const wrapper = shallow(<BookingsRecapTable {...props} />)\n    const updatedProps = {\n      bookingsRecap: [\n        {\n          stock: {\n            offer_name: 'Avez-vous déjà vu',\n            type: 'thing',\n          },\n          beneficiary: {\n            lastname: 'Klepi',\n            firstname: 'Sonia',\n            email: 'sonia.klepi@example.com',\n          },\n          booking_amount: 10,\n          booking_date: '2020-04-03T12:00:00Z',\n          booking_token: 'ZEHBGD',\n          booking_status: 'validated',\n          booking_is_duo: false,\n          venue_identifier: 'AE',\n          booking_status_history: [\n            {\n              status: 'booked',\n              date: '2020-04-03T12:00:00Z',\n            },\n            {\n              status: 'validated',\n              date: '2020-04-16T12:00:00Z',\n            },\n          ],\n        },\n      ],\n    }\n\n    // When\n    wrapper.setProps(updatedProps)\n\n    // Then\n    expect(filterBookingsRecap).toHaveBeenCalledWith(updatedProps.bookingsRecap, {\n      bookingBeneficiary: EMPTY_FILTER_VALUE,\n      bookingStatus: ALL_BOOKING_STATUS,\n      bookingToken: EMPTY_FILTER_VALUE,\n      offerISBN: EMPTY_FILTER_VALUE,\n      offerName: EMPTY_FILTER_VALUE,\n    })\n  })\n\n  it('should redirect to first page when applying filters', async () => {\n    // given\n    const booking = {\n      stock: {\n        offer_name: 'Avez-vous déjà vu',\n        type: 'thing',\n      },\n      beneficiary: {\n        lastname: 'Klepi',\n        firstname: 'Sonia',\n        email: 'sonia.klepi@example.com',\n      },\n      booking_amount: 10,\n      booking_date: '2020-04-03T12:00:00Z',\n      booking_token: 'ZEHBGD',\n      booking_status: 'validated',\n      booking_is_duo: true,\n      venue: {\n        identifier: 'AE',\n        name: 'Librairie Kléber',\n      },\n      booking_status_history: [\n        {\n          status: 'booked',\n          date: '2020-04-03T12:00:00Z',\n        },\n        {\n          status: 'validated',\n          date: '2020-04-16T12:00:00Z',\n        },\n      ],\n    }\n    const bookingsRecap = [booking]\n    filterBookingsRecap.mockReturnValueOnce(bookingsRecap).mockReturnValue([])\n    const props = {\n      bookingsRecap: bookingsRecap,\n      isLoading: false,\n    }\n    const wrapper = mount(<BookingsRecapTable {...props} />)\n    const newBooking = {\n      stock: {\n        offer_name: 'Jurassic Park',\n        type: 'thing',\n      },\n      beneficiary: {\n        lastname: 'Klepi',\n        firstname: 'Sonia',\n        email: 'sonia.klepi@example.com',\n      },\n      booking_amount: 10,\n      booking_date: '2020-04-03T12:00:00Z',\n      booking_token: 'ZEHBGD',\n      booking_status: 'validated',\n      booking_is_duo: true,\n      venue_identifier: 'AE',\n      booking_status_history: [\n        {\n          status: 'booked',\n          date: '2020-04-03T12:00:00Z',\n        },\n        {\n          status: 'validated',\n          date: '2020-04-16T12:00:00Z',\n        },\n      ],\n    }\n    const paginate = wrapper.find(TablePagination)\n    const nextPageButton = paginate.find('button').at(1)\n    nextPageButton.simulate('click')\n\n    // when\n    await wrapper.setProps({\n      bookingsRecap: bookingsRecap.concat([newBooking]),\n    })\n\n    // then\n    const table = wrapper.find(TableFrame)\n    expect(table.prop('currentPage')).toStrictEqual(0)\n  })\n\n  it('should filter bookings on render', () => {\n    // Given\n    const props = {\n      bookingsRecap: [\n        {\n          stock: {\n            offer_name: 'Avez-vous déjà vu ?',\n            type: 'thing',\n          },\n          beneficiary: {\n            lastname: 'Klepi',\n            firstname: 'Sonia',\n            email: 'sonia.klepi@example.com',\n          },\n          booking_amount: 10,\n          booking_date: '2020-04-03T12:00:00Z',\n          booking_token: 'ZEHBGD',\n          booking_status: 'validated',\n          booking_is_duo: true,\n          venue: {\n            identifier: 'AE',\n            name: 'Librairie Kléber',\n          },\n          booking_status_history: [\n            {\n              status: 'booked',\n              date: '2020-04-03T12:00:00Z',\n            },\n            {\n              status: 'validated',\n              date: '2020-05-12T12:00:00Z',\n            },\n          ],\n        },\n      ],\n      isLoading: false,\n      locationState: {\n        venueId: 'BD',\n        statuses: ['booked', 'cancelled'],\n      },\n    }\n    filterBookingsRecap.mockReturnValue([])\n\n    // When\n    shallow(<BookingsRecapTable {...props} />)\n\n    // Then\n    expect(filterBookingsRecap).toHaveBeenCalledWith(props.bookingsRecap, {\n      bookingStatus: props.locationState.statuses,\n      bookingBeneficiary: EMPTY_FILTER_VALUE,\n      bookingToken: EMPTY_FILTER_VALUE,\n      offerISBN: EMPTY_FILTER_VALUE,\n      offerName: EMPTY_FILTER_VALUE,\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/utils/__specs__/filterBookingsRecap.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (293). Maximum allowed is 50.',
        line: 58,
        column: 33,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 350,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (59). Maximum allowed is 50.',
        line: 71,
        column: 29,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 129,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (142). Maximum allowed is 50.',
        line: 208,
        column: 30,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 349,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { EMPTY_FILTER_VALUE } from '../../Filters/_constants'\nimport filterBookingsRecap from '../filterBookingsRecap'\n\nconst bookingRecapBuilder = ({\n  stock_offer_name = 'Merlin enchanteur',\n  stock_offer_isbn = '9787605639121',\n  stock_event_beginning_datetime = '2020-03-03T12:00:00Z',\n  stock_type = 'event',\n  beneficiary_lastname = 'Klepi',\n  beneficiary_firstname = 'Sonia',\n  beneficiary_email = 'sonia.klepi@example.com',\n  booking_date = '2020-04-03T12:00:00Z',\n  booking_token = 'ZEHBGD',\n  booking_status = 'Validé',\n  venue_identifier = 'AE',\n  venue_name = 'Librairie Kléber',\n}) => ({\n  stock: {\n    offer_name: stock_offer_name,\n    offer_isbn: stock_offer_isbn,\n    event_beginning_datetime: stock_event_beginning_datetime,\n    type: stock_type,\n  },\n  beneficiary: {\n    lastname: beneficiary_lastname,\n    firstname: beneficiary_firstname,\n    email: beneficiary_email,\n  },\n  booking_date: booking_date,\n  booking_token: booking_token,\n  booking_status: booking_status,\n  venue: {\n    identifier: venue_identifier,\n    name: venue_name,\n  },\n})\n\nconst filtersBuilder = ({\n  bookingBeneficiary = EMPTY_FILTER_VALUE,\n  bookingToken = EMPTY_FILTER_VALUE,\n  bookingBeginningDate = EMPTY_FILTER_VALUE,\n  bookingEndingDate = EMPTY_FILTER_VALUE,\n  offerDate = EMPTY_FILTER_VALUE,\n  offerISBN = EMPTY_FILTER_VALUE,\n  offerName = EMPTY_FILTER_VALUE,\n  offerVenue = EMPTY_FILTER_VALUE,\n}) => ({\n  bookingBeneficiary: bookingBeneficiary,\n  bookingToken: bookingToken,\n  bookingBeginningDate: bookingBeginningDate,\n  bookingEndingDate: bookingEndingDate,\n  offerDate: offerDate,\n  offerISBN: offerISBN,\n  offerName: offerName,\n  offerVenue: offerVenue,\n})\n\ndescribe('filterBookingsRecap', () => {\n  it('should return list when no filters provided', () => {\n    // given\n    const bookingsRecap = [bookingRecapBuilder({})]\n    const filters = filtersBuilder({})\n\n    // when\n    const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n    // then\n    expect(filteredBookingsRecap).toStrictEqual(bookingsRecap)\n  })\n\n  describe('by offer name', () => {\n    it('should return list containing only BookingRecap matching keywords', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({})\n      const bookingRecap2 = bookingRecapBuilder({ stock_offer_name: 'Jurrasic Perk' })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n\n      let filters = filtersBuilder({ offerName: 'Merlin' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap1])\n    })\n\n    it('should return list containing only BookingRecap matching keywords with different accents', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({})\n      const bookingRecap2 = bookingRecapBuilder({ stock_offer_name: 'Jurrasic Perk' })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ offerName: 'Mérlin' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap1])\n    })\n\n    it('should return list containing only BookingRecap matching keywords with different case', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({})\n      const bookingRecap2 = bookingRecapBuilder({})\n      bookingRecap2.stock.offer_name = 'Jurrasic Perk'\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ offerName: 'MerlIN' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap1])\n    })\n\n    it('should return list containing only BookingRecap matching keywords with uppercase letters', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({})\n      const bookingRecap2 = bookingRecapBuilder({ stock_offer_name: 'Jurrasic Perk' })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ offerName: 'MerlIN' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap1])\n    })\n  })\n\n  describe('by token', () => {\n    it('should return list containing only BookingRecap matching token keywords', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({ booking_token: 'ABCDEF' })\n      const bookingRecap2 = bookingRecapBuilder({ booking_token: 'ZACBGQ' })\n      const bookingRecapWithNoToken = bookingRecapBuilder({ booking_token: null })\n      const bookingsRecap = [bookingRecap1, bookingRecap2, bookingRecapWithNoToken]\n      const filters = filtersBuilder({ bookingToken: 'abc' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap1])\n    })\n\n    it('should return list containing only BookingRecap matching token keywords with surrounding space', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({ booking_token: 'ABCDEF' })\n      const bookingRecap2 = bookingRecapBuilder({ booking_token: 'ZACBGD' })\n      const bookingRecapWithNoToken = bookingRecapBuilder({ booking_token: null })\n      const bookingsRecap = [bookingRecap1, bookingRecap2, bookingRecapWithNoToken]\n      const filters = filtersBuilder({ bookingToken: 'abc ' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap1])\n    })\n\n    it('should return list containing only BookingRecap matching token keywords with different case', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({ booking_token: 'ABCDEF' })\n      const bookingRecap2 = bookingRecapBuilder({ booking_token: 'ZACBGQ' })\n      const bookingRecapWithNoToken = bookingRecapBuilder({ booking_token: null })\n      const bookingsRecap = [bookingRecap1, bookingRecap2, bookingRecapWithNoToken]\n      const filters = filtersBuilder({ bookingToken: 'aBc' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap1])\n    })\n  })\n\n  describe('by ISBN', () => {\n    it('should return list containing only BookingRecap matching ISBN keywords', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({ stock_type: 'book' })\n      const bookingRecap2 = bookingRecapBuilder({ stock_offer_isbn: '0864645534' })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ offerISBN: '9787605639121' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap1])\n    })\n\n    it('should return list containing only BookingRecap matching ISBN keywords with surrounding space', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({ stock_type: 'book' })\n      const bookingRecap2 = bookingRecapBuilder({ stock_offer_isbn: '0864645534' })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ offerISBN: '9787605639121  ' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap1])\n    })\n  })\n\n  describe('by beneficiary', () => {\n    it('should return list containing only BookingRecap matching beneficiary firstname keywords', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({})\n      const bookingRecap2 = bookingRecapBuilder({ beneficiary_firstname: 'Ludovic' })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ bookingBeneficiary: 'Ludovic' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap2])\n    })\n\n    it('should return list containing only BookingRecap matching partial beneficiary firstname keywords', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({})\n      const bookingRecap2 = bookingRecapBuilder({ beneficiary_firstname: 'Ludovic' })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ bookingBeneficiary: 'Ludov' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap2])\n    })\n\n    it('should return list containing only BookingRecap matching beneficiary lastname keywords', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({})\n      const bookingRecap2 = bookingRecapBuilder({ beneficiary_lastname: 'Dupont' })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ bookingBeneficiary: 'Dupont' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap2])\n    })\n\n    it('should return list containing only BookingRecap matching partial beneficiary lastname keywords', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({})\n      const bookingRecap2 = bookingRecapBuilder({ beneficiary_lastname: 'Dupont' })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ bookingBeneficiary: 'Dup' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap2])\n    })\n\n    it('should return list containing only BookingRecap matching beneficiary email keywords', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({})\n      const bookingRecap2 = bookingRecapBuilder({ beneficiary_email: 'ludo@example.com' })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ bookingBeneficiary: 'sonia.klepi@example.com' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap1])\n    })\n\n    it('should return list containing only BookingRecap matching partial beneficiary email keywords', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({})\n      const bookingRecap2 = bookingRecapBuilder({ beneficiary_email: 'ludovic@example.com' })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ bookingBeneficiary: 'ludovic@example.c' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap2])\n    })\n\n    it('should return list containing only BookingRecap matching beneficiary firstname lastname in that order', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({})\n      const bookingRecap2 = bookingRecapBuilder({\n        beneficiary_firstname: 'Ludovic',\n        beneficiary_lastname: 'Klepi',\n      })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ bookingBeneficiary: 'Ludovic Klepi' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap2])\n    })\n\n    it('should return list containing only BookingRecap matching beneficiary lastname firstname in that order', () => {\n      // given\n      const bookingRecap1 = bookingRecapBuilder({})\n      const bookingRecap2 = bookingRecapBuilder({ beneficiary_firstname: 'Ludovic' })\n      const bookingsRecap = [bookingRecap1, bookingRecap2]\n      const filters = filtersBuilder({ bookingBeneficiary: 'Klepi Sonia' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap1])\n    })\n\n    it('should escape accents', () => {\n      // given\n      const bookingRecap = bookingRecapBuilder({})\n      const bookingsRecap = [bookingRecap]\n      const filters = filtersBuilder({ bookingBeneficiary: 'Klépi Sonià' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap])\n    })\n\n    it('should trim input', () => {\n      // given\n      const bookingRecap = bookingRecapBuilder({})\n      const bookingsRecap = [bookingRecap]\n      const filters = filtersBuilder({ bookingBeneficiary: 'Klepi Sonia' })\n\n      // when\n      const filteredBookingsRecap = filterBookingsRecap(bookingsRecap, filters)\n\n      // then\n      expect(filteredBookingsRecap).toStrictEqual([bookingRecap])\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/utils/__specs__/generateBookingsCsvFile.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (295). Maximum allowed is 50.',
        line: 3,
        column: 37,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 297,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (72). Maximum allowed is 50.',
        line: 7,
        column: 14,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 78,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (56). Maximum allowed is 50.',
        line: 183,
        column: 59,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 238,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (57). Maximum allowed is 50.',
        line: 240,
        column: 87,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 296,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 4,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import generateBookingsCsvFile, { CSV_HEADERS } from '../generateBookingsCsvFile'\n\ndescribe('generateBookingsCsvFile', () => {\n  let validated_booking\n  let canceled_booking\n\n  beforeEach(() => {\n    validated_booking = {\n      stock: {\n        event_beginning_datetime: '2021-06-09T11:03:28+05:00',\n        offer_name: 'Avez-vous déjà vu',\n        type: 'event',\n      },\n      beneficiary: {\n        lastname: 'Klepi',\n        firstname: 'Sonia',\n        email: 'sonia.klepi@example.com',\n        phonenumber: '0100000000',\n      },\n      booking_date: '2021-06-09T16:15:12.219158+02:00',\n      booking_token: 'ZEHBGD',\n      booking_status: 'validated',\n      booking_status_history: [\n        {\n          date: '2021-06-09T16:15:12.219158+02:00',\n          status: 'booked',\n        },\n        {\n          date: '2021-06-09T16:30:35.332610+02:00',\n          status: 'validated',\n        },\n      ],\n      booking_is_duo: false,\n      booking_amount: 1.6,\n      offerer: {\n        name: 'Le conseil des FNAC',\n      },\n      venue: {\n        identifier: 'AE',\n        name: 'Librairie Kléber',\n      },\n    }\n\n    canceled_booking = {\n      stock: {\n        offer_name: 'Jurassic Park',\n        type: 'thing',\n      },\n      beneficiary: {\n        lastname: 'LaMerguez',\n        firstname: 'Daniel',\n        email: 'daniel.lamerguez@example.com',\n        phonenumber: '0100000000',\n      },\n      booking_date: '2020-05-01T14:12:00Z',\n      booking_token: 'ABCDEF',\n      booking_status: 'cancelled',\n      booking_status_history: [\n        {\n          date: '2020-05-01T14:12:00Z',\n          status: 'booked',\n        },\n        {\n          date: '2020-05-01T16:12:00Z',\n          status: 'canceled',\n        },\n      ],\n      booking_is_duo: false,\n      booking_amount: 5.4,\n      offerer: {\n        name: 'Le conseil des FNAC',\n      },\n      venue: {\n        identifier: 'AB',\n        name: 'La FNAC Lyon',\n      },\n    }\n  })\n\n  it('should return data with csv header', () => {\n    // given\n    const bookings = []\n\n    // when\n    const result = generateBookingsCsvFile(bookings)\n\n    // then\n    expect(result).toStrictEqual([CSV_HEADERS])\n  })\n\n  it('should return data with all bookings', () => {\n    // given\n    const bookings = [validated_booking, canceled_booking]\n\n    // when\n    const result = generateBookingsCsvFile(bookings)\n\n    // then\n    expect(result).toStrictEqual([\n      CSV_HEADERS,\n      [\n        'Librairie Kléber',\n        'Avez-vous déjà vu',\n        '09/06/2021 11:03',\n        '',\n        'Klepi Sonia',\n        'sonia.klepi@example.com',\n        '0100000000',\n        '09/06/2021 16:15',\n        '09/06/2021 16:30',\n        'ZEHBGD',\n        '1,6',\n        'validé',\n      ],\n      [\n        'La FNAC Lyon',\n        'Jurassic Park',\n        '',\n        '',\n        'LaMerguez Daniel',\n        'daniel.lamerguez@example.com',\n        '0100000000',\n        '01/05/2020 14:12',\n        '',\n        'ABCDEF',\n        '5,4',\n        'annulé',\n      ],\n    ])\n  })\n\n  it('should add isbn only when stock has isbn value', () => {\n    // given\n    const bookings = [\n      {\n        ...validated_booking,\n        stock: {\n          offer_name: 'Avez-vous déjà vu',\n          type: 'thing',\n          offer_isbn: '9781234567654',\n        },\n      },\n      canceled_booking,\n    ]\n\n    // when\n    const result = generateBookingsCsvFile(bookings)\n\n    // then\n    expect(result).toStrictEqual([\n      CSV_HEADERS,\n      [\n        'Librairie Kléber',\n        'Avez-vous déjà vu',\n        '',\n        '9781234567654',\n        'Klepi Sonia',\n        'sonia.klepi@example.com',\n        '0100000000',\n        '09/06/2021 16:15',\n        '09/06/2021 16:30',\n        'ZEHBGD',\n        '1,6',\n        'validé',\n      ],\n      [\n        'La FNAC Lyon',\n        'Jurassic Park',\n        '',\n        '',\n        'LaMerguez Daniel',\n        'daniel.lamerguez@example.com',\n        '0100000000',\n        '01/05/2020 14:12',\n        '',\n        'ABCDEF',\n        '5,4',\n        'annulé',\n      ],\n    ])\n  })\n\n  it('should escape offer name containing double quotes', () => {\n    // given\n    const bookings = [\n      {\n        ...validated_booking,\n        stock: {\n          offer_name: 'Avez-vous \"déjà\" \"vu\"',\n          type: 'thing',\n          offer_isbn: '9781234567654',\n        },\n      },\n      {\n        ...canceled_booking,\n        stock: {\n          offer_name: 'Jurassic \"Park\"',\n          type: 'thing',\n        },\n      },\n    ]\n\n    // when\n    const result = generateBookingsCsvFile(bookings)\n\n    // then\n    expect(result).toStrictEqual([\n      CSV_HEADERS,\n      [\n        'Librairie Kléber',\n        'Avez-vous \"\"déjà\"\" \"\"vu\"\"',\n        '',\n        '9781234567654',\n        'Klepi Sonia',\n        'sonia.klepi@example.com',\n        '0100000000',\n        '09/06/2021 16:15',\n        '09/06/2021 16:30',\n        'ZEHBGD',\n        '1,6',\n        'validé',\n      ],\n      [\n        'La FNAC Lyon',\n        'Jurassic \"\"Park\"\"',\n        '',\n        '',\n        'LaMerguez Daniel',\n        'daniel.lamerguez@example.com',\n        '0100000000',\n        '01/05/2020 14:12',\n        '',\n        'ABCDEF',\n        '5,4',\n        'annulé',\n      ],\n    ])\n  })\n\n  it('should return data with all bookings using offerer name when venue is virtual', () => {\n    // given\n    const bookings = [\n      {\n        ...validated_booking,\n        venue: {\n          identifier: 'AE',\n          name: 'Librairie Kléber',\n          is_virtual: false,\n        },\n      },\n      {\n        ...canceled_booking,\n        venue: {\n          identifier: 'AB',\n          name: 'La FNAC Lyon',\n          is_virtual: true,\n        },\n      },\n    ]\n\n    // when\n    const result = generateBookingsCsvFile(bookings)\n\n    // then\n    expect(result).toStrictEqual([\n      CSV_HEADERS,\n      [\n        'Librairie Kléber',\n        'Avez-vous déjà vu',\n        '09/06/2021 11:03',\n        '',\n        'Klepi Sonia',\n        'sonia.klepi@example.com',\n        '0100000000',\n        '09/06/2021 16:15',\n        '09/06/2021 16:30',\n        'ZEHBGD',\n        '1,6',\n        'validé',\n      ],\n      [\n        'Le conseil des FNAC - Offre numérique',\n        'Jurassic Park',\n        '',\n        '',\n        'LaMerguez Daniel',\n        'daniel.lamerguez@example.com',\n        '0100000000',\n        '01/05/2020 14:12',\n        '',\n        'ABCDEF',\n        '5,4',\n        'annulé',\n      ],\n    ])\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/utils/__specs__/sortingFunctions.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (271). Maximum allowed is 50.',
        line: 3,
        column: 38,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 273,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (73). Maximum allowed is 50.',
        line: 4,
        column: 31,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 76,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (61). Maximum allowed is 50.',
        line: 78,
        column: 33,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 138,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (133). Maximum allowed is 50.',
        line: 140,
        column: 37,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 272,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (79). Maximum allowed is 50.',
        line: 193,
        column: 63,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 271,
        endColumn: 6,
      },
    ],
    errorCount: 0,
    warningCount: 5,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { sortByBeneficiaryName, sortByBookingDate, sortByOfferName } from '../sortingFunctions'\n\ndescribe('utils | sortingFunctions', () => {\n  describe('sortByOfferName', () => {\n    it('should return 1 when first row offer name comes after second row offer name', () => {\n      // given\n      const firstRow = {\n        original: {\n          stock: {\n            offer_name: 'Zebre du Bengal',\n          },\n        },\n      }\n      const secondRow = {\n        original: {\n          stock: {\n            offer_name: 'Babar, mon ami éléphant',\n          },\n        },\n      }\n\n      // when\n      const result = sortByOfferName(firstRow, secondRow)\n\n      // then\n      expect(result).toBe(1)\n    })\n\n    it('should return -1 when first row offer name comes before second row offer name', () => {\n      const firstRow = {\n        original: {\n          stock: {\n            offer_name: 'Babar, mon ami éléphant',\n          },\n        },\n      }\n      // given\n      const secondRow = {\n        original: {\n          stock: {\n            offer_name: 'Zebre du Bengal',\n          },\n        },\n      }\n\n      // when\n      const result = sortByOfferName(firstRow, secondRow)\n\n      // then\n      expect(result).toBe(-1)\n    })\n\n    it('should return 0 when first row offer name is the same as second row offer name', () => {\n      const firstRow = {\n        original: {\n          stock: {\n            offer_name: 'Babar, mon ami éléphant',\n          },\n        },\n      }\n      // given\n      const secondRow = {\n        original: {\n          stock: {\n            offer_name: 'Babar, mon ami éléphant',\n          },\n        },\n      }\n\n      // when\n      const result = sortByOfferName(firstRow, secondRow)\n\n      // then\n      expect(result).toBe(0)\n    })\n  })\n\n  describe('sortByBookingDate', () => {\n    it('should return -1 when first row bookingDate comes before second row bookingDate', () => {\n      // given\n      const firstRow = {\n        original: {\n          booking_date: '2020-04-22T11:17:12+02:00',\n        },\n      }\n      const secondRow = {\n        original: {\n          booking_date: '2020-04-23T13:17:12+02:00',\n        },\n      }\n\n      // when\n      const result = sortByBookingDate(firstRow, secondRow)\n\n      // then\n      expect(result).toBe(-1)\n    })\n\n    it('should return 1 when first row bookingDate comes after second row bookingDate', () => {\n      // given\n      const firstRow = {\n        original: {\n          booking_date: '2020-04-22T11:17:12+02:00',\n        },\n      }\n      const secondRow = {\n        original: {\n          booking_date: '2020-04-22T12:16:12+03:00',\n        },\n      }\n\n      // when\n      const result = sortByBookingDate(firstRow, secondRow)\n\n      // then\n      expect(result).toBe(1)\n    })\n\n    it('should return 0 when first row bookingDate is the same as second row bookingDate', () => {\n      const firstRow = {\n        original: {\n          booking_date: '2020-04-22T11:17:12+02:00',\n        },\n      }\n      // given\n      const secondRow = {\n        original: {\n          booking_date: '2020-04-22T11:17:12+02:00',\n        },\n      }\n\n      // when\n      const result = sortByBookingDate(firstRow, secondRow)\n\n      // then\n      expect(result).toBe(0)\n    })\n  })\n\n  describe('sortByBeneficiaryName', () => {\n    it('should return 1 when 1st row beneficiary name strictly comes after 2nd row beneficiary name', () => {\n      // Given\n      const firstRow = {\n        original: {\n          beneficiary: {\n            lastname: 'Gamgee',\n            firstname: 'Samwise',\n          },\n        },\n      }\n      const secondRow = {\n        original: {\n          beneficiary: {\n            lastname: 'Baggings',\n            firstname: 'Bilbo',\n          },\n        },\n      }\n\n      // When\n      const result = sortByBeneficiaryName(firstRow, secondRow)\n\n      // Then\n      expect(result).toBe(1)\n    })\n\n    it('should return -1 when 1st row beneficiary name strictly comes before 2nd row beneficiary name', () => {\n      // Given\n      const firstRow = {\n        original: {\n          beneficiary: {\n            lastname: 'Baggings',\n            firstname: 'Bilbo',\n          },\n        },\n      }\n      const secondRow = {\n        original: {\n          beneficiary: {\n            lastname: 'Gamgee',\n            firstname: 'Samwise',\n          },\n        },\n      }\n\n      // When\n      const result = sortByBeneficiaryName(firstRow, secondRow)\n\n      // Then\n      expect(result).toBe(-1)\n    })\n\n    describe('when both beneficiaries lastname are the same', () => {\n      it('should return 1 when 1st row beneficiary firstname comes after 2nd row beneficiary firstname', () => {\n        // Given\n        const firstRow = {\n          original: {\n            beneficiary: {\n              lastname: 'Gamgee',\n              firstname: 'Samwise',\n            },\n          },\n        }\n        const secondRow = {\n          original: {\n            beneficiary: {\n              lastname: 'Gamgee',\n              firstname: 'Rosie',\n            },\n          },\n        }\n\n        // When\n        const result = sortByBeneficiaryName(firstRow, secondRow)\n\n        // Then\n        expect(result).toBe(1)\n      })\n\n      it('should return -1 when 1st row beneficiary firstname comes before 2nd row beneficiary firstname', () => {\n        // Given\n        const firstRow = {\n          original: {\n            beneficiary: {\n              lastname: 'Gamgee',\n              firstname: 'Rosie',\n            },\n          },\n        }\n        const secondRow = {\n          original: {\n            beneficiary: {\n              lastname: 'Gamgee',\n              firstname: 'Samwise',\n            },\n          },\n        }\n\n        // When\n        const result = sortByBeneficiaryName(firstRow, secondRow)\n\n        // Then\n        expect(result).toBe(-1)\n      })\n\n      it('should return 0 if lastname and firstname are the same even with different case', () => {\n        // Given\n        const firstRow = {\n          original: {\n            beneficiary: {\n              lastname: 'Durand',\n              firstname: 'Aragorn',\n            },\n          },\n        }\n        const secondRow = {\n          original: {\n            beneficiary: {\n              lastname: 'Durand',\n              firstname: 'aragorn',\n            },\n          },\n        }\n\n        // When\n        const result = sortByBeneficiaryName(firstRow, secondRow)\n\n        // Then\n        expect(result).toBe(0)\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/utils/filterBookingsRecap.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/utils/generateBookingsCsvFile.js',
    messages: [
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (20). Maximum allowed is 15.',
        line: 36,
        column: 20,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 67,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { format } from 'date-fns-tz'\n\nimport { FORMAT_DD_MM_YYYY_HH_mm, toDateStrippedOfTimezone } from 'utils/date'\n\nimport { getBookingStatusDisplayInformations } from '../CellsFormatter/utils/bookingStatusConverter'\n\nexport const CSV_HEADERS = [\n  'Lieu',\n  'Nom de l’offre',\n  \"Date de l'évènement\",\n  'ISBN',\n  'Nom et prénom du bénéficiaire',\n  'Email du bénéficiaire',\n  'Téléphone du bénéficiaire',\n  'Date et heure de réservation',\n  'Date et heure de validation',\n  'Contremarque',\n  'Prix de la réservation',\n  'Statut de la contremarque',\n]\n\nfunction formatEventDatetimeIfEventType(booking) {\n  if (booking.stock.type === 'event') {\n    return format(\n      toDateStrippedOfTimezone(booking.stock.event_beginning_datetime),\n      FORMAT_DD_MM_YYYY_HH_mm\n    )\n  } else {\n    return ''\n  }\n}\n\nconst generateBookingsCsvFile = bookings => {\n  let csv_data = [CSV_HEADERS]\n\n  bookings.forEach(booking => {\n    const bookingArray = []\n    const offerNameWithEscapedDoubleQuotes = booking.stock.offer_name.replace(/\"/g, '\"\"')\n\n    if (booking.venue.is_virtual) {\n      bookingArray.push(`${booking.offerer.name} - Offre numérique`)\n    } else {\n      bookingArray.push(booking.venue.name)\n    }\n    bookingArray.push(offerNameWithEscapedDoubleQuotes)\n    bookingArray.push(formatEventDatetimeIfEventType(booking))\n    bookingArray.push(booking.stock.offer_isbn || '')\n    bookingArray.push(`${booking.beneficiary.lastname} ${booking.beneficiary.firstname}`)\n    bookingArray.push(booking.beneficiary.email)\n    bookingArray.push(booking.beneficiary.phonenumber)\n    const bookingDatetimeFormatted = format(\n      toDateStrippedOfTimezone(booking.booking_date),\n      FORMAT_DD_MM_YYYY_HH_mm\n    )\n    bookingArray.push(bookingDatetimeFormatted)\n    const validatedStatus = booking.booking_status_history.find(\n      status => status.status === 'validated'\n    )\n    const usedDatetimeFormatted = validatedStatus\n      ? format(toDateStrippedOfTimezone(validatedStatus.date), FORMAT_DD_MM_YYYY_HH_mm)\n      : ''\n    bookingArray.push(usedDatetimeFormatted)\n    bookingArray.push(booking.booking_token)\n    bookingArray.push(booking.booking_amount.toLocaleString('fr-FR'))\n    bookingArray.push(getBookingStatusDisplayInformations(booking.booking_status).status)\n    csv_data.push(bookingArray)\n  })\n  return csv_data\n}\n\nexport default generateBookingsCsvFile\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/BookingsRecapTable/utils/sortingFunctions.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/ChoosePreFiltersMessage/ChoosePreFiltersMessage.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/NoBookingsForPreFiltersMessage/NoBookingsForPreFiltersMessage.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/PreFilters/FilterByBookingPeriod.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/PreFilters/FilterByEventDate.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/PreFilters/FilterByVenue.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/PreFilters/PreFilters.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/PreFilters/__specs__/FilterByBookingPeriod.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/PreFilters/__specs__/FilterByEventDate.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/PreFilters/_constants.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Bookings/__specs__/BookingsRecap.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (603). Maximum allowed is 150.',
        line: 41,
        column: 51,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 643,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (28). Maximum allowed is 15.',
        line: 41,
        column: 51,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 643,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (18). Maximum allowed is 15.',
        line: 220,
        column: 71,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 255,
        endColumn: 4,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (17). Maximum allowed is 15.',
        line: 282,
        column: 91,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 318,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (563). Maximum allowed is 300.',
        line: 344,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 644,
        endColumn: 1,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (16). Maximum allowed is 15.',
        line: 486,
        column: 64,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 521,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 6,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { act, fireEvent, render, screen, waitFor, within } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport NotificationContainer from 'components/layout/Notification/NotificationContainer'\nimport { BOOKING_STATUS } from 'components/pages/Bookings/BookingsRecapTable/CellsFormatter/utils/bookingStatusConverter'\nimport { DEFAULT_PRE_FILTERS } from 'components/pages/Bookings/PreFilters/_constants'\nimport { getVenuesForOfferer, loadFilteredBookingsRecap } from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\nimport { bookingRecapFactory, venueFactory } from 'utils/apiFactories'\nimport { getNthCallNthArg } from 'utils/testHelpers'\n\nimport BookingsRecapContainer from '../BookingsRecapContainer'\n\njest.mock('repository/pcapi/pcapi', () => ({\n  getVenuesForOfferer: jest.fn(),\n  loadFilteredBookingsRecap: jest.fn(),\n}))\n\njest.mock('utils/date', () => ({\n  ...jest.requireActual('utils/date'),\n  getToday: jest.fn().mockReturnValue(new Date('2020-06-15T12:00:00Z')),\n}))\n\nconst renderBookingsRecap = async (props, store = {}, routerState) => {\n  await act(async () => {\n    await render(\n      <Provider store={store}>\n        <MemoryRouter initialEntries={[{ pathname: '/reservations', state: routerState }]}>\n          <BookingsRecapContainer {...props} />\n          <NotificationContainer />\n        </MemoryRouter>\n      </Provider>\n    )\n  })\n}\n\ndescribe('components | BookingsRecap | Pro user', () => {\n  let props\n  let store\n  let venue\n\n  beforeEach(() => {\n    let emptyBookingsRecapPage = {\n      bookings_recap: [],\n      page: 0,\n      pages: 0,\n      total: 0,\n    }\n    loadFilteredBookingsRecap.mockResolvedValue(emptyBookingsRecapPage)\n    props = {\n      location: {\n        state: null,\n      },\n    }\n    store = configureTestStore({\n      data: {\n        users: [{ publicName: 'René', isAdmin: false, email: 'rené@example.com' }],\n      },\n    })\n    venue = venueFactory()\n    getVenuesForOfferer.mockResolvedValue([venue])\n  })\n\n  afterEach(() => {\n    loadFilteredBookingsRecap.mockReset()\n  })\n\n  it('should show a pre-filter section', async () => {\n    // When\n    await renderBookingsRecap(props, store)\n\n    // Then\n    const eventDateFilter = screen.getByLabelText('Date de l’évènement')\n    const eventVenueFilter = screen.getByLabelText('Lieu')\n    const eventBookingPeriodFilter = screen.getByLabelText('Période de réservation')\n    expect(eventDateFilter).toBeInTheDocument()\n    expect(eventVenueFilter).toBeInTheDocument()\n    expect(eventBookingPeriodFilter).toBeInTheDocument()\n    expect(eventVenueFilter).toHaveValue(DEFAULT_PRE_FILTERS.offerVenueId)\n    expect(eventDateFilter).not.toHaveValue()\n  })\n\n  it('should init venue pre-filter with venueId in router state', async () => {\n    // When\n    await renderBookingsRecap(props, store, { venueId: venue.id, statuses: [] })\n\n    // Then\n    const eventVenueFilter = screen.getByLabelText('Lieu')\n    expect(eventVenueFilter).toHaveValue(venue.id)\n  })\n\n  it('should request bookings pre-filtered by venue and period when coming from home page', async () => {\n    // Given\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [bookingRecapFactory()],\n    })\n\n    // When\n    await renderBookingsRecap(props, store, {\n      venueId: venue.id,\n      statuses: [\n        BOOKING_STATUS.CANCELLED,\n        BOOKING_STATUS.CONFIRMED,\n        BOOKING_STATUS.REIMBURSED,\n        BOOKING_STATUS.VALIDATED,\n      ],\n    })\n    const statusFilterButton = await screen.findByText('Statut')\n    fireEvent.click(statusFilterButton)\n\n    // Then\n    expect(screen.getByLabelText('Lieu')).toHaveValue(venue.id)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).venueId).toBe(venue.id)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).bookingPeriodBeginningDate).toStrictEqual(\n      DEFAULT_PRE_FILTERS.bookingBeginningDate\n    )\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).bookingPeriodEndingDate).toStrictEqual(\n      DEFAULT_PRE_FILTERS.bookingEndingDate\n    )\n    expect(screen.getByRole('checkbox', { name: 'réservé', checked: true })).toBeInTheDocument()\n  })\n\n  it('should ask user to select a pre-filter before clicking on \"Afficher\"', async () => {\n    // When\n    await renderBookingsRecap(props, store)\n\n    // Then\n    expect(loadFilteredBookingsRecap).not.toHaveBeenCalled()\n    const choosePreFiltersMessage = screen.getByText(\n      'Pour visualiser vos réservations, veuillez sélectionner un ou plusieurs des filtres précédents et cliquer sur « Afficher »'\n    )\n    expect(choosePreFiltersMessage).toBeInTheDocument()\n  })\n\n  it('should request bookings of venue requested by user when user clicks on \"Afficher\"', async () => {\n    // Given\n    let bookingRecap = bookingRecapFactory()\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [bookingRecap],\n    })\n    await renderBookingsRecap(props, store)\n\n    // When\n    userEvent.selectOptions(screen.getByLabelText('Lieu'), venue.id)\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // Then\n    await screen.findAllByText(bookingRecap.stock.offer_name)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).venueId).toBe(venue.id)\n  })\n\n  it('should warn user that his prefilters returned no booking when no bookings where returned by selected pre-filters', async () => {\n    // Given\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 0,\n      total: 0,\n      bookings_recap: [],\n    })\n    await renderBookingsRecap(props, store)\n\n    // When\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // Then\n    const noBookingsForPreFilters = await screen.findByText(\n      'Aucune réservation trouvée pour votre recherche.'\n    )\n    expect(noBookingsForPreFilters).toBeInTheDocument()\n  })\n\n  it('should allow user to reset its pre-filters in the no bookings warning', async () => {\n    // Given\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 0,\n      total: 0,\n      bookings_recap: [],\n    })\n    await renderBookingsRecap(props, store)\n    userEvent.selectOptions(screen.getByLabelText('Lieu'), venue.id)\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // When\n    const resetButton = await screen.findByText('réinitialiser tous les filtres.')\n    fireEvent.click(resetButton)\n\n    // Then\n    expect(screen.getByLabelText('Lieu')).toHaveValue(DEFAULT_PRE_FILTERS.offerVenueId)\n  })\n\n  it('should not allow user to reset prefilters when none were applied', async () => {\n    // Given\n    let bookingRecap = bookingRecapFactory()\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [bookingRecap],\n    })\n    await renderBookingsRecap(props, store)\n\n    // When\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // Then\n    expect(screen.queryByText('Réinitialiser les filtres')).not.toBeInTheDocument()\n  })\n\n  it('should allow user to reset prefilters when some where applied', async () => {\n    // Given\n    let bookingRecap = bookingRecapFactory()\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [bookingRecap],\n    })\n    await renderBookingsRecap(props, store)\n    userEvent.selectOptions(screen.getByLabelText('Lieu'), venue.id)\n    const defaultBookingPeriodBeginningDateInput = '16/05/2020'\n    const defaultBookingPeriodEndingDateInput = '15/06/2020'\n    const bookingPeriodBeginningDateInput = screen.getByDisplayValue(\n      defaultBookingPeriodBeginningDateInput\n    )\n    fireEvent.click(bookingPeriodBeginningDateInput)\n    fireEvent.click(screen.getAllByText('5')[0])\n    const bookingPeriodEndingDateInput = screen.getByDisplayValue(\n      defaultBookingPeriodEndingDateInput\n    )\n    fireEvent.click(bookingPeriodEndingDateInput)\n    fireEvent.click(screen.getByText('5'))\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // When\n    const resetButton = await screen.findByText('Réinitialiser les filtres')\n    fireEvent.click(resetButton)\n\n    // Then\n    expect(screen.getByLabelText('Lieu')).toHaveValue(DEFAULT_PRE_FILTERS.offerVenueId)\n    expect(\n      await screen.findByDisplayValue(defaultBookingPeriodBeginningDateInput)\n    ).toBeInTheDocument()\n    expect(await screen.findByDisplayValue(defaultBookingPeriodEndingDateInput)).toBeInTheDocument()\n  })\n\n  it('should ask user to select a pre-filter when user reset them', async () => {\n    // Given\n    let bookingRecap = bookingRecapFactory()\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [bookingRecap],\n    })\n    await renderBookingsRecap(props, store)\n    userEvent.selectOptions(screen.getByLabelText('Lieu'), venue.id)\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // When\n    const resetButton = await screen.findByText('Réinitialiser les filtres')\n    fireEvent.click(resetButton)\n\n    // Then\n    expect(screen.queryByText('Réinitialiser les filtres')).not.toBeInTheDocument()\n    const choosePreFiltersMessage = screen.getByText(\n      'Pour visualiser vos réservations, veuillez sélectionner un ou plusieurs des filtres précédents et cliquer sur « Afficher »'\n    )\n    expect(choosePreFiltersMessage).toBeInTheDocument()\n  })\n\n  it('should fetch bookings for the filtered venue as many times as the number of pages', async () => {\n    // Given\n    const bookings1 = bookingRecapFactory()\n    const bookings2 = bookingRecapFactory()\n    const paginatedBookingRecapReturned = {\n      page: 1,\n      pages: 2,\n      total: 2,\n      bookings_recap: [bookings1],\n    }\n    const secondPaginatedBookingRecapReturned = {\n      page: 2,\n      pages: 2,\n      total: 2,\n      bookings_recap: [bookings2],\n    }\n    loadFilteredBookingsRecap\n      .mockResolvedValueOnce(paginatedBookingRecapReturned)\n      .mockResolvedValueOnce(secondPaginatedBookingRecapReturned)\n    await renderBookingsRecap(props, store)\n\n    // When\n    userEvent.selectOptions(screen.getByLabelText('Lieu'), venue.id)\n    await fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // Then\n    const secondBookingRecap = await screen.findAllByText(bookings2.stock.offer_name)\n    expect(secondBookingRecap).toHaveLength(2)\n    const firstBookingRecap = screen.getAllByText(bookings1.stock.offer_name)\n    expect(firstBookingRecap).toHaveLength(2)\n\n    expect(loadFilteredBookingsRecap).toHaveBeenCalledTimes(2)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).page).toBe(1)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).venueId).toBe(venue.id)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 2).page).toBe(2)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 2).venueId).toBe(venue.id)\n  })\n\n  it('should request bookings of event date requested by user when user clicks on \"Afficher\"', async () => {\n    // Given\n    let bookingRecap = bookingRecapFactory()\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [bookingRecap],\n    })\n    await renderBookingsRecap(props, store)\n\n    // When\n    fireEvent.click(screen.getByLabelText('Date de l’évènement'))\n    fireEvent.click(screen.getByText('8'))\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // Then\n    await screen.findAllByText(bookingRecap.stock.offer_name)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).eventDate).toStrictEqual(\n      new Date(2020, 5, 8)\n    )\n  })\n\n  it('should request bookings of default period when user clicks on \"Afficher\" without selecting a period', async () => {\n    // Given\n    let bookingRecap = bookingRecapFactory()\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [bookingRecap],\n    })\n    await renderBookingsRecap(props, store)\n\n    // When\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // Then\n    await screen.findAllByText(bookingRecap.stock.offer_name)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).bookingPeriodBeginningDate).toStrictEqual(\n      DEFAULT_PRE_FILTERS.bookingBeginningDate\n    )\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).bookingPeriodEndingDate).toStrictEqual(\n      DEFAULT_PRE_FILTERS.bookingEndingDate\n    )\n  })\n\n  it('should request bookings of selected period when user clicks on \"Afficher\"', async () => {\n    // Given\n    let bookingRecap = bookingRecapFactory()\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [bookingRecap],\n    })\n    await renderBookingsRecap(props, store)\n\n    const bookingPeriodWrapper = screen.getByLabelText('Période de réservation').closest('label')\n    const [beginningPeriodInput, endingPeriodInput] = within(\n      bookingPeriodWrapper\n    ).getAllByPlaceholderText('JJ/MM/AAAA')\n\n    // When\n    fireEvent.click(beginningPeriodInput)\n    fireEvent.click(screen.getByText('10'))\n    fireEvent.click(endingPeriodInput)\n    fireEvent.click(screen.getByText('5'))\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // Then\n    await screen.findAllByText(bookingRecap.stock.offer_name)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).bookingPeriodBeginningDate).toStrictEqual(\n      new Date(2020, 4, 10)\n    )\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).bookingPeriodEndingDate).toStrictEqual(\n      new Date(2020, 5, 5)\n    )\n  })\n\n  it('should set default beginning period date when user empties it and clicks on \"Afficher\"', async () => {\n    // Given\n    let bookingRecap = bookingRecapFactory()\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [bookingRecap],\n    })\n    await renderBookingsRecap(props, store)\n\n    const bookingPeriodWrapper = screen.getByLabelText('Période de réservation').closest('label')\n    const [beginningPeriodInput, endingPeriodInput] = within(\n      bookingPeriodWrapper\n    ).getAllByPlaceholderText('JJ/MM/AAAA')\n    fireEvent.click(endingPeriodInput)\n    fireEvent.click(screen.getByText('12'))\n\n    // When\n    fireEvent.change(beginningPeriodInput, { target: { value: '' } })\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // Then\n    await screen.findAllByText(bookingRecap.stock.offer_name)\n    const thirtyDaysBeforeEndingDate = new Date(2020, 4, 13)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).bookingPeriodBeginningDate).toStrictEqual(\n      thirtyDaysBeforeEndingDate\n    )\n  })\n\n  it('should set default ending period date when user empties it and clicks on \"Afficher\"', async () => {\n    // Given\n    let bookingRecap = bookingRecapFactory()\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [bookingRecap],\n    })\n    await renderBookingsRecap(props, store)\n\n    const bookingPeriodWrapper = screen.getByLabelText('Période de réservation').closest('label')\n    const [beginningPeriodInput, endingPeriodInput] = within(\n      bookingPeriodWrapper\n    ).getAllByPlaceholderText('JJ/MM/AAAA')\n    fireEvent.click(beginningPeriodInput)\n    fireEvent.click(screen.getByText('10'))\n\n    // When\n    fireEvent.change(endingPeriodInput, { target: { value: '' } })\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // Then\n    await screen.findAllByText(bookingRecap.stock.offer_name)\n    const thirtyDaysAfterBeginningDate = new Date(2020, 5, 9)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).bookingPeriodEndingDate).toStrictEqual(\n      thirtyDaysAfterBeginningDate\n    )\n  })\n\n  it('should not be possible to select ending period date greater than today', async () => {\n    // Given\n    let bookingRecap = bookingRecapFactory()\n    loadFilteredBookingsRecap.mockResolvedValue({\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [bookingRecap],\n    })\n    await renderBookingsRecap(props, store)\n\n    const bookingPeriodWrapper = screen.getByLabelText('Période de réservation').closest('label')\n    const endingPeriodInput = within(bookingPeriodWrapper).getAllByPlaceholderText('JJ/MM/AAAA')[1]\n\n    // When\n    fireEvent.click(endingPeriodInput)\n    fireEvent.click(screen.getByText('16'))\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // Then\n    await screen.findAllByText(bookingRecap.stock.offer_name)\n    expect(getNthCallNthArg(loadFilteredBookingsRecap, 1).bookingPeriodEndingDate).toStrictEqual(\n      DEFAULT_PRE_FILTERS.bookingEndingDate\n    )\n  })\n\n  it('should reset bookings recap list when applying filters', async () => {\n    // Given\n    const booking = bookingRecapFactory()\n    const otherVenueBooking = bookingRecapFactory()\n    const otherVenue = venueFactory()\n    getVenuesForOfferer.mockResolvedValue([venue, otherVenue])\n    const paginatedBookingRecapReturned = {\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [booking],\n    }\n    const otherVenuePaginatedBookingRecapReturned = {\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [otherVenueBooking],\n    }\n    loadFilteredBookingsRecap\n      .mockResolvedValueOnce(otherVenuePaginatedBookingRecapReturned)\n      .mockResolvedValueOnce(paginatedBookingRecapReturned)\n    await renderBookingsRecap(props, store)\n\n    userEvent.selectOptions(screen.getByLabelText('Lieu'), otherVenue.id)\n    fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n    await screen.findAllByText(otherVenueBooking.stock.offer_name)\n\n    // When\n    userEvent.selectOptions(screen.getByLabelText('Lieu'), venue.id)\n    await fireEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // Then\n    const firstBookingRecap = await screen.findAllByText(booking.stock.offer_name)\n    expect(firstBookingRecap).toHaveLength(2)\n    expect(screen.queryByText(otherVenueBooking.stock.offer_name)).not.toBeInTheDocument()\n  })\n\n  it('should show notification with information message when there are more than 5 pages', async () => {\n    // Given\n    const bookingsRecap = { pages: 6, bookings_recap: [] }\n    loadFilteredBookingsRecap\n      .mockResolvedValueOnce({ ...bookingsRecap, page: 1 })\n      .mockResolvedValueOnce({ ...bookingsRecap, page: 2 })\n      .mockResolvedValueOnce({ ...bookingsRecap, page: 3 })\n      .mockResolvedValueOnce({ ...bookingsRecap, page: 4 })\n      .mockResolvedValueOnce({ ...bookingsRecap, page: 5 })\n      .mockResolvedValueOnce({ ...bookingsRecap, page: 6 })\n    await renderBookingsRecap(props, store)\n\n    // when\n    userEvent.selectOptions(screen.getByLabelText('Lieu'), venue.id)\n    await userEvent.click(screen.getByText('Afficher', { selector: 'button' }))\n\n    // Then\n    const informationalMessage = await screen.findByText(\n      'L’affichage des réservations a été limité à 5 000 réservations. Vous pouvez modifier les filtres pour affiner votre recherche.'\n    )\n    expect(informationalMessage).toBeInTheDocument()\n    expect(loadFilteredBookingsRecap).toHaveBeenCalledTimes(5)\n  })\n\n  it('should not show notification with information message when there are 5 pages or less', async () => {\n    // Given\n    const bookingsRecap = { pages: 5, bookings_recap: [] }\n    loadFilteredBookingsRecap\n      .mockResolvedValueOnce({ ...bookingsRecap, page: 1 })\n      .mockResolvedValueOnce({ ...bookingsRecap, page: 2 })\n      .mockResolvedValueOnce({ ...bookingsRecap, page: 3 })\n      .mockResolvedValueOnce({ ...bookingsRecap, page: 4 })\n      .mockResolvedValueOnce({ ...bookingsRecap, page: 5 })\n    await renderBookingsRecap(props, store)\n\n    // when\n    userEvent.selectOptions(screen.getByLabelText('Lieu'), venue.id)\n    await userEvent.click(screen.getByText('Afficher', { selector: 'button' }))\n\n    // Then\n    await waitFor(() => expect(loadFilteredBookingsRecap).toHaveBeenCalledTimes(5))\n    const informationalMessage = screen.queryByText(\n      'L’affichage des réservations a été limité à 5 000 réservations. Vous pouvez modifier les filtres pour affiner votre recherche.'\n    )\n    expect(informationalMessage).not.toBeInTheDocument()\n  })\n\n  it('should inform the user that the filters have been modified when at least one of them was and before clicking on the \"Afficher\" button', async () => {\n    // Given\n    render(\n      <Provider store={store}>\n        <MemoryRouter initialEntries={[{ pathname: '/reservations', state: undefined }]}>\n          <BookingsRecapContainer {...props} />\n          <NotificationContainer />\n        </MemoryRouter>\n      </Provider>\n    )\n    userEvent.click(screen.getByRole('button', { name: 'Afficher' }))\n\n    // When\n    userEvent.selectOptions(\n      screen.getByLabelText('Lieu'),\n      await screen.findByText(venue.publicName)\n    )\n\n    // Then\n    const informationalMessage = screen.getByText(\n      'Vos filtres ont été modifiés. Veuillez cliquer sur « Afficher » pour actualiser votre recherche.'\n    )\n    expect(informationalMessage).toBeInTheDocument()\n  })\n\n  it('should not inform the user when the selected filter is the same than the actual filter', async () => {\n    // Given\n    render(\n      <Provider store={store}>\n        <MemoryRouter initialEntries={[{ pathname: '/reservations', state: undefined }]}>\n          <BookingsRecapContainer {...props} />\n          <NotificationContainer />\n        </MemoryRouter>\n      </Provider>\n    )\n    userEvent.selectOptions(\n      screen.getByLabelText('Lieu'),\n      await screen.findByText(venue.publicName)\n    )\n\n    // When\n    userEvent.selectOptions(screen.getByLabelText('Lieu'), screen.getByText('Tous les lieux'))\n\n    // Then\n    const informationalMessage = screen.queryByText(\n      'Vos filtres ont été modifiés. Veuillez cliquer sur « Afficher » pour actualiser votre recherche.'\n    )\n    expect(informationalMessage).not.toBeInTheDocument()\n  })\n\n  it('should not inform the user of pre-filter modifications before first click on \"Afficher\" button', async () => {\n    // Given\n    render(\n      <Provider store={store}>\n        <MemoryRouter initialEntries={[{ pathname: '/reservations', state: undefined }]}>\n          <BookingsRecapContainer {...props} />\n          <NotificationContainer />\n        </MemoryRouter>\n      </Provider>\n    )\n\n    // When\n    userEvent.selectOptions(\n      screen.getByLabelText('Lieu'),\n      await screen.findByText(venue.publicName)\n    )\n\n    // Then\n    const informationalMessage = screen.queryByText(\n      'Vos filtres ont été modifiés. Veuillez cliquer sur « Afficher » pour actualiser votre recherche.'\n    )\n    expect(informationalMessage).not.toBeInTheDocument()\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Desk/Desk.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Desk/DeskContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Desk/__specs__/Desk.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (290). Maximum allowed is 150.',
        line: 28,
        column: 37,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 317,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (17). Maximum allowed is 15.',
        line: 140,
        column: 61,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 170,
        endColumn: 6,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { fireEvent, render, screen, waitFor } from '@testing-library/react'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport { configureTestStore } from 'store/testUtils'\nimport { queryByTextTrimHtml } from 'utils/testHelpers'\n\nimport Desk from '../Desk'\n\nconst renderDesk = props => {\n  const store = configureTestStore({\n    data: {\n      users: [{ publicName: 'USER', hasSeenProTutorials: true, isAdmin: false }],\n    },\n  })\n\n  render(\n    <Provider store={store}>\n      <MemoryRouter>\n        <Desk {...props} />\n      </MemoryRouter>\n    </Provider>\n  )\n}\n\ndescribe('src | components | Desk', () => {\n  let props\n\n  beforeEach(() => {\n    props = {\n      getBooking: jest.fn(),\n      invalidateBooking: jest.fn(),\n      trackValidateBookingSuccess: jest.fn(),\n      validateBooking: jest.fn(),\n    }\n  })\n\n  it('should display a title, a description and a text input', () => {\n    // when\n    renderDesk(props)\n\n    // then\n    const title = screen.getByText('Guichet', { selector: 'h1' })\n    expect(title).toBeInTheDocument()\n    const description = screen.getByText(\n      'Saisissez les contremarques présentées par les bénéficiaires afin de les valider ou de les invalider.'\n    )\n    expect(description).toBeInTheDocument()\n    const input = screen.getByPlaceholderText('ex : AZE123')\n    expect(input).toHaveAttribute('type', 'text')\n    const bookingUser = queryByTextTrimHtml(screen, 'Utilisateur : Fake user name')\n    expect(bookingUser).not.toBeInTheDocument()\n    const bookingOffer = queryByTextTrimHtml(screen, 'Offre : Fake offer')\n    expect(bookingOffer).not.toBeInTheDocument()\n    const bookingDate = queryByTextTrimHtml(screen, 'Date de l’offre : Permanent')\n    expect(bookingDate).not.toBeInTheDocument()\n    const bookingPrice = queryByTextTrimHtml(screen, 'Prix : 40 €')\n    expect(bookingPrice).not.toBeInTheDocument()\n  })\n\n  describe('while the token is not correctly filled', () => {\n    it('should display a message when input is empty', () => {\n      // given\n      renderDesk(props)\n      const tokenInput = screen.getByLabelText('Contremarque')\n\n      // when\n      fireEvent.change(tokenInput, { target: { value: '' } })\n\n      // then\n      expect(screen.getByRole('button', { name: 'Valider la contremarque' })).toBeDisabled()\n      expect(screen.getByText('Saisissez une contremarque')).toBeInTheDocument()\n    })\n\n    it('should display a message while the user is typing a token', () => {\n      // given\n      renderDesk(props)\n      const tokenInput = screen.getByLabelText('Contremarque')\n\n      // when\n      fireEvent.change(tokenInput, { target: { value: 'ABCDE' } })\n\n      // then\n      expect(screen.getByRole('button', { name: 'Valider la contremarque' })).toBeDisabled()\n      expect(screen.getByText('Caractères restants : 1/6')).toBeInTheDocument()\n    })\n\n    it('should display a message when token is invalid', () => {\n      // given\n      renderDesk(props)\n      const tokenInput = screen.getByLabelText('Contremarque')\n\n      // when\n      fireEvent.change(tokenInput, { target: { value: 'ù^`@' } })\n\n      // then\n      expect(screen.getByRole('button', { name: 'Valider la contremarque' })).toBeDisabled()\n      expect(screen.getByText('Caractères valides : de A à Z et de 0 à 9')).toBeInTheDocument()\n    })\n  })\n\n  it('should not validate the form when token is valid then invalid', async () => {\n    // given\n    jest.spyOn(props, 'getBooking').mockResolvedValue()\n    renderDesk(props)\n    const tokenInput = screen.getByLabelText('Contremarque')\n    await waitFor(() => fireEvent.change(tokenInput, { target: { value: 'MEFA01' } }))\n\n    // when\n    fireEvent.change(tokenInput, { target: { value: 'MEFA' } })\n\n    // then\n    const submitButton = screen.getByRole('button', { name: 'Valider la contremarque' })\n    expect(submitButton).toBeDisabled()\n  })\n\n  it('should not invalidate the form when token is valid then invalid', async () => {\n    // given\n    jest.spyOn(props, 'getBooking').mockResolvedValue(\n      Promise.reject({\n        errors: { booking: 'token is already validated' },\n        status: 410,\n      })\n    )\n    renderDesk(props)\n    const tokenInput = screen.getByLabelText('Contremarque')\n    await waitFor(() => fireEvent.change(tokenInput, { target: { value: 'MEFA01' } }))\n\n    // when\n    fireEvent.change(tokenInput, { target: { value: 'MEFA' } })\n\n    // then\n    const submitButton = screen.getByRole('button', { name: 'Valider la contremarque' })\n    expect(submitButton).toBeDisabled()\n  })\n\n  describe('when the input field is filled with a valid token', () => {\n    it('should display a message and booking informations', async () => {\n      // given\n      jest.spyOn(props, 'getBooking').mockResolvedValue({\n        datetime: '2020-10-23T20:00:00Z',\n        offerName: 'Fake offer',\n        userName: 'Fake user name',\n        price: 40,\n      })\n      renderDesk(props)\n      const tokenInput = screen.getByLabelText('Contremarque')\n\n      // when\n      fireEvent.change(tokenInput, { target: { value: 'MEFA01' } })\n\n      // then\n      expect(screen.getByText('Vérification...')).toBeInTheDocument()\n      const submitButton = await screen.findByRole('button', { name: 'Valider la contremarque' })\n      expect(submitButton).toBeEnabled()\n      const responseFromApi = await screen.findByText(\n        'Coupon vérifié, cliquez sur \"Valider\" pour enregistrer'\n      )\n      expect(responseFromApi).toBeInTheDocument()\n      const bookingUser = await queryByTextTrimHtml(screen, 'Utilisateur : Fake user name')\n      expect(bookingUser).toBeInTheDocument()\n      const bookingOffer = await queryByTextTrimHtml(screen, 'Offre : Fake offer')\n      expect(bookingOffer).toBeInTheDocument()\n      const bookingDate = await queryByTextTrimHtml(screen, 'Date de l’offre : 23/10/2020 - 22h00')\n      expect(bookingDate).toBeInTheDocument()\n      const bookingPrice = await queryByTextTrimHtml(screen, 'Prix : 40 €')\n      expect(bookingPrice).toBeInTheDocument()\n    })\n\n    it('should display an error message when token validation fails', async () => {\n      // given\n      jest.spyOn(props, 'getBooking').mockRejectedValue({\n        errors: { booking: 'token validation is failed' },\n        status: 410,\n      })\n      renderDesk(props)\n      const tokenInput = screen.getByLabelText('Contremarque')\n\n      // when\n      fireEvent.change(tokenInput, { target: { value: 'MEFA01' } })\n\n      // then\n      const errorMessage = await screen.findByText('token validation is failed')\n      expect(errorMessage).toBeInTheDocument()\n    })\n\n    it('should display a message and can invalidated the token when token is already validated', async () => {\n      // given\n      jest.spyOn(props, 'getBooking').mockRejectedValue({\n        errors: { booking: 'token is already validated' },\n        status: 410,\n      })\n      renderDesk(props)\n      const tokenInput = screen.getByLabelText('Contremarque')\n\n      // when\n      fireEvent.change(tokenInput, { target: { value: 'MEFA01' } })\n\n      // then\n      const errorMessage = await screen.findByText('token is already validated')\n      expect(errorMessage).toBeInTheDocument()\n      const submitButton = await screen.findByRole('button', { name: 'Invalider la contremarque' })\n      expect(submitButton).toBeEnabled()\n    })\n  })\n\n  describe('when I can submit the form', () => {\n    it('should display a message when booking is validated', async () => {\n      // given\n      jest.spyOn(props, 'getBooking').mockResolvedValue()\n      jest.spyOn(props, 'validateBooking').mockResolvedValue()\n      renderDesk(props)\n      const tokenInput = screen.getByLabelText('Contremarque')\n      const submitButton = screen.getByRole('button', { name: 'Valider la contremarque' })\n      await waitFor(() => fireEvent.change(tokenInput, { target: { value: 'MEFA01' } }))\n\n      // when\n      fireEvent.click(submitButton)\n\n      // then\n      expect(screen.getByText('Validation en cours...')).toBeInTheDocument()\n      const responseFromApi = await screen.findByText('Contremarque validée !')\n      expect(responseFromApi).toBeInTheDocument()\n      const newSubmitButton = await screen.findByRole('button', {\n        name: 'Invalider la contremarque',\n      })\n      expect(newSubmitButton).toBeEnabled()\n    })\n\n    it('should display a message when booking is invalidated', async () => {\n      // given\n      jest.spyOn(props, 'getBooking').mockRejectedValue({\n        errors: { booking: 'token is already validated' },\n        status: 410,\n      })\n      jest.spyOn(props, 'invalidateBooking').mockResolvedValue()\n      renderDesk(props)\n      const tokenInput = screen.getByLabelText('Contremarque')\n      fireEvent.change(tokenInput, { target: { value: 'MEFA01' } })\n      const submitButton = await screen.findByRole('button', { name: 'Invalider la contremarque' })\n\n      // when\n      fireEvent.click(submitButton)\n\n      // then\n      expect(screen.getByText('Invalidation en cours...')).toBeInTheDocument()\n      const responseFromApi = await screen.findByText('Contremarque invalidée !')\n      expect(responseFromApi).toBeInTheDocument()\n      const newSubmitButton = await screen.findByRole('button', { name: 'Valider la contremarque' })\n      expect(newSubmitButton).toBeEnabled()\n    })\n\n    it('should display an error message when the booking validation has failed', async () => {\n      // given\n      jest.spyOn(props, 'getBooking').mockResolvedValue()\n      jest.spyOn(props, 'validateBooking').mockRejectedValue({\n        errors: { booking: 'error message' },\n        status: 401,\n      })\n      renderDesk(props)\n      const tokenInput = screen.getByLabelText('Contremarque')\n      const submitButton = screen.getByRole('button', { name: 'Valider la contremarque' })\n      await waitFor(() => fireEvent.change(tokenInput, { target: { value: 'MEFA01' } }))\n\n      // when\n      fireEvent.click(submitButton)\n\n      // then\n      const responseFromApi = await screen.findByText('error message')\n      expect(responseFromApi).toBeInTheDocument()\n    })\n\n    it('should display an error message when the booking invalidation has failed', async () => {\n      // given\n      renderDesk(props)\n\n      jest.spyOn(props, 'getBooking').mockRejectedValue({\n        errors: { booking: 'token is already validated' },\n        status: 410,\n      })\n      // when\n      const tokenInput = screen.getByLabelText('Contremarque')\n      fireEvent.change(tokenInput, { target: { value: 'MEFA01' } })\n      // then\n      expect(await screen.findByText('token is already validated')).toBeInTheDocument()\n\n      // when\n      jest.spyOn(props, 'invalidateBooking').mockRejectedValue({\n        errors: { booking: 'cannot invalidate booking' },\n        status: 403,\n      })\n      const submitButton = await screen.findByRole('button', { name: 'Invalider la contremarque' })\n      fireEvent.click(submitButton)\n      // then\n      const responseFromApi = await screen.findByText('cannot invalidate booking')\n      expect(responseFromApi).toBeInTheDocument()\n    })\n  })\n\n  it('should display an informative message', () => {\n    // When\n    renderDesk(props)\n\n    // Then\n    const bannerMessage = queryByTextTrimHtml(\n      screen,\n      'N’oubliez pas de vérifier l’identité du bénéficiaire avant de valider la contremarque. Les pièces d’identité doivent impérativement être présentées physiquement. Merci de ne pas accepter les pièces d’identité au format numérique.',\n      { selector: 'p' }\n    )\n    expect(bannerMessage).toBeInTheDocument()\n    expect(screen.getByText('En savoir plus', { selector: 'a' }).getAttribute('href')).toBe(\n      'https://aide.passculture.app/fr/articles/5147999-modalites-de-retrait-d-un-bien-dans-ma-structure'\n    )\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Desk/__specs__/DeskContainer.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (80). Maximum allowed is 50.',
        line: 11,
        column: 33,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 90,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import * as pcapi from 'repository/pcapi/pcapi'\n\nimport { mapDispatchToProps, mergeProps } from '../DeskContainer'\n\njest.mock('repository/pcapi/pcapi', () => ({\n  getBooking: jest.fn().mockImplementation(() => Promise.resolve()),\n  validateBooking: jest.fn(),\n  invalidateBooking: jest.fn(),\n}))\n\ndescribe('src | DeskContainer', () => {\n  it('should retrieve a booking with a token given', () => {\n    // given\n    const { getBooking } = mapDispatchToProps(jest.fn())\n\n    // when\n    getBooking('ABCDEF')\n\n    // then\n    expect(pcapi.getBooking).toHaveBeenCalledWith('ABCDEF')\n  })\n\n  it('should valid a booking with a token given', () => {\n    // given\n    const { validateBooking } = mapDispatchToProps(jest.fn())\n\n    // when\n    validateBooking('ABCDEF')\n\n    // then\n    expect(pcapi.validateBooking).toHaveBeenCalledWith('ABCDEF')\n  })\n\n  it('should invalid a booking with a token given', () => {\n    // given\n    const { invalidateBooking } = mapDispatchToProps(jest.fn())\n\n    // when\n    invalidateBooking('ABCDEF')\n\n    // then\n    expect(pcapi.invalidateBooking).toHaveBeenCalledWith('ABCDEF')\n  })\n\n  describe('mergeProps', () => {\n    it('should spread stateProps, dispatchProps and ownProps into mergedProps', () => {\n      // given\n      const stateProps = {}\n      const dispatchProps = {\n        getBooking: () => {},\n      }\n      const ownProps = {\n        match: {\n          params: {},\n        },\n      }\n\n      // when\n      const mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n\n      // then\n      expect(mergedProps).toStrictEqual({\n        getBooking: expect.any(Function),\n        trackValidateBookingSuccess: expect.any(Function),\n      })\n    })\n\n    it('should map a tracking event for validate a booking', () => {\n      // given\n      const stateProps = {\n        offer: {\n          id: 'B4',\n        },\n      }\n      const ownProps = {\n        tracking: {\n          trackEvent: jest.fn(),\n        },\n      }\n      // when\n      mergeProps(stateProps, {}, ownProps).trackValidateBookingSuccess('RTgfd67')\n\n      // then\n      expect(ownProps.tracking.trackEvent).toHaveBeenCalledWith({\n        action: 'validateBooking',\n        name: 'RTgfd67',\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Errors/NotFound/NotFound.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Errors/NotFound/__specs__/NotFound.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Errors/Unavailable/Unavailable.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Card/Card.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Card/__specs__/Card.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Homepage.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/HomepageBreadcrumb.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/HomepageContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Offerers/BankInformations.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Offerers/OffererCreationLinks.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Offerers/OffererDetails.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (152). Maximum allowed is 150.',
        line: 25,
        column: 24,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 176,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      'import PropTypes from \'prop-types\'\nimport React, { useCallback, useEffect, useMemo, useState } from \'react\'\nimport { Link } from \'react-router-dom\'\n\nimport Banner from \'components/layout/Banner/Banner\'\nimport Icon from \'components/layout/Icon\'\nimport Select from \'components/layout/inputs/Select\'\n\nimport { STEP_OFFERER_HASH } from \'../HomepageBreadcrumb\'\n\nimport { ReactComponent as ClosedEyeSvg } from \'./assets/ico-eye-close.svg\'\nimport { ReactComponent as OpenedEyeSvg } from \'./assets/ico-eye-open.svg\'\nimport BankInformations from \'./BankInformations\'\n\nconst hasBankInformations = offererOrVenue =>\n  Boolean(\n    (offererOrVenue.iban && offererOrVenue.bic) || offererOrVenue.demarchesSimplifieesApplicationId\n  )\n\nconst hasRejectedOrDraftBankInformation = offererOrVenue =>\n  Boolean(\n    offererOrVenue.demarchesSimplifieesApplicationId && !offererOrVenue.iban && !offererOrVenue.bic\n  )\n\nconst OffererDetails = ({\n  handleChangeOfferer,\n  hasPhysicalVenues,\n  isUserOffererValidated,\n  offererOptions,\n  selectedOfferer,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(!hasPhysicalVenues)\n  useEffect(() => setIsExpanded(!hasPhysicalVenues), [hasPhysicalVenues])\n\n  const toggleVisibility = useCallback(\n    () => setIsExpanded(currentVisibility => !currentVisibility),\n    []\n  )\n\n  const hasMissingBankInformations = useMemo(() => {\n    if (!selectedOfferer || hasBankInformations(selectedOfferer)) return false\n\n    return selectedOfferer.managedVenues\n      .filter(venue => !venue.isVirtual)\n      .some(venue => !hasBankInformations(venue))\n  }, [selectedOfferer])\n\n  const hasRejectedOrDraftOffererBankInformations = useMemo(() => {\n    if (!selectedOfferer) return false\n    return hasRejectedOrDraftBankInformation(selectedOfferer)\n  }, [selectedOfferer])\n\n  return (\n    <div className="h-card h-card-secondary">\n      <div className={`h-card-inner${isExpanded ? \'\' : \' h-no-bottom\'}`}>\n        <div className="od-header">\n          <Select\n            handleSelection={handleChangeOfferer}\n            id={STEP_OFFERER_HASH}\n            label=""\n            name="offererId"\n            options={offererOptions}\n            selectedValue={selectedOfferer.id}\n          />\n          <div className="od-separator vertical" />\n          <button\n            className={`tertiary-button${isExpanded ? \' od-primary\' : \'\'}`}\n            onClick={toggleVisibility}\n            type="button"\n          >\n            {isExpanded ? (\n              <>\n                <ClosedEyeSvg />\n                Masquer\n              </>\n            ) : (\n              <>\n                <OpenedEyeSvg />\n                Afficher\n              </>\n            )}\n          </button>\n          {hasMissingBankInformations && (\n            <Icon\n              alt="Informations bancaires manquantes"\n              className="ico-bank-warning"\n              svg="ico-alert-filled"\n            />\n          )}\n          <div className="od-separator vertical small" />\n          {isUserOffererValidated ? (\n            <Link\n              className="tertiary-link"\n              to={`/structures/${selectedOfferer.id}`}\n            >\n              <Icon svg="ico-outer-pen" />\n              Modifier\n            </Link>\n          ) : (\n            <button\n              className="tertiary-button"\n              disabled\n              type="button"\n            >\n              <Icon svg="ico-outer-pen" />\n              Modifier\n            </button>\n          )}\n        </div>\n\n        {isExpanded && (\n          <>\n            <div className="od-separator horizontal" />\n            {!selectedOfferer.isValidated && (\n              <Banner type="notification-info">\n                Votre structure est en cours de validation\n              </Banner>\n            )}\n            {isUserOffererValidated && (\n              <div className="h-card-cols">\n                <div className="h-card-col">\n                  <h3 className="h-card-secondary-title">\n                    Informations pratiques\n                  </h3>\n                  <div className="h-card-content">\n                    <ul className="h-description-list">\n                      <li className="h-dl-row">\n                        <span className="h-dl-title">\n                          Siren :\n                        </span>\n                        <span className="h-dl-description">\n                          {selectedOfferer.siren}\n                        </span>\n                      </li>\n\n                      <li className="h-dl-row">\n                        <span className="h-dl-title">\n                          Désignation :\n                        </span>\n                        <span className="h-dl-description">\n                          {selectedOfferer.name}\n                        </span>\n                      </li>\n\n                      <li className="h-dl-row">\n                        <span className="h-dl-title">\n                          {\'Siège social : \'}\n                        </span>\n                        <address className="od-address">\n                          {selectedOfferer.address}\n                          {hasMissingBankInformations && <br />}\n                          {`${selectedOfferer.postalCode} ${selectedOfferer.city}`}\n                        </address>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n                {(hasMissingBankInformations || hasRejectedOrDraftOffererBankInformations) && (\n                  <div className="h-card-col">\n                    <BankInformations\n                      hasMissingBankInformations={hasMissingBankInformations}\n                      hasRejectedOrDraftOffererBankInformations={\n                        hasRejectedOrDraftOffererBankInformations\n                      }\n                      offerer={selectedOfferer}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n\nOffererDetails.propTypes = {\n  handleChangeOfferer: PropTypes.func.isRequired,\n  hasPhysicalVenues: PropTypes.bool.isRequired,\n  isUserOffererValidated: PropTypes.bool.isRequired,\n  offererOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      displayName: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  selectedOfferer: PropTypes.shape().isRequired,\n}\n\nexport default OffererDetails\n',
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Offerers/Offerers.jsx',
    messages: [
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (16). Maximum allowed is 15.',
        line: 21,
        column: 18,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 134,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React, { useCallback, useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport useFrenchQuery from 'components/hooks/useFrenchQuery'\nimport { buildSelectOptions } from 'components/layout/inputs/Select'\nimport Spinner from 'components/layout/Spinner'\nimport {\n  INITIAL_PHYSICAL_VENUES,\n  INITIAL_VIRTUAL_VENUE,\n} from 'components/pages/Home/Offerers/_constants'\nimport { VenueList } from 'components/pages/Home/Venues/VenueList'\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { HTTP_STATUS } from 'repository/pcapi/pcapiClient'\n\nimport OffererCreationLinks from './OffererCreationLinks'\nimport OffererDetails from './OffererDetails'\nimport VenueCreationLinks from './VenueCreationLinks'\n\nexport const CREATE_OFFERER_SELECT_ID = 'creation'\n\nconst Offerers = () => {\n  const [offererOptions, setOffererOptions] = useState([])\n  const [selectedOffererId, setSelectedOffererId] = useState(null)\n  const [selectedOfferer, setSelectedOfferer] = useState(null)\n  const [physicalVenues, setPhysicalVenues] = useState(INITIAL_PHYSICAL_VENUES)\n  const [virtualVenue, setVirtualVenue] = useState(INITIAL_VIRTUAL_VENUE)\n  const [isLoading, setIsLoading] = useState(true)\n  const [isUserOffererValidated, setIsUserOffererValidated] = useState(false)\n\n  const history = useHistory()\n  const [query, setQuery] = useFrenchQuery()\n\n  useEffect(\n    function fetchData() {\n      const { offererId } = query\n      pcapi.getAllOfferersNames().then(receivedOffererNames => {\n        const initialOffererOptions = buildSelectOptions('id', 'name', receivedOffererNames)\n        if (initialOffererOptions.length > 0) {\n          setSelectedOffererId(offererId || initialOffererOptions[0].id)\n          setOffererOptions([\n            ...initialOffererOptions,\n            {\n              displayName: '+ Ajouter une structure',\n              id: CREATE_OFFERER_SELECT_ID,\n            },\n          ])\n        } else {\n          setIsLoading(false)\n        }\n      })\n    },\n    [query]\n  )\n\n  useEffect(() => {\n    if (!selectedOffererId) return\n    pcapi\n      .getOffererWithVenueStats(selectedOffererId)\n      .then(receivedOfferer => {\n        setSelectedOfferer(receivedOfferer)\n        setPhysicalVenues(receivedOfferer.managedVenues.filter(venue => !venue.isVirtual))\n        const virtualVenue = receivedOfferer.managedVenues.find(venue => venue.isVirtual)\n        setVirtualVenue(virtualVenue)\n        setIsUserOffererValidated(true)\n      })\n      .catch(error => {\n        if (error.status === HTTP_STATUS.FORBIDDEN) {\n          setSelectedOfferer({ id: selectedOffererId, managedVenues: [] })\n          setPhysicalVenues(INITIAL_PHYSICAL_VENUES)\n          setVirtualVenue(INITIAL_VIRTUAL_VENUE)\n          setIsUserOffererValidated(false)\n        }\n      })\n      .finally(() => {\n        setIsLoading(false)\n      })\n  }, [selectedOffererId])\n\n  const handleChangeOfferer = useCallback(\n    event => {\n      const newOffererId = event.target.value\n      if (newOffererId === CREATE_OFFERER_SELECT_ID) {\n        history.push('/structures/creation')\n      } else if (newOffererId !== selectedOfferer.id) {\n        setSelectedOffererId(newOffererId)\n        setQuery({ offererId: newOffererId })\n      }\n    },\n    [history, selectedOfferer, setQuery]\n  )\n\n  if (isLoading) {\n    return (\n      <div className=\"h-card h-card-secondary h-card-placeholder\">\n        <div className=\"h-card-inner\">\n          <Spinner />\n        </div>\n      </div>\n    )\n  }\n\n  const userHasOfferers = offererOptions.length > 0\n  return (\n    <>\n      {userHasOfferers && selectedOfferer && (\n        <>\n          <OffererDetails\n            handleChangeOfferer={handleChangeOfferer}\n            hasPhysicalVenues={physicalVenues.length > 0}\n            isUserOffererValidated={isUserOffererValidated}\n            offererOptions={offererOptions}\n            selectedOfferer={selectedOfferer}\n          />\n\n          <VenueList\n            physicalVenues={physicalVenues}\n            selectedOffererId={selectedOfferer.id}\n            virtualVenue={virtualVenue?.nOffers ? virtualVenue : null}\n          />\n        </>\n      )}\n\n      {!userHasOfferers && <OffererCreationLinks />}\n\n      {isUserOffererValidated && (\n        <VenueCreationLinks\n          hasPhysicalVenue={physicalVenues.length > 0}\n          hasVirtualOffers={virtualVenue && virtualVenue.nOffers > 0}\n          offererId={selectedOfferer ? selectedOfferer.id : null}\n        />\n      )}\n    </>\n  )\n}\n\nexport default Offerers\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Offerers/OfferersLegacy.jsx',
    messages: [
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (16). Maximum allowed is 15.',
        line: 21,
        column: 18,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 134,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import React, { useCallback, useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport useFrenchQuery from 'components/hooks/useFrenchQuery'\nimport { buildSelectOptions } from 'components/layout/inputs/Select'\nimport Spinner from 'components/layout/Spinner'\nimport {\n  INITIAL_PHYSICAL_VENUES,\n  INITIAL_VIRTUAL_VENUE,\n} from 'components/pages/Home/Offerers/_constants'\nimport { VenueList } from 'components/pages/Home/Venues/VenueListLegacy'\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { HTTP_STATUS } from 'repository/pcapi/pcapiClient'\n\nimport OffererCreationLinks from './OffererCreationLinks'\nimport OffererDetails from './OffererDetails'\nimport VenueCreationLinks from './VenueCreationLinks'\n\nexport const CREATE_OFFERER_SELECT_ID = 'creation'\n\nconst Offerers = () => {\n  const [offererOptions, setOffererOptions] = useState([])\n  const [selectedOffererId, setSelectedOffererId] = useState(null)\n  const [selectedOfferer, setSelectedOfferer] = useState(null)\n  const [physicalVenues, setPhysicalVenues] = useState(INITIAL_PHYSICAL_VENUES)\n  const [virtualVenue, setVirtualVenue] = useState(INITIAL_VIRTUAL_VENUE)\n  const [isLoading, setIsLoading] = useState(true)\n  const [isUserOffererValidated, setIsUserOffererValidated] = useState(false)\n\n  const history = useHistory()\n  const [query, setQuery] = useFrenchQuery()\n\n  useEffect(\n    function fetchData() {\n      const { offererId } = query\n      pcapi.getAllOfferersNames().then(receivedOffererNames => {\n        const initialOffererOptions = buildSelectOptions('id', 'name', receivedOffererNames)\n        if (initialOffererOptions.length > 0) {\n          setSelectedOffererId(offererId || initialOffererOptions[0].id)\n          setOffererOptions([\n            ...initialOffererOptions,\n            {\n              displayName: '+ Ajouter une structure',\n              id: CREATE_OFFERER_SELECT_ID,\n            },\n          ])\n        } else {\n          setIsLoading(false)\n        }\n      })\n    },\n    [query]\n  )\n\n  useEffect(() => {\n    if (!selectedOffererId) return\n    pcapi\n      .getOfferer(selectedOffererId)\n      .then(receivedOfferer => {\n        setSelectedOfferer(receivedOfferer)\n        setPhysicalVenues(receivedOfferer.managedVenues.filter(venue => !venue.isVirtual))\n        const virtualVenue = receivedOfferer.managedVenues.find(venue => venue.isVirtual)\n        setVirtualVenue(virtualVenue)\n        setIsUserOffererValidated(true)\n      })\n      .catch(error => {\n        if (error.status === HTTP_STATUS.FORBIDDEN) {\n          setSelectedOfferer({ id: selectedOffererId, managedVenues: [] })\n          setPhysicalVenues(INITIAL_PHYSICAL_VENUES)\n          setVirtualVenue(INITIAL_VIRTUAL_VENUE)\n          setIsUserOffererValidated(false)\n        }\n      })\n      .finally(() => {\n        setIsLoading(false)\n      })\n  }, [selectedOffererId])\n\n  const handleChangeOfferer = useCallback(\n    event => {\n      const newOffererId = event.target.value\n      if (newOffererId === CREATE_OFFERER_SELECT_ID) {\n        history.push('/structures/creation')\n      } else if (newOffererId !== selectedOfferer.id) {\n        setSelectedOffererId(newOffererId)\n        setQuery({ offererId: newOffererId })\n      }\n    },\n    [history, selectedOfferer, setQuery]\n  )\n\n  if (isLoading) {\n    return (\n      <div className=\"h-card h-card-secondary h-card-placeholder\">\n        <div className=\"h-card-inner\">\n          <Spinner />\n        </div>\n      </div>\n    )\n  }\n\n  const userHasOfferers = offererOptions.length > 0\n  return (\n    <>\n      {userHasOfferers && selectedOfferer && (\n        <>\n          <OffererDetails\n            handleChangeOfferer={handleChangeOfferer}\n            hasPhysicalVenues={physicalVenues.length > 0}\n            isUserOffererValidated={isUserOffererValidated}\n            offererOptions={offererOptions}\n            selectedOfferer={selectedOfferer}\n          />\n\n          <VenueList\n            physicalVenues={physicalVenues}\n            selectedOffererId={selectedOfferer.id}\n            virtualVenue={virtualVenue?.nOffers ? virtualVenue : null}\n          />\n        </>\n      )}\n\n      {!userHasOfferers && <OffererCreationLinks />}\n\n      {isUserOffererValidated && (\n        <VenueCreationLinks\n          hasPhysicalVenue={physicalVenues.length > 0}\n          hasVirtualOffers={virtualVenue && virtualVenue.nOffers > 0}\n          offererId={selectedOfferer ? selectedOfferer.id : null}\n        />\n      )}\n    </>\n  )\n}\n\nexport default Offerers\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Offerers/VenueCreationLinks.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Offerers/__specs__/CreationLinks.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (247). Maximum allowed is 150.',
        line: 44,
        column: 27,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 290,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { act, render, screen, within } from '@testing-library/react'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\n\nimport HomepageContainer from '../../HomepageContainer'\n\njest.mock('repository/pcapi/pcapi', () => ({\n  getOfferer: jest.fn(),\n  getAllOfferersNames: jest.fn(),\n  getVenueStats: jest.fn(),\n}))\n\nconst renderHomePage = async () => {\n  const store = configureTestStore({\n    data: {\n      users: [\n        {\n          id: 'fake_id',\n          firstName: 'John',\n          lastName: 'Do',\n          email: 'john.do@dummy.xyz',\n          phoneNumber: '01 00 00 00 00',\n        },\n      ],\n    },\n  })\n\n  return await act(async () => {\n    await render(\n      <Provider store={store}>\n        <MemoryRouter>\n          <HomepageContainer />\n        </MemoryRouter>\n      </Provider>\n    )\n  })\n}\n\ndescribe('creationLinks', () => {\n  let baseOfferers\n  let baseOfferersNames\n  let virtualVenue\n  let physicalVenue\n  let physicalVenueWithPublicName\n\n  beforeEach(() => {\n    virtualVenue = {\n      id: 'test_venue_id_1',\n      isVirtual: true,\n      managingOffererId: 'GE',\n      name: 'Le Sous-sol (Offre numérique)',\n      offererName: 'Bar des amis',\n      publicName: null,\n      nOffers: 2,\n    }\n\n    physicalVenue = {\n      id: 'test_venue_id_2',\n      isVirtual: false,\n      managingOffererId: 'GE',\n      name: 'Le Sous-sol (Offre physique)',\n      offererName: 'Bar des amis',\n      publicName: null,\n      nOffers: 2,\n    }\n    physicalVenueWithPublicName = {\n      id: 'test_venue_id_3',\n      isVirtual: false,\n      managingOffererId: 'GE',\n      name: 'Le deuxième Sous-sol (Offre physique)',\n      offererName: 'Bar des amis',\n      publicName: 'Le deuxième Sous-sol',\n      nOffers: 2,\n    }\n    baseOfferers = [\n      {\n        address: 'LA COULÉE D’OR',\n        city: 'Cayenne',\n        name: 'Bar des amis',\n        id: 'GE',\n        postalCode: '97300',\n        siren: '111111111',\n        bic: 'test bic 01',\n        iban: 'test iban 01',\n        managedVenues: [virtualVenue, physicalVenue, physicalVenueWithPublicName],\n      },\n      {\n        address: 'RUE DE NIEUPORT',\n        city: 'Drancy',\n        id: 'FQ',\n        name: 'Club Dorothy',\n        postalCode: '93700',\n        siren: '222222222',\n        bic: 'test bic 02',\n        iban: 'test iban 02',\n        managedVenues: [],\n      },\n    ]\n    baseOfferersNames = baseOfferers.map(offerer => ({\n      id: offerer.id,\n      name: offerer.name,\n    }))\n\n    pcapi.getOfferer.mockResolvedValue(baseOfferers[0])\n    pcapi.getAllOfferersNames.mockResolvedValue(baseOfferersNames)\n    pcapi.getVenueStats.mockResolvedValue({\n      activeBookingsQuantity: 4,\n      activeOffersCount: 2,\n      soldOutOffersCount: 3,\n      validatedBookingsQuantity: 3,\n    })\n  })\n\n  describe(\"when offerer doesn't have neither physical venue nor virtual offers\", () => {\n    it('should display add information link', async () => {\n      // Given\n      baseOfferers = [\n        {\n          ...baseOfferers[0],\n          managedVenues: [\n            {\n              ...virtualVenue,\n              nOffers: 0,\n            },\n          ],\n        },\n      ]\n      pcapi.getOfferer.mockResolvedValue(baseOfferers[0])\n      await renderHomePage()\n\n      // Then\n      expect(\n        screen.getByText('Avant de créer votre première offre physique vous devez avoir un lieu')\n      ).toBeInTheDocument()\n\n      expect(\n        screen.getByRole('link', {\n          name: 'Créer un lieu',\n        })\n      ).toBeInTheDocument()\n      expect(\n        screen.getByRole('link', {\n          name: 'Créer une offre numérique',\n        })\n      ).toBeInTheDocument()\n    })\n  })\n\n  describe('when offerer have physical venue but no virtual offers', () => {\n    it('sould display both creation links without card container', async () => {\n      // Given\n      baseOfferers = [\n        {\n          ...baseOfferers[0],\n          managedVenues: [\n            physicalVenue,\n            {\n              ...virtualVenue,\n              nOffers: 0,\n            },\n          ],\n        },\n      ]\n      pcapi.getOfferer.mockResolvedValue(baseOfferers[0])\n      await renderHomePage()\n\n      // Then\n      expect(\n        screen.queryByText('Avant de créer votre première offre physique vous devez avoir un lieu')\n      ).not.toBeInTheDocument()\n\n      expect(\n        screen.getByRole('link', {\n          name: 'Créer une offre numérique',\n        })\n      ).toBeInTheDocument()\n      expect(\n        screen.getByRole('link', {\n          name: 'Ajouter un lieu',\n        })\n      ).toBeInTheDocument()\n    })\n  })\n\n  describe(\"when offerer doesn't have physical venue but have virtual offers\", () => {\n    it('should only display \"create venue\" link without card container', async () => {\n      // Given\n      baseOfferers = [\n        {\n          ...baseOfferers[0],\n          managedVenues: [virtualVenue],\n        },\n      ]\n      pcapi.getOfferer.mockResolvedValue(baseOfferers[0])\n      await renderHomePage()\n\n      // Then\n      expect(\n        screen.queryByText('Avant de créer votre première offre physique vous devez avoir un lieu')\n      ).not.toBeInTheDocument()\n      expect(\n        screen.queryByRole('link', {\n          name: 'Créer une offre numérique',\n        })\n      ).not.toBeInTheDocument()\n\n      expect(\n        screen.getByRole('link', {\n          name: 'Créer un lieu',\n        })\n      ).toBeInTheDocument()\n    })\n  })\n\n  describe('when offerer have physical venue and virtual offers', () => {\n    it('should only display \"create venue\" link without card container', async () => {\n      // Given\n      baseOfferers = [\n        {\n          ...baseOfferers[0],\n          managedVenues: [physicalVenue, virtualVenue],\n        },\n      ]\n      pcapi.getOfferer.mockResolvedValue(baseOfferers[0])\n      await renderHomePage()\n\n      // Then\n      expect(\n        screen.queryByText('Avant de créer votre première offre physique vous devez avoir un lieu')\n      ).not.toBeInTheDocument()\n      expect(\n        screen.queryByRole('link', {\n          name: 'Créer une offre numérique',\n        })\n      ).not.toBeInTheDocument()\n\n      expect(\n        screen.getByRole('link', {\n          name: 'Ajouter un lieu',\n        })\n      ).toBeInTheDocument()\n    })\n  })\n\n  describe('when user has no offerer', () => {\n    beforeEach(async () => {\n      pcapi.getAllOfferersNames.mockResolvedValue([])\n\n      await renderHomePage()\n    })\n\n    it('should display offerer creation links', () => {\n      expect(\n        screen.getByText(\n          'Votre précédente structure a été supprimée. Pour plus d’informations sur la suppression et vos données, veuillez contacter notre support.'\n        )\n      ).toBeInTheDocument()\n      expect(\n        screen.getByRole('link', { name: 'Ajouter une nouvelle structure' })\n      ).toBeInTheDocument()\n\n      const offererBanner = screen.getByTestId('offerers-creation-links-card')\n      expect(\n        within(offererBanner).getByRole('link', { name: 'Contacter le support' })\n      ).toBeInTheDocument()\n    })\n\n    it('should not display venue creation links', () => {\n      expect(\n        screen.queryByText('Avant de créer votre première offre physique vous devez avoir un lieu')\n      ).not.toBeInTheDocument()\n      expect(\n        screen.queryByRole('link', {\n          name: 'Créer une offre numérique',\n        })\n      ).not.toBeInTheDocument()\n\n      expect(\n        screen.queryByRole('link', {\n          name: 'Ajouter un lieu',\n        })\n      ).not.toBeInTheDocument()\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Offerers/__specs__/OffererDetails.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (689). Maximum allowed is 150.',
        line: 72,
        column: 28,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 760,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (21). Maximum allowed is 15.',
        line: 72,
        column: 28,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 760,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (681). Maximum allowed is 300.',
        line: 330,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 761,
        endColumn: 1,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`queryByAltText` does not need `await` operator',
        line: 445,
        column: 41,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 445,
        endColumn: 55,
      },
    ],
    errorCount: 0,
    warningCount: 4,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport {\n  act,\n  fireEvent,\n  render,\n  screen,\n  waitForElementToBeRemoved,\n  within,\n} from '@testing-library/react'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\n\nimport HomepageContainer from '../../HomepageContainer'\nimport { CREATE_OFFERER_SELECT_ID } from '../Offerers'\n\nconst mockHistoryPush = jest.fn()\njest.mock('react-router-dom', () => ({\n  ...jest.requireActual('react-router-dom'),\n  useHistory: () => ({\n    push: mockHistoryPush,\n  }),\n}))\n\njest.mock('utils/config', () => ({\n  DEMARCHES_SIMPLIFIEES_VENUE_RIB_UPLOAD_PROCEDURE_URL:\n    'link/to/venue/demarchesSimplifiees/procedure',\n}))\n\njest.mock('repository/pcapi/pcapi', () => ({\n  getOffererWithVenueStats: jest.fn(),\n  getAllOfferersNames: jest.fn(),\n}))\n\nconst renderHomePage = async () => {\n  const store = configureTestStore({\n    features: {\n      list: [\n        {\n          isActive: true,\n          name: 'PERF_VENUE_STATS',\n          nameKey: 'PERF_VENUE_STATS',\n        },\n      ],\n    },\n    data: {\n      users: [\n        {\n          id: 'fake_id',\n          firstName: 'John',\n          lastName: 'Do',\n          email: 'john.do@dummy.xyz',\n          phoneNumber: '01 00 00 00 00',\n        },\n      ],\n    },\n  })\n  return await act(async () => {\n    await render(\n      <Provider store={store}>\n        <MemoryRouter>\n          <HomepageContainer />\n        </MemoryRouter>\n      </Provider>\n    )\n  })\n}\n\ndescribe('offererDetails', () => {\n  let baseOfferers\n  let firstOffererByAlphabeticalOrder\n  let baseOfferersNames\n  let virtualVenue\n  let physicalVenue\n  let physicalVenueWithPublicName\n\n  beforeEach(() => {\n    virtualVenue = {\n      id: 'test_venue_id_1',\n      isVirtual: true,\n      managingOffererId: 'GE',\n      name: 'Le Sous-sol (Offre numérique)',\n      offererName: 'Bar des amis',\n      publicName: null,\n      nOffers: 2,\n      stats: {\n        activeBookingsQuantity: 4,\n        activeOffersCount: 2,\n        soldOutOffersCount: 3,\n        validatedBookingsQuantity: 3,\n      },\n    }\n    physicalVenue = {\n      id: 'test_venue_id_2',\n      isVirtual: false,\n      managingOffererId: 'GE',\n      name: 'Le Sous-sol (Offre physique)',\n      offererName: 'Bar des amis',\n      publicName: null,\n      nOffers: 2,\n      stats: {\n        activeBookingsQuantity: 4,\n        activeOffersCount: 2,\n        soldOutOffersCount: 3,\n        validatedBookingsQuantity: 3,\n      },\n    }\n    physicalVenueWithPublicName = {\n      id: 'test_venue_id_3',\n      isVirtual: false,\n      managingOffererId: 'GE',\n      name: 'Le deuxième Sous-sol (Offre physique)',\n      offererName: 'Bar des amis',\n      publicName: 'Le deuxième Sous-sol',\n      nOffers: 2,\n      stats: {\n        activeBookingsQuantity: 4,\n        activeOffersCount: 2,\n        soldOutOffersCount: 3,\n        validatedBookingsQuantity: 3,\n      },\n    }\n    baseOfferers = [\n      {\n        address: 'RUE DE NIEUPORT',\n        city: 'Drancy',\n        id: 'FQ',\n        isValidated: true,\n        name: 'Club Dorothy',\n        postalCode: '93700',\n        siren: '222222222',\n        bic: 'test bic 02',\n        iban: 'test iban 02',\n        managedVenues: [\n          {\n            ...virtualVenue,\n            id: 'test_venue_id_4',\n            managingOffererId: 'FQ',\n          },\n        ],\n      },\n      {\n        address: 'LA COULÉE D’OR',\n        city: 'Cayenne',\n        name: 'Bar des amis',\n        id: 'GE',\n        isValidated: true,\n        postalCode: '97300',\n        siren: '111111111',\n        bic: 'test bic 01',\n        iban: 'test iban 01',\n        managedVenues: [virtualVenue, physicalVenue, physicalVenueWithPublicName],\n      },\n    ]\n    firstOffererByAlphabeticalOrder = baseOfferers[1]\n    baseOfferersNames = baseOfferers.map(offerer => ({\n      id: offerer.id,\n      name: offerer.name,\n    }))\n\n    pcapi.getOffererWithVenueStats.mockResolvedValue(firstOffererByAlphabeticalOrder)\n    pcapi.getAllOfferersNames.mockResolvedValue(baseOfferersNames)\n  })\n\n  it('should display offerer select', async () => {\n    await renderHomePage()\n    const showButton = screen.getByRole('button', { name: 'Afficher' })\n    fireEvent.click(showButton)\n\n    expect(screen.getByDisplayValue(firstOffererByAlphabeticalOrder.name)).toBeInTheDocument()\n  })\n\n  it('should not display offerer when none exist', async () => {\n    // Given\n    pcapi.getAllOfferersNames.mockResolvedValue([])\n\n    // When\n    await renderHomePage()\n\n    // Then\n    expect(screen.queryByRole('button', { name: 'Afficher' })).not.toBeInTheDocument()\n    expect(screen.getByRole('link', { name: 'Ajouter une nouvelle structure' })).toBeInTheDocument()\n  })\n\n  it('should not warn user when offerer is validated', async () => {\n    // Given\n    await renderHomePage()\n    const showButton = screen.getByRole('button', { name: 'Afficher' })\n\n    // When\n    fireEvent.click(showButton)\n\n    // Then\n    expect(screen.queryByText('Votre structure est en cours de validation')).not.toBeInTheDocument()\n  })\n\n  it('should display first offerer informations', async () => {\n    await renderHomePage()\n    const showButton = screen.getByRole('button', { name: 'Afficher' })\n    fireEvent.click(showButton)\n\n    const selectedOfferer = firstOffererByAlphabeticalOrder\n    expect(screen.getByText(selectedOfferer.siren)).toBeInTheDocument()\n    expect(screen.getByText(selectedOfferer.name, { selector: 'span' })).toBeInTheDocument()\n    expect(screen.getByText(selectedOfferer.address, { exact: false })).toBeInTheDocument()\n    expect(\n      screen.getByText(`${selectedOfferer.postalCode} ${selectedOfferer.city}`, { exact: false })\n    ).toBeInTheDocument()\n  })\n\n  it('should display offerer venues informations', async () => {\n    await renderHomePage()\n    const showButton = screen.getByRole('button', { name: 'Afficher' })\n    fireEvent.click(showButton)\n\n    const selectedOfferer = firstOffererByAlphabeticalOrder\n    const virtualVenueTitle = screen.getByText('Offres numériques')\n    expect(virtualVenueTitle).toBeInTheDocument()\n\n    const physicalVenueTitle = screen.getByText(selectedOfferer.managedVenues[1].name)\n    expect(physicalVenueTitle).toBeInTheDocument()\n    const physicalVenueContainer = physicalVenueTitle.closest('div')\n    expect(\n      within(physicalVenueContainer).getByText('Modifier', { exact: false })\n    ).toBeInTheDocument()\n\n    const secondOfflineVenueTitle = screen.getByText(selectedOfferer.managedVenues[2].publicName)\n    expect(secondOfflineVenueTitle).toBeInTheDocument()\n  })\n\n  it('should not display virtual venue informations when no virtual offers', async () => {\n    // Given\n    firstOffererByAlphabeticalOrder.managedVenues = [\n      {\n        ...virtualVenue,\n        nOffers: 0,\n      },\n      physicalVenue,\n    ]\n\n    // When\n    await renderHomePage()\n\n    // Then\n    expect(\n      screen.queryByRole('heading', { level: 3, name: 'Offres numériques', exact: false })\n    ).not.toBeInTheDocument()\n  })\n\n  describe('when selected offerer change', () => {\n    let newSelectedOfferer\n    beforeEach(async () => {\n      const selectedOffer = firstOffererByAlphabeticalOrder\n      newSelectedOfferer = {\n        ...baseOfferers[0],\n        managedVenues: [\n          {\n            id: 'test_venue_id_3',\n            isVirtual: true,\n            managingOffererId: baseOfferers[0].id,\n            name: 'New venue (Offre numérique)',\n            offererName: baseOfferers[0].name,\n            publicName: null,\n            nOffers: 2,\n            stats: {\n              activeBookingsQuantity: 4,\n              activeOffersCount: 2,\n              soldOutOffersCount: 3,\n              validatedBookingsQuantity: 3,\n            },\n          },\n          {\n            id: 'test_venue_id_4',\n            isVirtual: false,\n            managingOffererId: baseOfferers[0].id,\n            name: 'New venue (Offre physique)',\n            offererName: baseOfferers[0].name,\n            publicName: null,\n            nOffers: 2,\n            stats: {\n              activeBookingsQuantity: 4,\n              activeOffersCount: 2,\n              soldOutOffersCount: 3,\n              validatedBookingsQuantity: 3,\n            },\n          },\n          {\n            id: 'test_venue_id_5',\n            isVirtual: false,\n            managingOffererId: baseOfferers[0].id,\n            name: 'Second new venue (Offre physique)',\n            offererName: baseOfferers[0].name,\n            publicName: 'Second new venue public name',\n            nOffers: 2,\n            stats: {\n              activeBookingsQuantity: 4,\n              activeOffersCount: 2,\n              soldOutOffersCount: 3,\n              validatedBookingsQuantity: 3,\n            },\n          },\n        ],\n      }\n      await renderHomePage()\n      pcapi.getOffererWithVenueStats.mockResolvedValue(newSelectedOfferer)\n      await act(async () => {\n        await fireEvent.change(screen.getByDisplayValue(selectedOffer.name), {\n          target: { value: newSelectedOfferer.id },\n        })\n      })\n      const showButton = screen.getByRole('button', { name: 'Afficher' })\n      fireEvent.click(showButton)\n    })\n\n    it('should change displayed offerer informations', async () => {\n      expect(screen.getByText(newSelectedOfferer.siren)).toBeInTheDocument()\n      expect(screen.getByText(newSelectedOfferer.name, { selector: 'span' })).toBeInTheDocument()\n      expect(screen.getByText(newSelectedOfferer.address, { exact: false })).toBeInTheDocument()\n      expect(\n        screen.getByText(`${newSelectedOfferer.postalCode} ${newSelectedOfferer.city}`, {\n          exact: false,\n        })\n      ).toBeInTheDocument()\n    })\n\n    it('should display new offerer venues informations', async () => {\n      const virtualVenueTitle = screen.getByText('Offres numériques')\n      expect(virtualVenueTitle).toBeInTheDocument()\n\n      const physicalVenueTitle = screen.getByText(newSelectedOfferer.managedVenues[1].name)\n      expect(physicalVenueTitle).toBeInTheDocument()\n      const physicalVenueContainer = physicalVenueTitle.closest('div')\n      expect(\n        within(physicalVenueContainer).getByText('Modifier', { exact: false })\n      ).toBeInTheDocument()\n\n      const secondOfflineVenueTitle = screen.getByText(\n        newSelectedOfferer.managedVenues[2].publicName\n      )\n      expect(secondOfflineVenueTitle).toBeInTheDocument()\n    })\n  })\n\n  describe('when selecting \"add offerer\" option\"', () => {\n    it('should redirect to offerer creation page', async () => {\n      // Given\n      const selectedOffer = firstOffererByAlphabeticalOrder\n      await renderHomePage()\n\n      // When\n      await act(async () => {\n        await fireEvent.change(screen.getByDisplayValue(selectedOffer.name), {\n          target: { value: CREATE_OFFERER_SELECT_ID },\n        })\n      })\n\n      // Then\n      expect(mockHistoryPush).toHaveBeenCalledWith('/structures/creation')\n    })\n  })\n\n  describe('when offerer have bank informations', () => {\n    it('should display bank file warning when bank informations are DRAFT or REJECTED', async () => {\n      // Given\n      baseOfferers = [\n        {\n          ...firstOffererByAlphabeticalOrder,\n          bic: '',\n          iban: '',\n          demarchesSimplifieesApplicationId: 12345,\n        },\n      ]\n      pcapi.getOffererWithVenueStats.mockResolvedValue(baseOfferers[0])\n\n      // When\n      await renderHomePage()\n      const showButton = screen.getByRole('button', { name: 'Afficher' })\n      fireEvent.click(showButton)\n\n      // Then\n      const link = screen.getByRole('link', { name: 'Voir le dossier' })\n      expect(link).toBeInTheDocument()\n    })\n  })\n\n  describe(\"when offerer doesn't have bank informations\", () => {\n    it('should display bank warning if offerer has physical venue without bank informations', async () => {\n      // Given\n      baseOfferers = [\n        {\n          ...firstOffererByAlphabeticalOrder,\n          bic: '',\n          iban: '',\n          demarchesSimplifieesApplicationId: '',\n          managedVenues: [virtualVenue, { ...physicalVenue, iban: '', bic: '' }],\n        },\n      ]\n      pcapi.getOffererWithVenueStats.mockResolvedValue(baseOfferers[0])\n\n      // When\n      await renderHomePage()\n      const showButton = screen.getByRole('button', { name: 'Afficher' })\n      fireEvent.click(showButton)\n\n      // Then\n      const link = screen.getByRole('link', {\n        name: 'Renseignez les coordonnées bancaires',\n      })\n      expect(link).toBeInTheDocument()\n      const warningIcons = screen.getAllByAltText('Informations bancaires manquantes')\n      let nbWarningIcons = 0\n      nbWarningIcons += 1 // in offerers header\n      nbWarningIcons += 1 // in bank account card title\n      expect(warningIcons).toHaveLength(nbWarningIcons)\n    })\n\n    it(\"shouldn't display bank warning if all physical venues have bank informations\", async () => {\n      physicalVenue = {\n        ...physicalVenue,\n        bic: 'fake_bic',\n        iban: 'fake_iban',\n      }\n      physicalVenueWithPublicName = {\n        ...physicalVenueWithPublicName,\n        demarchesSimplifieesApplicationId: 'fake_demarchesSimplifieesApplicationId',\n      }\n      virtualVenue = {\n        ...virtualVenue,\n        nOffers: 0,\n      }\n      baseOfferers = [\n        {\n          ...firstOffererByAlphabeticalOrder,\n          bic: '',\n          iban: '',\n          managedVenues: [virtualVenue, physicalVenue, physicalVenueWithPublicName],\n        },\n      ]\n      pcapi.getOffererWithVenueStats.mockResolvedValue(firstOffererByAlphabeticalOrder)\n      await renderHomePage()\n\n      const warningIcons = await screen.queryByAltText('Informations bancaires manquantes')\n      expect(warningIcons).not.toBeInTheDocument()\n    })\n  })\n\n  describe('when offerer has no physical venues', () => {\n    let offererWithNoPhysicalVenues\n\n    beforeEach(() => {\n      const virtualVenue = {\n        id: 'test_venue_id_1',\n        isValidated: true,\n        isVirtual: true,\n        managingOffererId: firstOffererByAlphabeticalOrder.id,\n        name: 'Le Sous-sol (Offre numérique)',\n        offererName: 'Bar des amis',\n        publicName: null,\n        stats: {\n          activeBookingsQuantity: 4,\n          activeOffersCount: 2,\n          soldOutOffersCount: 3,\n          validatedBookingsQuantity: 3,\n        },\n      }\n      offererWithNoPhysicalVenues = {\n        address: 'LA COULÉE D’OR',\n        city: 'Cayenne',\n        name: 'Bar des amis',\n        id: 'GE',\n        isValidated: true,\n        managedVenues: [virtualVenue],\n        postalCode: '97300',\n        siren: '111111111',\n        bic: 'test bic 01',\n        iban: 'test iban 01',\n        stats: {\n          activeBookingsQuantity: 4,\n          activeOffersCount: 2,\n          soldOutOffersCount: 3,\n          validatedBookingsQuantity: 3,\n        },\n      }\n\n      pcapi.getOffererWithVenueStats.mockResolvedValue(offererWithNoPhysicalVenues)\n      pcapi.getAllOfferersNames.mockResolvedValue([\n        {\n          id: offererWithNoPhysicalVenues.id,\n          name: offererWithNoPhysicalVenues.name,\n        },\n      ])\n    })\n\n    it('should display offerer informations', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.getByText(offererWithNoPhysicalVenues.siren)).toBeInTheDocument()\n      expect(\n        screen.getByText(offererWithNoPhysicalVenues.name, { selector: 'span' })\n      ).toBeInTheDocument()\n      expect(\n        screen.getByText(offererWithNoPhysicalVenues.address, { exact: false })\n      ).toBeInTheDocument()\n      expect(\n        screen.getByText(\n          `${offererWithNoPhysicalVenues.postalCode} ${offererWithNoPhysicalVenues.city}`,\n          { exact: false }\n        )\n      ).toBeInTheDocument()\n    })\n\n    it('should hide offerer informations on click on hide button', async () => {\n      // Given\n      await renderHomePage()\n      const hideButton = screen.getByRole('button', { name: 'Masquer' })\n\n      // When\n      fireEvent.click(hideButton)\n\n      //Then\n      const selectedOffererAddress = `${offererWithNoPhysicalVenues.address} ${offererWithNoPhysicalVenues.postalCode} ${offererWithNoPhysicalVenues.city}`\n      expect(screen.queryByText(offererWithNoPhysicalVenues.siren)).not.toBeInTheDocument()\n      expect(\n        screen.queryByText(offererWithNoPhysicalVenues.name, { selector: 'span' })\n      ).not.toBeInTheDocument()\n      expect(screen.queryByText(selectedOffererAddress)).not.toBeInTheDocument()\n    })\n  })\n\n  describe('when offerer has physical venues', () => {\n    let offererWithPhysicalVenues\n\n    beforeEach(() => {\n      const offererVenues = [\n        {\n          id: 'test_venue_id_1',\n          isVirtual: true,\n          managingOffererId: firstOffererByAlphabeticalOrder.id,\n          name: 'Le Sous-sol (Offre numérique)',\n          offererName: 'Bar des amis',\n          publicName: null,\n          stats: {\n            activeBookingsQuantity: 4,\n            activeOffersCount: 2,\n            soldOutOffersCount: 3,\n            validatedBookingsQuantity: 3,\n          },\n        },\n        {\n          id: 'test_venue_id_2',\n          isVirtual: false,\n          managingOffererId: firstOffererByAlphabeticalOrder.id,\n          name: 'Le Sous-sol (Offre physique)',\n          offererName: 'Bar des amis',\n          publicName: null,\n          stats: {\n            activeBookingsQuantity: 4,\n            activeOffersCount: 2,\n            soldOutOffersCount: 3,\n            validatedBookingsQuantity: 3,\n          },\n        },\n      ]\n      offererWithPhysicalVenues = {\n        address: 'LA COULÉE D’OR',\n        city: 'Cayenne',\n        name: 'Bar des amis',\n        id: 'GE',\n        isValidated: true,\n        managedVenues: offererVenues,\n        postalCode: '97300',\n        siren: '111111111',\n        bic: 'test bic 01',\n        iban: 'test iban 01',\n      }\n\n      pcapi.getOffererWithVenueStats.mockResolvedValue(offererWithPhysicalVenues)\n      pcapi.getAllOfferersNames.mockResolvedValue([\n        {\n          id: offererWithPhysicalVenues.id,\n          name: offererWithPhysicalVenues.name,\n        },\n      ])\n    })\n\n    it('should not display offerer informations', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      const selectedOffererAddress = `${offererWithPhysicalVenues.address} ${offererWithPhysicalVenues.postalCode} ${offererWithPhysicalVenues.city}`\n      expect(screen.queryByText(offererWithPhysicalVenues.siren)).not.toBeInTheDocument()\n      expect(\n        screen.queryByText(offererWithPhysicalVenues.name, { selector: 'span' })\n      ).not.toBeInTheDocument()\n      expect(screen.queryByText(selectedOffererAddress)).not.toBeInTheDocument()\n    })\n\n    it('should show offerer informations on click on show button', async () => {\n      // Given\n      await renderHomePage()\n      const showButton = screen.getByRole('button', { name: 'Afficher' })\n\n      // When\n      fireEvent.click(showButton)\n\n      //Then\n      expect(screen.getByText(offererWithPhysicalVenues.siren)).toBeInTheDocument()\n      expect(\n        screen.getByText(offererWithPhysicalVenues.name, { selector: 'span' })\n      ).toBeInTheDocument()\n      expect(\n        screen.getByText(offererWithPhysicalVenues.address, { exact: false })\n      ).toBeInTheDocument()\n      expect(\n        screen.getByText(\n          `${offererWithPhysicalVenues.postalCode} ${offererWithPhysicalVenues.city}`,\n          { exact: false }\n        )\n      ).toBeInTheDocument()\n    })\n  })\n\n  describe('when offerer is not yet validated', () => {\n    beforeEach(() => {\n      virtualVenue = { ...virtualVenue, nOffers: 0 }\n      const nonValidatedOfferer = {\n        ...firstOffererByAlphabeticalOrder,\n        isValidated: false,\n        managedVenues: [virtualVenue],\n      }\n      pcapi.getOffererWithVenueStats.mockResolvedValue(nonValidatedOfferer)\n      pcapi.getAllOfferersNames.mockResolvedValue([\n        { name: nonValidatedOfferer.name, id: nonValidatedOfferer.id },\n      ])\n    })\n\n    it('should warn user that offerer is being validated', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.getByText('Votre structure est en cours de validation')).toBeInTheDocument()\n    })\n\n    it('should allow user to view offerer informations', async () => {\n      // Given\n      const offerer = {\n        ...firstOffererByAlphabeticalOrder,\n        iban: '',\n        bic: '',\n        managedVenues: [{ ...physicalVenue, iban: '', bic: '' }],\n      }\n      pcapi.getOffererWithVenueStats.mockResolvedValue(offerer)\n\n      // When\n      await renderHomePage()\n      const showButton = screen.getByRole('button', { name: 'Afficher' })\n      fireEvent.click(showButton)\n\n      // Then\n      expect(screen.getByText('Informations pratiques')).toBeInTheDocument()\n      expect(screen.getByText('Coordonnées bancaires')).toBeInTheDocument()\n    })\n\n    it('should allow user to add venue and virtual offer', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.getByRole('link', { name: 'Créer un lieu' })).toBeInTheDocument()\n      expect(screen.getByRole('link', { name: 'Créer une offre numérique' })).toBeInTheDocument()\n    })\n  })\n\n  describe('when user attachment to offerer is not yet validated', () => {\n    beforeEach(() => {\n      pcapi.getAllOfferersNames.mockResolvedValue([\n        { name: firstOffererByAlphabeticalOrder.name, id: firstOffererByAlphabeticalOrder.id },\n        { name: baseOfferers[0].name, id: baseOfferers[0].id },\n      ])\n      pcapi.getOffererWithVenueStats.mockRejectedValue({ status: 403 })\n    })\n\n    it('should warn user offerer is being validated', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.getByText('Votre structure est en cours de validation')).toBeInTheDocument()\n    })\n\n    it('should not allow user to view offerer informations', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.queryByText('Informations pratiques')).not.toBeInTheDocument()\n      expect(screen.queryByText('Coordonnées bancaires')).not.toBeInTheDocument()\n    })\n\n    it('should not allow user to update offerer informations', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      const [offererUpdateButton] = screen.getAllByRole('button', { name: 'Modifier' })\n      expect(offererUpdateButton).toBeInTheDocument()\n      expect(offererUpdateButton).toBeDisabled()\n    })\n\n    it('should not allow user to add venue and virtual offer', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.queryByRole('link', { name: 'Créer un lieu' })).not.toBeInTheDocument()\n      expect(\n        screen.queryByRole('link', { name: 'Créer une offre numérique' })\n      ).not.toBeInTheDocument()\n    })\n\n    it('should not show venues of previously selected offerer', async () => {\n      // Given\n      pcapi.getAllOfferersNames.mockResolvedValue([\n        { name: baseOfferers[0].name, id: baseOfferers[0].id },\n        { name: firstOffererByAlphabeticalOrder.name, id: firstOffererByAlphabeticalOrder.id },\n      ])\n      pcapi.getOffererWithVenueStats\n        .mockResolvedValueOnce({\n          ...firstOffererByAlphabeticalOrder,\n          managedVenues: [virtualVenue, physicalVenue],\n        })\n        .mockRejectedValueOnce({ status: 403 })\n\n      await renderHomePage()\n\n      // When\n      fireEvent.change(screen.getByDisplayValue(firstOffererByAlphabeticalOrder.name), {\n        target: { value: baseOfferers[0].id },\n      })\n\n      // Then\n      expect(pcapi.getOffererWithVenueStats).toHaveBeenCalledTimes(2)\n      await waitForElementToBeRemoved(() =>\n        screen.getByRole('heading', { level: 3, name: 'Offres numériques' })\n      )\n      const previouslySelectedOfferersPhysicalVenueName = screen.queryByRole('heading', {\n        level: 3,\n        name: physicalVenue.name,\n      })\n      expect(previouslySelectedOfferersPhysicalVenueName).not.toBeInTheDocument()\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Offerers/__specs__/OffererDetailsLegacy.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (606). Maximum allowed is 150.',
        line: 64,
        column: 34,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 669,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (19). Maximum allowed is 15.',
        line: 64,
        column: 34,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 669,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (595). Maximum allowed is 300.',
        line: 335,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 670,
        endColumn: 1,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`queryByAltText` does not need `await` operator',
        line: 371,
        column: 41,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 371,
        endColumn: 55,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`queryByAltText` does not need `await` operator',
        line: 390,
        column: 41,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 390,
        endColumn: 55,
      },
    ],
    errorCount: 0,
    warningCount: 5,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport {\n  act,\n  fireEvent,\n  render,\n  screen,\n  waitForElementToBeRemoved,\n  within,\n} from '@testing-library/react'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\n\nimport HomepageContainer from '../../HomepageContainer'\nimport { CREATE_OFFERER_SELECT_ID } from '../Offerers'\n\nconst mockHistoryPush = jest.fn()\njest.mock('react-router-dom', () => ({\n  ...jest.requireActual('react-router-dom'),\n  useHistory: () => ({\n    push: mockHistoryPush,\n  }),\n}))\n\njest.mock('utils/config', () => ({\n  DEMARCHES_SIMPLIFIEES_VENUE_RIB_UPLOAD_PROCEDURE_URL:\n    'link/to/venue/demarchesSimplifiees/procedure',\n}))\n\njest.mock('repository/pcapi/pcapi', () => ({\n  getOfferer: jest.fn(),\n  getAllOfferersNames: jest.fn(),\n  getVenueStats: jest.fn(),\n}))\n\nconst renderHomePage = async () => {\n  const store = configureTestStore({\n    data: {\n      users: [\n        {\n          id: 'fake_id',\n          firstName: 'John',\n          lastName: 'Do',\n          email: 'john.do@dummy.xyz',\n          phoneNumber: '01 00 00 00 00',\n        },\n      ],\n    },\n  })\n  return await act(async () => {\n    await render(\n      <Provider store={store}>\n        <MemoryRouter>\n          <HomepageContainer />\n        </MemoryRouter>\n      </Provider>\n    )\n  })\n}\n\ndescribe('offererDetailsLegacy', () => {\n  let baseOfferers\n  let firstOffererByAlphabeticalOrder\n  let baseOfferersNames\n  let virtualVenue\n  let physicalVenue\n  let physicalVenueWithPublicName\n\n  beforeEach(() => {\n    virtualVenue = {\n      id: 'test_venue_id_1',\n      isVirtual: true,\n      managingOffererId: 'GE',\n      name: 'Le Sous-sol (Offre numérique)',\n      offererName: 'Bar des amis',\n      publicName: null,\n      nOffers: 2,\n    }\n    physicalVenue = {\n      id: 'test_venue_id_2',\n      isVirtual: false,\n      managingOffererId: 'GE',\n      name: 'Le Sous-sol (Offre physique)',\n      offererName: 'Bar des amis',\n      publicName: null,\n      nOffers: 2,\n    }\n    physicalVenueWithPublicName = {\n      id: 'test_venue_id_3',\n      isVirtual: false,\n      managingOffererId: 'GE',\n      name: 'Le deuxième Sous-sol (Offre physique)',\n      offererName: 'Bar des amis',\n      publicName: 'Le deuxième Sous-sol',\n      nOffers: 2,\n    }\n    baseOfferers = [\n      {\n        address: 'RUE DE NIEUPORT',\n        city: 'Drancy',\n        id: 'FQ',\n        isValidated: true,\n        name: 'Club Dorothy',\n        postalCode: '93700',\n        siren: '222222222',\n        bic: 'test bic 02',\n        iban: 'test iban 02',\n        managedVenues: [\n          {\n            ...virtualVenue,\n            id: 'test_venue_id_4',\n            managingOffererId: 'FQ',\n          },\n        ],\n      },\n      {\n        address: 'LA COULÉE D’OR',\n        city: 'Cayenne',\n        name: 'Bar des amis',\n        id: 'GE',\n        isValidated: true,\n        postalCode: '97300',\n        siren: '111111111',\n        bic: 'test bic 01',\n        iban: 'test iban 01',\n        managedVenues: [virtualVenue, physicalVenue, physicalVenueWithPublicName],\n      },\n    ]\n    firstOffererByAlphabeticalOrder = baseOfferers[1]\n    baseOfferersNames = baseOfferers.map(offerer => ({\n      id: offerer.id,\n      name: offerer.name,\n    }))\n\n    pcapi.getOfferer.mockResolvedValue(firstOffererByAlphabeticalOrder)\n    pcapi.getAllOfferersNames.mockResolvedValue(baseOfferersNames)\n    pcapi.getVenueStats.mockResolvedValue({\n      activeBookingsQuantity: 4,\n      activeOffersCount: 2,\n      soldOutOffersCount: 3,\n      validatedBookingsQuantity: 3,\n    })\n  })\n\n  it('should display offerer select', async () => {\n    await renderHomePage()\n    const showButton = screen.getByRole('button', { name: 'Afficher' })\n    fireEvent.click(showButton)\n\n    expect(screen.getByDisplayValue(firstOffererByAlphabeticalOrder.name)).toBeInTheDocument()\n  })\n\n  it('should not warn user when offerer is validated', async () => {\n    // Given\n    await renderHomePage()\n    const showButton = screen.getByRole('button', { name: 'Afficher' })\n\n    // When\n    fireEvent.click(showButton)\n\n    // Then\n    expect(screen.queryByText('Votre structure est en cours de validation')).not.toBeInTheDocument()\n  })\n\n  it('should display first offerer informations', async () => {\n    await renderHomePage()\n    const showButton = screen.getByRole('button', { name: 'Afficher' })\n    fireEvent.click(showButton)\n\n    const selectedOfferer = firstOffererByAlphabeticalOrder\n    expect(screen.getByText(selectedOfferer.siren)).toBeInTheDocument()\n    expect(screen.getByText(selectedOfferer.name, { selector: 'span' })).toBeInTheDocument()\n    expect(screen.getByText(selectedOfferer.address, { exact: false })).toBeInTheDocument()\n    expect(\n      screen.getByText(`${selectedOfferer.postalCode} ${selectedOfferer.city}`, { exact: false })\n    ).toBeInTheDocument()\n  })\n\n  it('should display offerer venues informations', async () => {\n    await renderHomePage()\n    const showButton = screen.getByRole('button', { name: 'Afficher' })\n    fireEvent.click(showButton)\n\n    const selectedOfferer = firstOffererByAlphabeticalOrder\n    const virtualVenueTitle = screen.getByText('Offres numériques')\n    expect(virtualVenueTitle).toBeInTheDocument()\n\n    const physicalVenueTitle = screen.getByText(selectedOfferer.managedVenues[1].name)\n    expect(physicalVenueTitle).toBeInTheDocument()\n    const physicalVenueContainer = physicalVenueTitle.closest('div')\n    expect(\n      within(physicalVenueContainer).getByText('Modifier', { exact: false })\n    ).toBeInTheDocument()\n\n    const secondOfflineVenueTitle = screen.getByText(selectedOfferer.managedVenues[2].publicName)\n    expect(secondOfflineVenueTitle).toBeInTheDocument()\n  })\n\n  it('should not display virtual venue informations when no virtual offers', async () => {\n    // Given\n    firstOffererByAlphabeticalOrder.managedVenues = [\n      {\n        ...virtualVenue,\n        nOffers: 0,\n      },\n      physicalVenue,\n    ]\n\n    // When\n    await renderHomePage()\n\n    // Then\n    expect(\n      screen.queryByRole('heading', { level: 3, name: 'Offres numériques', exact: false })\n    ).not.toBeInTheDocument()\n  })\n\n  describe('when selected offerer change', () => {\n    let newSelectedOfferer\n    beforeEach(async () => {\n      const selectedOffer = firstOffererByAlphabeticalOrder\n      newSelectedOfferer = {\n        ...baseOfferers[0],\n        managedVenues: [\n          {\n            id: 'test_venue_id_3',\n            isVirtual: true,\n            managingOffererId: baseOfferers[0].id,\n            name: 'New venue (Offre numérique)',\n            offererName: baseOfferers[0].name,\n            publicName: null,\n            nOffers: 2,\n          },\n          {\n            id: 'test_venue_id_4',\n            isVirtual: false,\n            managingOffererId: baseOfferers[0].id,\n            name: 'New venue (Offre physique)',\n            offererName: baseOfferers[0].name,\n            publicName: null,\n            nOffers: 2,\n          },\n          {\n            id: 'test_venue_id_5',\n            isVirtual: false,\n            managingOffererId: baseOfferers[0].id,\n            name: 'Second new venue (Offre physique)',\n            offererName: baseOfferers[0].name,\n            publicName: 'Second new venue public name',\n            nOffers: 2,\n          },\n        ],\n      }\n      await renderHomePage()\n      pcapi.getOfferer.mockResolvedValue(newSelectedOfferer)\n      await act(async () => {\n        await fireEvent.change(screen.getByDisplayValue(selectedOffer.name), {\n          target: { value: newSelectedOfferer.id },\n        })\n      })\n      const showButton = screen.getByRole('button', { name: 'Afficher' })\n      fireEvent.click(showButton)\n    })\n\n    it('should change displayed offerer informations', async () => {\n      expect(screen.getByText(newSelectedOfferer.siren)).toBeInTheDocument()\n      expect(screen.getByText(newSelectedOfferer.name, { selector: 'span' })).toBeInTheDocument()\n      expect(screen.getByText(newSelectedOfferer.address, { exact: false })).toBeInTheDocument()\n      expect(\n        screen.getByText(`${newSelectedOfferer.postalCode} ${newSelectedOfferer.city}`, {\n          exact: false,\n        })\n      ).toBeInTheDocument()\n    })\n\n    it('should display new offerer venues informations', async () => {\n      const virtualVenueTitle = screen.getByText('Offres numériques')\n      expect(virtualVenueTitle).toBeInTheDocument()\n\n      const physicalVenueTitle = screen.getByText(newSelectedOfferer.managedVenues[1].name)\n      expect(physicalVenueTitle).toBeInTheDocument()\n      const physicalVenueContainer = physicalVenueTitle.closest('div')\n      expect(\n        within(physicalVenueContainer).getByText('Modifier', { exact: false })\n      ).toBeInTheDocument()\n\n      const secondOfflineVenueTitle = screen.getByText(\n        newSelectedOfferer.managedVenues[2].publicName\n      )\n      expect(secondOfflineVenueTitle).toBeInTheDocument()\n    })\n  })\n\n  describe('when selecting \"add offerer\" option\"', () => {\n    it('should redirect to offerer creation page', async () => {\n      // Given\n      const selectedOffer = firstOffererByAlphabeticalOrder\n      await renderHomePage()\n\n      // When\n      await act(async () => {\n        await fireEvent.change(screen.getByDisplayValue(selectedOffer.name), {\n          target: { value: CREATE_OFFERER_SELECT_ID },\n        })\n      })\n\n      // Then\n      expect(mockHistoryPush).toHaveBeenCalledWith('/structures/creation')\n    })\n  })\n\n  describe(\"when offerer doesn't have bank informations\", () => {\n    it('should display bank warning if offerer has physical venue without bank informations', async () => {\n      // Given\n      baseOfferers = [\n        {\n          ...firstOffererByAlphabeticalOrder,\n          bic: '',\n          iban: '',\n          demarchesSimplifieesApplicationId: '',\n          managedVenues: [virtualVenue, { ...physicalVenue, iban: '', bic: '' }],\n        },\n      ]\n      pcapi.getOfferer.mockResolvedValue(baseOfferers[0])\n\n      // When\n      await renderHomePage()\n      const showButton = screen.getByRole('button', { name: 'Afficher' })\n      fireEvent.click(showButton)\n\n      // Then\n      const link = screen.getByRole('link', {\n        name: 'Renseignez les coordonnées bancaires',\n      })\n      expect(link).toBeInTheDocument()\n      const warningIcons = screen.getAllByAltText('Informations bancaires manquantes')\n      let nbWarningIcons = 0\n      nbWarningIcons += 1 // in offerers header\n      nbWarningIcons += 1 // in bank account card title\n      expect(warningIcons).toHaveLength(nbWarningIcons)\n    })\n\n    it(\"shouldn't display bank warning if all physical venues have bank informations\", async () => {\n      physicalVenue = {\n        ...physicalVenue,\n        bic: 'fake_bic',\n        iban: 'fake_iban',\n      }\n      physicalVenueWithPublicName = {\n        ...physicalVenueWithPublicName,\n        demarchesSimplifieesApplicationId: 'fake_demarchesSimplifieesApplicationId',\n      }\n      virtualVenue = {\n        ...virtualVenue,\n        nOffers: 0,\n      }\n      baseOfferers = [\n        {\n          ...firstOffererByAlphabeticalOrder,\n          bic: '',\n          iban: '',\n          managedVenues: [virtualVenue, physicalVenue, physicalVenueWithPublicName],\n        },\n      ]\n      pcapi.getOfferer.mockResolvedValue(firstOffererByAlphabeticalOrder)\n      await renderHomePage()\n\n      const warningIcons = await screen.queryByAltText('Informations bancaires manquantes')\n      expect(warningIcons).not.toBeInTheDocument()\n    })\n\n    it('should display file information for pending registration', async () => {\n      baseOfferers = [\n        {\n          ...firstOffererByAlphabeticalOrder,\n          bic: '',\n          iban: '',\n          demarchesSimplifieesApplicationId: 'demarchesSimplifieesApplication_fake_id',\n        },\n      ]\n      pcapi.getOfferer.mockResolvedValue(baseOfferers[0])\n      await renderHomePage()\n\n      const showButton = screen.getByRole('button', { name: 'Afficher' })\n      fireEvent.click(showButton)\n      expect(screen.getByRole('link', { name: 'Voir le dossier' })).toBeInTheDocument()\n      const warningIcons = await screen.queryByAltText('Informations bancaires manquantes')\n      expect(warningIcons).not.toBeInTheDocument()\n    })\n  })\n\n  describe('when offerer has no physical venues', () => {\n    let offererWithNoPhysicalVenues\n\n    beforeEach(() => {\n      const virtualVenue = {\n        id: 'test_venue_id_1',\n        isValidated: true,\n        isVirtual: true,\n        managingOffererId: firstOffererByAlphabeticalOrder.id,\n        name: 'Le Sous-sol (Offre numérique)',\n        offererName: 'Bar des amis',\n        publicName: null,\n      }\n      offererWithNoPhysicalVenues = {\n        address: 'LA COULÉE D’OR',\n        city: 'Cayenne',\n        name: 'Bar des amis',\n        id: 'GE',\n        isValidated: true,\n        managedVenues: [virtualVenue],\n        postalCode: '97300',\n        siren: '111111111',\n        bic: 'test bic 01',\n        iban: 'test iban 01',\n      }\n\n      pcapi.getOfferer.mockResolvedValue(offererWithNoPhysicalVenues)\n      pcapi.getAllOfferersNames.mockResolvedValue([\n        {\n          id: offererWithNoPhysicalVenues.id,\n          name: offererWithNoPhysicalVenues.name,\n        },\n      ])\n    })\n\n    it('should display offerer informations', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.getByText(offererWithNoPhysicalVenues.siren)).toBeInTheDocument()\n      expect(\n        screen.getByText(offererWithNoPhysicalVenues.name, { selector: 'span' })\n      ).toBeInTheDocument()\n      expect(\n        screen.getByText(offererWithNoPhysicalVenues.address, { exact: false })\n      ).toBeInTheDocument()\n      expect(\n        screen.getByText(\n          `${offererWithNoPhysicalVenues.postalCode} ${offererWithNoPhysicalVenues.city}`,\n          { exact: false }\n        )\n      ).toBeInTheDocument()\n    })\n\n    it('should hide offerer informations on click on hide button', async () => {\n      // Given\n      await renderHomePage()\n      const hideButton = screen.getByRole('button', { name: 'Masquer' })\n\n      // When\n      fireEvent.click(hideButton)\n\n      //Then\n      const selectedOffererAddress = `${offererWithNoPhysicalVenues.address} ${offererWithNoPhysicalVenues.postalCode} ${offererWithNoPhysicalVenues.city}`\n      expect(screen.queryByText(offererWithNoPhysicalVenues.siren)).not.toBeInTheDocument()\n      expect(\n        screen.queryByText(offererWithNoPhysicalVenues.name, { selector: 'span' })\n      ).not.toBeInTheDocument()\n      expect(screen.queryByText(selectedOffererAddress)).not.toBeInTheDocument()\n    })\n  })\n\n  describe('when offerer has physical venues', () => {\n    let offererWithPhysicalVenues\n\n    beforeEach(() => {\n      const offererVenues = [\n        {\n          id: 'test_venue_id_1',\n          isVirtual: true,\n          managingOffererId: firstOffererByAlphabeticalOrder.id,\n          name: 'Le Sous-sol (Offre numérique)',\n          offererName: 'Bar des amis',\n          publicName: null,\n        },\n        {\n          id: 'test_venue_id_2',\n          isVirtual: false,\n          managingOffererId: firstOffererByAlphabeticalOrder.id,\n          name: 'Le Sous-sol (Offre physique)',\n          offererName: 'Bar des amis',\n          publicName: null,\n        },\n      ]\n      offererWithPhysicalVenues = {\n        address: 'LA COULÉE D’OR',\n        city: 'Cayenne',\n        name: 'Bar des amis',\n        id: 'GE',\n        isValidated: true,\n        managedVenues: offererVenues,\n        postalCode: '97300',\n        siren: '111111111',\n        bic: 'test bic 01',\n        iban: 'test iban 01',\n      }\n\n      pcapi.getOfferer.mockResolvedValue(offererWithPhysicalVenues)\n      pcapi.getAllOfferersNames.mockResolvedValue([\n        {\n          id: offererWithPhysicalVenues.id,\n          name: offererWithPhysicalVenues.name,\n        },\n      ])\n    })\n\n    it('should not display offerer informations', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      const selectedOffererAddress = `${offererWithPhysicalVenues.address} ${offererWithPhysicalVenues.postalCode} ${offererWithPhysicalVenues.city}`\n      expect(screen.queryByText(offererWithPhysicalVenues.siren)).not.toBeInTheDocument()\n      expect(\n        screen.queryByText(offererWithPhysicalVenues.name, { selector: 'span' })\n      ).not.toBeInTheDocument()\n      expect(screen.queryByText(selectedOffererAddress)).not.toBeInTheDocument()\n    })\n\n    it('should show offerer informations on click on show button', async () => {\n      // Given\n      await renderHomePage()\n      const showButton = screen.getByRole('button', { name: 'Afficher' })\n\n      // When\n      fireEvent.click(showButton)\n\n      //Then\n      expect(screen.getByText(offererWithPhysicalVenues.siren)).toBeInTheDocument()\n      expect(\n        screen.getByText(offererWithPhysicalVenues.name, { selector: 'span' })\n      ).toBeInTheDocument()\n      expect(\n        screen.getByText(offererWithPhysicalVenues.address, { exact: false })\n      ).toBeInTheDocument()\n      expect(\n        screen.getByText(\n          `${offererWithPhysicalVenues.postalCode} ${offererWithPhysicalVenues.city}`,\n          { exact: false }\n        )\n      ).toBeInTheDocument()\n    })\n  })\n\n  describe('when offerer is not yet validated', () => {\n    beforeEach(() => {\n      virtualVenue = { ...virtualVenue, nOffers: 0 }\n      const nonValidatedOfferer = {\n        ...firstOffererByAlphabeticalOrder,\n        isValidated: false,\n        managedVenues: [virtualVenue],\n      }\n      pcapi.getOfferer.mockResolvedValue(nonValidatedOfferer)\n      pcapi.getAllOfferersNames.mockResolvedValue([\n        { name: nonValidatedOfferer.name, id: nonValidatedOfferer.id },\n      ])\n    })\n\n    it('should warn user that offerer is being validated', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.getByText('Votre structure est en cours de validation')).toBeInTheDocument()\n    })\n\n    it('should allow user to view offerer informations', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.getByText('Informations pratiques')).toBeInTheDocument()\n    })\n\n    it('should allow user to add venue and virtual offer', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.getByRole('link', { name: 'Créer un lieu' })).toBeInTheDocument()\n      expect(screen.getByRole('link', { name: 'Créer une offre numérique' })).toBeInTheDocument()\n    })\n  })\n\n  describe('when user attachment to offerer is not yet validated', () => {\n    beforeEach(() => {\n      pcapi.getAllOfferersNames.mockResolvedValue([\n        { name: firstOffererByAlphabeticalOrder.name, id: firstOffererByAlphabeticalOrder.id },\n        { name: baseOfferers[0].name, id: baseOfferers[0].id },\n      ])\n      pcapi.getOfferer.mockRejectedValue({ status: 403 })\n    })\n\n    it('should warn user offerer is being validated', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.getByText('Votre structure est en cours de validation')).toBeInTheDocument()\n    })\n\n    it('should not allow user to view offerer informations', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.queryByText('Informations pratiques')).not.toBeInTheDocument()\n      expect(screen.queryByText('Coordonnées bancaires')).not.toBeInTheDocument()\n    })\n\n    it('should not allow user to update offerer informations', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      const [offererUpdateButton] = screen.getAllByRole('button', { name: 'Modifier' })\n      expect(offererUpdateButton).toBeInTheDocument()\n      expect(offererUpdateButton).toBeDisabled()\n    })\n\n    it('should not allow user to add venue and virtual offer', async () => {\n      // When\n      await renderHomePage()\n\n      // Then\n      expect(screen.queryByRole('link', { name: 'Créer un lieu' })).not.toBeInTheDocument()\n      expect(\n        screen.queryByRole('link', { name: 'Créer une offre numérique' })\n      ).not.toBeInTheDocument()\n    })\n\n    it('should not show venues of previously selected offerer', async () => {\n      // Given\n      pcapi.getAllOfferersNames.mockResolvedValue([\n        { name: baseOfferers[0].name, id: baseOfferers[0].id },\n        { name: firstOffererByAlphabeticalOrder.name, id: firstOffererByAlphabeticalOrder.id },\n      ])\n      pcapi.getOfferer\n        .mockResolvedValueOnce({\n          ...firstOffererByAlphabeticalOrder,\n          managedVenues: [virtualVenue, physicalVenue],\n        })\n        .mockRejectedValueOnce({ status: 403 })\n\n      await renderHomePage()\n\n      // When\n      fireEvent.change(screen.getByDisplayValue(firstOffererByAlphabeticalOrder.name), {\n        target: { value: baseOfferers[0].id },\n      })\n\n      // Then\n      expect(pcapi.getOfferer).toHaveBeenCalledTimes(2)\n      await waitForElementToBeRemoved(() =>\n        screen.getByRole('heading', { level: 3, name: 'Offres numériques' })\n      )\n      const previouslySelectedOfferersPhysicalVenueName = screen.queryByRole('heading', {\n        level: 3,\n        name: physicalVenue.name,\n      })\n      expect(previouslySelectedOfferersPhysicalVenueName).not.toBeInTheDocument()\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Offerers/_constants.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/ProfileAndSupport/ProfileAndSupport.jsx',
    messages: [
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (19). Maximum allowed is 15.',
        line: 22,
        column: 34,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 50,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      'import PropTypes from \'prop-types\'\nimport React, { useState, useCallback } from \'react\'\n\nimport Icon from \'components/layout/Icon\'\n\nimport { STEP_PROFILE_HASH } from \'../HomepageBreadcrumb\'\n\nimport ProfileInformationsModal from \'./ProfileInformationsModal\'\nimport Support from \'./Support\'\n\n/**\n * if phone number is valid:\n * - 10 digit starting by 0\n * - n digits starting by +\n *\n * return formated phone number:\n * - 01 23 45 67 89\n * - +213 1 23 45 67 89\n *\n * otherwise, return given argument phoneNumber unchanged\n */\nexport const formatPhoneNumber = phoneNumber => {\n  let formatedNumber = phoneNumber\n  if (phoneNumber) {\n    formatedNumber = phoneNumber.replace(/ /g, \'\')\n    const r = /(\\+?[0-9]+)([0-9])([0-9]{8})/g\n    const parts = formatedNumber.split(r).slice(1, -1)\n\n    let internationalPrefix, areaPrefix, number, isReginalNumber, isInternationalNumber\n    let isValid = parts.length === 3\n    if (isValid) {\n      [internationalPrefix, areaPrefix, number] = parts\n      isReginalNumber = internationalPrefix === \'0\'\n      isInternationalNumber = /\\+[0-9]+/.test(internationalPrefix)\n      isValid = isReginalNumber || isInternationalNumber\n    }\n\n    if (!isValid) {\n      return phoneNumber\n    }\n\n    let prefix = internationalPrefix + areaPrefix\n    if (isInternationalNumber) {\n      prefix = [internationalPrefix, areaPrefix].join(\' \')\n    }\n\n    return [prefix, ...number.split(/([0-9]{2})/g).filter(num => num)].join(\' \')\n  }\n  return phoneNumber\n}\n\nconst Profile = ({ setUserInformations, showSuccessNotification, user }) => {\n  const [isEditingProfile, setIsEditingProfile] = useState(false)\n\n  const showProfileInfoModal = useCallback(() => setIsEditingProfile(true), [])\n\n  const hideProfileInfoModal = useCallback(() => setIsEditingProfile(false), [])\n\n  return (\n    <>\n      <h2\n        className="h-section-title"\n        id={STEP_PROFILE_HASH}\n      >\n        Profil et aide\n      </h2>\n\n      <div className="h-section-row">\n        <div\n          className="h-card h-card-secondary-hover"\n          data-testid="card-profile"\n        >\n          <div className="h-card-inner">\n            <div className="h-card-header-row">\n              <h3 className="h-card-title">\n                Profil\n              </h3>\n              <button\n                className="tertiary-button"\n                onClick={showProfileInfoModal}\n                type="button"\n              >\n                <Icon svg="ico-outer-pen" />\n                Modifier\n              </button>\n            </div>\n            <div className="h-card-content">\n              <ul className="h-description-list">\n                <li className="h-dl-row">\n                  <span className="h-dl-title">\n                    Nom :\n                  </span>\n                  <span className="h-dl-description">\n                    {user.lastName}\n                  </span>\n                </li>\n                <li className="h-dl-row">\n                  <span className="h-dl-title">\n                    Prénom :\n                  </span>\n                  <span className="h-dl-description">\n                    {user.firstName}\n                  </span>\n                </li>\n                <li className="h-dl-row">\n                  <span className="h-dl-title">\n                    E-mail :\n                  </span>\n                  <span className="h-dl-description">\n                    {user.email}\n                  </span>\n                </li>\n                <li className="h-dl-row">\n                  <span className="h-dl-title">\n                    Téléphone :\n                  </span>\n                  <span className="h-dl-description">\n                    {formatPhoneNumber(user.phoneNumber)}\n                  </span>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        <Support />\n      </div>\n      {isEditingProfile && (\n        <ProfileInformationsModal\n          hideProfileInfoModal={hideProfileInfoModal}\n          setUserInformations={setUserInformations}\n          showSuccessNotification={showSuccessNotification}\n          user={user}\n        />\n      )}\n    </>\n  )\n}\n\nProfile.propTypes = {\n  setUserInformations: PropTypes.func.isRequired,\n  showSuccessNotification: PropTypes.func.isRequired,\n  user: PropTypes.shape().isRequired,\n}\n\nexport default Profile\n',
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/ProfileAndSupport/ProfileAndSupportContainer.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/ProfileAndSupport/ProfileInformationsModal.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/ProfileAndSupport/Support.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/ProfileAndSupport/__specs__/Profile.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/ProfileAndSupport/__specs__/Support.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Venues/Venue.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Venues/VenueLegacy.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Venues/VenueList.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Venues/VenueListLegacy.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Venues/VenueStat.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Venues/__specs__/Venue.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/Venues/__specs__/VenueLegacy.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Home/__specs__/Homepage.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (193). Maximum allowed is 150.',
        line: 54,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 246,
        endColumn: 2,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`queryByLabelText` does not need `await` operator',
        line: 188,
        column: 31,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 188,
        endColumn: 47,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 208,
        column: 21,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 210,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 235,
        column: 21,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 237,
        endColumn: 12,
      },
    ],
    errorCount: 0,
    warningCount: 4,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { act, render, screen, fireEvent } from '@testing-library/react'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\nimport { doesUserPreferReducedMotion } from 'utils/windowMatchMedia'\n\nimport HomepageContainer from '../HomepageContainer'\n\njest.mock('utils/config', () => ({\n  DEMARCHES_SIMPLIFIEES_OFFERER_RIB_UPLOAD_PROCEDURE_URL:\n    'link/to/offerer/demarchesSimplifiees/procedure',\n}))\n\njest.mock('repository/pcapi/pcapi', () => ({\n  getOfferer: jest.fn(),\n  getAllOfferersNames: jest.fn(),\n  getVenueStats: jest.fn(),\n  updateUserInformations: jest.fn().mockResolvedValue({}),\n}))\n\njest.mock('utils/windowMatchMedia', () => ({\n  doesUserPreferReducedMotion: jest.fn(),\n}))\n\nconst renderHomePage = async () => {\n  const store = configureTestStore({\n    data: {\n      users: [\n        {\n          id: 'fake_id',\n          firstName: 'John',\n          lastName: 'Do',\n          email: 'john.do@dummy.xyz',\n          phoneNumber: '01 00 00 00 00',\n        },\n      ],\n    },\n  })\n  return await act(async () => {\n    await render(\n      <Provider store={store}>\n        <MemoryRouter>\n          <HomepageContainer />\n        </MemoryRouter>\n      </Provider>\n    )\n  })\n}\n\ndescribe('homepage', () => {\n  let baseOfferers\n  let baseOfferersNames\n\n  beforeEach(() => {\n    baseOfferers = [\n      {\n        address: 'LA COULÉE D’OR',\n        city: 'Cayenne',\n        name: 'Bar des amis',\n        id: 'GE',\n        postalCode: '97300',\n        siren: '111111111',\n        bic: 'test bic 01',\n        iban: 'test iban 01',\n        managedVenues: [\n          {\n            id: 'test_venue_id_1',\n            isVirtual: true,\n            managingOffererId: 'GE',\n            name: 'Le Sous-sol (Offre numérique)',\n            offererName: 'Bar des amis',\n            publicName: null,\n            nOffers: 2,\n          },\n          {\n            id: 'test_venue_id_2',\n            isVirtual: false,\n            managingOffererId: 'GE',\n            name: 'Le Sous-sol (Offre physique)',\n            offererName: 'Bar des amis',\n            publicName: null,\n            nOffers: 2,\n          },\n          {\n            id: 'test_venue_id_3',\n            isVirtual: false,\n            managingOffererId: 'GE',\n            name: 'Le deuxième Sous-sol (Offre physique)',\n            offererName: 'Bar des amis',\n            publicName: 'Le deuxième Sous-sol',\n            nOffers: 2,\n          },\n        ],\n      },\n      {\n        address: 'RUE DE NIEUPORT',\n        city: 'Drancy',\n        id: 'FQ',\n        name: 'Club Dorothy',\n        postalCode: '93700',\n        siren: '222222222',\n        bic: 'test bic 02',\n        iban: 'test iban 02',\n        managedVenues: [],\n      },\n    ]\n    baseOfferersNames = baseOfferers.map(offerer => ({\n      id: offerer.id,\n      name: offerer.name,\n    }))\n\n    pcapi.getOfferer.mockResolvedValue(baseOfferers[0])\n    pcapi.getAllOfferersNames.mockResolvedValue(baseOfferersNames)\n    pcapi.getVenueStats.mockResolvedValue({\n      activeBookingsQuantity: 4,\n      activeOffersCount: 2,\n      soldOutOffersCount: 3,\n      validatedBookingsQuantity: 3,\n    })\n  })\n\n  describe('render', () => {\n    beforeEach(async () => {\n      await renderHomePage()\n    })\n\n    describe('when clicking on anchor link to profile', () => {\n      let scrollIntoViewMock\n      beforeEach(() => {\n        scrollIntoViewMock = jest.fn()\n        Element.prototype.scrollIntoView = scrollIntoViewMock\n      })\n\n      it('should smooth scroll to section if user doesnt prefer reduced motion', () => {\n        // given\n        doesUserPreferReducedMotion.mockReturnValue(false)\n\n        // when\n        fireEvent.click(screen.getByRole('link', { name: 'Profil et aide' }))\n\n        // then\n        expect(scrollIntoViewMock).toHaveBeenCalledWith({ behavior: 'smooth' })\n      })\n\n      it('should jump to section if user prefers reduced motion', () => {\n        // given\n        doesUserPreferReducedMotion.mockReturnValue(true)\n\n        // when\n        fireEvent.click(screen.getByRole('link', { name: 'Profil et aide' }))\n\n        // then\n        expect(scrollIntoViewMock).toHaveBeenCalledWith({ behavior: 'auto' })\n      })\n    })\n\n    describe('profileAndSupport', () => {\n      it('should display section and subsection titles', () => {\n        expect(screen.getByText('Profil et aide', { selector: 'h2' })).toBeInTheDocument()\n        expect(screen.getByText('Profil')).toBeInTheDocument()\n        expect(screen.getByText('Aide et support')).toBeInTheDocument()\n      })\n\n      describe('update profile informations modal', () => {\n        it('should display profile modifications modal when clicking on modify button', async () => {\n          // when\n          fireEvent.click(screen.getByText('Modifier', { selector: 'button' }))\n\n          // then\n          expect(await screen.findByLabelText('Nom')).toBeInTheDocument()\n          expect(await screen.findByLabelText('Prénom')).toBeInTheDocument()\n          expect(await screen.findByLabelText('Email')).toBeInTheDocument()\n          expect(await screen.findByLabelText('Téléphone')).toBeInTheDocument()\n        })\n\n        it('should close the modal when clicking on cancel button', async () => {\n          // given\n          fireEvent.click(screen.getByText('Modifier', { selector: 'button' }))\n\n          // when\n          fireEvent.click(screen.getByText('Annuler', { selector: 'button' }))\n\n          // then\n          expect(await screen.queryByLabelText('Nom')).not.toBeInTheDocument()\n        })\n\n        it('should update user info on submit', async () => {\n          // given\n          fireEvent.click(screen.getByText('Modifier', { selector: 'button' }))\n          fireEvent.change(screen.getByLabelText('Prénom'), {\n            target: { value: 'Johnny' },\n          })\n          fireEvent.change(screen.getByLabelText('Nom'), {\n            target: { value: 'Doe' },\n          })\n          fireEvent.change(screen.getByLabelText('Email'), {\n            target: { value: 'johnny.doe@dummy.xyz' },\n          })\n          fireEvent.change(screen.getByLabelText('Téléphone'), {\n            target: { value: '01 01 00 00 00' },\n          })\n\n          // when\n          await act(async () => {\n            await fireEvent.click(screen.getByRole('button', { name: 'Enregistrer' }))\n          })\n\n          // then\n          expect(pcapi.updateUserInformations).toHaveBeenCalledWith({\n            firstName: 'Johnny',\n            lastName: 'Doe',\n            email: 'johnny.doe@dummy.xyz',\n            phoneNumber: '01 01 00 00 00',\n          })\n        })\n\n        it('should show errors on submit', async () => {\n          // given\n          pcapi.updateUserInformations.mockRejectedValue({\n            errors: { firstName: ['Prénom en erreur'], email: ['Email en erreur'] },\n          })\n          fireEvent.click(screen.getByText('Modifier', { selector: 'button' }))\n          fireEvent.change(screen.getByLabelText('Prénom'), {\n            target: { value: 'Johnny' },\n          })\n          fireEvent.change(screen.getByLabelText('Email'), {\n            target: { value: 'johnny.doe@dummy.xyz' },\n          })\n\n          // when\n          await act(async () => {\n            await fireEvent.click(screen.getByRole('button', { name: 'Enregistrer' }))\n          })\n\n          // then\n          expect(screen.getByText('Prénom en erreur')).toBeInTheDocument()\n          expect(screen.getByText('Email en erreur')).toBeInTheDocument()\n        })\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/LostPassword/LostPassword.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/LostPassword/LostPasswordContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/LostPassword/__specs__/LostPassword.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (193). Maximum allowed is 150.',
        line: 10,
        column: 53,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 202,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { mount, shallow } from 'enzyme'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport configureStore from 'store'\n\nimport LostPassword from '../LostPassword'\n\ndescribe('src | components | pages | LostPassword', () => {\n  let props\n\n  beforeEach(() => {\n    props = {\n      change: false,\n      envoye: false,\n      isNewHomepageActive: true,\n      token: 'ABC',\n      history: {\n        push: jest.fn(),\n      },\n      showErrorNotification: jest.fn(),\n      submitResetPassword: jest.fn(),\n      submitResetPasswordRequest: jest.fn(),\n    }\n  })\n\n  describe('when user wants to reset password', () => {\n    beforeEach(() => {\n      props.token = ''\n    })\n\n    it('should display one input with submit button to receive user email', () => {\n      // given\n      const store = configureStore({\n        data: {\n          users: [{ id: 'CMOI' }],\n        },\n      }).store\n\n      // when\n      const wrapper = mount(\n        <Provider store={store}>\n          <MemoryRouter>\n            <LostPassword {...props} />\n          </MemoryRouter>\n        </Provider>\n      )\n\n      // then\n      const emailInput = wrapper.find('input[type=\"email\"]')\n      expect(emailInput).toHaveLength(1)\n      const submitButton = wrapper.find({ children: 'Envoyer' }).find('button')\n      expect(submitButton).toHaveLength(1)\n      expect(submitButton.prop('disabled')).toBe(true)\n    })\n\n    describe('when user start writing email', () => {\n      it('submit button should not be disabled', () => {\n        // given\n        const store = configureStore({\n          data: {\n            users: [{ id: 'CMOI' }],\n          },\n        }).store\n\n        // when\n        const wrapper = mount(\n          <Provider store={store}>\n            <MemoryRouter>\n              <LostPassword {...props} />\n            </MemoryRouter>\n          </Provider>\n        )\n        wrapper.find('input[type=\"email\"]').simulate('change', { target: { value: 'email' } })\n\n        // then\n        const submitButton = wrapper.find({ children: 'Envoyer' }).find('button')\n        expect(submitButton.prop('disabled')).toBe(false)\n      })\n    })\n\n    describe('when user successfully request password change', () => {\n      it('should redirect success message page', () => {\n        // when\n        const wrapper = shallow(<LostPassword {...props} />)\n        wrapper.instance().redirectToResetPasswordRequestSuccessPage()\n\n        // then\n        expect(props.history.push).toHaveBeenCalledWith('/mot-de-passe-perdu?envoye=1')\n      })\n    })\n\n    describe('when user does not succeed to request password change', () => {\n      it('should display error message', () => {\n        // when\n        const wrapper = shallow(<LostPassword {...props} />)\n        wrapper.instance().displayPasswordResetRequestErrorMessage()\n\n        // then\n        expect(props.showErrorNotification).toHaveBeenCalledWith(\n          'Un problème est survenu pendant la réinitialisation du mot de passe, veuillez réessayer plus tard.'\n        )\n      })\n    })\n  })\n\n  describe('when user resets password', () => {\n    beforeEach(() => {\n      props.token = 'ABC'\n    })\n\n    it('should display one input with submit button to receive new user password', () => {\n      // given\n      const store = configureStore({\n        data: {\n          users: [{ id: 'CMOI' }],\n        },\n      }).store\n\n      // when\n      const wrapper = mount(\n        <Provider store={store}>\n          <MemoryRouter>\n            <LostPassword {...props} />\n          </MemoryRouter>\n        </Provider>\n      )\n\n      // then\n      const passwordInput = wrapper.find('input[type=\"password\"]')\n      expect(passwordInput).toHaveLength(1)\n      const submitButton = wrapper\n        .find('button')\n        .findWhere(node => node.text() === 'Envoyer')\n        .first()\n      expect(submitButton).toHaveLength(1)\n      expect(submitButton.props()['disabled']).toBe(true)\n    })\n\n    describe('when user starts writing password', () => {\n      it('submit button should not be disabled', () => {\n        // given\n        const store = configureStore({\n          data: {\n            users: [{ id: 'CMOI' }],\n          },\n        }).store\n\n        // when\n        const wrapper = mount(\n          <Provider store={store}>\n            <MemoryRouter>\n              <LostPassword {...props} />\n            </MemoryRouter>\n          </Provider>\n        )\n        wrapper\n          .find('input[name=\"newPasswordValue\"]')\n          .simulate('change', { target: { value: 'password' } })\n\n        // then\n        const submitButton = wrapper.find({ children: 'Envoyer' }).find('button')\n        expect(submitButton.prop('disabled')).toBe(false)\n      })\n    })\n\n    describe('when user successfully change password', () => {\n      it('should redirect success message page', () => {\n        // when\n        const wrapper = shallow(<LostPassword {...props} />)\n        wrapper.instance().redirectToResetPasswordSuccessPage()\n\n        // then\n        expect(props.history.push).toHaveBeenCalledWith('/mot-de-passe-perdu?change=1')\n      })\n    })\n\n    describe('when user does not succeed password change', () => {\n      it('should display error message', () => {\n        // given\n        const action = {\n          payload: {\n            errors: {\n              errorMessage: 'Server error',\n            },\n          },\n        }\n        const state = {}\n\n        // when\n        const wrapper = shallow(<LostPassword {...props} />)\n        wrapper.instance().displayPasswordResetErrorMessages(state, action)\n\n        // then\n        expect(props.showErrorNotification).toHaveBeenCalledWith(\n          \"Une erreur s'est produite, veuillez réessayer ultérieurement.\"\n        )\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/LostPassword/__specs__/LostPasswordContainer.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/List/OffererItem/OffererItem.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/List/OffererItem/OffererItemContainer.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/List/OffererItem/PendingOffererItem.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/List/OffererItem/__specs__/OffererItem.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (295). Maximum allowed is 150.',
        line: 8,
        column: 77,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 302,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (253). Maximum allowed is 150.',
        line: 49,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 301,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { mount, shallow } from 'enzyme'\nimport { createBrowserHistory } from 'history'\nimport React from 'react'\nimport { Link, Router } from 'react-router-dom'\n\nimport OffererItem from '../OffererItem'\n\ndescribe('src | components | pages | Offerers | OffererItem | OffererItem', () => {\n  let props\n  let history\n\n  const dispatchMock = jest.fn()\n  const parseMock = () => ({ 'mots-cles': null })\n  const queryChangeMock = jest.fn()\n\n  beforeEach(() => {\n    props = {\n      currentUser: {},\n      isVenueCreationAvailable: true,\n      dispatch: dispatchMock,\n      offerer: {\n        id: 'AE',\n        name: 'Fake Name',\n        nOffers: 0,\n        isValidated: true,\n      },\n      pagination: {\n        apiQuery: {\n          keywords: null,\n        },\n      },\n      query: {\n        change: queryChangeMock,\n        parse: parseMock,\n      },\n      location: {\n        search: '',\n      },\n      venues: [\n        {\n          isDigital: true,\n        },\n      ],\n      physicalVenues: [{}],\n    }\n    history = createBrowserHistory()\n  })\n\n  describe('render', () => {\n    describe('navigate to offerer caret', () => {\n      it('should be displayed with right link', () => {\n        // given\n        // given\n        props.offerer = {\n          id: 'AE',\n          isValidated: true,\n          name: 'Validated Offerer',\n          nOffers: 0,\n          userHasAccess: true,\n        }\n\n        // when\n        const wrapper = mount(\n          <Router history={history}>\n            <OffererItem {...props} />\n          </Router>\n        )\n        const caret = wrapper.find('.caret')\n        const navLink = caret.find(Link)\n\n        // then\n        expect(navLink.prop('to')).toBe('/accueil?structure=AE')\n      })\n    })\n\n    describe('offerer name', () => {\n      it('should be rendered with a link', () => {\n        // given\n        props.venues = [\n          {\n            isVirtual: true,\n          },\n        ]\n\n        // when\n        const wrapper = mount(\n          <Router history={history}>\n            <OffererItem {...props} />\n          </Router>\n        )\n        const createOffer = wrapper.find('.name')\n        const navLink = createOffer.find(Link)\n\n        // then\n        expect(navLink.text()).toBe('Fake Name')\n        expect(navLink.prop('to')).toBe('/accueil?structure=AE')\n      })\n    })\n\n    describe('create an offer', () => {\n      describe('when offerer has only one virtual venue', () => {\n        it('should display a link to create digital offer', () => {\n          // given\n          props.venues = [\n            {\n              isVirtual: true,\n              id: 'DY',\n            },\n          ]\n          // when\n          const wrapper = mount(\n            <Router history={history}>\n              <OffererItem {...props} />\n            </Router>\n          )\n          const createOffer = wrapper.find('#create-offer-action')\n          const navLink = createOffer.find(Link)\n\n          // then\n          expect(navLink.text()).toBe('Nouvelle offre numérique')\n          expect(navLink.prop('to')).toBe('/offres/creation?structure=AE&lieu=DY')\n        })\n      })\n\n      describe('when offerer has one virtual venue and only one physical venue', () => {\n        it('should display a link to create offer', () => {\n          // given\n          props.venues = [\n            {\n              isVirtual: true,\n              id: 'DY',\n            },\n            {\n              isVirtual: false,\n              id: 'HD',\n            },\n          ]\n          // when\n          const wrapper = mount(\n            <Router history={history}>\n              <OffererItem {...props} />\n            </Router>\n          )\n          const createOffer = wrapper.find('#create-offer-action')\n          const navLink = createOffer.find(Link)\n\n          // then\n          expect(navLink.text()).toBe('Nouvelle offre')\n          expect(navLink.prop('to')).toBe('/offres/creation?structure=AE')\n        })\n      })\n    })\n\n    describe('display offers total number', () => {\n      it('should display total and link to offers page', () => {\n        // given\n        props.offerer.nOffers = 42\n        props.venues = [\n          {\n            isVirtual: true,\n            id: 'DY',\n          },\n          {\n            isVirtual: false,\n            id: 'HD',\n          },\n        ]\n\n        // when\n        const wrapper = mount(\n          <Router history={history}>\n            <OffererItem {...props} />\n          </Router>\n        )\n\n        const offersCount = wrapper.findWhere(node => node.text() === '42 offres').first()\n\n        // then\n        expect(offersCount).toHaveLength(1)\n        expect(offersCount.find('a').at(0).prop('href')).toBe('/offres?structure=AE')\n      })\n\n      it('should display 0 offer and no link to offers page when offerer has no offers', () => {\n        // given\n        props.offerer.nOffers = 0\n        props.venues = [\n          {\n            isVirtual: true,\n            id: 'DY',\n          },\n          {\n            isVirtual: false,\n            id: 'HD',\n          },\n        ]\n\n        // when\n        const wrapper = mount(\n          <Router history={history}>\n            <OffererItem {...props} />\n          </Router>\n        )\n\n        // then\n        const offersCount = wrapper.find({ children: '0 offre' })\n        const offersLink = offersCount.find('a')\n        expect(offersCount).toHaveLength(1)\n        expect(offersLink).toHaveLength(0)\n      })\n    })\n\n    describe('display physical venues total number', () => {\n      it('should display total with a link to offers page', () => {\n        // given\n        props.offerer.nOffers = 42\n        props.physicalVenues = [\n          {\n            isVirtual: false,\n            id: 'DY',\n          },\n          {\n            isVirtual: false,\n            id: 'FL',\n          },\n          {\n            isVirtual: false,\n            id: 'DQ',\n          },\n        ]\n\n        // when\n        const wrapper = mount(\n          <Router history={history}>\n            <OffererItem {...props} />\n          </Router>\n        )\n        const actions = wrapper.find('#count-venues-action')\n        const navLink = actions.find(Link)\n\n        // then\n        expect(navLink.text()).toBe('3 lieux')\n        expect(navLink.at(0).prop('to')).toBe('/structures/AE/')\n      })\n\n      it('should display 0 venue with a link to offerer page', () => {\n        // given\n        props.offerer.nOffers = 0\n        props.physicalVenues = []\n\n        // when\n        const wrapper = mount(\n          <Router history={history}>\n            <OffererItem {...props} />\n          </Router>\n        )\n        const actions = wrapper.find('#count-venues-action')\n        const navLink = actions.find(Link)\n\n        // then\n        expect(navLink.text()).toBe('0 lieu')\n        expect(navLink.at(0).prop('to')).toBe('/structures/AE/')\n      })\n    })\n\n    describe('add new venue link', () => {\n      it('should display a link to create a new venue', () => {\n        // given\n        props.offerer = {\n          id: 'AE',\n          name: 'Fake Name',\n          nOffers: 0,\n          isValidated: false,\n        }\n\n        // when\n        const wrapper = shallow(<OffererItem {...props} />)\n        const createVenueLink = wrapper.find('#create-venue-action').find(Link)\n\n        // then\n        expect(createVenueLink.prop('to')).toBe('/structures/AE/lieux/creation')\n      })\n\n      it('should redirect to unavailable page when venue creation is not available', () => {\n        // given\n        props.isVenueCreationAvailable = false\n        props.offerer = {\n          id: 'AE',\n          name: 'Fake Name',\n          nOffers: 0,\n          isValidated: false,\n        }\n\n        // when\n        const wrapper = shallow(<OffererItem {...props} />)\n        const createVenueLink = wrapper.find('#create-venue-action').find(Link)\n\n        // then\n        expect(createVenueLink.prop('to')).toBe('/erreur/indisponible')\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/List/OffererItem/__specs__/OffererItemContainer.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/List/OffererItem/__specs__/PendingOffererItem.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/List/Offerers.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/List/OfferersContainer.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/List/__specs__/Offerers.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (193). Maximum allowed is 150.',
        line: 11,
        column: 41,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 203,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (171). Maximum allowed is 150.',
        line: 32,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 202,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { shallow } from 'enzyme'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport Titles from 'components/layout/Titles/Titles'\n\nimport OffererItemContainer from '../OffererItem/OffererItemContainer'\nimport PendingOffererItem from '../OffererItem/PendingOffererItem'\nimport Offerers from '../Offerers'\n\ndescribe('src | components | Offerers', () => {\n  let props\n\n  beforeEach(() => {\n    props = {\n      closeNotification: jest.fn(),\n      currentUser: {},\n      isOffererCreationAvailable: true,\n      loadOfferers: jest.fn(),\n      location: {\n        search: '',\n      },\n      offerers: [{ id: 'AE', siren: '1234567' }],\n      query: {\n        parse: () => ({ 'mots-cles': null }),\n      },\n      resetLoadedOfferers: jest.fn(),\n      showNotification: jest.fn(),\n    }\n  })\n\n  describe('render', () => {\n    describe('subtitle message', () => {\n      describe('when the isOffererCreationAvailable feature is activated', () => {\n        it('should display a link to create an offer', () => {\n          // when\n          const wrapper = shallow(<Offerers {...props} />)\n          const links = wrapper.find('a')\n\n          // then\n          expect(links.at(0).text()).toBe('créer un nouveau lieu')\n          expect(links.at(0).prop('href')).toBe('/structures/AE/lieux/creation')\n        })\n      })\n\n      describe('when the isOffererCreationAvailable feature is disabled', () => {\n        it('should display a link to create an offer', () => {\n          // given\n          props.isOffererCreationAvailable = false\n\n          // when\n          const wrapper = shallow(<Offerers {...props} />)\n          const links = wrapper.find('a')\n\n          // then\n          expect(links.at(0).text()).toBe('créer un nouveau lieu')\n          expect(links.at(0).prop('href')).toBe('/erreur/indisponible')\n        })\n      })\n    })\n\n    describe('should pluralize offerers menu link', () => {\n      it('should display Structure juridique when one offerer', () => {\n        // given\n        props.currentUser = {}\n        props.offerers = [{ id: 'AE' }]\n\n        // when\n        const wrapper = shallow(<Offerers {...props} />)\n        const titles = wrapper.find('Titles').props()\n\n        // then\n        expect(titles.title).toStrictEqual('Structure juridique')\n      })\n\n      it('should display Structures juridiques when many offerers', () => {\n        // given\n        props.currentUser = {}\n        props.offerers = [{ id: 'AE' }, { id: 'AF' }]\n\n        // when\n        const wrapper = shallow(<Offerers {...props} />)\n        const titles = wrapper.find('Titles').props()\n\n        // then\n        expect(titles.title).toStrictEqual('Structures juridiques')\n      })\n    })\n\n    describe('when leaving page', () => {\n      it('should not close notifcation', () => {\n        // given\n        props = { ...props, closeNotification: jest.fn() }\n        const wrapper = shallow(<Offerers {...props} />)\n\n        // when\n        wrapper.unmount()\n\n        // then\n        expect(props.closeNotification).not.toHaveBeenCalled()\n      })\n\n      it('should not fail on null notifcation', () => {\n        // given\n        props = {\n          ...props,\n          closeNotification: jest.fn(),\n          notification: null,\n        }\n        const wrapper = shallow(<Offerers {...props} />)\n\n        // when\n        wrapper.unmount()\n\n        // then\n        expect(props.closeNotification).not.toHaveBeenCalledWith()\n      })\n    })\n\n    describe('when displaying the list of offerers', () => {\n      describe('when the offerer is active and the user has access to it', () => {\n        it('should render an active offerer item in the list for each activated offerer', () => {\n          // given\n          const offerer = { id: 'B2', isValidated: true, userHasAccess: true }\n          props.offerers = [offerer]\n\n          // when\n          const wrapper = shallow(<Offerers {...props} />)\n\n          // then\n          const offererItem = wrapper.find(OffererItemContainer)\n          expect(offererItem).toHaveLength(1)\n          expect(offererItem.at(0).prop('offerer')).toStrictEqual(offerer)\n        })\n      })\n\n      describe('when offerer is not active for the user', () => {\n        describe('when the offerer is not active', () => {\n          it('should render a pending offerer item', () => {\n            // given\n            const offerer = { id: 'B2', siren: '1431', isValidated: false, userHasAccess: true }\n            props.offerers = [offerer]\n\n            // when\n            const wrapper = shallow(<Offerers {...props} />)\n\n            // then\n            const offererItem = wrapper.find(PendingOffererItem)\n            expect(offererItem).toHaveLength(1)\n            expect(offererItem.at(0).prop('offerer')).toStrictEqual(offerer)\n          })\n        })\n\n        describe('when the user does not have access', () => {\n          it('should render a pending offerer item', () => {\n            // given\n            const offerer = { id: 'B2', siren: '1431', isValidated: true, userHasAccess: false }\n            props.offerers = [offerer]\n\n            // when\n            const wrapper = shallow(<Offerers {...props} />)\n\n            // then\n            const offererItem = wrapper.find(PendingOffererItem)\n            expect(offererItem).toHaveLength(1)\n            expect(offererItem.at(0).prop('offerer')).toStrictEqual(offerer)\n          })\n        })\n      })\n    })\n\n    describe('the link to offerer creation page', () => {\n      describe('when api sirene feature is available', () => {\n        it('should display a link to create an offer', () => {\n          // when\n          const wrapper = shallow(<Offerers {...props} />)\n          const pageHeading = wrapper.find(Titles).first().dive()\n\n          const link = pageHeading.find(Link)\n\n          // then\n          expect(link.prop('to')).toBe('/structures/creation')\n        })\n      })\n\n      describe('when api sirene feature is not available', () => {\n        it('should display a link to unavailable page', () => {\n          // given\n          props.isOffererCreationAvailable = false\n\n          // when\n          const wrapper = shallow(<Offerers {...props} />)\n          const pageHeading = wrapper.find(Titles).first().dive()\n\n          const link = pageHeading.find(Link)\n\n          // then\n          expect(link.prop('to')).toBe('/erreur/indisponible')\n        })\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/List/__specs__/OfferersContainer.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (272). Maximum allowed is 150.',
        line: 5,
        column: 69,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 276,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (170). Maximum allowed is 150.',
        line: 106,
        column: 34,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 275,
        endColumn: 4,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 231,
        column: 65,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 240,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 244,
        column: 65,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 253,
        endColumn: 12,
      },
    ],
    errorCount: 0,
    warningCount: 4,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import state from 'components/utils/mocks/state'\n\nimport { mapStateToProps, mapDispatchToProps, createApiPath } from '../OfferersContainer'\n\ndescribe('src | components | pages | Offerers | OfferersContainer', () => {\n  describe('mapStateToProps', () => {\n    it('should return an object of props', () => {\n      // given\n      const props = {}\n\n      // when\n      const result = mapStateToProps(state, props)\n\n      // then\n      const expected = {\n        isOffererCreationAvailable: false,\n        offerers: [\n          {\n            address: 'RUE DES SAPOTILLES',\n            bic: 'QSDFGH8Z566',\n            city: 'Cayenne',\n            dateCreated: '2019-03-07T10:39:23.560414Z',\n            dateModifiedAtLastProvider: '2019-03-07T10:39:57.823508Z',\n            iban: 'FR7630001007941234567890185',\n            id: 'BA',\n            idAtProviders: null,\n            isActive: true,\n            isValidated: true,\n            lastProviderId: null,\n            modelName: 'Offerer',\n            nOffers: 5,\n            name: 'Bar des amis',\n            postalCode: '97300',\n            siren: '222222233',\n            validationToken: null,\n          },\n          {\n            address: 'RUE DES POMMES ROSAS',\n            city: 'Cayenne',\n            dateCreated: '2019-03-07T10:39:23.560414Z',\n            dateModifiedAtLastProvider: '2019-03-07T10:39:57.843884Z',\n            id: 'CA',\n            idAtProviders: null,\n            isActive: true,\n            isValidated: false,\n            lastProviderId: null,\n            modelName: 'Offerer',\n            nOffers: 10,\n            name: 'Cinéma du coin',\n            postalCode: '97300',\n            siren: '222222232',\n            validationToken: 'w3hDQgjYRIyYTxOYY08nwgH3BzI',\n          },\n        ],\n      }\n      expect(result).toStrictEqual(expected)\n    })\n\n    describe('isOffererCreationAvailable is based on feature flipping', () => {\n      it('should mark offerer creation possible when API sirene is available', () => {\n        // given\n        const props = {}\n        const state = {\n          data: {},\n          features: {\n            list: [\n              {\n                isActive: true,\n                nameKey: 'API_SIRENE_AVAILABLE',\n              },\n            ],\n          },\n        }\n\n        // when\n        const result = mapStateToProps(state, props)\n\n        // then\n        expect(result).toHaveProperty('isOffererCreationAvailable', true)\n      })\n\n      it('should prevent offerer creation when feature API sirene is not available', () => {\n        // given\n        const props = {}\n        const state = {\n          data: {},\n          features: {\n            list: [\n              {\n                isActive: false,\n                nameKey: 'API_SIRENE_AVAILABLE',\n              },\n            ],\n          },\n        }\n\n        // when\n        const result = mapStateToProps(state, props)\n\n        // then\n        expect(result).toHaveProperty('isOffererCreationAvailable', false)\n      })\n    })\n  })\n\n  describe('mapDispatchToProps', () => {\n    let dispatch\n\n    beforeEach(() => {\n      dispatch = jest.fn()\n    })\n\n    describe('loadOfferers', () => {\n      let handleFail\n      let handleSuccess\n      let ownProps\n\n      beforeEach(() => {\n        handleFail = jest.fn()\n        handleSuccess = jest.fn()\n\n        ownProps = {\n          query: {\n            parse: jest.fn().mockReturnValue({}),\n          },\n        }\n      })\n\n      it('should request for all offerers by default', () => {\n        // when\n        mapDispatchToProps(dispatch, ownProps).loadOfferers(handleSuccess, handleFail)\n\n        // then\n        expect(dispatch).toHaveBeenCalledWith({\n          config: {\n            apiPath: '/offerers?page=0',\n            handleFail,\n            handleSuccess,\n            method: 'GET',\n            normalizer: {\n              managedVenues: {\n                normalizer: {\n                  offers: 'offers',\n                },\n                stateKey: 'venues',\n              },\n            },\n          },\n          type: 'REQUEST_DATA_GET_/OFFERERS?PAGE=0',\n        })\n      })\n\n      describe('when there is multiple keywords in the url', () => {\n        it('should transmit keywords', () => {\n          // given\n          ownProps.query.parse.mockReturnValue({\n            de: 'Balzac',\n            lieu: 'B3',\n            'mots-cles': ['Honoré', 'Justice'],\n          })\n\n          // when\n          mapDispatchToProps(dispatch, ownProps).loadOfferers(handleSuccess, handleFail)\n\n          // then\n          expect(dispatch).toHaveBeenCalledWith({\n            config: {\n              apiPath: '/offerers?keywords=Honor%C3%A9+Justice&page=0',\n              handleFail,\n              handleSuccess,\n              method: 'GET',\n              normalizer: {\n                managedVenues: {\n                  normalizer: {\n                    offers: 'offers',\n                  },\n                  stateKey: 'venues',\n                },\n              },\n            },\n            type: 'REQUEST_DATA_GET_/OFFERERS?KEYWORDS=HONOR%C3%A9+JUSTICE&PAGE=0',\n          })\n        })\n      })\n\n      describe('when there is one keyword in the url', () => {\n        it('should transmit keyword', () => {\n          // given\n          ownProps.query.parse.mockReturnValue({\n            de: 'Balzac',\n            lieu: 'B3',\n            'mots-cles': 'Club Dorothy',\n          })\n\n          // when\n          mapDispatchToProps(dispatch, ownProps).loadOfferers(handleSuccess, handleFail)\n\n          // then\n          expect(dispatch).toHaveBeenCalledWith({\n            config: {\n              apiPath: '/offerers?keywords=Club+Dorothy&page=0',\n              handleFail,\n              handleSuccess,\n              method: 'GET',\n              normalizer: {\n                managedVenues: {\n                  normalizer: {\n                    offers: 'offers',\n                  },\n                  stateKey: 'venues',\n                },\n              },\n            },\n            type: 'REQUEST_DATA_GET_/OFFERERS?KEYWORDS=CLUB+DOROTHY&PAGE=0',\n          })\n        })\n      })\n\n      describe('createApiPath', () => {\n        it('should create api url with no params', () => {\n          // given\n          const loadOffererKeyWords = []\n          // when\n          const result = createApiPath(loadOffererKeyWords)\n\n          // then\n          expect(result).toStrictEqual('/offerers')\n        })\n\n        describe('when there is one keyword', () => {\n          it('should create api url with keywords params only', () => {\n            // given\n            const loadOffererParameters = ['example']\n\n            // when\n            const result = createApiPath(loadOffererParameters)\n\n            // then\n            expect(result).toStrictEqual('/offerers?keywords=example')\n          })\n        })\n\n        describe('when there is multiple keywords', () => {\n          it('should create api url with keywords params only', () => {\n            // given\n            const loadOffererParameters = ['example', 'keyword']\n\n            // when\n            const result = createApiPath(loadOffererParameters)\n\n            // then\n            expect(result).toStrictEqual('/offerers?keywords=example+keyword')\n          })\n        })\n      })\n    })\n\n    describe('resetLoadedOfferers', () => {\n      it('should clean the offerers already loaded with an ASSIGN_DATA event', () => {\n        // given\n        const functions = mapDispatchToProps(dispatch)\n\n        // then\n        functions.resetLoadedOfferers()\n\n        // then\n        expect(dispatch).toHaveBeenCalledWith({\n          patch: {\n            offerers: [],\n          },\n          type: 'ASSIGN_DATA',\n        })\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/List/utils/__specs__/createVenueForOffererUrl.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/List/utils/createVenueForOffererUrl.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/ApiKey/ApiKey.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (186). Maximum allowed is 150.',
        line: 13,
        column: 16,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 198,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      'import PropTypes from \'prop-types\'\nimport React, { useCallback, useState } from \'react\'\n\nimport Banner from \'components/layout/Banner/Banner\'\nimport { DialogBox } from \'components/layout/DialogBox/DialogBox\'\nimport Icon from \'components/layout/Icon\'\nimport { ReactComponent as SpinnerIcon } from \'components/layout/SubmitButton/assets/loader.svg\'\nimport { deleteOffererApiKey, generateOffererApiKey } from \'repository/pcapi/pcapi\'\nimport { ENV_WORDING } from \'utils/config\'\n\nimport { ReactComponent as DeleteSvg } from \'./assets/illus-delete.svg\'\n\nconst ApiKey = ({\n  savedApiKeys,\n  maxAllowedApiKeys,\n  offererId,\n  showNotification,\n  loadOffererById,\n}) => {\n  const [newlyGeneratedKeys, setNewGeneratedKeys] = useState([])\n  const [isGeneratingKey, setIsGeneratingKey] = useState(false)\n  const [apiKeyToDelete, setApiKeyToDelete] = useState(null)\n\n  const generateApiKey = useCallback(async () => {\n    try {\n      setIsGeneratingKey(true)\n      const generatedApiKey = await generateOffererApiKey(offererId)\n      setNewGeneratedKeys(previousKeys => [...previousKeys, generatedApiKey])\n      showNotification(\n        \'success\',\n        \'Votre clé a bien été générée. Attention elle ne sera affichée que quelques instants !\'\n      )\n      setIsGeneratingKey(false)\n    } catch {\n      showNotification(\'error\', "Une erreur s\'est produite, veuillez réessayer")\n      setIsGeneratingKey(false)\n    }\n  }, [offererId, showNotification])\n\n  function changeApiKeyToDelete(savedApiKey) {\n    return () => {\n      setApiKeyToDelete(savedApiKey)\n    }\n  }\n\n  const confirmApiKeyDeletion = useCallback(async () => {\n    try {\n      await deleteOffererApiKey(apiKeyToDelete)\n      loadOffererById(offererId)\n    } catch (e) {\n      showNotification(\'error\', "Une erreur s\'est produite, veuillez réessayer")\n    }\n    setApiKeyToDelete(null)\n  }, [apiKeyToDelete, loadOffererById, showNotification, offererId])\n\n  const copyKey = apiKeyToCopy => async () => {\n    try {\n      await navigator.clipboard.writeText(apiKeyToCopy)\n      showNotification(\'success\', \'Clé copiée dans le presse-papier !\')\n    } catch {\n      showNotification(\'error\', \'Impossible de copier la clé dans le presse-papier\')\n    }\n  }\n\n  const generatedKeysCount = savedApiKeys.length + newlyGeneratedKeys.length\n  const isMaxAllowedReached = generatedKeysCount >= maxAllowedApiKeys\n\n  return (\n    <div className="section op-content-section api-key">\n      <div className="main-list-title">\n        <h2 className="main-list-title-text">\n          Gestion des clés API\n        </h2>\n      </div>\n      <Banner\n        href="https://www.notion.so/passcultureapp/pass-Culture-Int-grations-techniques-231e16685c9a438b97bdcd7737cdd4d1"\n        linkTitle="En savoir plus sur les clés API"\n        type="notification-info"\n      />\n      <div className="title">\n        <div className="text">\n          {\'API \'}\n          {ENV_WORDING}\n        </div>\n        <div className={`counter${isMaxAllowedReached ? \' counter--error\' : \'\'}`}>\n          {generatedKeysCount}\n          {\'/\'}\n          {maxAllowedApiKeys}\n        </div>\n      </div>\n      <div className="info">\n        {"Vous pouvez avoir jusqu\'à "}\n        {maxAllowedApiKeys}\n        {\' clé\'}\n        {maxAllowedApiKeys > 1 ? \'s\' : \'\'}\n        {\' API.\'}\n      </div>\n      <div className="list">\n        {savedApiKeys.map(savedApiKey => {\n          return (\n            <div\n              className="item"\n              key={savedApiKey}\n            >\n              <span className="text">\n                {savedApiKey}\n                {\'********\'}\n              </span>\n              <button\n                className="action  tertiary-button with-icon"\n                onClick={changeApiKeyToDelete(savedApiKey)}\n                type="button"\n              >\n                <Icon svg="ico-trash" />\n                <span>\n                  supprimer\n                </span>\n              </button>\n            </div>\n          )\n        })}\n        {newlyGeneratedKeys.map(newKey => {\n          return (\n            <div\n              className="item"\n              key={newKey}\n            >\n              <span className="text text--new-key">\n                {newKey}\n              </span>\n              <button\n                className="primary-button action"\n                onClick={copyKey(newKey)}\n                type="button"\n              >\n                Copier\n              </button>\n            </div>\n          )\n        })}\n      </div>\n      {!!newlyGeneratedKeys.length && (\n        <Banner>\n          Veuillez copier cette clé et la stocker dans un endroit sûr car vous ne pourrez plus la\n          visualiser entièrement ici.\n        </Banner>\n      )}\n      <button\n        className={`generate ${\n          isGeneratingKey ? \'primary-button submit-button loading-spinner\' : \'secondary-button\'\n        }`}\n        disabled={isMaxAllowedReached || isGeneratingKey}\n        onClick={generateApiKey}\n        type="button"\n      >\n        {isGeneratingKey ? <SpinnerIcon /> : \'Générer une clé API\'}\n      </button>\n      {!!apiKeyToDelete && (\n        <DialogBox\n          extraClassNames="api-key-dialog"\n          labelledBy="api-key-deletion-dialog"\n          onDismiss={changeApiKeyToDelete(null)}\n        >\n          <DeleteSvg />\n          <div className="title">\n            Êtes-vous sûr de vouloir supprimer votre clé API ?\n          </div>\n          <div className="explanation">\n            <p>\n              Attention, si vous supprimez cette clé, et qu’aucune autre n’a été générée, cela\n              entraînera une rupture du service.\n            </p>\n            <br />\n            <p>\n              Cette action est irréversible.\n            </p>\n          </div>\n          <div className="actions">\n            <button\n              className="secondary-button"\n              onClick={changeApiKeyToDelete(null)}\n              type="button"\n            >\n              Annuler\n            </button>\n            <button\n              className="primary-button confirm"\n              onClick={confirmApiKeyDeletion}\n              type="button"\n            >\n              Confirmer la suppression\n            </button>\n          </div>\n        </DialogBox>\n      )}\n    </div>\n  )\n}\nApiKey.propTypes = {\n  loadOffererById: PropTypes.func.isRequired,\n  maxAllowedApiKeys: PropTypes.number.isRequired,\n  offererId: PropTypes.string.isRequired,\n  savedApiKeys: PropTypes.arrayOf(PropTypes.string).isRequired,\n  showNotification: PropTypes.func.isRequired,\n}\n\nexport default ApiKey\n',
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/ApiKey/ApiKeyContainer.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/ApiKey/__specs__/ApiKey.spec.jsx',
    messages: [
      {
        ruleId: 'testing-library/prefer-find-by',
        severity: 1,
        message:
          "Prefer findByText method over using await waitFor(() => screen.getByText('Copier', { selector: 'button' }))",
        line: 84,
        column: 11,
        nodeType: 'CallExpression',
        messageId: 'preferFindBy',
        endLine: 84,
        endColumn: 76,
        fix: { range: [2348, 2413], text: "screen.findByText('Copier', { selector: 'button' })" },
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 1,
    source:
      "import '@testing-library/jest-dom'\nimport { fireEvent, render, screen, waitFor } from '@testing-library/react'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport * as reduxSagaData from 'redux-saga-data'\n\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport * as notificationReducer from 'store/reducers/notificationReducer'\nimport { configureTestStore } from 'store/testUtils'\nimport { failToGenerateOffererApiKey, generateFakeOffererApiKey } from 'utils/fakeApi'\nimport { offererNormalizer } from 'utils/normalizers'\n\nimport ApiKey from '../ApiKeyContainer'\n\nconst store = configureTestStore()\nconst defaultProps = {\n  maxAllowedApiKeys: 5,\n  savedApiKeys: ['key-prefix1'],\n}\n\nObject.assign(navigator, {\n  clipboard: {\n    writeText: () => {},\n  },\n})\n\nconst renderApiKey = async (props = defaultProps) => {\n  return render(\n    <Provider store={store}>\n      <ApiKey\n        maxAllowedApiKeys={props.maxAllowedApiKeys}\n        offererId=\"AE\"\n        savedApiKeys={props.savedApiKeys}\n      />\n    </Provider>\n  )\n}\n\nObject.defineProperty(navigator, 'clipboard', {\n  value: {\n    writeText: () => {},\n  },\n})\n\ndescribe('src | Offerer | ApiKey', () => {\n  it('should display api keys and generate new key', async () => {\n    // when\n    await renderApiKey()\n\n    // then\n    expect(screen.getByText('key-prefix1********')).toBeInTheDocument()\n    expect(screen.getByText('1/5')).toBeInTheDocument()\n  })\n\n  it('should display the button as disabled if limit reached', async () => {\n    // when\n    await renderApiKey({\n      maxAllowedApiKeys: 5,\n      savedApiKeys: ['key1', 'key2', 'key3', 'key4', 'key5'],\n    })\n\n    // then\n    expect(screen.getByText('Générer une clé API', { selector: 'button' })).toBeDisabled()\n  })\n\n  it('should generate a new key', async () => {\n    // given\n    await renderApiKey()\n    generateFakeOffererApiKey('new-key')\n\n    // when\n    fireEvent.click(screen.getByText('Générer une clé API', { selector: 'button' }))\n\n    // then\n    await waitFor(() => expect(screen.getByText('new-key')).toBeInTheDocument())\n  })\n\n  it('should copy key in clipboar', async () => {\n    // given\n    await renderApiKey()\n    jest.spyOn(navigator.clipboard, 'writeText')\n    generateFakeOffererApiKey('new-key')\n    fireEvent.click(screen.getByText('Générer une clé API', { selector: 'button' }))\n    await waitFor(() => screen.getByText('Copier', { selector: 'button' }))\n\n    // when\n    fireEvent.click(screen.getByText('Copier', { selector: 'button' }))\n\n    // then\n    await waitFor(() => expect(navigator.clipboard.writeText).toHaveBeenCalledWith('new-key'))\n  })\n\n  it('should display an error when the api call fails', async () => {\n    // given\n    await renderApiKey()\n\n    const showNotificationSpy = jest.spyOn(notificationReducer, 'showNotification')\n    failToGenerateOffererApiKey()\n\n    // when\n    fireEvent.click(screen.getByText('Générer une clé API', { selector: 'button' }))\n\n    // then\n    await waitFor(() =>\n      expect(showNotificationSpy).toHaveBeenCalledWith({\n        type: 'error',\n        text: \"Une erreur s'est produite, veuillez réessayer\",\n      })\n    )\n  })\n\n  it('should not delete key on modal dismiss', async () => {\n    await renderApiKey()\n    const deleteSpy = jest.spyOn(pcapi, 'deleteOffererApiKey').mockReturnValue(null)\n    const requestDataSpy = jest.spyOn(reduxSagaData, 'requestData')\n    fireEvent.click(screen.getByText('supprimer'))\n\n    // when\n    fireEvent.click(screen.getByText('Annuler', { selector: 'button' }))\n\n    // then\n    expect(deleteSpy).not.toHaveBeenCalled()\n    await waitFor(() => {\n      expect(requestDataSpy).not.toHaveBeenCalledWith()\n    })\n  })\n\n  it('should delete a key on modal confirm', async () => {\n    await renderApiKey()\n    const deleteSpy = jest.spyOn(pcapi, 'deleteOffererApiKey').mockReturnValue(null)\n    const requestDataSpy = jest.spyOn(reduxSagaData, 'requestData')\n    fireEvent.click(screen.getByText('supprimer'))\n\n    // when\n    fireEvent.click(screen.getByText('Confirmer la suppression', { selector: 'button' }))\n\n    // then\n    expect(deleteSpy).toHaveBeenCalledWith('key-prefix1')\n    await waitFor(() => {\n      expect(requestDataSpy).toHaveBeenCalledWith({\n        apiPath: '/offerers/AE',\n        normalizer: offererNormalizer,\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/BankInformation/BankInformation.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/BankInformation/__specs__/BankInformation.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/Offerer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/OffererDetails.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/OffererDetailsContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/OffererFactory.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/Venues/VenueItem/VenueItem.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/Venues/VenueItem/__specs__/VenueItem.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/Venues/Venues.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/Venues/VenuesContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/Venues/__specs__/Venues.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/Venues/__specs__/VenuesContainer.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (51). Maximum allowed is 50.',
        line: 3,
        column: 48,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 53,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { mapStateToProps } from '../VenuesContainer'\n\ndescribe('pages | Offerers | VenuesContainer', () => {\n  describe('mapStateToProps', () => {\n    describe('isVenueCreationAvailable is based on feature flipping', () => {\n      it('should mark offerer creation possible when API sirene is available', () => {\n        // given\n        const props = {}\n        const state = {\n          features: {\n            list: [\n              {\n                isActive: true,\n                nameKey: 'API_SIRENE_AVAILABLE',\n              },\n            ],\n          },\n        }\n\n        // when\n        const result = mapStateToProps(state, props)\n\n        // then\n        expect(result).toHaveProperty('isVenueCreationAvailable', true)\n      })\n\n      it('should prevent offerer creation when feature API sirene is not available', () => {\n        // given\n        const props = {\n          offerer: {\n            id: 'BA',\n          },\n        }\n        const state = {\n          features: {\n            list: [\n              {\n                isActive: false,\n                nameKey: 'API_SIRENE_AVAILABLE',\n              },\n            ],\n          },\n        }\n\n        // when\n        const result = mapStateToProps(state, props)\n\n        // then\n        expect(result).toHaveProperty('isVenueCreationAvailable', false)\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/__specs__/Offerer.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (94). Maximum allowed is 50.',
        line: 3,
        column: 66,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 96,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (54). Maximum allowed is 50.',
        line: 42,
        column: 42,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 95,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { Offerer } from '../Offerer'\n\ndescribe('src | components | pages | OffererCreation | Offerer', () => {\n  describe('constructor', () => {\n    it('should instantiate Offerer object with default values', () => {\n      // When\n      const result = new Offerer()\n\n      // Then\n      expect(result).toMatchObject({\n        id: undefined,\n        siren: '',\n        name: '',\n        address: '',\n        postalCode: '',\n        city: '',\n        bic: '',\n        iban: '',\n      })\n    })\n\n    it('should instantiate Offerer object with offerer values', () => {\n      // Given\n      const properties = {\n        id: 'B3',\n        postalCode: '75001',\n        city: 'PARIS',\n      }\n\n      // When\n      const result = new Offerer(properties)\n\n      // Then\n      expect(result).toMatchObject({\n        id: 'B3',\n        postalCode: '75001',\n        city: 'PARIS',\n      })\n    })\n  })\n\n  describe('areBankInformationProvided', () => {\n    describe('when offerer bic and iban exists', () => {\n      it('should return true', () => {\n        // given\n        const offerer = {\n          name: 'name',\n          bic: 'bic',\n          iban: 'iban',\n        }\n        const offererInstance = new Offerer(offerer, {})\n\n        // then\n        expect(offererInstance.areBankInformationProvided).toBe(true)\n      })\n    })\n\n    describe('when offerer bic doesnt exist', () => {\n      it('should return false', () => {\n        // given\n        const offerer = {\n          name: 'name',\n          iban: 'iban',\n        }\n        const offererInstance = new Offerer(offerer, {})\n        // when then\n        expect(offererInstance.areBankInformationProvided).toBe(false)\n      })\n    })\n\n    describe('when offerer iban doesnt exist', () => {\n      it('should return false', () => {\n        // given\n        const offerer = {\n          name: 'name',\n          bic: 'bic',\n        }\n        const offererInstance = new Offerer(offerer, {})\n        // when then\n        expect(offererInstance.areBankInformationProvided).toBe(false)\n      })\n    })\n\n    describe('when neither offerer iban or bic exist', () => {\n      it('should return false', () => {\n        // given\n        const offerer = {\n          name: 'name',\n        }\n        const offererInstance = new Offerer(offerer, {})\n        // when then\n        expect(offererInstance.areBankInformationProvided).toBe(false)\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/__specs__/OffererDetails.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetails/__specs__/OffererDetailsContainer.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (139). Maximum allowed is 50.',
        line: 11,
        column: 91,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 149,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (107). Maximum allowed is 50.',
        line: 12,
        column: 31,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 118,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (58). Maximum allowed is 50.',
        line: 13,
        column: 44,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 70,
        endColumn: 6,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { mapStateToProps, mapDispatchToProps } from '../../OffererDetails/OffererDetailsContainer'\n\njest.mock('redux-saga-data', () => {\n  const { requestData } = jest.requireActual('fetch-normalize-data')\n  return {\n    requestData,\n    createDataReducer: jest.fn(),\n  }\n})\n\ndescribe('src | components | pages | Offerer | OffererDetails | OffererDetailsContainer', () => {\n  describe('mapStateToProps', () => {\n    it('should return an object of props', () => {\n      // given\n      const state = {\n        data: {\n          users: [\n            {\n              id: 'TY56er',\n            },\n          ],\n          userOfferers: [\n            {\n              id: 'AEKQ',\n              modelName: 'UserOfferer',\n              offererId: 'AGH',\n              rights: 'admin',\n              userId: 'TY56er',\n            },\n          ],\n          offerers: [\n            {\n              id: 'AGH',\n              name: 'Gaumont cinéma',\n              bic: 'bic',\n              iban: 'iban',\n              siren: '256712456',\n              address: '256, rue des mimosas',\n            },\n          ],\n          venues: [],\n        },\n      }\n      const ownProps = {\n        match: {\n          params: {\n            offererId: 'AGH',\n          },\n        },\n      }\n      // when\n      const result = mapStateToProps(state, ownProps)\n\n      // then\n      expect(result).toStrictEqual({\n        currentUser: {\n          id: 'TY56er',\n        },\n        offerer: expect.objectContaining({\n          id: 'AGH',\n          name: 'Gaumont cinéma',\n          bic: 'bic',\n          iban: 'iban',\n          address: '256, rue des mimosas',\n          siren: '256712456',\n        }),\n        offererId: 'AGH',\n        venues: [],\n      })\n    })\n\n    it('should return offerer id from url', () => {\n      // given\n      const state = {\n        data: {\n          users: [\n            {\n              id: 'TY56er',\n            },\n          ],\n          userOfferers: [\n            {\n              id: 'AEKQ',\n              modelName: 'UserOfferer',\n              offererId: 'AGH',\n              rights: 'admin',\n              userId: 'TY56er',\n            },\n          ],\n          offerers: [\n            {\n              id: 'AGH',\n              name: 'Gaumont cinéma',\n              bic: 'bic',\n              iban: 'iban',\n              siren: '256712456',\n              address: '256, rue des mimosas',\n            },\n          ],\n          venues: [],\n        },\n      }\n      const ownProps = {\n        match: {\n          params: {\n            offererId: 'AGH',\n          },\n        },\n      }\n      // when\n      const props = mapStateToProps(state, ownProps)\n\n      // then\n      expect(props).toMatchObject({\n        offererId: 'AGH',\n      })\n    })\n  })\n\n  describe('mapDispatchToProps', () => {\n    describe('loadOffererById', () => {\n      it('should load one offerer details', () => {\n        // given\n        const dispatch = jest.fn()\n        const offererId = 'B44'\n\n        // when\n        mapDispatchToProps(dispatch).loadOffererById(offererId)\n\n        // then\n        expect(dispatch).toHaveBeenCalledWith({\n          config: {\n            apiPath: '/offerers/B44',\n            method: 'GET',\n            normalizer: {\n              managedVenues: {\n                normalizer: {\n                  offers: 'offers',\n                },\n                stateKey: 'venues',\n              },\n            },\n          },\n          type: 'REQUEST_DATA_GET_/OFFERERS/B44',\n        })\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/OffererDetailsLayout.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/Venue/Breadcrumb.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/Venue/VenueCreation/VenueCreation.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/Venue/VenueEdition/VenueEdition.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/Venue/VenueLayout.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/Venue/__specs__/VenueLayout.spec.jsx',
    messages: [
      {
        ruleId: 'testing-library/no-dom-import',
        severity: 1,
        message:
          'import from DOM Testing Library is restricted, import from @testing-library/react instead',
        line: 1,
        column: 1,
        nodeType: 'ImportDeclaration',
        messageId: 'noDomImportFramework',
        endLine: 1,
        endColumn: 49,
        fix: { range: [26, 48], text: "'@testing-library/react'" },
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 1,
    source:
      "import { fireEvent } from '@testing-library/dom'\nimport '@testing-library/jest-dom'\nimport { act, render, screen } from '@testing-library/react'\nimport React from 'react'\nimport { MemoryRouter } from 'react-router'\nimport { Route } from 'react-router-dom'\n\nimport VenueLayout from '../VenueLayout'\n\nconst renderVenueLayout = async (offererId, url = '/') => {\n  const baseUrl = `/structures/${offererId}/lieux`\n  const basePath = '/structures/:offererId([A-Z0-9]+)/lieux'\n  url = `${baseUrl}${url}`\n\n  await act(async () => {\n    await render(\n      <MemoryRouter\n        initialEntries={[{ pathname: url }]}\n        initialIndex={0}\n      >\n        <Route path={basePath}>\n          <VenueLayout />\n        </Route>\n        <Route>\n          DO NOT MATCH\n        </Route>\n      </MemoryRouter>\n    )\n  })\n}\n\ndescribe('testing VenueLayout', () => {\n  let offerer\n  let venue\n\n  beforeEach(() => {\n    offerer = {\n      id: 'fakeOffererId',\n    }\n    venue = {\n      id: 'fakeVenueId',\n    }\n  })\n\n  describe('testing venue creation', () => {\n    beforeEach(async () => {\n      await renderVenueLayout(offerer.id, '/creation')\n    })\n\n    it('should render venue creation page', () => {\n      expect(screen.getByText('Créer un lieu')).toBeInTheDocument()\n    })\n\n    it('should display default tab \"Informations\"', () => {\n      expect(screen.getByText('create venue information form')).toBeInTheDocument()\n    })\n\n    it('should navigate to \"Gestions\" tab on click', async () => {\n      const tabManagement = screen.getByText('Gestions')\n      await act(async () => {\n        await fireEvent.click(tabManagement)\n      })\n\n      expect(screen.getByText('create venue management form')).toBeInTheDocument()\n    })\n  })\n\n  describe('testing temporary venue creation', () => {\n    beforeEach(async () => {\n      await renderVenueLayout(offerer.id, '/temporaire/creation')\n    })\n\n    it('should render temporary venue creation', async () => {\n      expect(screen.getByText('Créer un lieu temporaire')).toBeInTheDocument()\n    })\n\n    it('should display default tab \"Informations\"', () => {\n      expect(screen.getByText('create temporary venue information form')).toBeInTheDocument()\n    })\n\n    it('should navigate to \"Gestions\" tab on click', async () => {\n      const tabManagement = screen.getByText('Gestions')\n      await act(async () => {\n        await fireEvent.click(tabManagement)\n      })\n\n      expect(screen.getByText('create venue management form')).toBeInTheDocument()\n    })\n  })\n\n  describe('testing venue edition', () => {\n    beforeEach(async () => {\n      await renderVenueLayout(offerer.id, `/${venue.id}`)\n    })\n\n    it('should render venue edition', async () => {\n      expect(screen.getByText('Editer votre lieu')).toBeInTheDocument()\n    })\n\n    it('should display default tab \"Informations\"', () => {\n      expect(screen.getByText('edit venue information form')).toBeInTheDocument()\n    })\n\n    it('should navigate to \"Gestions\" tab on click', async () => {\n      const tabManagement = screen.getByText('Gestions')\n      await act(async () => {\n        await fireEvent.click(tabManagement)\n      })\n\n      expect(screen.getByText('edit venue management form')).toBeInTheDocument()\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/Notification.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/ValueObjects/VenueLabel.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/ValueObjects/VenueType.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueCreation/VenueCreation.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueCreation/VenueCreationContainer.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (91). Maximum allowed is 50.',
        line: 44,
        column: 35,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 134,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { requestData } from 'redux-saga-data'\n\nimport { withQueryRouter } from 'components/hocs/with-query-router/withQueryRouter'\nimport { CREATION } from 'components/hocs/withFrenchQueryRouter'\nimport withTracking from 'components/hocs/withTracking'\nimport { isFeatureActive } from 'store/features/selectors'\nimport { showNotification } from 'store/reducers/notificationReducer'\nimport { selectOffererById } from 'store/selectors/data/offerersSelectors'\nimport { selectCurrentUser } from 'store/selectors/data/usersSelectors'\nimport { selectVenueLabels } from 'store/selectors/data/venueLabelsSelectors'\nimport { selectVenueTypes } from 'store/selectors/data/venueTypesSelectors'\nimport { offererNormalizer, venueNormalizer } from 'utils/normalizers'\n\nimport NotificationMessage from '../Notification'\nimport { formatVenuePayload } from '../utils/formatVenuePayload'\nimport VenueLabel from '../ValueObjects/VenueLabel'\nimport VenueType from '../ValueObjects/VenueType'\n\nimport VenueCreation from './VenueCreation'\n\nexport const mapStateToProps = (state, ownProps) => {\n  const {\n    match: {\n      params: { offererId },\n    },\n  } = ownProps\n\n  const currentUser = selectCurrentUser(state)\n  return {\n    currentUser: currentUser,\n    venueTypes: selectVenueTypes(state).map(type => new VenueType(type)),\n    venueLabels: selectVenueLabels(state).map(label => new VenueLabel(label)),\n    formInitialValues: {\n      managingOffererId: offererId,\n      bookingEmail: currentUser.email,\n    },\n    offerer: selectOffererById(state, offererId),\n    withdrawalDetailActive: isFeatureActive(state, 'ENABLE_VENUE_WITHDRAWAL_DETAILS'),\n  }\n}\n\nexport const mapDispatchToProps = (dispatch, ownProps) => {\n  const {\n    match: {\n      params: { offererId, venueId },\n    },\n  } = ownProps\n\n  return {\n    handleInitialRequest: () => {\n      dispatch(\n        requestData({\n          apiPath: `/offerers/${offererId}`,\n          handleSuccess: () => {\n            if (!venueId || venueId === CREATION) {\n              return\n            }\n            dispatch(\n              requestData({\n                apiPath: `/venues/${venueId}`,\n                normalizer: venueNormalizer,\n              })\n            )\n          },\n          normalizer: offererNormalizer,\n        })\n      )\n      dispatch(requestData({ apiPath: `/userOfferers/${offererId}` }))\n      dispatch(requestData({ apiPath: `/venue-types` }))\n      dispatch(requestData({ apiPath: `/venue-labels` }))\n    },\n\n    handleSubmitRequest: ({ formValues, handleFail, handleSuccess }) => {\n      const apiPath = '/venues/'\n\n      const body = formatVenuePayload(formValues, true)\n\n      dispatch(\n        requestData({\n          apiPath,\n          body,\n          handleFail,\n          handleSuccess,\n          method: 'POST',\n          normalizer: venueNormalizer,\n        })\n      )\n    },\n\n    handleSubmitRequestFail: (state, action) => {\n      const {\n        payload: { errors },\n      } = action\n\n      let text = 'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n      if (errors.global) {\n        text = `${text} ${errors.global[0]}`\n      }\n\n      dispatch(\n        showNotification({\n          text,\n          type: 'error',\n        })\n      )\n    },\n\n    handleSubmitRequestSuccess: (state, action) => {\n      const {\n        config: { method },\n        payload: { datum },\n      } = action\n\n      const informationsDisplayed = {\n        venueId: datum.id,\n        offererId,\n        dispatch,\n      }\n      let notificationMessage = 'Lieu créé avec succès !'\n      if (method == 'POST') {\n        notificationMessage = NotificationMessage(informationsDisplayed)\n      }\n\n      dispatch(\n        showNotification({\n          text: notificationMessage,\n          type: 'success',\n        })\n      )\n    },\n  }\n}\n\nexport const mergeProps = (stateProps, dispatchProps, ownProps) => {\n  return {\n    ...stateProps,\n    ...dispatchProps,\n    ...ownProps,\n    trackCreateVenue: createdVenueId => {\n      ownProps.tracking.trackEvent({ action: 'createVenue', name: createdVenueId })\n    },\n  }\n}\n\nexport default compose(\n  withTracking('Venue'),\n  withQueryRouter(),\n  connect(mapStateToProps, mapDispatchToProps, mergeProps)\n)(VenueCreation)\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueCreation/__specs__/VenueCreation.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (264). Maximum allowed is 150.',
        line: 14,
        column: 46,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 277,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { mount, shallow } from 'enzyme'\nimport { createBrowserHistory } from 'history'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { Router } from 'react-router-dom'\n\nimport * as usersSelectors from 'store/selectors/data/usersSelectors'\nimport { configureTestStore } from 'store/testUtils'\n\nimport AddressField from '../../fields/LocationFields/AddressField'\nimport LocationFields from '../../fields/LocationFields/LocationFields'\nimport VenueCreation from '../VenueCreation'\n\ndescribe('src | components | pages | Venue', () => {\n  let push\n  let props\n\n  beforeEach(() => {\n    push = jest.fn()\n    props = {\n      formInitialValues: {\n        id: 'CM',\n      },\n      history: {\n        location: {\n          pathname: '/fake',\n        },\n        push: push,\n      },\n      handleInitialRequest: jest.fn(),\n      handleSubmitRequest: jest.fn(),\n      handleSubmitRequestSuccess: jest.fn(),\n      handleSubmitRequestFail: jest.fn(),\n      match: {\n        params: {\n          offererId: 'APEQ',\n          venueId: 'AQYQ',\n        },\n      },\n      offerer: {\n        id: 'BQ',\n        name: 'Maison du chocolat',\n      },\n      query: {\n        changeToReadOnly: jest.fn(),\n        context: jest.fn().mockReturnValue({\n          isCreatedEntity: true,\n          isModifiedEntity: false,\n          readOnly: false,\n        }),\n      },\n      trackCreateVenue: jest.fn(),\n      trackModifyVenue: jest.fn(),\n      venueTypes: [],\n      venueLabels: [],\n    }\n  })\n\n  describe('render', () => {\n    it('should render component with default state', () => {\n      // when\n      const wrapper = shallow(<VenueCreation {...props} />)\n\n      // then\n      expect(wrapper.state('isRequestPending')).toBe(false)\n    })\n\n    describe('when creating', () => {\n      beforeEach(() => {\n        props.match = {\n          params: {\n            offererId: 'APEQ',\n            venueId: 'nouveau',\n          },\n        }\n        props.query.context = () => ({\n          isCreatedEntity: true,\n          isModifiedEntity: false,\n          readOnly: false,\n        })\n      })\n\n      it('should render component with correct state values', () => {\n        // when\n        const wrapper = shallow(<VenueCreation {...props} />)\n\n        // then\n        expect(wrapper.state('isRequestPending')).toBe(false)\n      })\n\n      it('should display proper title', () => {\n        // when\n        const wrapper = shallow(<VenueCreation {...props} />)\n\n        // then\n        const title = wrapper.find({ children: 'Ajoutez un lieu où accéder à vos offres.' })\n        expect(title).toHaveLength(1)\n      })\n    })\n\n    describe('when editing', () => {\n      beforeEach(() => {\n        props.location = {\n          search: '?modifie',\n        }\n        props.match = {\n          params: {\n            offererId: 'APEQ',\n            venueId: 'AQYQ',\n          },\n        }\n        props.query.context = () => ({\n          isCreatedEntity: false,\n          isModifiedEntity: true,\n          readOnly: false,\n        })\n      })\n\n      it('should render component with correct state values', () => {\n        // when\n        const wrapper = shallow(<VenueCreation {...props} />)\n\n        // then\n        expect(wrapper.state('isRequestPending')).toBe(false)\n      })\n\n      it('should be able to edit address field when venue has no SIRET', () => {\n        // given\n        props.formInitialValues = {\n          siret: null,\n        }\n\n        jest\n          .spyOn(usersSelectors, 'selectCurrentUser')\n          .mockReturnValue({ currentUser: 'fakeUser', publicName: 'fakeName' })\n\n        props.venue = {\n          publicName: 'fake public name',\n        }\n\n        const store = configureTestStore()\n        const history = createBrowserHistory()\n        history.push(`/structures/AE/lieux/TR?modification`)\n\n        let wrapper = mount(\n          <Provider store={store}>\n            <Router history={history}>\n              <VenueCreation {...props} />\n            </Router>\n          </Provider>\n        )\n\n        let addressField = wrapper\n          .find(LocationFields)\n          .find(AddressField)\n          .find('input.field-address')\n          .first()\n\n        addressField.simulate('change', { target: { value: 'Addresse de test' } })\n\n        wrapper = wrapper.update()\n\n        addressField = wrapper\n          .find(LocationFields)\n          .find(AddressField)\n          .find('input.field-address')\n          .first()\n\n        // then\n        expect(addressField.prop('value')).toBe('Addresse de test')\n      })\n    })\n\n    describe('when reading', () => {\n      beforeEach(() => {\n        props.query.context = () => ({\n          isCreatedEntity: false,\n          isModifiedEntity: false,\n          readOnly: true,\n        })\n      })\n\n      it('should render component with correct state values', () => {\n        // when\n        const wrapper = shallow(<VenueCreation {...props} />)\n\n        // then\n        expect(wrapper.state('isRequestPending')).toBe(false)\n      })\n    })\n  })\n\n  describe('form Success', () => {\n    describe('handleFormSuccess', () => {\n      describe('when creating a venue', () => {\n        beforeEach(() => {\n          props.query.context = () => ({\n            isCreatedEntity: true,\n            isModifiedEntity: false,\n            readOnly: false,\n          })\n        })\n\n        const action = {\n          config: {\n            apiPath: '/venues/CM',\n            method: 'POST',\n          },\n          payload: {\n            datum: {\n              id: 'CM',\n            },\n          },\n        }\n\n        it('should redirect to homepage with selected offerer', () => {\n          // given\n          const wrapper = shallow(<VenueCreation {...props} />)\n          const state = wrapper.state()\n\n          // when\n          wrapper.instance().handleFormSuccess(jest.fn())(state, action)\n\n          // then\n          expect(push).toHaveBeenCalledWith('/accueil?structure=APEQ')\n        })\n\n        it('should call handleSubmitRequestSuccess with the right parameters when venue is created', () => {\n          // given\n          const wrapper = shallow(<VenueCreation {...props} />)\n          const state = wrapper.state()\n\n          // when\n          wrapper.instance().handleFormSuccess(jest.fn())(state, action)\n\n          // then\n          expect(props.handleSubmitRequestSuccess).toHaveBeenCalledWith(\n            { isRequestPending: false },\n            {\n              config: {\n                apiPath: '/venues/CM',\n                method: 'POST',\n              },\n              payload: {\n                datum: {\n                  id: 'CM',\n                },\n              },\n            }\n          )\n        })\n      })\n    })\n  })\n\n  describe('event tracking', () => {\n    it('should track venue creation', () => {\n      // given\n      const state = {}\n      const action = {\n        payload: {\n          datum: {\n            id: 'Ty5645dgfd',\n          },\n        },\n      }\n      const wrapper = shallow(<VenueCreation {...props} />)\n      const formResolver = jest.fn()\n\n      // when\n      wrapper.instance().handleFormSuccess(formResolver)(state, action)\n\n      // then\n      expect(props.trackCreateVenue).toHaveBeenCalledWith('Ty5645dgfd')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueCreation/__specs__/VenueCreationContainer.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (121). Maximum allowed is 50.',
        line: 25,
        column: 73,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 145,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (119). Maximum allowed is 50.',
        line: 26,
        column: 31,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 144,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (120). Maximum allowed is 50.',
        line: 147,
        column: 76,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 266,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { venueNormalizer } from 'utils/normalizers'\n\nimport VenueLabel from '../../ValueObjects/VenueLabel'\nimport VenueType from '../../ValueObjects/VenueType'\nimport { mapDispatchToProps, mapStateToProps, mergeProps } from '../VenueCreationContainer'\n\njest.mock('../../Notification', () => {\n  return jest.fn().mockImplementation(() => 'Some text')\n})\n\nwindow.scroll = () => {}\n\nconst mockRequestDataCatch = jest.fn()\njest.mock('redux-saga-data', () => {\n  const actualModule = jest.requireActual('redux-saga-data')\n  return {\n    ...actualModule,\n    requestData: config => {\n      mockRequestDataCatch(config)\n      return actualModule.requestData(config)\n    },\n  }\n})\n\ndescribe('src | components | pages | VenueContainer | mapStateToProps', () => {\n  describe('mapStateToProps', () => {\n    let ownProps\n    beforeEach(() => {\n      ownProps = {\n        match: {\n          params: {\n            offererId: 1,\n            venueId: 'WQ',\n          },\n        },\n      }\n    })\n\n    it('should return an object with props', () => {\n      // given\n      const currentUser = { id: 1, email: 'john.doe@email.com' }\n      const state = {\n        features: {\n          list: [],\n        },\n        data: {\n          offerers: [{ id: 1 }],\n          userOfferers: [{ offererId: 1, rights: 'admin', userId: 1 }],\n          venues: [],\n          users: [currentUser],\n        },\n      }\n\n      // when\n      const result = mapStateToProps(state, ownProps)\n\n      // then\n      expect(result).toStrictEqual({\n        currentUser: currentUser,\n        offerer: { id: 1 },\n        formInitialValues: {\n          bookingEmail: 'john.doe@email.com',\n          managingOffererId: 1,\n        },\n        venueTypes: [],\n        venueLabels: [],\n        withdrawalDetailActive: false,\n      })\n    })\n\n    it('should map venue types for the component', () => {\n      // given\n      const state = {\n        features: {\n          list: [],\n        },\n        data: {\n          offerers: [],\n          userOfferers: [],\n          venues: [],\n          'venue-types': [\n            { id: 'AE', label: 'Patrimoine et tourisme' },\n            { id: 'AF', label: 'Autre' },\n          ],\n          users: [\n            {\n              email: 'john.doe@example.net',\n            },\n          ],\n        },\n      }\n\n      // when\n      const props = mapStateToProps(state, ownProps)\n\n      // then\n      expect(props).toHaveProperty('venueTypes')\n      const venueType = props.venueTypes[0]\n      expect(venueType).toBeInstanceOf(VenueType)\n      expect(props).toMatchObject({\n        venueTypes: [\n          new VenueType({ id: 'AE', label: 'Patrimoine et tourisme' }),\n          new VenueType({ id: 'AF', label: 'Autre' }),\n        ],\n      })\n    })\n\n    it('should map venue labels for the component', () => {\n      // given\n      const state = {\n        features: {\n          list: [],\n        },\n        data: {\n          offerers: [],\n          userOfferers: [],\n          venues: [],\n          'venue-labels': [\n            { id: 'AE', label: \"CAC - Centre d'art contemporain d'intérêt national\" },\n            { id: 'AF', label: \"Ville et Pays d'art et d'histoire\" },\n          ],\n          users: [\n            {\n              email: 'john.doe@example.net',\n            },\n          ],\n        },\n      }\n\n      // when\n      const props = mapStateToProps(state, ownProps)\n\n      // then\n      expect(props).toHaveProperty('venueLabels')\n      const venueLabel = props.venueLabels[0]\n      expect(venueLabel).toBeInstanceOf(VenueLabel)\n      expect(props).toMatchObject({\n        venueLabels: [\n          new VenueLabel({ id: 'AE', label: \"CAC - Centre d'art contemporain d'intérêt national\" }),\n          new VenueLabel({ id: 'AF', label: \"Ville et Pays d'art et d'histoire\" }),\n        ],\n      })\n    })\n  })\n})\n\ndescribe('src | components | pages | VenueContainer | mapDispatchToProps', () => {\n  let dispatch\n  const ownProps = {\n    match: {\n      params: {\n        offererId: 'APEQ',\n      },\n    },\n  }\n\n  beforeEach(() => {\n    dispatch = jest.fn()\n  })\n\n  describe('handleInitialRequest', () => {\n    it('should dispatch action to update existing venue', () => {\n      // when\n      mapDispatchToProps(dispatch, ownProps).handleInitialRequest(jest.fn(), jest.fn())\n\n      // then\n      expect(dispatch.mock.calls[0][0]).toStrictEqual({\n        config: {\n          apiPath: '/offerers/APEQ',\n          handleSuccess: expect.any(Function),\n          method: 'GET',\n          normalizer: {\n            managedVenues: {\n              normalizer: { offers: 'offers' },\n              stateKey: 'venues',\n            },\n          },\n        },\n        type: 'REQUEST_DATA_GET_/OFFERERS/APEQ',\n      })\n\n      expect(dispatch.mock.calls[1][0]).toStrictEqual({\n        config: { apiPath: '/userOfferers/APEQ', method: 'GET' },\n        type: 'REQUEST_DATA_GET_/USEROFFERERS/APEQ',\n      })\n\n      expect(dispatch.mock.calls[2][0]).toStrictEqual({\n        config: { apiPath: '/venue-types', method: 'GET' },\n        type: 'REQUEST_DATA_GET_/VENUE-TYPES',\n      })\n\n      expect(dispatch.mock.calls[3][0]).toStrictEqual({\n        config: { apiPath: '/venue-labels', method: 'GET' },\n        type: 'REQUEST_DATA_GET_/VENUE-LABELS',\n      })\n    })\n  })\n\n  describe('handleSubmitRequest', () => {\n    it('should call patch method with proper params', function () {\n      // given\n      const formValues = {\n        comment: 'Commentaire',\n        address: '3 Place Saint-Michel',\n      }\n\n      const handleFail = jest.fn()\n      const handleSuccess = jest.fn()\n\n      // when\n      mapDispatchToProps(dispatch, ownProps).handleSubmitRequest({\n        formValues,\n        handleFail,\n        handleSuccess,\n      })\n\n      // then\n      expect(dispatch).toHaveBeenCalledWith({\n        config: {\n          apiPath: '/venues/',\n          body: {\n            comment: 'Commentaire',\n            address: '3 Place Saint-Michel',\n            venueTypeId: null,\n            venueLabelId: null,\n          },\n          handleFail: handleFail,\n          handleSuccess: handleSuccess,\n          method: 'POST',\n          normalizer: venueNormalizer,\n        },\n        type: 'REQUEST_DATA_POST_/VENUES/',\n      })\n    })\n  })\n\n  describe('handleSubmitRequestSuccess', () => {\n    it('should dispatch action to display a succes message', () => {\n      // given\n      const state = {\n        features: {\n          list: [],\n        },\n      }\n      const action = {\n        config: {\n          method: 'POST',\n        },\n        payload: {\n          datum: {\n            id: 'TR',\n          },\n        },\n      }\n\n      // when\n      mapDispatchToProps(dispatch, ownProps).handleSubmitRequestSuccess(state, action)\n\n      // then\n      expect(dispatch.mock.calls[0][0]).toStrictEqual({\n        payload: { text: 'Some text', type: 'success' },\n        type: 'SHOW_NOTIFICATION',\n      })\n    })\n  })\n})\n\ndescribe('src | components | pages | VenueContainer | mergeProps', () => {\n  it('should spread stateProps, dispatchProps and ownProps into mergedProps', () => {\n    // given\n    const stateProps = {}\n    const dispatchProps = {\n      handleInitialRequest: () => {},\n    }\n    const ownProps = {\n      match: {\n        params: {},\n      },\n    }\n\n    // when\n    const mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n\n    // then\n    expect(mergedProps).toStrictEqual({\n      match: ownProps.match,\n      handleInitialRequest: expect.any(Function),\n      trackCreateVenue: expect.any(Function),\n    })\n  })\n\n  it('should map a tracking event for creating a venue', () => {\n    // given\n    const stateProps = {}\n    const ownProps = {\n      tracking: {\n        trackEvent: jest.fn(),\n      },\n    }\n\n    // when\n    mergeProps(stateProps, {}, ownProps).trackCreateVenue('RTgfd67')\n\n    // then\n    expect(ownProps.tracking.trackEvent).toHaveBeenCalledWith({\n      action: 'createVenue',\n      name: 'RTgfd67',\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueEdition.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueEditionContainer.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (71). Maximum allowed is 50.',
        line: 38,
        column: 35,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 108,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { requestData } from 'redux-saga-data'\n\nimport { withQueryRouter } from 'components/hocs/with-query-router/withQueryRouter'\nimport withTracking from 'components/hocs/withTracking'\nimport { isFeatureActive } from 'store/features/selectors'\nimport { showNotification } from 'store/reducers/notificationReducer'\nimport { selectOffererById } from 'store/selectors/data/offerersSelectors'\nimport { selectCurrentUser } from 'store/selectors/data/usersSelectors'\nimport { selectVenueLabels } from 'store/selectors/data/venueLabelsSelectors'\nimport { selectVenueById } from 'store/selectors/data/venuesSelectors'\nimport { selectVenueTypes } from 'store/selectors/data/venueTypesSelectors'\nimport { offererNormalizer, venueNormalizer } from 'utils/normalizers'\n\nimport { formatVenuePayload } from '../utils/formatVenuePayload'\nimport VenueLabel from '../ValueObjects/VenueLabel'\nimport VenueType from '../ValueObjects/VenueType'\n\nimport VenueEdition from './VenueEdition'\n\nexport const mapStateToProps = (\n  state,\n  {\n    match: {\n      params: { offererId, venueId },\n    },\n  }\n) => ({\n  currentUser: selectCurrentUser(state),\n  venueTypes: selectVenueTypes(state).map(type => new VenueType(type)),\n  venueLabels: selectVenueLabels(state).map(label => new VenueLabel(label)),\n  venue: selectVenueById(state, venueId),\n  offerer: selectOffererById(state, offererId),\n  withdrawalDetailActive: isFeatureActive(state, 'ENABLE_VENUE_WITHDRAWAL_DETAILS'),\n})\n\nexport const mapDispatchToProps = (\n  dispatch,\n  {\n    match: {\n      params: { offererId, venueId },\n    },\n  }\n) => {\n  return {\n    handleInitialRequest: () => {\n      dispatch(\n        requestData({\n          apiPath: `/offerers/${offererId}`,\n          handleSuccess: () => {\n            dispatch(\n              requestData({\n                apiPath: `/venues/${venueId}`,\n                normalizer: venueNormalizer,\n              })\n            )\n          },\n          normalizer: offererNormalizer,\n        })\n      )\n      dispatch(requestData({ apiPath: `/userOfferers/${offererId}` }))\n      dispatch(requestData({ apiPath: `/venue-types` }))\n      dispatch(requestData({ apiPath: `/venue-labels` }))\n    },\n\n    handleSubmitRequest: ({ formValues, handleFail, handleSuccess }) => {\n      const body = formatVenuePayload(formValues, false)\n\n      dispatch(\n        requestData({\n          apiPath: `/venues/${venueId}`,\n          body: body,\n          handleFail,\n          handleSuccess,\n          method: 'PATCH',\n          normalizer: venueNormalizer,\n        })\n      )\n    },\n\n    handleSubmitRequestFail: ({ payload: { errors } }) => {\n      let text = 'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n      if (errors.global) {\n        text = `${text} ${errors.global[0]}`\n      }\n\n      dispatch(\n        showNotification({\n          text,\n          type: 'error',\n        })\n      )\n    },\n\n    handleSubmitRequestSuccess: (_action, { hasDelayedUpdates }) => {\n      const text = hasDelayedUpdates\n        ? 'Vos modifications ont bien été prises en compte, cette opération peut durer plusieurs minutes'\n        : 'Vos modifications ont bien été prises en compte'\n      dispatch(\n        showNotification({\n          text: text,\n          type: hasDelayedUpdates ? 'pending' : 'success',\n        })\n      )\n    },\n  }\n}\n\nexport const mergeProps = (stateProps, dispatchProps, ownProps) => {\n  return {\n    ...stateProps,\n    ...dispatchProps,\n    ...ownProps,\n    trackModifyVenue: venueId => {\n      ownProps.tracking.trackEvent({ action: 'modifyVenue', name: venueId })\n    },\n  }\n}\n\nexport default compose(\n  withTracking('Venue'),\n  withQueryRouter(),\n  connect(mapStateToProps, mapDispatchToProps, mergeProps)\n)(VenueEdition)\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/AllocineProviderForm/AllocineProviderForm.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/AllocineProviderForm/__specs__/AllocineProviderForm.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (198). Maximum allowed is 150.',
        line: 34,
        column: 47,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 231,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { act, fireEvent, render, screen } from '@testing-library/react'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\nimport ReactTooltip from 'react-tooltip'\n\nimport NotificationContainer from 'components/layout/Notification/NotificationContainer'\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\n\nimport VenueProvidersManagerContainer from '../../VenueProvidersManagerContainer'\n\njest.mock('repository/pcapi/pcapi', () => ({\n  createVenueProvider: jest.fn(),\n  loadProviders: jest.fn(),\n  loadVenueProviders: jest.fn(),\n}))\n\nconst renderVenueProvidersManager = async props => {\n  await act(async () => {\n    await render(\n      <Provider store={configureTestStore()}>\n        <MemoryRouter>\n          <VenueProvidersManagerContainer {...props} />\n          <NotificationContainer />\n          <ReactTooltip html />\n        </MemoryRouter>\n      </Provider>\n    )\n  })\n}\n\ndescribe('components | AllocineProviderForm', () => {\n  let props\n  let provider\n  let createdVenueProvider\n\n  beforeEach(async () => {\n    const venue = {\n      id: 'venueId',\n      managingOffererId: 'managingOffererId',\n      name: 'Le lieu',\n      siret: '12345678901234',\n      departementCode: '30',\n    }\n\n    props = {\n      venue,\n    }\n\n    pcapi.loadVenueProviders.mockResolvedValue([])\n\n    provider = { id: 'providerId', name: 'Allociné' }\n    pcapi.loadProviders.mockResolvedValue([provider])\n    createdVenueProvider = {\n      id: 'venueProviderId',\n      provider,\n      providerId: provider.id,\n      venueId: props.venue.id,\n      venueIdAtOfferProvider: props.venue.siret,\n      lastSyncDate: '2018-01-01T00:00:00Z',\n    }\n    pcapi.createVenueProvider.mockResolvedValue(createdVenueProvider)\n\n    await renderVenueProvidersManager(props)\n  })\n\n  const renderAllocineProviderForm = async () => {\n    const importOffersButton = screen.getByText('Importer des offres')\n    fireEvent.click(importOffersButton)\n    const providersSelect = screen.getByRole('combobox')\n    fireEvent.change(providersSelect, { target: { value: provider.id } })\n  }\n\n  it('should display the price field with minimum value set to 0', async () => {\n    // when\n    await renderAllocineProviderForm()\n\n    // then\n    const priceField = screen.getByLabelText('Prix de vente/place', { exact: false })\n    expect(priceField).toBeInTheDocument()\n    expect(priceField).toHaveAttribute('min', '0')\n    expect(priceField).toHaveAttribute('step', '0.01')\n  })\n\n  it('should display the quantity field with default value set to Illimité', async () => {\n    // when\n    await renderAllocineProviderForm()\n\n    // then\n    const quantityField = screen.getByLabelText(`Nombre de places/séance`)\n    expect(quantityField).toBeInTheDocument()\n    expect(quantityField).toHaveAttribute('min', '0')\n    expect(quantityField).toHaveAttribute('step', '1')\n  })\n\n  it('should display the isDuo checkbox checked by default', async () => {\n    // when\n    await renderAllocineProviderForm()\n\n    // then\n    const isDuoCheckbox = screen.getByLabelText(`Accepter les réservations DUO`)\n    expect(isDuoCheckbox).toBeInTheDocument()\n    expect(isDuoCheckbox).toBeChecked()\n  })\n\n  it('should display an import button disabled by default', async () => {\n    // when\n    await renderAllocineProviderForm()\n\n    // then\n    const offerImportButton = screen.getByRole('button', { name: 'Importer les offres' })\n    expect(offerImportButton).toBeInTheDocument()\n    expect(offerImportButton).toHaveAttribute('type', 'submit')\n    expect(offerImportButton).toBeDisabled()\n  })\n\n  it('should be able to submit when price field is filled', async () => {\n    // given\n    await renderAllocineProviderForm()\n    const offerImportButton = screen.getByRole('button', { name: 'Importer les offres' })\n    const priceField = screen.getByLabelText('Prix de vente/place', { exact: false })\n    const quantityField = screen.getByLabelText('Nombre de places/séance')\n    const isDuoCheckbox = screen.getByLabelText(`Accepter les réservations DUO`)\n\n    // when\n    fireEvent.change(priceField, { target: { value: 10 } })\n    fireEvent.change(quantityField, { target: { value: 5 } })\n    fireEvent.click(isDuoCheckbox)\n    fireEvent.click(offerImportButton)\n\n    // then\n    expect(pcapi.createVenueProvider).toHaveBeenCalledWith({\n      price: 10,\n      quantity: 5,\n      isDuo: false,\n      providerId: provider.id,\n      venueId: props.venue.id,\n    })\n  })\n\n  it('should be able to submit when price field is filled to 0', async () => {\n    // given\n    await renderAllocineProviderForm()\n    const offerImportButton = screen.getByRole('button', { name: 'Importer les offres' })\n    const priceField = screen.getByLabelText('Prix de vente/place', { exact: false })\n\n    // when\n    fireEvent.change(priceField, { target: { value: 0 } })\n    fireEvent.click(offerImportButton)\n\n    // then\n    expect(pcapi.createVenueProvider).toHaveBeenCalledWith({\n      price: 0,\n      quantity: undefined,\n      isDuo: true,\n      providerId: provider.id,\n      venueId: props.venue.id,\n    })\n  })\n\n  it('should be able to submit when price field is filled with a decimal', async () => {\n    // given\n    await renderAllocineProviderForm()\n    const offerImportButton = screen.getByRole('button', { name: 'Importer les offres' })\n    const priceField = screen.getByLabelText('Prix de vente/place', { exact: false })\n\n    // when\n    fireEvent.change(priceField, { target: { value: 0.42 } })\n    fireEvent.click(offerImportButton)\n\n    // then\n    expect(pcapi.createVenueProvider).toHaveBeenCalledWith({\n      price: 0.42,\n      quantity: undefined,\n      isDuo: true,\n      providerId: provider.id,\n      venueId: props.venue.id,\n    })\n  })\n\n  it('should not be able to submit when quantity is filled but price is not', async () => {\n    // given\n    await renderAllocineProviderForm()\n    const offerImportButton = screen.getByRole('button', { name: 'Importer les offres' })\n    const quantityField = screen.getByLabelText('Nombre de places/séance')\n\n    // when\n    fireEvent.change(quantityField, { target: { value: 10 } })\n    fireEvent.click(offerImportButton)\n\n    // then\n    expect(pcapi.createVenueProvider).toHaveBeenCalledTimes(0)\n  })\n\n  it('should display a success notification when venue provider was correctly saved', async () => {\n    // given\n    await renderAllocineProviderForm()\n    const offerImportButton = screen.getByRole('button', { name: 'Importer les offres' })\n    const priceField = screen.getByLabelText('Prix de vente/place', { exact: false })\n    fireEvent.change(priceField, { target: { value: 10 } })\n\n    // when\n    fireEvent.click(offerImportButton)\n\n    // then\n    const successNotification = await screen.findByText('La synchronisation a bien été initiée.')\n    expect(successNotification).toBeInTheDocument()\n  })\n\n  it('should display an error notification if there is something wrong with the server', async () => {\n    // given\n    const apiError = {\n      errors: { global: ['Le prix ne peut pas être négatif'] },\n      status: 400,\n    }\n    pcapi.createVenueProvider.mockRejectedValue(apiError)\n    await renderAllocineProviderForm()\n    const offerImportButton = screen.getByRole('button', { name: 'Importer les offres' })\n    const priceField = screen.getByLabelText('Prix de vente/place', { exact: false })\n\n    // when\n    fireEvent.change(priceField, { target: { value: -10 } })\n    await fireEvent.click(offerImportButton)\n\n    // then\n    const errorNotification = await screen.findByText(apiError.errors.global[0])\n    expect(errorNotification).toBeInTheDocument()\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/ConfirmDialog/ConfirmDialog.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/StocksProviderForm/StocksProviderForm.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/StocksProviderForm/__specs__/StocksProviderForm.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/VenueProviderItem/VenueProviderItem.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/VenueProviderItem/__specs__/VenueProviderItem.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/VenueProvidersManager.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/VenueProvidersManagerContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/__specs__/VenueProvidersManager.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (167). Maximum allowed is 150.',
        line: 30,
        column: 41,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 196,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { act, fireEvent, render, screen, within } from '@testing-library/react'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\n\nimport { DEFAULT_PROVIDER_OPTION } from '../utils/_constants'\nimport VenueProvidersManagerContainer from '../VenueProvidersManagerContainer'\n\njest.mock('repository/pcapi/pcapi', () => ({\n  loadProviders: jest.fn(),\n  loadVenueProviders: jest.fn(),\n}))\n\nconst renderVenueProvidersManager = async props => {\n  await act(async () => {\n    await render(\n      <Provider store={configureTestStore()}>\n        <MemoryRouter>\n          <VenueProvidersManagerContainer {...props} />\n        </MemoryRouter>\n      </Provider>\n    )\n  })\n}\n\ndescribe('src | VenueProvidersManager', () => {\n  let props\n  let providers\n  let venueProviders\n\n  beforeEach(() => {\n    const venue = {\n      id: 'venueId',\n      managingOffererId: 'managingOffererId',\n      name: 'Le lieu',\n      siret: '12345678901234',\n      departementCode: '30',\n    }\n\n    props = {\n      venue,\n    }\n\n    providers = [\n      { id: 'providerId1', name: 'Cinema provider' },\n      { id: 'providerId2', name: 'Movies provider' },\n    ]\n    venueProviders = []\n    pcapi.loadProviders.mockResolvedValue(providers)\n    pcapi.loadVenueProviders.mockResolvedValue(venueProviders)\n  })\n\n  it('should retrieve providers and venue providers when component is mounted', async () => {\n    // when\n    await renderVenueProvidersManager(props)\n\n    // then\n    expect(pcapi.loadProviders).toHaveBeenCalledTimes(1)\n    expect(pcapi.loadVenueProviders).toHaveBeenCalledTimes(1)\n  })\n\n  describe('when venue has providers synchronized', () => {\n    it('should display the list of synchronized providers', async () => {\n      // given\n      venueProviders = [\n        {\n          id: 'AD',\n          nOffers: 0,\n          provider: { id: 'providerId', name: 'FNAC' },\n          venueId: props.venue.id,\n          lastSyncDate: '2018-01-01T10:00:00',\n        },\n      ]\n      pcapi.loadVenueProviders.mockResolvedValue(venueProviders)\n\n      // when\n      await renderVenueProvidersManager(props)\n\n      // then\n      expect(screen.getByText('Fnac')).toBeInTheDocument()\n      expect(screen.queryByText(DEFAULT_PROVIDER_OPTION.displayName)).not.toBeInTheDocument()\n    })\n\n    it('should not show import button', async () => {\n      // Given\n      venueProviders = [\n        {\n          id: 'AD',\n          provider: { id: 'providerId', name: 'TiteLive' },\n          venueId: props.venue.id,\n          lastSyncDate: '2018-01-01T10:00:00',\n        },\n      ]\n      pcapi.loadVenueProviders.mockResolvedValue(venueProviders)\n\n      // when\n      await renderVenueProvidersManager(props)\n\n      // then\n      expect(screen.queryByText('Importer des offres')).not.toBeInTheDocument()\n    })\n  })\n\n  describe('when venue has no providers synchronized', () => {\n    it('should not show import button when no providers are given', async () => {\n      // given\n      providers = []\n      pcapi.loadProviders.mockResolvedValue(providers)\n\n      // when\n      await renderVenueProvidersManager(props)\n\n      // then\n      expect(screen.queryByText('Importer des offres')).not.toBeInTheDocument()\n    })\n\n    it('should show import button when at least one provider is given', async () => {\n      // when\n      await renderVenueProvidersManager(props)\n\n      // then\n      expect(screen.getByText('Importer des offres')).toBeInTheDocument()\n    })\n\n    it('should display a select input to choose a provider on import button click', async () => {\n      // given\n      await renderVenueProvidersManager(props)\n      const importOffersButton = screen.getByText('Importer des offres')\n\n      // when\n      fireEvent.click(importOffersButton)\n\n      // then\n      const providersSelect = screen.getByRole('combobox')\n      expect(providersSelect).toBeInTheDocument()\n      expect(providersSelect).toHaveDisplayValue('Choix de la source')\n      const providersOptions = within(providersSelect).getAllByRole('option')\n      expect(providersOptions[1]).toHaveTextContent(providers[0].name)\n      expect(providersOptions[2]).toHaveTextContent(providers[1].name)\n    })\n\n    it('should not display the stock form when no provider is selected', async () => {\n      // given\n      await renderVenueProvidersManager(props)\n      const importOffersButton = screen.getByText('Importer des offres')\n\n      // when\n      fireEvent.click(importOffersButton)\n\n      // then\n      expect(screen.queryByText('Compte')).not.toBeInTheDocument()\n      expect(screen.queryByText(props.venue.siret)).not.toBeInTheDocument()\n    })\n\n    describe('when selecting a provider', () => {\n      it('should display the allocine form when the user choose Allocine onChange', async () => {\n        // given\n        providers = [{ id: 'providerId', name: 'Allociné', lastSyncDate: '2020-01-01T10:00:00' }]\n        pcapi.loadProviders.mockResolvedValue(providers)\n        await renderVenueProvidersManager(props)\n        const importOffersButton = screen.getByText('Importer des offres')\n        fireEvent.click(importOffersButton)\n        const providersSelect = screen.getByRole('combobox')\n\n        // when\n        fireEvent.change(providersSelect, { target: { value: providers[0].id } })\n\n        // then\n        expect(screen.getByText('Prix de vente/place')).toBeInTheDocument()\n        expect(screen.getByText('Nombre de places/séance')).toBeInTheDocument()\n        expect(screen.getByText('Accepter les réservations DUO')).toBeInTheDocument()\n      })\n\n      it('should display the stock form when the user choose another provider than Allociné', async () => {\n        // given\n        providers = [{ id: 'providerId', name: 'My little provider' }]\n        pcapi.loadProviders.mockResolvedValue(providers)\n        await renderVenueProvidersManager(props)\n        const importOffersButton = screen.getByText('Importer des offres')\n        fireEvent.click(importOffersButton)\n        const providersSelect = screen.getByRole('combobox')\n\n        // when\n        fireEvent.change(providersSelect, { target: { value: providers[0].id } })\n\n        // then\n        expect(screen.getByText('Compte')).toBeInTheDocument()\n        expect(screen.getByText(props.venue.siret)).toBeInTheDocument()\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/utils/__specs__/getRequestErrorStringFromErrors.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/utils/_constants.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/VenueProvidersManager/utils/getRequestErrorStringFromErrors.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/__specs__/VenueEdition.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (333). Maximum allowed is 150.',
        line: 21,
        column: 53,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 353,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (196). Maximum allowed is 150.',
        line: 65,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 260,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (301). Maximum allowed is 300.',
        line: 353,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 354,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { mount, shallow } from 'enzyme'\nimport { createBrowserHistory, createMemoryHistory } from 'history'\nimport React from 'react'\nimport { Form } from 'react-final-form'\nimport { Provider } from 'react-redux'\nimport { Router } from 'react-router-dom'\n\nimport * as usersSelectors from 'store/selectors/data/usersSelectors'\nimport { configureTestStore } from 'store/testUtils'\n\nimport AddressField from '../../fields/LocationFields/AddressField'\nimport LocationFields from '../../fields/LocationFields/LocationFields'\nimport VenueEdition from '../VenueEdition'\n\njest.mock('repository/pcapi/pcapi', () => ({\n  createVenueProvider: jest.fn(),\n  loadProviders: jest.fn().mockResolvedValue([]),\n  loadVenueProviders: jest.fn().mockResolvedValue([]),\n}))\n\ndescribe('src | components | pages | VenueEdition', () => {\n  let push\n  let props\n\n  beforeEach(() => {\n    push = jest.fn()\n    props = {\n      venue: {\n        id: 'CM',\n      },\n      history: {\n        location: {\n          pathname: '/fake',\n        },\n        push: push,\n      },\n      handleInitialRequest: jest.fn(),\n      handleSubmitRequest: jest.fn(),\n      handleSubmitRequestSuccess: jest.fn(),\n      handleSubmitRequestFail: jest.fn(),\n      match: {\n        params: {\n          offererId: 'APEQ',\n          venueId: 'AQYQ',\n        },\n      },\n      offerer: {\n        id: 'BQ',\n        name: 'Maison du chocolat',\n      },\n      query: {\n        changeToReadOnly: jest.fn(),\n        context: jest.fn().mockReturnValue({\n          isCreatedEntity: true,\n          isModifiedEntity: false,\n          readOnly: false,\n        }),\n      },\n      trackModifyVenue: jest.fn(),\n      venueTypes: [],\n      venueLabels: [],\n    }\n  })\n\n  describe('render', () => {\n    it('should render component with default state', () => {\n      // when\n      const wrapper = shallow(<VenueEdition {...props} />)\n\n      // then\n      expect(wrapper.state('isRequestPending')).toBe(false)\n    })\n\n    it('should not render a Form when venue is virtual', () => {\n      // given\n      props.venue.isVirtual = true\n\n      // when\n      const wrapper = shallow(<VenueEdition {...props} />)\n\n      // then\n      const form = wrapper.find(Form)\n      expect(form).toHaveLength(0)\n    })\n\n    describe('when editing', () => {\n      beforeEach(() => {\n        props.location = {\n          search: '?modifie',\n        }\n        props.match = {\n          params: {\n            offererId: 'APEQ',\n            venueId: 'AQYQ',\n          },\n        }\n        props.query.context = () => ({\n          readOnly: false,\n        })\n      })\n\n      it('should render component with correct state values', () => {\n        // when\n        const wrapper = shallow(<VenueEdition {...props} />)\n\n        // then\n        expect(wrapper.state('isRequestPending')).toBe(false)\n      })\n\n      it('should be able to edit address field when venue has no SIRET', async () => {\n        // given\n        jest\n          .spyOn(usersSelectors, 'selectCurrentUser')\n          .mockReturnValue({ currentUser: 'fakeUser', publicName: 'fakeName' })\n\n        props = {\n          ...props,\n          venue: {\n            publicName: 'fake public name',\n            id: 'TR',\n            siret: null,\n          },\n        }\n\n        const store = configureTestStore()\n        const history = createBrowserHistory()\n        history.push(`/structures/AE/lieux/TR?modification`)\n\n        let wrapper = mount(\n          <Provider store={store}>\n            <Router history={history}>\n              <VenueEdition {...props} />\n            </Router>\n          </Provider>\n        )\n\n        let addressField = wrapper\n          .find(LocationFields)\n          .find(AddressField)\n          .find('input.field-address')\n          .first()\n\n        await addressField.simulate('change', { target: { value: 'Addresse de test' } })\n\n        wrapper = wrapper.update()\n\n        addressField = wrapper\n          .find(LocationFields)\n          .find(AddressField)\n          .find('input.field-address')\n          .first()\n\n        // then\n        expect(addressField.prop('value')).toBe('Addresse de test')\n      })\n\n      it('should show apply booking checkbox on all existing offers when booking email field is edited', async () => {\n        // given\n        jest\n          .spyOn(usersSelectors, 'selectCurrentUser')\n          .mockReturnValue({ currentUser: 'fakeUser', publicName: 'fakeName' })\n\n        props = {\n          ...props,\n          venue: {\n            publicName: 'fake public name',\n            id: 'TR',\n            siret: '12345678901234',\n          },\n        }\n\n        const store = configureTestStore()\n        const history = createBrowserHistory()\n        history.push(`/structures/AE/lieux/TR?modification`)\n\n        // when\n        let wrapper = mount(\n          <Provider store={store}>\n            <Router history={history}>\n              <VenueEdition {...props} />\n            </Router>\n          </Provider>\n        )\n\n        // then\n        let applyEmailBookingOnAllOffersLabel = wrapper.find({\n          children:\n            'Utiliser cet email pour me notifier des réservations de toutes les offres déjà postées dans ce lieu.',\n        })\n        expect(applyEmailBookingOnAllOffersLabel).toHaveLength(0)\n        let emailBookingField = wrapper.find('input[name=\"bookingEmail\"]').first()\n\n        emailBookingField.simulate('change', { target: { value: 'newbookingemail@example.com' } })\n\n        wrapper = wrapper.update()\n\n        applyEmailBookingOnAllOffersLabel = wrapper.find({\n          children:\n            'Utiliser cet email pour me notifier des réservations de toutes les offres déjà postées dans ce lieu.',\n        })\n        expect(applyEmailBookingOnAllOffersLabel).toHaveLength(1)\n      })\n    })\n\n    describe('when reading', () => {\n      beforeEach(() => {\n        props.query.context = () => ({\n          isCreatedEntity: false,\n          isModifiedEntity: false,\n          readOnly: true,\n        })\n      })\n\n      it('should render component with correct state values', () => {\n        // when\n        const wrapper = shallow(<VenueEdition {...props} />)\n\n        // then\n        expect(wrapper.state('isRequestPending')).toBe(false)\n      })\n\n      describe('create new offer link', () => {\n        it('should redirect to offer creation page', () => {\n          // given\n          jest\n            .spyOn(usersSelectors, 'selectCurrentUser')\n            .mockReturnValue({ currentUser: 'fakeUser' })\n\n          props.venue = {\n            publicName: 'fake public name',\n            id: 'CM',\n          }\n\n          const store = configureTestStore()\n          const history = createMemoryHistory()\n          history.push('/structures/APEQ/lieux/CM')\n\n          let wrapper = mount(\n            <Provider store={store}>\n              <Router history={history}>\n                <VenueEdition\n                  {...props}\n                  history={history}\n                />\n              </Router>\n            </Provider>\n          )\n          const createOfferLink = wrapper.find({ children: 'Créer une offre' })\n\n          // when\n          createOfferLink.simulate('click', { button: 0 })\n\n          // then\n          expect(`${history.location.pathname}${history.location.search}`).toBe(\n            '/offres/creation?lieu=CM&structure=APEQ'\n          )\n        })\n      })\n    })\n  })\n\n  describe('form Success', () => {\n    describe('handleFormSuccess', () => {\n      describe('when editing a venue', () => {\n        beforeEach(() => {\n          props.query.context = () => ({\n            isCreatedEntity: false,\n            isModifiedEntity: true,\n            readOnly: false,\n          })\n        })\n\n        const action = {\n          config: {\n            apiPath: '/venues/CM',\n            method: 'PATCH',\n          },\n          payload: {\n            datum: {\n              id: 'CM',\n            },\n          },\n        }\n\n        it('should change query to read only null', () => {\n          // given\n          const wrapper = shallow(<VenueEdition {...props} />)\n          const state = wrapper.state()\n\n          // when\n          wrapper.instance().handleFormSuccess(jest.fn())(state, action)\n\n          // then\n          expect(props.query.changeToReadOnly).toHaveBeenCalledWith(null)\n        })\n\n        it('should call handleSubmitRequestSuccess with the right parameters when venue is modified', () => {\n          // given\n          const wrapper = shallow(<VenueEdition {...props} />)\n          const state = wrapper.state()\n\n          // when\n          wrapper.instance().handleFormSuccess(jest.fn(), false)(state, action)\n\n          // then\n          expect(props.handleSubmitRequestSuccess).toHaveBeenCalledWith(\n            {\n              config: {\n                apiPath: '/venues/CM',\n                method: 'PATCH',\n              },\n              payload: {\n                datum: {\n                  id: 'CM',\n                },\n              },\n            },\n            { hasDelayedUpdates: false }\n          )\n        })\n      })\n    })\n  })\n\n  describe('event tracking', () => {\n    it('should track venue update', () => {\n      // given\n      const state = {}\n\n      jest.spyOn(props.query, 'context').mockReturnValue({\n        isCreatedEntity: false,\n        isModifiedEntity: false,\n        readOnly: false,\n      })\n\n      const action = {\n        payload: {\n          datum: {\n            id: 'Ty5645dgfd',\n          },\n        },\n      }\n      const wrapper = shallow(<VenueEdition {...props} />)\n      const formResolver = jest.fn()\n\n      // when\n      wrapper.instance().handleFormSuccess(formResolver)(state, action)\n\n      // then\n      expect(props.trackModifyVenue).toHaveBeenCalledWith('CM')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueEdition/__specs__/VenueEditionContainer.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (124). Maximum allowed is 50.',
        line: 21,
        column: 73,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 144,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (122). Maximum allowed is 50.',
        line: 22,
        column: 31,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 143,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (288). Maximum allowed is 50.',
        line: 146,
        column: 76,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 433,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (188). Maximum allowed is 50.',
        line: 203,
        column: 35,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 390,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (66). Maximum allowed is 50.',
        line: 254,
        column: 43,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 319,
        endColumn: 6,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (69). Maximum allowed is 50.',
        line: 321,
        column: 39,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 389,
        endColumn: 6,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (431). Maximum allowed is 300.',
        line: 332,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 477,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 7,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { venueNormalizer } from 'utils/normalizers'\n\nimport VenueLabel from '../../ValueObjects/VenueLabel'\nimport VenueType from '../../ValueObjects/VenueType'\nimport { mapDispatchToProps, mapStateToProps, mergeProps } from '../VenueEditionContainer'\n\nwindow.scroll = () => {}\n\nconst mockRequestDataCatch = jest.fn()\njest.mock('redux-saga-data', () => {\n  const actualModule = jest.requireActual('redux-saga-data')\n  return {\n    ...actualModule,\n    requestData: config => {\n      mockRequestDataCatch(config)\n      return actualModule.requestData(config)\n    },\n  }\n})\n\ndescribe('src | components | pages | VenueContainer | mapStateToProps', () => {\n  describe('mapStateToProps', () => {\n    let ownProps\n    beforeEach(() => {\n      ownProps = {\n        currentUser: { id: 1 },\n        match: {\n          params: {\n            offererId: 1,\n            venueId: 'WQ',\n          },\n        },\n      }\n    })\n\n    it('should return an object with props', () => {\n      // given\n      const state = {\n        features: {\n          list: [],\n        },\n        data: {\n          offerers: [{ id: 1 }],\n          userOfferers: [{ offererId: 1, rights: 'admin', userId: 1 }],\n          venues: [\n            {\n              id: 'WQ',\n              managingOffererId: 'M4',\n            },\n          ],\n          users: [],\n        },\n      }\n\n      // when\n      const result = mapStateToProps(state, ownProps)\n\n      // then\n      expect(result).toStrictEqual({\n        currentUser: undefined,\n        offerer: { id: 1 },\n        venue: {\n          id: 'WQ',\n          managingOffererId: 'M4',\n        },\n        venueTypes: [],\n        venueLabels: [],\n        withdrawalDetailActive: false,\n      })\n    })\n\n    it('should map venue types for the component', () => {\n      // given\n      const state = {\n        features: {\n          list: [],\n        },\n        data: {\n          offerers: [],\n          userOfferers: [],\n          venues: [],\n          'venue-types': [\n            { id: 'AE', label: 'Patrimoine et tourisme' },\n            { id: 'AF', label: 'Autre' },\n          ],\n          users: [\n            {\n              email: 'john.doe@example.net',\n            },\n          ],\n        },\n      }\n\n      // when\n      const props = mapStateToProps(state, ownProps)\n\n      // then\n      const venueType = props.venueTypes[0]\n      expect(venueType).toBeInstanceOf(VenueType)\n      expect(props).toMatchObject({\n        venueTypes: [\n          new VenueType({ id: 'AE', label: 'Patrimoine et tourisme' }),\n          new VenueType({ id: 'AF', label: 'Autre' }),\n        ],\n      })\n    })\n\n    it('should map venue labels for the component', () => {\n      // given\n      const state = {\n        features: {\n          list: [],\n        },\n        data: {\n          offerers: [],\n          userOfferers: [],\n          venues: [],\n          'venue-labels': [\n            { id: 'AE', label: \"CAC - Centre d'art contemporain d'intérêt national\" },\n            { id: 'AF', label: \"Ville et Pays d'art et d'histoire\" },\n          ],\n          users: [\n            {\n              email: 'john.doe@example.net',\n            },\n          ],\n        },\n      }\n\n      // when\n      const props = mapStateToProps(state, ownProps)\n\n      // then\n      const venueLabel = props.venueLabels[0]\n      expect(venueLabel).toBeInstanceOf(VenueLabel)\n      expect(props).toMatchObject({\n        venueLabels: [\n          new VenueLabel({ id: 'AE', label: \"CAC - Centre d'art contemporain d'intérêt national\" }),\n          new VenueLabel({ id: 'AF', label: \"Ville et Pays d'art et d'histoire\" }),\n        ],\n      })\n    })\n  })\n})\n\ndescribe('src | components | pages | VenueContainer | mapDispatchToProps', () => {\n  let dispatch\n  const ownProps = {\n    match: {\n      params: {\n        offererId: 'APEQ',\n      },\n    },\n    query: {\n      context: () => ({\n        isCreatedEntity: true,\n      }),\n    },\n  }\n\n  beforeEach(() => {\n    dispatch = jest.fn()\n  })\n\n  describe('handleInitialRequest', () => {\n    it('should dispatch action to update existing venue', () => {\n      // when\n      mapDispatchToProps(dispatch, ownProps).handleInitialRequest(jest.fn(), jest.fn())\n\n      // then\n      expect(dispatch.mock.calls[0][0]).toStrictEqual({\n        config: {\n          apiPath: '/offerers/APEQ',\n          handleSuccess: expect.any(Function),\n          method: 'GET',\n          normalizer: {\n            managedVenues: {\n              normalizer: { offers: 'offers' },\n              stateKey: 'venues',\n            },\n          },\n        },\n        type: 'REQUEST_DATA_GET_/OFFERERS/APEQ',\n      })\n\n      expect(dispatch.mock.calls[1][0]).toStrictEqual({\n        config: { apiPath: '/userOfferers/APEQ', method: 'GET' },\n        type: 'REQUEST_DATA_GET_/USEROFFERERS/APEQ',\n      })\n\n      expect(dispatch.mock.calls[2][0]).toStrictEqual({\n        config: { apiPath: '/venue-types', method: 'GET' },\n        type: 'REQUEST_DATA_GET_/VENUE-TYPES',\n      })\n\n      expect(dispatch.mock.calls[3][0]).toStrictEqual({\n        config: { apiPath: '/venue-labels', method: 'GET' },\n        type: 'REQUEST_DATA_GET_/VENUE-LABELS',\n      })\n    })\n  })\n\n  describe('handleSubmitRequest', () => {\n    it('should call patch method with proper params', () => {\n      // given\n      const ownProps = {\n        match: {\n          params: {\n            venueId: 'TR',\n          },\n        },\n        query: {\n          context: () => ({\n            method: 'PATCH',\n            isCreatedEntity: false,\n          }),\n        },\n      }\n\n      const formValues = {\n        comment: 'Commentaire',\n        address: '3 Place Saint-Michel',\n      }\n\n      const handleFail = jest.fn()\n      const handleSuccess = jest.fn()\n\n      // when\n      mapDispatchToProps(dispatch, ownProps).handleSubmitRequest({\n        formValues,\n        handleFail,\n        handleSuccess,\n      })\n\n      // then\n      expect(dispatch).toHaveBeenCalledWith({\n        config: {\n          apiPath: '/venues/TR',\n          body: {\n            comment: 'Commentaire',\n            address: '3 Place Saint-Michel',\n            venueTypeId: null,\n            venueLabelId: null,\n          },\n          handleFail: handleFail,\n          handleSuccess: handleSuccess,\n          method: 'PATCH',\n          normalizer: venueNormalizer,\n        },\n        type: 'REQUEST_DATA_PATCH_/VENUES/TR',\n      })\n    })\n\n    describe('when creating a new venue', () => {\n      let ownProps\n      beforeEach(() => {\n        ownProps = {\n          match: {\n            params: {\n              venueId: 'TR',\n            },\n          },\n          query: {\n            context: () => ({\n              method: 'PATCH',\n              isCreatedEntity: true,\n            }),\n          },\n        }\n      })\n\n      it('should transform the form values into request payload', () => {\n        // given\n        const formValues = {\n          address: '3 Place Saint-Michel',\n          bic: '12345',\n          bookingEmail: 'contact@example.net',\n          city: 'Paris',\n          comment: 'Commentaire',\n          iban: 'BHJ2XRT2C',\n          latitude: '0.0',\n          longitude: '0.0',\n          managingOffererId: 'B45S',\n          name: 'Théatre Saint-Michel',\n          publicName: '',\n          postalCode: '75008',\n          siret: '25687265176',\n          venueTypeId: 'BA',\n          venueLabelId: 'DA',\n        }\n\n        const handleFail = jest.fn()\n        const handleSuccess = jest.fn()\n\n        // when\n        mapDispatchToProps(dispatch, ownProps).handleSubmitRequest({\n          formValues,\n          handleFail,\n          handleSuccess,\n        })\n\n        // then\n        const requestParameters = dispatch.mock.calls[0][0]\n        expect(requestParameters.config.body).toStrictEqual({\n          address: '3 Place Saint-Michel',\n          bookingEmail: 'contact@example.net',\n          city: 'Paris',\n          comment: 'Commentaire',\n          latitude: '0.0',\n          longitude: '0.0',\n          name: 'Théatre Saint-Michel',\n          postalCode: '75008',\n          publicName: '',\n          siret: '25687265176',\n          venueTypeId: 'BA',\n          venueLabelId: 'DA',\n        })\n      })\n    })\n\n    describe('when updating a venue', () => {\n      let ownProps\n      beforeEach(() => {\n        ownProps = {\n          match: {\n            params: {\n              venueId: 'TR',\n            },\n          },\n          query: {\n            context: () => ({\n              method: 'PATCH',\n              isCreatedEntity: false,\n            }),\n          },\n        }\n      })\n\n      it('should filter some information that should not be sent', () => {\n        // given\n        ownProps.query.context = () => ({\n          method: 'PATCH',\n          isCreatedEntity: false,\n        })\n        const formValues = {\n          address: '3 Place Saint-Michel',\n          bic: '12345',\n          bookingEmail: 'contact@example.net',\n          city: 'Paris',\n          comment: '',\n          iban: 'BHJ2XRT2C',\n          latitude: '0.0',\n          longitude: '0.0',\n          managingOffererId: 'B45S',\n          name: 'Théatre Saint-Michel',\n          publicName: '',\n          postalCode: '75008',\n          siret: '25687265176',\n          venueTypeId: 'BA',\n        }\n\n        const handleFail = jest.fn()\n        const handleSuccess = jest.fn()\n\n        // when\n        mapDispatchToProps(dispatch, ownProps).handleSubmitRequest({\n          formValues,\n          handleFail,\n          handleSuccess,\n        })\n\n        // then\n        const requestParameters = dispatch.mock.calls[0][0]\n        expect(requestParameters.config.body).toStrictEqual({\n          address: '3 Place Saint-Michel',\n          bookingEmail: 'contact@example.net',\n          city: 'Paris',\n          comment: '',\n          latitude: '0.0',\n          longitude: '0.0',\n          name: 'Théatre Saint-Michel',\n          publicName: '',\n          postalCode: '75008',\n          siret: '25687265176',\n          venueTypeId: 'BA',\n          venueLabelId: null,\n        })\n      })\n    })\n  })\n\n  describe('handleSubmitRequestSuccess', () => {\n    it('should dispatch action to display a succes message', () => {\n      // given\n      const action = {\n        config: {\n          method: 'POST',\n        },\n        payload: {\n          datum: {\n            id: 'TR',\n          },\n        },\n      }\n\n      // when\n      mapDispatchToProps(dispatch, ownProps).handleSubmitRequestSuccess(action, {\n        hasDelayedUpdates: false,\n      })\n\n      // then\n      expect(dispatch.mock.calls[0][0]).toStrictEqual({\n        payload: { text: 'Vos modifications ont bien été prises en compte', type: 'success' },\n        type: 'SHOW_NOTIFICATION',\n      })\n\n      // when\n      mapDispatchToProps(dispatch, ownProps).handleSubmitRequestSuccess(action, {\n        hasDelayedUpdates: true,\n      })\n\n      // then\n      expect(dispatch.mock.calls[1][0]).toStrictEqual({\n        payload: {\n          text:\n            'Vos modifications ont bien été prises en compte, cette opération peut durer plusieurs minutes',\n          type: 'pending',\n        },\n        type: 'SHOW_NOTIFICATION',\n      })\n    })\n  })\n})\n\ndescribe('src | components | pages | VenueContainer | mergeProps', () => {\n  it('should spread stateProps, dispatchProps and ownProps into mergedProps', () => {\n    // given\n    const stateProps = {}\n    const dispatchProps = {\n      handleInitialRequest: () => {},\n    }\n    const ownProps = {\n      match: {\n        params: {},\n      },\n    }\n\n    // when\n    const mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n\n    // then\n    expect(mergedProps).toStrictEqual({\n      match: ownProps.match,\n      handleInitialRequest: expect.any(Function),\n      trackModifyVenue: expect.any(Function),\n    })\n  })\n\n  it('should map a tracking event for updating a venue', () => {\n    // given\n    const stateProps = {}\n    const ownProps = {\n      tracking: {\n        trackEvent: jest.fn(),\n      },\n    }\n    // when\n    mergeProps(stateProps, {}, ownProps).trackModifyVenue('RTgfd67')\n\n    // then\n    expect(ownProps.tracking.trackEvent).toHaveBeenCalledWith({\n      action: 'modifyVenue',\n      name: 'RTgfd67',\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/VenueLayout.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/__specs__/Notification.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/controls/ModifyOrCancelControl/ModifyOrCancelControl.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/controls/ModifyOrCancelControl/__specs__/ModifyOrCancelControl.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/controls/ReturnOrSubmitControl/ReturnOrSubmitControl.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/controls/ReturnOrSubmitControl/__specs__/ReturnOrSubmitControl.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/BankInformationFields/ApplicationBanner.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/BankInformationFields/BankInformationFields.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/BankInformationFields/BicIbanFields.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/BankInformationFields/__specs__/ApplicationBanner.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/BankInformationFields/__specs__/BankInformation.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (223). Maximum allowed is 150.',
        line: 18,
        column: 43,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 240,
        endColumn: 2,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`queryByText` does not need `await` operator',
        line: 205,
        column: 29,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 205,
        endColumn: 40,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`queryByText` does not need `await` operator',
        line: 206,
        column: 29,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 206,
        endColumn: 40,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { act, render, screen } from '@testing-library/react'\nimport React from 'react'\n\nimport BankInformation from '../BankInformationFields'\n\njest.mock('utils/config', () => ({\n  DEMARCHES_SIMPLIFIEES_VENUE_RIB_UPLOAD_PROCEDURE_URL:\n    'link/to/venue/demarchesSimplifiees/procedure',\n}))\n\nconst renderBankInformation = async props => {\n  return await act(async () => {\n    await render(<BankInformation {...props} />)\n  })\n}\n\ndescribe('src | Venue | BankInformation', () => {\n  const venue = {\n    id: 'AA',\n    name: 'fake venue name',\n  }\n  const offerer = {\n    id: 'BB',\n    name: 'fake offerer name',\n  }\n\n  let props\n  beforeEach(() => {\n    props = { venue, offerer }\n  })\n\n  describe('when no application has been made or application has been refused', () => {\n    describe('when the offerer has no bank information', () => {\n      it('should render instruction block', async () => {\n        // Given\n        props = {\n          ...props,\n          venue: {\n            ...venue,\n            bic: null,\n            iban: null,\n          },\n        }\n\n        // when\n        await renderBankInformation(props)\n\n        // then\n        expect(screen.getByText('Coordonnées bancaires du lieu')).toBeInTheDocument()\n        expect(\n          screen.getByText(\n            'Renseignez vos coordonnées bancaires pour ce lieu pour être remboursé de vos offres éligibles'\n          )\n        ).toBeInTheDocument()\n\n        const createDataLink = screen.getByText('Renseignez les coordonnées bancaires du lieu')\n        expect(createDataLink).toBeInTheDocument()\n        expect(createDataLink).toHaveAttribute(\n          'href',\n          'link/to/venue/demarchesSimplifiees/procedure'\n        )\n\n        const informationLink = screen.getByText('En savoir plus sur les remboursements')\n        expect(informationLink).toBeInTheDocument()\n        expect(informationLink).toHaveAttribute(\n          'href',\n          'https://aide.passculture.app/fr/articles/5096833-calendrier-des-prochains-remboursements'\n        )\n      })\n    })\n\n    describe('when the offerer has bank information', () => {\n      it('should render offerer information', async () => {\n        // Given\n        props = {\n          ...props,\n          venue: {\n            ...venue,\n            bic: null,\n            iban: null,\n          },\n          offerer: {\n            ...offerer,\n            bic: 'offererBic',\n            iban: 'offererIban',\n          },\n        }\n\n        // when\n        await renderBankInformation(props)\n\n        // then\n        expect(screen.getByText(props.offerer.bic)).toBeInTheDocument()\n        expect(screen.getByText(props.offerer.iban)).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('when application has been validated', () => {\n    describe('when venue and offerer banking information are both provided', () => {\n      it('should render venue informations', async () => {\n        // Given\n        props = {\n          ...props,\n          venue: {\n            ...venue,\n            bic: 'venueBic',\n            iban: 'venueIban',\n          },\n          offerer: {\n            ...offerer,\n            bic: 'offererBic',\n            iban: 'offererIban',\n          },\n        }\n\n        // when\n        await renderBankInformation(props)\n\n        // then\n        expect(screen.getByText(props.venue.bic)).toBeInTheDocument()\n        expect(screen.getByText(props.venue.iban)).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('when application is in construction or in instruction', () => {\n    describe('when offerer has no bank informations', () => {\n      it('should render current application detail', async () => {\n        // Given\n        props = {\n          ...props,\n          venue: {\n            ...venue,\n            bic: null,\n            iban: null,\n            demarchesSimplifieesApplicationId: '12',\n          },\n        }\n\n        // when\n        await renderBankInformation(props)\n\n        // then\n        const expectedUrl = `https://www.demarches-simplifiees.fr/dossiers/${props.venue.demarchesSimplifieesApplicationId}`\n        const seeDataLink = screen.getByText('Accéder au dossier')\n        expect(seeDataLink).toBeInTheDocument()\n        expect(seeDataLink).toHaveAttribute('href', expectedUrl)\n      })\n    })\n\n    describe('when offerer has bank informations', () => {\n      it('should render current application detail and offerer bank informations', async () => {\n        // Given\n        props = {\n          ...props,\n          venue: {\n            ...venue,\n            bic: null,\n            iban: null,\n            demarchesSimplifieesApplicationId: '12',\n          },\n          offerer: {\n            ...offerer,\n            bic: 'offererBic',\n            iban: 'offererIban',\n          },\n        }\n\n        // when\n        await renderBankInformation(props)\n\n        // then\n        const expectedUrl = `https://www.demarches-simplifiees.fr/dossiers/${props.venue.demarchesSimplifieesApplicationId}`\n        const seeDataLink = screen.getByText('Accéder au dossier')\n        expect(seeDataLink).toBeInTheDocument()\n        expect(seeDataLink).toHaveAttribute('href', expectedUrl)\n\n        expect(screen.getByText(props.offerer.bic)).toBeInTheDocument()\n        expect(screen.getByText(props.offerer.iban)).toBeInTheDocument()\n      })\n\n      it('should render current application detail when demarchesSimplifieesApplicationId is provided', async () => {\n        // Given\n        props = {\n          ...props,\n          venue: {\n            ...venue,\n            bic: null,\n            iban: null,\n            demarchesSimplifieesApplicationId: '12',\n          },\n        }\n\n        // when\n        await renderBankInformation(props)\n\n        // then\n        const expectedUrl = `https://www.demarches-simplifiees.fr/dossiers/${props.venue.demarchesSimplifieesApplicationId}`\n        const seeDataLink = screen.getByText('Accéder au dossier')\n        expect(seeDataLink).toBeInTheDocument()\n        expect(seeDataLink).toHaveAttribute('href', expectedUrl)\n\n        expect(await screen.queryByText('BIC')).not.toBeInTheDocument()\n        expect(await screen.queryByText('IBAN')).not.toBeInTheDocument()\n      })\n\n      it('should render current application detail and offerer bank informations when both presents in props', async () => {\n        // Given\n        props = {\n          ...props,\n          venue: {\n            ...venue,\n            bic: null,\n            iban: null,\n            demarchesSimplifieesApplicationId: '12',\n          },\n          offerer: {\n            ...offerer,\n            bic: 'offererBic',\n            iban: 'offererIban',\n          },\n        }\n\n        // when\n        await renderBankInformation(props)\n\n        // then\n        const expectedUrl = `https://www.demarches-simplifiees.fr/dossiers/${props.venue.demarchesSimplifieesApplicationId}`\n        const seeDataLink = screen.getByText('Accéder au dossier')\n        expect(seeDataLink).toBeInTheDocument()\n        expect(seeDataLink).toHaveAttribute('href', expectedUrl)\n\n        expect(screen.getByText(props.offerer.bic)).toBeInTheDocument()\n        expect(screen.getByText(props.offerer.iban)).toBeInTheDocument()\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/BankInformationFields/__specs__/BicIbanFields.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/IdentifierFields/IdentifierFields.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: "Method 'render' has too many lines (197). Maximum allowed is 150.",
        line: 101,
        column: 3,
        nodeType: 'MethodDefinition',
        messageId: 'exceed',
        endLine: 297,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (303). Maximum allowed is 300.',
        line: 321,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 325,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      'import classnames from \'classnames\'\nimport PropTypes from \'prop-types\'\nimport React, { PureComponent } from \'react\'\nimport { Field } from \'react-final-form\'\nimport { removeWhitespaces } from \'react-final-form-utils\'\nimport ReactTooltip from \'react-tooltip\'\n\nimport CheckboxField from \'components/layout/form/fields/CheckboxField\'\nimport HiddenField from \'components/layout/form/fields/HiddenField\'\nimport TextareaField from \'components/layout/form/fields/TextareaField\'\nimport TextField from \'components/layout/form/fields/TextField\'\nimport Icon from \'components/layout/Icon\'\n\nimport { formatSiret } from \'../../siret/formatSiret\'\nimport VenueLabel from \'../../ValueObjects/VenueLabel\'\nimport VenueType from \'../../ValueObjects/VenueType\'\n\nimport getLabelFromList from \'./utils/getLabelFromList\'\nimport siretValidate from \'./validators/siretValidate\'\n\nconst parseSiret = value => {\n  return value.replace(/[^[0-9]/g, \'\')\n}\n\n/**\n * @debt standard "Annaëlle: Composant de classe à migrer en fonctionnel"\n */\nclass IdentifierFields extends PureComponent {\n  componentDidUpdate() {\n    ReactTooltip.rebuild()\n  }\n\n  /* eslint-disable react/no-unstable-nested-components */\n  handleRenderValue = (fieldReadOnlyBecauseFrozenFormSiret, readOnly) => () => {\n    if (readOnly) {\n      return null\n    }\n    if (fieldReadOnlyBecauseFrozenFormSiret) {\n      return (\n        <span\n          className="button"\n          data-place="bottom"\n          data-tip="<p>Il n’est pas possible de modifier le nom, l’addresse et la géolocalisation du lieu quand un siret est renseigné.</p>"\n          data-type="info"\n        >\n          <Icon svg="picto-info" />\n        </span>\n      )\n    }\n    return (\n      <span\n        className="button"\n        data-place="bottom"\n        data-tip="<div><p>Saisissez ici le SIRET du lieu lié à votre structure pour retrouver ses informations automatiquement.</p>\n        <p>Si les informations ne correspondent pas au SIRET saisi, <a href=\'mailto:support@passculture.app?subject=Question%20SIRET\'> contactez notre équipe</a>.</p></div>"\n        data-type="info"\n      >\n        <Icon svg="picto-info" />\n      </span>\n    )\n  }\n\n  /* eslint-disable react/no-unstable-nested-components */\n  handleRender = readOnly => () => {\n    if (readOnly) {\n      return null\n    }\n    return (\n      <span\n        className="button"\n        data-place="bottom"\n        data-tip="<p>Cette adresse recevra les e-mails de notification de réservation (sauf si une adresse différente est saisie lors de la création d’une offre)</p>"\n        data-type="info"\n      >\n        <Icon svg="picto-info" />\n      </span>\n    )\n  }\n\n  commentValidate = comment => {\n    const { formSiret } = this.props\n\n    const formatedSiret = removeWhitespaces(formSiret)\n\n    if (formatedSiret && formatedSiret.length === 14) {\n      return \'\'\n    }\n    if (comment === undefined || comment === \'\') {\n      return \'Ce champ est obligatoire\'\n    }\n    return \'\'\n  }\n\n  venueTypeValidate = venueType => {\n    if (venueType === undefined || venueType === \'\') {\n      return \'Ce champ est obligatoire\'\n    }\n    return \'\'\n  }\n\n  render() {\n    const {\n      fieldReadOnlyBecauseFrozenFormSiret,\n      initialSiret,\n      isCreatedEntity,\n      isDirtyFieldBookingEmail,\n      readOnly,\n      venueLabels,\n      venueLabelId,\n      venueTypes,\n      venueTypeId,\n    } = this.props\n\n    const siretLabel = isCreatedEntity\n      ? \'SIRET du lieu qui accueille vos offres (si applicable) : \'\n      : \'SIRET : \'\n\n    const venueTypeLabel = getLabelFromList(venueTypes, venueTypeId)\n    const venueLabelText = getLabelFromList(venueLabels, venueLabelId)\n\n    return (\n      <div className="section identifier-field-section">\n        <h2 className="main-list-title">\n          {\'Informations lieu\'}\n          {!readOnly && (\n            <span className="required-fields-hint">\n              Les champs marqués d’un \n              {\' \'}\n              <span className="required-legend">\n                *\n              </span>\n              {\' \'}\n              sont obligatoires\n            </span>\n          )}\n        </h2>\n        <div className="field-group">\n          {isCreatedEntity && <HiddenField name="managingOffererId" />}\n          <TextField\n            format={formatSiret}\n            label={siretLabel}\n            name="siret"\n            parse={parseSiret}\n            readOnly={readOnly || initialSiret !== null}\n            renderValue={this.handleRenderValue(fieldReadOnlyBecauseFrozenFormSiret, readOnly)}\n            type="siret"\n            validate={initialSiret ? undefined : siretValidate}\n          />\n          <TextField\n            label="Nom du lieu : "\n            name="name"\n            readOnly={readOnly || fieldReadOnlyBecauseFrozenFormSiret}\n            required\n          />\n          <TextField\n            label="Nom d’usage du lieu : "\n            name="publicName"\n            readOnly={readOnly}\n          />\n          <TextField\n            label="E-mail : "\n            name="bookingEmail"\n            readOnly={readOnly}\n            renderValue={this.handleRender(readOnly)}\n            required\n            type="email"\n          />\n          {!isCreatedEntity && !readOnly && isDirtyFieldBookingEmail && (\n            <CheckboxField\n              checked={false}\n              id="isEmailAppliedOnAllOffers"\n              label="Utiliser cet email pour me notifier des réservations de toutes les offres déjà postées dans ce lieu."\n              labelAligned\n              name="isEmailAppliedOnAllOffers"\n              readOnly\n            />\n          )}\n\n          <TextareaField\n            label="Commentaire (si pas de SIRET) : "\n            name="comment"\n            readOnly={readOnly}\n            rows={1}\n            validate={this.commentValidate}\n          />\n          <div\n            className={classnames(\'field field-select is-label-aligned\', {\n              readonly: readOnly,\n            })}\n          >\n            <div className="field-label">\n              <label htmlFor="venue-type">\n                Type de lieu :\n                {\' \'}\n              </label>\n              <span className="field-asterisk">\n                *\n              </span>\n            </div>\n\n            <div className="field-control">\n              {!readOnly ? (\n                <div className="control control-select">\n                  <div\n                    className={classnames(\'select\', {\n                      readonly: readOnly,\n                    })}\n                  >\n                    <Field\n                      component="select"\n                      disabled={readOnly}\n                      id="venue-type"\n                      name="venueTypeId"\n                      required\n                      validate={this.venueTypeValidate}\n                    >\n                      <option value="">\n                        Choisissez un type de lieu dans la liste\n                      </option>\n                      {venueTypes.map(venueType => (\n                        <option\n                          key={`venue-type-${venueType.id}`}\n                          value={venueType.id}\n                        >\n                          {venueType.label}\n                        </option>\n                      ))}\n                    </Field>\n                  </div>\n                </div>\n              ) : (\n                <div\n                  className="venue-type-label"\n                  id="venue-type"\n                >\n                  <span>\n                    {venueTypeLabel}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n          <div\n            className={classnames(\'field field-select is-label-aligned\', {\n              readonly: readOnly,\n            })}\n          >\n            <div className="field-label">\n              <label htmlFor="venue-label">\n                Label du lieu :\n              </label>\n            </div>\n\n            <div className="field-control">\n              {!readOnly ? (\n                <div className="control control-select">\n                  <div\n                    className={classnames(\'select\', {\n                      readonly: readOnly,\n                    })}\n                  >\n                    <Field\n                      component="select"\n                      disabled={readOnly}\n                      id="venue-label"\n                      name="venueLabelId"\n                    >\n                      <option value="">\n                        Choisissez un label dans la liste\n                      </option>\n                      {venueLabels.map(venueLabel => (\n                        <option\n                          key={`venue-label-${venueLabel.id}`}\n                          value={venueLabel.id}\n                        >\n                          {venueLabel.label}\n                        </option>\n                      ))}\n                    </Field>\n                  </div>\n                </div>\n              ) : (\n                <div\n                  className="venue-label-label"\n                  id="venue-label"\n                >\n                  <span>\n                    {venueLabelText}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nIdentifierFields.defaultProps = {\n  fieldReadOnlyBecauseFrozenFormSiret: false,\n  formSiret: null,\n  initialSiret: null,\n  isCreatedEntity: false,\n  isDirtyFieldBookingEmail: false,\n  readOnly: true,\n  venueLabelId: null,\n  venueTypeId: null,\n}\n\nIdentifierFields.propTypes = {\n  fieldReadOnlyBecauseFrozenFormSiret: PropTypes.bool,\n  formSiret: PropTypes.string,\n  initialSiret: PropTypes.string,\n  isCreatedEntity: PropTypes.bool,\n  isDirtyFieldBookingEmail: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  venueLabelId: PropTypes.string,\n  venueLabels: PropTypes.arrayOf(PropTypes.instanceOf(VenueLabel)).isRequired,\n  venueTypeId: PropTypes.string,\n  venueTypes: PropTypes.arrayOf(PropTypes.instanceOf(VenueType)).isRequired,\n}\n\nexport default IdentifierFields\n',
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/IdentifierFields/__specs__/IdentifierFields.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (540). Maximum allowed is 150.',
        line: 13,
        column: 74,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 552,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (521). Maximum allowed is 150.',
        line: 31,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 551,
        endColumn: 4,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (22). Maximum allowed is 15.',
        line: 32,
        column: 95,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 75,
        endColumn: 6,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (462). Maximum allowed is 300.',
        line: 362,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 553,
        endColumn: 1,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 377,
        column: 24,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 377,
        endColumn: 64,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 392,
        column: 24,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 392,
        endColumn: 64,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 403,
        column: 34,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 417,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 415,
        column: 26,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 415,
        endColumn: 66,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 421,
        column: 42,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 435,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 432,
        column: 26,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 432,
        endColumn: 66,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 472,
        column: 24,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 472,
        endColumn: 65,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 492,
        column: 24,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 492,
        endColumn: 65,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 505,
        column: 34,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 524,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 522,
        column: 26,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 522,
        endColumn: 67,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 528,
        column: 36,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 547,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 544,
        column: 26,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 544,
        endColumn: 67,
      },
    ],
    errorCount: 0,
    warningCount: 16,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { shallow } from 'enzyme'\nimport React from 'react'\nimport { Field } from 'react-final-form'\n\nimport TextareaField from 'components/layout/form/fields/TextareaField'\nimport TextField from 'components/layout/form/fields/TextField'\n\nimport VenueLabel from '../../../ValueObjects/VenueLabel'\nimport VenueType from '../../../ValueObjects/VenueType'\nimport IdentifierFields from '../IdentifierFields'\n\ndescribe('src | components | pages | Venue | fields | IdentifierFields', () => {\n  let props\n\n  beforeEach(() => {\n    props = {\n      fieldReadOnlyBecauseFrozenFormSiret: true,\n      formSiret: 'form siret',\n      initialSiret: 'form siret',\n      isCreatedEntity: true,\n      isModifiedEntity: true,\n      readOnly: true,\n      venueTypes: [],\n      venueTypeId: null,\n      venueLabels: [],\n      venueLabelId: null,\n    }\n  })\n\n  describe('render', () => {\n    it('should display four TextField and one TextAreaField components with the right props', () => {\n      // given\n      const props = {\n        fieldReadOnlyBecauseFrozenFormSiret: false,\n        initialSiret: null,\n        isCreatedEntity: true,\n        isModifiedEntity: true,\n        readOnly: true,\n        venueTypes: [],\n        venueLabels: [],\n      }\n\n      // when\n      const wrapper = shallow(<IdentifierFields {...props} />)\n\n      // then\n      const mainListTitle = wrapper.find('.main-list-title')\n      expect(mainListTitle).toHaveLength(1)\n      expect(mainListTitle.text()).toBe('Informations lieu')\n\n      const textFields = wrapper.find(TextField)\n      expect(textFields).toHaveLength(4)\n\n      const textareaField = wrapper.find(TextareaField)\n      expect(textareaField).toHaveLength(1)\n\n      expect(textFields.at(0).prop('name')).toBe('siret')\n      expect(textFields.at(0).prop('required')).toBe(false)\n\n      expect(textFields.at(1).prop('label')).toBe('Nom du lieu : ')\n      expect(textFields.at(1).prop('name')).toBe('name')\n      expect(textFields.at(1).prop('required')).toBe(true)\n\n      expect(textFields.at(2).prop('label')).toBe('Nom d’usage du lieu : ')\n      expect(textFields.at(2).prop('name')).toBe('publicName')\n      expect(textFields.at(2).prop('required')).toBe(false)\n\n      expect(textFields.at(3).prop('label')).toBe('E-mail : ')\n      expect(textFields.at(3).prop('name')).toBe('bookingEmail')\n      expect(textFields.at(3).prop('required')).toBe(true)\n\n      expect(textareaField.at(0).prop('label')).toBe('Commentaire (si pas de SIRET) : ')\n      expect(textareaField.at(0).prop('name')).toBe('comment')\n    })\n\n    describe('siret text field', () => {\n      it('siret TextField can be edited when mode is not readOnly and there is no initial siret', () => {\n        // given\n        const props = {\n          isCreatedEntity: true,\n          isModifiedEntity: true,\n          initialSiret: null,\n          readOnly: false,\n          venueTypes: [],\n          venueLabels: [],\n        }\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const textFields = wrapper.find(TextField)\n        expect(textFields.at(0).prop('name')).toBe('siret')\n        expect(textFields.at(0).prop('readOnly')).toBe(false)\n      })\n\n      it('siret TextField cannot be edited when mode is read only', () => {\n        // given\n        const props = {\n          isCreatedEntity: true,\n          isModifiedEntity: true,\n          readOnly: true,\n          venueTypes: [],\n          venueLabels: [],\n        }\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const textFields = wrapper.find(TextField)\n        expect(textFields.at(0).prop('name')).toBe('siret')\n        expect(textFields.at(0).prop('readOnly')).toBe(true)\n      })\n\n      it('proper siret label is returned when isCreatedEntity is true', () => {\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const siretField = wrapper.find(TextField).at(0)\n        expect(siretField.prop('label')).toStrictEqual(\n          'SIRET du lieu qui accueille vos offres (si applicable) : '\n        )\n      })\n\n      it('proper siret label is returned when isCreatedEntity is false', () => {\n        // given\n        const props = {\n          isCreatedEntity: false,\n          isModifiedEntity: true,\n          venueTypes: [],\n          venueLabels: [],\n        }\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const siretField = wrapper.find(TextField).at(0)\n        expect(siretField.prop('label')).toStrictEqual('SIRET : ')\n      })\n    })\n\n    describe('name text field', () => {\n      it('name TextField can be edited when mode is not readOnly and fieldReadOnlyBecauseFrozenFormSiretdisplay is false', () => {\n        // given\n        const props = {\n          isCreatedEntity: true,\n          isModifiedEntity: true,\n          fieldReadOnlyBecauseFrozenFormSiret: false,\n          readOnly: false,\n          venueTypes: [],\n          venueLabels: [],\n        }\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const textFields = wrapper.find(TextField)\n        expect(textFields.at(1).prop('name')).toBe('name')\n        expect(textFields.at(1).prop('readOnly')).toBe(false)\n      })\n\n      it('name TextField cannot be edited when mode is read only', () => {\n        // given\n        const props = {\n          isCreatedEntity: true,\n          isModifiedEntity: true,\n          readOnly: true,\n          venueTypes: [],\n          venueLabels: [],\n        }\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const textFields = wrapper.find(TextField)\n        expect(textFields.at(1).prop('name')).toBe('name')\n        expect(textFields.at(1).prop('readOnly')).toBe(true)\n      })\n\n      it('name TextField cannot be edited when fieldReadOnlyBecauseFrozenFormSiretdisplay is tue', () => {\n        // given\n        const props = {\n          isCreatedEntity: true,\n          isModifiedEntity: true,\n          fieldReadOnlyBecauseFrozenFormSiretdisplay: true,\n          venueTypes: [],\n          venueLabels: [],\n        }\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const textFields = wrapper.find(TextField)\n        expect(textFields.at(1).prop('name')).toBe('name')\n        expect(textFields.at(1).prop('readOnly')).toBe(true)\n      })\n    })\n\n    describe('publicName text field', () => {\n      it('publicName TextField can be edited when mode is not readOnly', () => {\n        // given\n        const props = {\n          isCreatedEntity: true,\n          isModifiedEntity: true,\n          fieldReadOnlyBecauseFrozenFormSiret: false,\n          readOnly: false,\n          venueTypes: [],\n          venueLabels: [],\n        }\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const textFields = wrapper.find(TextField)\n        expect(textFields.at(2).prop('name')).toBe('publicName')\n        expect(textFields.at(2).prop('readOnly')).toBe(false)\n      })\n\n      it('publicName TextField cannot be edited when mode is read only', () => {\n        // given\n        const props = {\n          isCreatedEntity: true,\n          isModifiedEntity: true,\n          readOnly: true,\n          venueTypes: [],\n          venueLabels: [],\n        }\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const textFields = wrapper.find(TextField)\n        expect(textFields.at(2).prop('name')).toBe('publicName')\n        expect(textFields.at(2).prop('readOnly')).toBe(true)\n      })\n    })\n\n    describe('email text field', () => {\n      it('email TextField can be edited when mode is not readOnly', () => {\n        // given\n        const props = {\n          isCreatedEntity: true,\n          isModifiedEntity: true,\n          fieldReadOnlyBecauseFrozenFormSiret: false,\n          readOnly: false,\n          venueTypes: [],\n          venueLabels: [],\n        }\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const textFields = wrapper.find(TextField)\n        expect(textFields.at(3).prop('name')).toBe('bookingEmail')\n        expect(textFields.at(3).prop('readOnly')).toBe(false)\n      })\n\n      it('email TextField cannot be edited when mode is read only', () => {\n        // given\n        const props = {\n          isCreatedEntity: true,\n          isModifiedEntity: true,\n          readOnly: true,\n          venueTypes: [],\n          venueLabels: [],\n        }\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const textFields = wrapper.find(TextField)\n        expect(textFields.at(3).prop('name')).toBe('bookingEmail')\n        expect(textFields.at(3).prop('readOnly')).toBe(true)\n      })\n    })\n\n    describe('comment text area field', () => {\n      it('comment text area field can be edited when mode is not readOnly', () => {\n        // given\n        const props = {\n          isCreatedEntity: true,\n          isModifiedEntity: true,\n          readOnly: false,\n          venueTypes: [],\n          venueLabels: [],\n        }\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const textareaField = wrapper.find(TextareaField)\n        expect(textareaField.at(0).prop('name')).toBe('comment')\n        expect(textareaField.at(0).prop('readOnly')).toBe(false)\n      })\n\n      it('comment text area field cannot be edited when mode is read only', () => {\n        // given\n        const props = {\n          isCreatedEntity: true,\n          isModifiedEntity: true,\n          readOnly: true,\n          venueTypes: [],\n          venueLabels: [],\n        }\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const textareaField = wrapper.find(TextareaField)\n        expect(textareaField.at(0).prop('name')).toBe('comment')\n        expect(textareaField.at(0).prop('readOnly')).toBe(true)\n      })\n\n      it('should not validate comment field when no siret have been provided', () => {\n        // given\n        props.formSiret = null\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const commentField = wrapper.find(TextareaField)\n        expect(commentField.prop('validate')()).toBe('Ce champ est obligatoire')\n      })\n\n      it('should not validate empty comment field when siret length does not match 14 characters', () => {\n        // given\n        props.formSiret = 'AAA'\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const commentField = wrapper.find(TextareaField)\n        expect(commentField.prop('validate')()).toBe('Ce champ est obligatoire')\n      })\n\n      it('should validate empty comment field when siret is provided and valid', () => {\n        // given\n        props.formSiret = '41816609600068'\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const commentField = wrapper.find(TextareaField)\n        expect(commentField.prop('validate')()).toBe('')\n      })\n    })\n\n    describe('type of venue field', () => {\n      describe('when the form is in edition mode', () => {\n        it('should be editable', () => {\n          // Given\n          props.readOnly = false\n          props.venueTypes = [new VenueType({ id: 'A1', label: \"Centre d'art et d'essais\" })]\n\n          // When\n          const wrapper = shallow(<IdentifierFields {...props} />)\n\n          // Then\n          const selectField = wrapper\n            .find(Field)\n            .findWhere(node => node.prop('id') === 'venue-type')\n          expect(selectField.prop('disabled')).toBe(false)\n        })\n\n        it('should have a list of options with venue types', () => {\n          // Given\n          props.readOnly = false\n          props.venueTypes = [new VenueType({ id: 'A1', label: \"Centre d'art et d'essais\" })]\n\n          // When\n          const wrapper = shallow(<IdentifierFields {...props} />)\n\n          // Then\n          const selectField = wrapper\n            .find(Field)\n            .findWhere(node => node.prop('id') === 'venue-type')\n          expect(selectField.prop('component')).toBe('select')\n\n          const venueTypeOptions = wrapper.find('option')\n          expect(venueTypeOptions.at(0).text()).toBe('Choisissez un type de lieu dans la liste')\n          expect(venueTypeOptions.at(1).text()).toBe(\"Centre d'art et d'essais\")\n        })\n      })\n\n      describe('when the form is in display mode', () => {\n        describe('when no venue type has been chosen', () => {\n          it('should not exist', () => {\n            // Given\n            props.readOnly = true\n            props.venueTypeId = null\n            props.venueTypes = [new VenueType({ id: 'A1', label: \"Centre d'art et d'essais\" })]\n\n            // When\n            const wrapper = shallow(<IdentifierFields {...props} />)\n\n            // Then\n            const selectField = wrapper\n              .find(Field)\n              .findWhere(node => node.prop('id') === 'venue-type')\n            expect(selectField).toHaveLength(0)\n          })\n        })\n\n        describe('when venue type is defined', () => {\n          it('should display the label', () => {\n            // Given\n            props.readOnly = true\n            props.venueTypeId = 'A1'\n            props.venueTypes = [new VenueType({ id: 'A1', label: \"Centre d'art et d'essais\" })]\n\n            // When\n            const wrapper = shallow(<IdentifierFields {...props} />)\n\n            // Then\n            const venueTypeLabel = wrapper\n              .findWhere(node => node.prop('id') === 'venue-type')\n              .find('span')\n            expect(venueTypeLabel.text()).toBe(\"Centre d'art et d'essais\")\n          })\n        })\n      })\n\n      it('should not validate select field when no venue type have been selected', () => {\n        // given\n        props.readOnly = false\n\n        // when\n        const wrapper = shallow(<IdentifierFields {...props} />)\n\n        // then\n        const selectField = wrapper.find(Field).findWhere(node => node.prop('id') === 'venue-type')\n        expect(selectField.prop('validate')()).toBe('Ce champ est obligatoire')\n        const venueTypeOptions = wrapper.find('option')\n        expect(venueTypeOptions.at(0).text()).toBe('Choisissez un type de lieu dans la liste')\n      })\n    })\n\n    describe('label of venue field', () => {\n      describe('when the form is in edition mode', () => {\n        it('should be editable', () => {\n          // Given\n          props.readOnly = false\n          props.venueLabels = [\n            new VenueLabel({\n              id: 'A1',\n              label: \"CAC - Centre d'art contemporain d'intérêt national\",\n            }),\n          ]\n\n          // When\n          const wrapper = shallow(<IdentifierFields {...props} />)\n\n          // Then\n          const selectField = wrapper\n            .find(Field)\n            .findWhere(node => node.prop('id') === 'venue-label')\n          expect(selectField.prop('disabled')).toBe(false)\n        })\n\n        it('should have a list of options with venue labels', () => {\n          // Given\n          props.readOnly = false\n          props.venueLabels = [\n            new VenueLabel({\n              id: 'A1',\n              label: \"CAC - Centre d'art contemporain d'intérêt national\",\n            }),\n          ]\n\n          // When\n          const wrapper = shallow(<IdentifierFields {...props} />)\n\n          // Then\n          const selectField = wrapper\n            .find(Field)\n            .findWhere(node => node.prop('id') === 'venue-label')\n          expect(selectField.prop('component')).toBe('select')\n\n          const venueLabelOptions = selectField.find('option')\n          expect(venueLabelOptions.at(0).text()).toBe('Choisissez un label dans la liste')\n          expect(venueLabelOptions.at(1).text()).toBe(\n            \"CAC - Centre d'art contemporain d'intérêt national\"\n          )\n        })\n      })\n\n      describe('when the form is in display mode', () => {\n        describe('when no venue label has been chosen', () => {\n          it('should not exist', () => {\n            // Given\n            props.readOnly = true\n            props.venueLabelId = null\n            props.venueLabels = [\n              new VenueLabel({\n                id: 'A1',\n                label: \"CAC - Centre d'art contemporain d'intérêt national\",\n              }),\n            ]\n\n            // When\n            const wrapper = shallow(<IdentifierFields {...props} />)\n\n            // Then\n            const selectField = wrapper\n              .find(Field)\n              .findWhere(node => node.prop('id') === 'venue-label')\n            expect(selectField).toHaveLength(0)\n          })\n        })\n\n        describe('when venue label is defined', () => {\n          it('should be disabled', () => {\n            // Given\n            props.readOnly = true\n            props.venueLabelId = 'A1'\n            props.venueLabels = [\n              new VenueLabel({\n                id: 'A1',\n                label: \"CAC - Centre d'art contemporain d'intérêt national\",\n              }),\n            ]\n\n            // When\n            const wrapper = shallow(<IdentifierFields {...props} />)\n\n            // Then\n            const venueLabelText = wrapper\n              .findWhere(node => node.prop('id') === 'venue-label')\n              .find('span')\n            expect(venueLabelText.text()).toBe(\"CAC - Centre d'art contemporain d'intérêt national\")\n          })\n        })\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/IdentifierFields/decorators/bindGetSiretInformationToSiret.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/IdentifierFields/utils/__specs__/getLabelFromList.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/IdentifierFields/utils/getLabelFromList.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/IdentifierFields/validators/siretValidate.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/AddressField.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/LocationFields.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/LocationViewer.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/__specs__/AddressField.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/__specs__/LocationFields.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/__specs__/LocationViewer.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/decorators/bindGetSuggestionsToLatitude.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/decorators/bindGetSuggestionsToLongitude.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/selectors/getSuggestionsFromAddressAndMaxSuggestions.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/selectors/getSuggestionsFromLatitudeAndLongitude.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/utils/__specs__/sanitizeCoordinates.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (73). Maximum allowed is 50.',
        line: 3,
        column: 74,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 75,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import sanitizeCoordinates from '../sanitizeCoordinates'\n\ndescribe('components | pages | Venue | GeoFields | sanitizeCoordinates', () => {\n  it('should return 0 with invalid input', () => {\n    // given\n    let input = 'ABC'\n    // when\n    let result = sanitizeCoordinates(input)\n    // then\n    expect(result).toStrictEqual(0)\n  })\n  it('should return a number when given an int', () => {\n    // given\n    let input = 32\n    // when\n    let result = sanitizeCoordinates(input)\n    // then\n    expect(result).toStrictEqual(input)\n    expect(typeof result).toBe('number')\n  })\n  it('should return a number when given a float', () => {\n    // given\n    let input = 32.2\n    // when\n    let result = sanitizeCoordinates(input)\n    // then\n    expect(result).toStrictEqual(input)\n    expect(typeof result).toBe('number')\n  })\n  it('should return a number when string representing a float', () => {\n    // given\n    let input = '32.2'\n    // when\n    let result = sanitizeCoordinates(input)\n    // then\n    expect(result).toStrictEqual(32.2)\n    expect(typeof result).toBe('number')\n  })\n  it('should translate french notation (coma) to english (dot)', () => {\n    // given\n    let input = '32,2'\n    // when\n    let result = sanitizeCoordinates(input)\n    // then\n    expect(result).toStrictEqual(32.2)\n    expect(typeof result).toBe('number')\n  })\n  it('should ignore and remove special chars', () => {\n    // given\n    let input = '32;2'\n    // when\n    let result = sanitizeCoordinates(input)\n    // then\n    expect(result).toStrictEqual(322)\n    expect(typeof result).toBe('number')\n  })\n  it('should return negative value for negative string value with dot', () => {\n    // given\n    let input = '-32.2'\n    // when\n    let result = sanitizeCoordinates(input)\n    // then\n    expect(result).toStrictEqual(-32.2)\n    expect(typeof result).toBe('number')\n  })\n  it('should return negative value for negative string value with comma', () => {\n    // given\n    let input = '-32,2'\n    // when\n    let result = sanitizeCoordinates(input)\n    // then\n    expect(result).toStrictEqual(-32.2)\n    expect(typeof result).toBe('number')\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/utils/fetchAddressData.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/utils/positions.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/LocationFields/utils/sanitizeCoordinates.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/fields/WithdrawalDetailsFields/WithdrawalDetailsFields.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/siret/__specs__/formatSiret.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/siret/__specs__/selectSiretInformations.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (257). Maximum allowed is 50.',
        line: 3,
        column: 80,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 259,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (208). Maximum allowed is 50.',
        line: 51,
        column: 36,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 258,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (163). Maximum allowed is 50.',
        line: 95,
        column: 44,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 257,
        endColumn: 6,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { getSiretInformations, validateSiretSize } from '../selectSiretInformations'\n\ndescribe('src | components | pages | Venue | siret | selectSiretInformations', () => {\n  beforeEach(() => {\n    fetch.resetMocks()\n  })\n\n  describe('validateSiretSize', () => {\n    describe('when siret lenght is smaller than 14 characters', () => {\n      it('should return ’SIRET trop court’', () => {\n        // given\n        const siret = '1234'\n\n        // when\n        const errorMessage = validateSiretSize(siret)\n\n        // then\n        expect(errorMessage).toBe('SIRET trop court')\n      })\n    })\n\n    describe('when siret lenght is greater than 14 characters', () => {\n      it('should return ’SIRET trop long’', () => {\n        // given\n        const siret = '123456789123456789'\n\n        // when\n        const errorMessage = validateSiretSize(siret)\n\n        // then\n        expect(errorMessage).toBe('SIRET trop long')\n      })\n    })\n\n    describe('when siret lenght is 14 characters', () => {\n      it('should return no error', () => {\n        // given\n        const siret = '12345678912345'\n\n        // when\n        const errorMessage = validateSiretSize(siret)\n\n        // then\n        expect(errorMessage).toBe('')\n      })\n    })\n  })\n\n  describe('getLocationInformationsFromSiret', () => {})\n\n  describe('getSiretInformations', () => {\n    describe('if not siret is provided', () => {\n      it('should return empty location values', async () => {\n        // given\n        const siret = ''\n\n        // when\n        const locationValues = await getSiretInformations(siret)\n\n        // then\n        expect(fetch.mock.calls).toHaveLength(0)\n        expect(locationValues).toStrictEqual({\n          values: {\n            address: '',\n            city: '',\n            latitude: null,\n            longitude: null,\n            name: '',\n            postalCode: '',\n            sire: '',\n            siret: '',\n          },\n        })\n      })\n    })\n\n    describe('if siret provided is not valid', () => {\n      it('should return ’SIRET invalide’', async () => {\n        // given\n        const siret = '12345678901234'\n        fetch.mockResponseOnce(JSON.stringify({ message: 'no results found' }), { status: 404 })\n\n        // when\n        const errorMessage = await getSiretInformations(siret)\n\n        // then\n        expect(fetch.mock.calls).toHaveLength(1)\n        expect(fetch.mock.calls[0][0]).toStrictEqual(\n          `https://entreprise.data.gouv.fr/api/sirene/v3/etablissements/${siret}`\n        )\n        expect(errorMessage).toStrictEqual({ values: { error: 'SIRET invalide' } })\n      })\n    })\n\n    describe('if siret provided is valid', () => {\n      it('should return location values with enseigne as name if provided', async () => {\n        // given\n        const siret = '41816609600069'\n        fetch.mockResponseOnce(\n          JSON.stringify({\n            etablissement: {\n              geo_l4: '3 rue de la gare',\n              libelle_commune: 'paris',\n              latitude: 1.1,\n              longitude: 1.1,\n              enseigne_1: 'nom du lieu',\n              code_postal: '75000',\n              siret: '41816609600069',\n            },\n          })\n        )\n\n        // when\n        const locationValues = await getSiretInformations(siret)\n\n        // then\n        expect(fetch.mock.calls).toHaveLength(1)\n        expect(fetch.mock.calls[0][0]).toStrictEqual(\n          `https://entreprise.data.gouv.fr/api/sirene/v3/etablissements/${siret}`\n        )\n        expect(locationValues).toStrictEqual({\n          values: {\n            address: '3 rue de la gare',\n            city: 'paris',\n            latitude: 1.1,\n            longitude: 1.1,\n            name: 'nom du lieu',\n            postalCode: '75000',\n            siret: '41816609600069',\n            sire: '41816609600069',\n          },\n        })\n      })\n\n      it('should return location values with unité légale denomination as name if no enseigne is provided', async () => {\n        // given\n        const siret = '41816609600070'\n        fetch.mockResponseOnce(\n          JSON.stringify({\n            etablissement: {\n              geo_l4: '3 rue de la gare',\n              libelle_commune: 'paris',\n              latitude: 1.1,\n              longitude: 1.1,\n              enseigne_1: null,\n              code_postal: '75000',\n              siret: '41816609600070',\n              unite_legale: {\n                denomination: 'headquarters name',\n              },\n            },\n          })\n        )\n\n        // when\n        const locationValues = await getSiretInformations(siret)\n\n        // then\n        expect(fetch.mock.calls).toHaveLength(1)\n        expect(fetch.mock.calls[0][0]).toStrictEqual(\n          `https://entreprise.data.gouv.fr/api/sirene/v3/etablissements/${siret}`\n        )\n        expect(locationValues).toStrictEqual({\n          values: {\n            address: '3 rue de la gare',\n            city: 'paris',\n            latitude: 1.1,\n            longitude: 1.1,\n            name: 'headquarters name',\n            postalCode: '75000',\n            siret: '41816609600070',\n            sire: '41816609600070',\n          },\n        })\n      })\n\n      it('should return location values with empty string as name if no enseigne and denomination are provided', async () => {\n        // given\n        const siret = '41816609600071'\n        fetch.mockResponseOnce(\n          JSON.stringify({\n            etablissement: {\n              geo_l4: '3 rue de la gare',\n              libelle_commune: 'paris',\n              latitude: 1.1,\n              longitude: 1.1,\n              enseigne_1: null,\n              code_postal: '75000',\n              siret: '41816609600071',\n              unite_legale: {\n                denomination: null,\n              },\n            },\n          })\n        )\n\n        // when\n        const locationValues = await getSiretInformations(siret)\n\n        // then\n        expect(fetch.mock.calls).toHaveLength(1)\n        expect(fetch.mock.calls[0][0]).toStrictEqual(\n          `https://entreprise.data.gouv.fr/api/sirene/v3/etablissements/${siret}`\n        )\n        expect(locationValues).toStrictEqual({\n          values: {\n            address: '3 rue de la gare',\n            city: 'paris',\n            latitude: 1.1,\n            longitude: 1.1,\n            name: '',\n            postalCode: '75000',\n            siret: '41816609600071',\n            sire: '41816609600071',\n          },\n        })\n      })\n\n      it('should cache request', async () => {\n        // given\n        const siret = '41816609600072'\n        fetch.mockResponseOnce(\n          JSON.stringify({\n            etablissement: {\n              geo_l4: '3 rue de la gare',\n              libelle_commune: 'paris',\n              latitude: 1.1,\n              longitude: 1.1,\n              enseigne_1: 'nom du lieu',\n              code_postal: '75000',\n              siret: '41816609600072',\n            },\n          })\n        )\n        await getSiretInformations(siret)\n        await getSiretInformations('41816609600073')\n        fetch.resetMocks()\n\n        // when\n        const locationValues = await getSiretInformations(siret)\n\n        // then\n        expect(fetch.mock.calls).toHaveLength(0)\n        expect(locationValues).toStrictEqual({\n          values: {\n            address: '3 rue de la gare',\n            city: 'paris',\n            latitude: 1.1,\n            longitude: 1.1,\n            name: 'nom du lieu',\n            postalCode: '75000',\n            siret: '41816609600072',\n            sire: '41816609600072',\n          },\n        })\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/siret/formatSiret.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/siret/selectSiretInformations.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/utils/__specs__/formatPatch.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (119). Maximum allowed is 50.',
        line: 3,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 121,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (51). Maximum allowed is 50.',
        line: 4,
        column: 38,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 54,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (65). Maximum allowed is 50.',
        line: 56,
        column: 33,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 120,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { formatVenuePayload } from '../formatVenuePayload'\n\ndescribe('formatPatch', () => {\n  describe('when creating new form', () => {\n    it('should format the patch with permitted key', () => {\n      // given\n      const patch = {\n        address: 'RUE DIDEROT',\n        bic: 'QSDFGH8Z564',\n        bookingEmail: 'R6465373fake674654673sub@example.com',\n        city: 'Aulnay-sous-Bois',\n        comment: '',\n        dateModifiedAtLastProvider: '2019-02-05T09:37:37.776590Z',\n        departementCode: '93',\n        iban: 'FR7630001007941234567890185',\n        id: 'ARRA',\n        idAtProviders: null,\n        isValidated: true,\n        isVirtual: false,\n        lastProviderId: null,\n        latitude: 48.92071,\n        longitude: 2.48371,\n        managingOffererId: 'APWA',\n        modelName: 'Venue',\n        name: 'Cinéma de la fin',\n        publicName: 'Cinéma de la fin des fins',\n        postalCode: '93600',\n        siret: '22222222911111',\n        venueProvidersIds: [],\n      }\n\n      // when\n      const result = formatVenuePayload(patch, true)\n      const expected = {\n        address: 'RUE DIDEROT',\n        bic: 'QSDFGH8Z564',\n        bookingEmail: 'R6465373fake674654673sub@example.com',\n        city: 'Aulnay-sous-Bois',\n        comment: '',\n        iban: 'FR7630001007941234567890185',\n        latitude: 48.92071,\n        longitude: 2.48371,\n        managingOffererId: 'APWA',\n        name: 'Cinéma de la fin',\n        publicName: 'Cinéma de la fin des fins',\n        postalCode: '93600',\n        siret: '22222222911111',\n        venueTypeId: null,\n        venueLabelId: null,\n      }\n      // then\n      expect(result).toStrictEqual(expected)\n    })\n  })\n\n  describe('when editing form', () => {\n    it('should format the patch with permitted key', () => {\n      // given\n      const patch = {\n        address: 'RUE DIDEROT',\n        bic: 'QSDFGH8Z564',\n        bookingEmail: 'R6465373fake674654673sub@example.com',\n        city: 'Aulnay-sous-Bois',\n        comment: 'comment',\n        dateModifiedAtLastProvider: '2019-02-05T09:37:37.776590Z',\n        departementCode: '93',\n        iban: 'FR7630001007941234567890185',\n        id: 'ARRA',\n        idAtProviders: null,\n        isValidated: true,\n        isVirtual: false,\n        lastProviderId: null,\n        latitude: 48.92071,\n        longitude: 2.48371,\n        managingOffererId: 'APWA',\n        modelName: 'Venue',\n        name: 'Cinéma de la fin',\n        publicName: 'Cinéma de la fin publique',\n        postalCode: '93600',\n        siret: '22222222911111',\n        venueProvidersIds: [],\n      }\n\n      // when\n      const result = formatVenuePayload(patch, false)\n\n      // then\n      expect(result).toStrictEqual({\n        address: 'RUE DIDEROT',\n        bookingEmail: 'R6465373fake674654673sub@example.com',\n        comment: 'comment',\n        city: 'Aulnay-sous-Bois',\n        latitude: 48.92071,\n        longitude: 2.48371,\n        name: 'Cinéma de la fin',\n        publicName: 'Cinéma de la fin publique',\n        postalCode: '93600',\n        siret: '22222222911111',\n        venueTypeId: null,\n        venueLabelId: null,\n      })\n    })\n\n    it('should preserve venueTypeId and venueLabelId when empty', () => {\n      // given\n      const patch = {\n        venueTypeId: '',\n        venueLabelId: '',\n      }\n\n      // when\n      const result = formatVenuePayload(patch, false)\n\n      // then\n      expect(result).toStrictEqual({\n        venueTypeId: '',\n        venueLabelId: '',\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/Offerer/VenueV1/utils/formatVenuePayload.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (54). Maximum allowed is 50.',
        line: 1,
        column: 35,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 54,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "export const formatVenuePayload = (payload, isCreatedEntity) => {\n  const creation_authorized_input_field = [\n    'address',\n    'bic',\n    'bookingEmail',\n    'city',\n    'comment',\n    'iban',\n    'latitude',\n    'longitude',\n    'managingOffererId',\n    'name',\n    'postalCode',\n    'publicName',\n    'siret',\n    'venueLabelId',\n    'venueTypeId',\n    'withdrawalDetails',\n  ]\n\n  const edition_authorized_input_field = [\n    'address',\n    'bookingEmail',\n    'city',\n    'comment',\n    'isEmailAppliedOnAllOffers',\n    'isWithdrawalAppliedOnAllOffers',\n    'latitude',\n    'longitude',\n    'name',\n    'postalCode',\n    'publicName',\n    'siret',\n    'venueLabelId',\n    'venueTypeId',\n    'withdrawalDetails',\n  ]\n\n  const requestPayload = {}\n\n  const authorizedFields = isCreatedEntity\n    ? creation_authorized_input_field\n    : edition_authorized_input_field\n\n  authorizedFields.forEach(inputName => {\n    if (payload[inputName] !== undefined) {\n      requestPayload[inputName] = payload[inputName]\n    } else if (inputName === 'venueTypeId' || inputName === 'venueLabelId') {\n      requestPayload[inputName] = null\n    }\n  })\n\n  return requestPayload\n}\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/OffererCreation/OffererCreation.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/OffererCreation/OffererCreationContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/OffererCreation/OffererCreationForm/OffererCreationForm.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/OffererCreation/OffererCreationForm/__specs__/OffererCreationForm.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/OffererCreation/__specs__/OffererCreation.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/OffererCreation/__specs__/OffererCreationContainer.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (143). Maximum allowed is 50.',
        line: 11,
        column: 91,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 153,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (91). Maximum allowed is 50.',
        line: 18,
        column: 34,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 108,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { mapDispatchToProps, mergeProps } from '../OffererCreationContainer'\n\njest.mock('redux-saga-data', () => {\n  const { requestData } = jest.requireActual('fetch-normalize-data')\n  return {\n    requestData,\n    createDataReducer: jest.fn(),\n  }\n})\n\ndescribe('src | components | pages | Offerer | OfferCreation | OffererCreationContainer', () => {\n  let dispatch\n\n  beforeEach(() => {\n    dispatch = jest.fn()\n  })\n\n  describe('mapDispatchToProps', () => {\n    it('should return an object of functions', () => {\n      // given\n      const ownProps = {\n        currentUser: {\n          id: 'TY56er',\n        },\n        match: {\n          params: {\n            offererId: 'AGH',\n          },\n        },\n      }\n      // when\n      const functions = mapDispatchToProps(dispatch, ownProps)\n\n      // then\n      expect(functions).toStrictEqual({\n        createNewOfferer: expect.any(Function),\n        showNotification: expect.any(Function),\n      })\n    })\n\n    describe('showNotification', () => {\n      it('should display a notification with the right parameters', () => {\n        // given\n        const ownProps = {\n          currentUser: {\n            id: 'TY56er',\n          },\n          match: {\n            params: {\n              offererId: 'AGH',\n            },\n          },\n        }\n        const message = 'my message'\n        const type = 'success'\n        const functions = mapDispatchToProps(dispatch, ownProps)\n        const { showNotification } = functions\n\n        // when\n        showNotification(message, type)\n\n        // then\n        expect(dispatch).toHaveBeenCalledWith({\n          payload: {\n            text: 'my message',\n            type: 'success',\n          },\n          type: 'SHOW_NOTIFICATION',\n        })\n      })\n    })\n\n    describe('createNewOfferer', () => {\n      it('should dispatch', () => {\n        // Given\n        const ownProps = {\n          currentUser: {\n            id: 'TY56er',\n          },\n          match: {\n            params: {\n              offererId: 'AGH',\n            },\n          },\n        }\n        const { createNewOfferer } = mapDispatchToProps(dispatch, ownProps)\n        const payload = {\n          key: 'value',\n          siren: '123 456 789',\n        }\n\n        // When\n        createNewOfferer(payload)\n\n        expect(dispatch).toHaveBeenCalledWith({\n          config: {\n            apiPath: '/offerers',\n            method: 'POST',\n            body: {\n              key: 'value',\n              siren: '123456789',\n            },\n          },\n          type: 'REQUEST_DATA_POST_/OFFERERS',\n        })\n      })\n    })\n  })\n\n  describe('mergeProps', () => {\n    it('should spread stateProps, dispatchProps and ownProps into mergedProps', () => {\n      // given\n      const stateProps = {}\n      const dispatchProps = {\n        getOfferer: () => {},\n      }\n      const ownProps = {\n        match: {\n          params: {},\n        },\n      }\n\n      // when\n      const mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n\n      // then\n      expect(mergedProps).toStrictEqual({\n        getOfferer: expect.any(Function),\n        match: ownProps.match,\n        trackCreateOfferer: expect.any(Function),\n        redirectAfterSubmit: expect.any(Function),\n      })\n    })\n\n    it('should map a tracking event for create an offer', () => {\n      // given\n      const stateProps = {}\n      const ownProps = {\n        tracking: {\n          trackEvent: jest.fn(),\n        },\n      }\n      // when\n      mergeProps(stateProps, {}, ownProps).trackCreateOfferer('RTgfd67')\n\n      // then\n      expect(ownProps.tracking.trackEvent).toHaveBeenCalledWith({\n        action: 'createOfferer',\n        name: 'RTgfd67',\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offerers/OfferersLayout.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Breadcrumb.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Confirmation/Confirmation.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Confirmation/ConfirmationContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Confirmation/__specs__/Confirmation.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/LeavingOfferCreationDialog/LeavingOfferCreationDialog.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferDetails.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (203). Maximum allowed is 150.',
        line: 18,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 220,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (22). Maximum allowed is 15.',
        line: 18,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 220,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (30). Maximum allowed is 15.',
        line: 84,
        column: 5,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 131,
        endColumn: 6,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import PropTypes from 'prop-types'\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport PageTitle from 'components/layout/PageTitle/PageTitle'\nimport { isOfferDisabled } from 'components/pages/Offers/domain/isOfferDisabled'\nimport OfferCreation from 'components/pages/Offers/Offer/OfferDetails/OfferForm/OfferCreation'\nimport OfferEditionContainer from 'components/pages/Offers/Offer/OfferDetails/OfferForm/OfferEditionContainer'\nimport OfferPreview from 'components/pages/Offers/Offer/OfferDetails/OfferPreview/OfferPreview'\nimport OfferStatusBanner from 'components/pages/Offers/Offer/OfferDetails/OfferStatusBanner/OfferStatusBanner'\nimport OfferThumbnail from 'components/pages/Offers/Offer/OfferDetails/OfferThumbnail/OfferThumbnail'\nimport OfferPreviewLink from 'components/pages/Offers/Offer/OfferPreviewLink/OfferPreviewLink'\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { loadCategories } from 'store/offers/thunks'\n\nimport { queryParamsFromOfferer } from '../../utils/queryParamsFromOfferer'\n\nconst OfferDetails = ({\n  history,\n  isUserAdmin,\n  location,\n  offer,\n  reloadOffer,\n  showEditionSuccessNotification,\n  showErrorNotification,\n  trackCreateOffer,\n  trackEditOffer,\n  userEmail,\n}) => {\n  const dispatch = useDispatch()\n  const initialValues = {}\n  const queryParams = queryParamsFromOfferer(location)\n\n  if (queryParams.structure !== '') {\n    initialValues.offererId = queryParams.structure\n  }\n\n  if (queryParams.lieu !== '') {\n    initialValues.venueId = queryParams.lieu\n  }\n\n  const formInitialValues = useRef(initialValues)\n  const [formValues, setFormValues] = useState({})\n  const [offerSubCategory, setOfferSubCategory] = useState({})\n  const [formErrors, setFormErrors] = useState({})\n  const [showThumbnailForm, setShowThumbnailForm] = useState(false)\n  const [thumbnailInfo, setThumbnailInfo] = useState({})\n  const [thumbnailError, setThumbnailError] = useState(false)\n  const [isSubmitLoading, setIsSubmitLoading] = useState(false)\n\n  useEffect(() => {\n    offer?.id && reloadOffer()\n  }, [offer?.id, reloadOffer])\n\n  const postThumbnail = useCallback(\n    async (offerId, thumbnailInfo) => {\n      const offerThumbnailHasBeenUpdated = Object.values(thumbnailInfo).length > 0\n      if (offerThumbnailHasBeenUpdated) {\n        const { credit, thumbnail, croppingRect, thumbUrl } = thumbnailInfo\n\n        try {\n          await pcapi.postThumbnail(\n            formValues.offererId,\n            offerId,\n            credit,\n            thumbnail,\n            thumbUrl,\n            croppingRect?.x,\n            croppingRect?.y,\n            croppingRect?.height\n          )\n        } catch (error) {\n          setThumbnailError(true)\n          showErrorNotification()\n\n          throw error\n        }\n      }\n    },\n    [showErrorNotification, formValues.offererId]\n  )\n\n  const handleSubmitOffer = useCallback(\n    async offerValues => {\n      setIsSubmitLoading(true)\n      try {\n        if (offer) {\n          await pcapi.updateOffer(offer.id, offerValues)\n          trackEditOffer(offer.id)\n          showEditionSuccessNotification()\n          reloadOffer()\n          setFormErrors({})\n        } else {\n          const response = await pcapi.createOffer(offerValues)\n          const createdOfferId = response.id\n          trackCreateOffer(createdOfferId)\n          await postThumbnail(createdOfferId, thumbnailInfo)\n\n          let queryString = ''\n\n          if (formInitialValues.current.offererId !== undefined) {\n            queryString = `?structure=${formInitialValues.current.offererId}`\n          }\n\n          if (formInitialValues.current.venueId !== undefined) {\n            queryString += `&lieu=${formInitialValues.current.venueId}`\n          }\n\n          history.push(`/offres/${createdOfferId}/stocks${queryString}`)\n        }\n      } catch (error) {\n        if (error && 'errors' in error) {\n          const mapApiErrorsToFormErrors = {\n            venue: 'venueId',\n          }\n          let newFormErrors = {}\n          let formFieldName\n          for (let apiFieldName in error.errors) {\n            formFieldName = apiFieldName\n            if (apiFieldName in mapApiErrorsToFormErrors) {\n              formFieldName = mapApiErrorsToFormErrors[apiFieldName]\n            }\n            newFormErrors[formFieldName] = error.errors[apiFieldName]\n          }\n          setFormErrors(newFormErrors)\n          showErrorNotification()\n        }\n      }\n\n      setIsSubmitLoading(false)\n    },\n    [\n      history,\n      offer,\n      postThumbnail,\n      reloadOffer,\n      showEditionSuccessNotification,\n      showErrorNotification,\n      thumbnailInfo,\n      trackEditOffer,\n      trackCreateOffer,\n    ]\n  )\n\n  const offerStatus = offer?.status\n  const isDisabled = offerStatus ? isOfferDisabled(offerStatus) : false\n\n  useEffect(() => {\n    dispatch(loadCategories())\n  }, [dispatch])\n\n  return (\n    <>\n      <PageTitle title=\"Détails de l'offre\" />\n\n      <div className={Object.entries(formValues).length !== 0 ? 'sidebar-container' : ''}>\n        <div className=\"content\">\n          {offer ? (\n            <>\n              {isDisabled && <OfferStatusBanner status={offerStatus} />}\n              <OfferEditionContainer\n                formValues={formValues}\n                isDisabled={isDisabled}\n                isSubmitLoading={isSubmitLoading}\n                isUserAdmin={isUserAdmin}\n                offer={offer}\n                onSubmit={handleSubmitOffer}\n                setFormValues={setFormValues}\n                setPreviewOfferCategory={setOfferSubCategory}\n                setShowThumbnailForm={setShowThumbnailForm}\n                showErrorNotification={showErrorNotification}\n                submitErrors={formErrors}\n                userEmail={userEmail}\n              />\n            </>\n          ) : (\n            <OfferCreation\n              formValues={formValues}\n              initialValues={formInitialValues.current}\n              isSubmitLoading={isSubmitLoading}\n              isUserAdmin={isUserAdmin}\n              onSubmit={handleSubmitOffer}\n              setFormValues={setFormValues}\n              setPreviewOfferCategory={setOfferSubCategory}\n              setShowThumbnailForm={setShowThumbnailForm}\n              showErrorNotification={showErrorNotification}\n              submitErrors={formErrors}\n              userEmail={userEmail}\n            />\n          )}\n        </div>\n\n        {showThumbnailForm && (\n          <div className=\"sidebar\">\n            <div className=\"sidebar-wrapper\">\n              <OfferThumbnail\n                isDisabled={isDisabled}\n                offerId={offer?.id}\n                postThumbnail={postThumbnail}\n                setThumbnailInfo={setThumbnailInfo}\n                thumbnailError={thumbnailError}\n                url={offer?.thumbUrl}\n              />\n              <OfferPreview\n                formValues={formValues}\n                offerSubCategory={offerSubCategory}\n              />\n            </div>\n            {offer ? (\n              <OfferPreviewLink\n                mediationId={offer.activeMediation ? offer.activeMediation.id : null}\n                offerId={offer.id}\n              />\n            ) : null}\n          </div>\n        )}\n      </div>\n    </>\n  )\n}\n\nOfferDetails.defaultProps = {\n  offer: null,\n  reloadOffer: null,\n}\n\nOfferDetails.propTypes = {\n  history: PropTypes.shape().isRequired,\n  isUserAdmin: PropTypes.bool.isRequired,\n  location: PropTypes.shape().isRequired,\n  offer: PropTypes.shape(),\n  reloadOffer: PropTypes.func,\n  showEditionSuccessNotification: PropTypes.func.isRequired,\n  showErrorNotification: PropTypes.func.isRequired,\n  trackCreateOffer: PropTypes.func.isRequired,\n  trackEditOffer: PropTypes.func.isRequired,\n  userEmail: PropTypes.string.isRequired,\n}\n\nexport default OfferDetails\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferDetailsContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferForm/Messages/OfferRefundWarning.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferForm/Messages/WithdrawalReminder.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferForm/OfferCategories/OfferCategories.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (153). Maximum allowed is 150.',
        line: 11,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 163,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import PropTypes from 'prop-types'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport Select, { buildSelectOptions } from 'components/layout/inputs/Select'\n\nimport { DEFAULT_FORM_VALUES } from '../_constants'\n\nimport { SubtypeSelects } from './SubtypeSelects'\n\nconst OfferCategories = ({\n  isTypeOfflineButOnlyVirtualVenues,\n  readOnlyFields,\n  categoriesFormValues,\n  updateCategoriesFormValues,\n}) => {\n  const categories = useSelector(state => state.offers.categories)\n  const categoriesOptions = buildSelectOptions(\n    'id',\n    'proLabel',\n    categories.categories.filter(category => category.isSelectable)\n  )\n  const [subCategoriesOptions, setSubCategoriesOptions] = useState(null)\n  const [subCategoryConditionalFields, setSubCategoryConditionalFields] = useState([])\n\n  useEffect(\n    function onCategoryChange() {\n      if (categoriesFormValues.categoryId !== DEFAULT_FORM_VALUES.categoryId) {\n        const options = categories.subCategories.filter(\n          subCategory => subCategory.categoryId === categoriesFormValues.categoryId\n        )\n        setSubCategoriesOptions(buildSelectOptions('id', 'proLabel', options))\n      } else {\n        setSubCategoriesOptions(null)\n      }\n    },\n    [categoriesFormValues.categoryId, categories.subCategories, updateCategoriesFormValues]\n  )\n\n  useEffect(\n    function onSubCategoryChange() {\n      if (categoriesFormValues.subcategoryId !== DEFAULT_FORM_VALUES.subcategoryId) {\n        const currentSubCategoryConditionalFields = categories.subCategories\n          .find(subCategory => categoriesFormValues.subcategoryId === subCategory.id)\n          .conditionalFields.filter(field => field === 'musicType' || field === 'showType')\n\n        setSubCategoryConditionalFields(currentSubCategoryConditionalFields)\n      } else {\n        setSubCategoryConditionalFields([])\n      }\n    },\n    [categoriesFormValues.subcategoryId, categories.subCategories]\n  )\n\n  const handleChange = useCallback(\n    event => {\n      const fieldName = event.target.name\n      const fieldValue = event.target.value\n\n      if (categoriesFormValues[fieldName] === fieldValue) {\n        return\n      }\n\n      let newCategoriesFormValues = {}\n\n      switch (fieldName) {\n        case 'categoryId':\n          newCategoriesFormValues = {\n            categoryId: fieldValue,\n            subcategoryId: DEFAULT_FORM_VALUES.subcategoryId,\n            musicType: DEFAULT_FORM_VALUES.musicType,\n            musicSubType: DEFAULT_FORM_VALUES.musicSubType,\n            showType: DEFAULT_FORM_VALUES.showType,\n            showSubType: DEFAULT_FORM_VALUES.showSubType,\n          }\n          break\n        case 'subcategoryId':\n          newCategoriesFormValues = {\n            ...categoriesFormValues,\n            subcategoryId: fieldValue,\n            musicType: DEFAULT_FORM_VALUES.musicType,\n            musicSubType: DEFAULT_FORM_VALUES.musicSubType,\n            showType: DEFAULT_FORM_VALUES.showType,\n            showSubType: DEFAULT_FORM_VALUES.showSubType,\n          }\n          break\n        case 'musicType':\n          newCategoriesFormValues = {\n            ...categoriesFormValues,\n            musicType: fieldValue,\n            musicSubType: DEFAULT_FORM_VALUES.musicSubType,\n            showType: DEFAULT_FORM_VALUES.showType,\n            showSubType: DEFAULT_FORM_VALUES.showSubType,\n          }\n          break\n        case 'showType':\n          newCategoriesFormValues = {\n            ...categoriesFormValues,\n            musicType: DEFAULT_FORM_VALUES.musicType,\n            musicSubType: DEFAULT_FORM_VALUES.musicSubType,\n            showType: fieldValue,\n            showSubType: DEFAULT_FORM_VALUES.showSubType,\n          }\n          break\n        default:\n          newCategoriesFormValues = {\n            ...categoriesFormValues,\n            [fieldName]: fieldValue,\n          }\n      }\n\n      updateCategoriesFormValues(newCategoriesFormValues)\n    },\n    [categoriesFormValues, updateCategoriesFormValues]\n  )\n\n  return (\n    <>\n      <div className=\"form-row\">\n        <Select\n          defaultOption={{\n            displayName: `Choisir une catégorie`,\n            id: DEFAULT_FORM_VALUES.categoryId,\n          }}\n          handleSelection={handleChange}\n          isDisabled={readOnlyFields.includes('categoryId')}\n          label=\"Catégorie\"\n          name=\"categoryId\"\n          options={categoriesOptions}\n          required\n          selectedValue={categoriesFormValues.categoryId || DEFAULT_FORM_VALUES.categoryId}\n        />\n      </div>\n\n      {subCategoriesOptions && (\n        <div className=\"form-row\">\n          <Select\n            defaultOption={{\n              displayName: `Choisir une sous-catégorie`,\n              id: DEFAULT_FORM_VALUES.subcategoryId,\n            }}\n            handleSelection={handleChange}\n            isDisabled={readOnlyFields.includes('subcategoryId')}\n            label=\"Sous-catégorie\"\n            name=\"subcategoryId\"\n            options={subCategoriesOptions}\n            required\n            selectedValue={categoriesFormValues.subcategoryId || DEFAULT_FORM_VALUES.subcategoryId}\n          />\n        </div>\n      )}\n\n      {!isTypeOfflineButOnlyVirtualVenues && subCategoryConditionalFields.length > 0 && (\n        <SubtypeSelects\n          categoriesFormValues={categoriesFormValues}\n          currentSubCategoryConditionalFields={subCategoryConditionalFields}\n          handleSelection={handleChange}\n          readOnlyFields={readOnlyFields}\n        />\n      )}\n    </>\n  )\n}\n\nOfferCategories.defaultProps = {\n  isTypeOfflineButOnlyVirtualVenues: false,\n}\n\nOfferCategories.propTypes = {\n  categoriesFormValues: PropTypes.shape({\n    musicSubType: PropTypes.string,\n    musicType: PropTypes.string,\n    showSubType: PropTypes.string,\n    showType: PropTypes.string,\n    categoryId: PropTypes.string,\n    subcategoryId: PropTypes.string,\n  }).isRequired,\n  isTypeOfflineButOnlyVirtualVenues: PropTypes.bool,\n  readOnlyFields: PropTypes.arrayOf(PropTypes.string).isRequired,\n  updateCategoriesFormValues: PropTypes.func.isRequired,\n}\n\nexport default OfferCategories\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferForm/OfferCategories/SubtypeSelects.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferForm/OfferCreation.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferForm/OfferEdition.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferForm/OfferEditionContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferForm/OfferForm.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (870). Maximum allowed is 150.',
        line: 79,
        column: 19,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 948,
        endColumn: 2,
      },
      {
        ruleId: 'complexity',
        severity: 1,
        message: 'Arrow function has a complexity of 45. Maximum allowed is 20.',
        line: 79,
        column: 19,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'complex',
        endLine: 948,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (38). Maximum allowed is 15.',
        line: 79,
        column: 19,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 948,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (902). Maximum allowed is 300.',
        line: 342,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 991,
        endColumn: 1,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (20). Maximum allowed is 15.',
        line: 402,
        column: 5,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 449,
        endColumn: 6,
      },
    ],
    errorCount: 0,
    warningCount: 5,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import isEqual from 'lodash.isequal'\nimport PropTypes from 'prop-types'\nimport React, { Fragment, useCallback, useEffect, useState, useRef, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport useActiveFeature from 'components/hooks/useActiveFeature'\nimport InternalBanner from 'components/layout/Banner/InternalBanner'\nimport { CheckboxInput } from 'components/layout/inputs/CheckboxInput/CheckboxInput'\nimport DurationInput from 'components/layout/inputs/DurationInput/DurationInput'\nimport InputError from 'components/layout/inputs/Errors/InputError'\nimport Select, {\n  buildSelectOptions,\n  buildSelectOptionsWithOptionalFields,\n} from 'components/layout/inputs/Select'\nimport TextareaInput from 'components/layout/inputs/TextareaInput'\nimport TextInput from 'components/layout/inputs/TextInput/TextInput'\nimport Spinner from 'components/layout/Spinner'\nimport SubmitButton from 'components/layout/SubmitButton/SubmitButton'\nimport {\n  BASE_OFFER_FIELDS,\n  DEFAULT_FORM_VALUES,\n  EXTRA_DATA_FIELDS,\n  MANDATORY_FIELDS,\n  TEXT_INPUT_DEFAULT_VALUE,\n  PLATFORM,\n  NOT_REIMBURSED,\n} from 'components/pages/Offers/Offer/OfferDetails/OfferForm/_constants'\nimport { ReactComponent as AudioDisabilitySvg } from 'components/pages/Offers/Offer/OfferDetails/OfferForm/assets/audio-disability.svg'\nimport { ReactComponent as MentalDisabilitySvg } from 'components/pages/Offers/Offer/OfferDetails/OfferForm/assets/mental-disability.svg'\nimport { ReactComponent as MotorDisabilitySvg } from 'components/pages/Offers/Offer/OfferDetails/OfferForm/assets/motor-disability.svg'\nimport { ReactComponent as VisualDisabilitySvg } from 'components/pages/Offers/Offer/OfferDetails/OfferForm/assets/visual-disability.svg'\nimport OfferRefundWarning from 'components/pages/Offers/Offer/OfferDetails/OfferForm/Messages/OfferRefundWarning'\nimport WithdrawalReminder from 'components/pages/Offers/Offer/OfferDetails/OfferForm/Messages/WithdrawalReminder'\nimport SynchronizedProviderInformation from 'components/pages/Offers/Offer/OfferDetails/SynchronizedProviderInformation'\nimport { CGU_URL } from 'utils/config'\nimport { doesUserPreferReducedMotion } from 'utils/windowMatchMedia'\n\nimport OfferCategories from './OfferCategories/OfferCategories'\n\n// JOCONDE React:component \"Ce composant est vraiment le plus beau et le plus lisible que nous ayons côté pro. Prenez en de la graine !\"\n\nconst getOfferConditionalFields = ({\n  offerSubCategory = null,\n  isUserAdmin = null,\n  receiveNotificationEmails = null,\n  venue = null,\n}) => {\n  let offerConditionalFields = []\n\n  if (offerSubCategory?.isEvent) {\n    offerConditionalFields.push('durationMinutes')\n    offerConditionalFields.push('isDuo')\n  }\n\n  if (offerSubCategory?.conditionalFields.includes('musicType')) {\n    offerConditionalFields.push('musicSubType')\n  }\n\n  if (offerSubCategory?.conditionalFields.includes('showType')) {\n    offerConditionalFields.push('showSubType')\n  }\n\n  if (isUserAdmin) {\n    offerConditionalFields.push('isNational')\n  }\n\n  if (receiveNotificationEmails) {\n    offerConditionalFields.push('bookingEmail')\n  }\n\n  if (venue?.isVirtual) {\n    offerConditionalFields.push('url')\n  }\n\n  return offerConditionalFields\n}\n\nconst OfferForm = ({\n  areAllVenuesVirtual,\n  backUrl,\n  formValues,\n  initialValues,\n  isDisabled,\n  isEdition,\n  isSubmitLoading,\n  isUserAdmin,\n  offerersNames,\n  onSubmit,\n  providerName,\n  readOnlyFields,\n  setFormValues,\n  setSelectedOfferer,\n  setPreviewOfferCategory,\n  setShowThumbnailForm,\n  showErrorNotification,\n  submitErrors,\n  userEmail,\n  venues,\n}) => {\n  const [offerSubCategory, setOfferSubCategory] = useState(null)\n  const categories = useSelector(state => state.offers.categories)\n  const [receiveNotificationEmails, setReceiveNotificationEmails] = useState(false)\n  const [venue, setVenue] = useState(null)\n  const [venueOptions, setVenueOptions] = useState(\n    buildSelectOptionsWithOptionalFields('id', ['publicName', 'name'], venues)\n  )\n  const [offerFormFields, setOfferFormFields] = useState(Object.keys(DEFAULT_FORM_VALUES))\n  const [formErrors, setFormErrors] = useState(submitErrors)\n  const formRef = useRef(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  const isIsbnRequiredInLivreEditionEnabled = useActiveFeature(\n    'ENABLE_ISBN_REQUIRED_IN_LIVRE_EDITION_OFFER_CREATION'\n  )\n\n  let mandatoryFields = useMemo(() => [...MANDATORY_FIELDS], [])\n\n  const handleFormUpdate = useCallback(\n    newFormValues =>\n      setFormValues(oldFormValues => {\n        const updatedFormValues = { ...oldFormValues, ...newFormValues }\n        return isEqual(oldFormValues, updatedFormValues) ? oldFormValues : updatedFormValues\n      }),\n    [setFormValues]\n  )\n\n  const offererOptions = buildSelectOptions('id', 'name', offerersNames)\n\n  useEffect(() => {\n    if (isIsbnRequiredInLivreEditionEnabled) {\n      mandatoryFields.push('isbn')\n    }\n  }, [isIsbnRequiredInLivreEditionEnabled, mandatoryFields])\n\n  useEffect(() => {\n    setFormErrors(submitErrors)\n  }, [submitErrors])\n\n  useEffect(\n    function initializeFormData() {\n      if (\n        initialValues.bookingEmail &&\n        initialValues.bookingEmail !== DEFAULT_FORM_VALUES.bookingEmail\n      ) {\n        setReceiveNotificationEmails(true)\n      }\n      setFormValues({ ...DEFAULT_FORM_VALUES, ...initialValues })\n      setIsLoading(false)\n    },\n    [initialValues, setFormValues]\n  )\n\n  useEffect(\n    function buildFormFields() {\n      const offerConditionalFields = getOfferConditionalFields({\n        offerSubCategory,\n        isUserAdmin,\n        receiveNotificationEmails,\n        venue,\n      })\n      let offerSubCategoryConditionalFields = offerSubCategory\n        ? offerSubCategory.conditionalFields\n        : []\n\n      const newFormFields = [\n        ...BASE_OFFER_FIELDS,\n        ...offerSubCategoryConditionalFields,\n        ...offerConditionalFields,\n      ]\n      setOfferFormFields(newFormFields)\n    },\n    [offerSubCategory, isUserAdmin, receiveNotificationEmails, venue]\n  )\n\n  useEffect(\n    function storeOfferSubCategoryAndVenueWhenSelected() {\n      if (formValues.subcategoryId) {\n        setOfferSubCategory(\n          categories.subCategories.find(type => type.id === formValues.subcategoryId)\n        )\n        setPreviewOfferCategory(\n          categories.subCategories.find(type => type.id === formValues.subcategoryId)\n        )\n      }\n\n      if (\n        formValues.venueId &&\n        venueOptions.find(showedVenue => showedVenue.id === formValues.venueId)\n      ) {\n        const selectedVenue = venues.find(venue => venue.id === formValues.venueId)\n        setVenue(selectedVenue)\n        handleFormUpdate({ offererId: selectedVenue.managingOffererId })\n      } else {\n        setVenue(null)\n      }\n    },\n    [\n      formValues.subcategoryId,\n      formValues.venueId,\n      handleFormUpdate,\n      setPreviewOfferCategory,\n      venues,\n      venueOptions,\n      categories,\n    ]\n  )\n\n  useEffect(\n    function filterVenueOptionsForSelectedType() {\n      let venuesToShow = venues\n\n      if (offerSubCategory?.onlineOfflinePlatform === PLATFORM.ONLINE) {\n        venuesToShow = venuesToShow.filter(venue => venue.isVirtual)\n      } else if (offerSubCategory?.onlineOfflinePlatform === PLATFORM.OFFLINE) {\n        venuesToShow = venuesToShow.filter(venue => !venue.isVirtual)\n      }\n\n      setVenueOptions(\n        buildSelectOptionsWithOptionalFields('id', ['publicName', 'name'], venuesToShow)\n      )\n\n      if (venuesToShow.length === 0 && venues.length > 0) {\n        setFormErrors(oldFormErrors => ({\n          ...oldFormErrors,\n          venueId: 'Il faut obligatoirement une structure avec un lieu.',\n        }))\n      } else {\n        setFormErrors(oldFormErrors => {\n          delete oldFormErrors.venueId\n          return oldFormErrors\n        })\n      }\n\n      if (venuesToShow.length === 1) {\n        handleFormUpdate({ venueId: venuesToShow[0].id })\n      }\n    },\n    [offerSubCategory, handleFormUpdate, venues]\n  )\n\n  useEffect(\n    function selectOffererWhenUnique() {\n      if (offerersNames.length === 1) {\n        handleFormUpdate({ offererId: offerersNames[0].id })\n      }\n    },\n    [handleFormUpdate, offerersNames]\n  )\n\n  useEffect(\n    function showThumbnail() {\n      setShowThumbnailForm(\n        !isLoading && formValues.subcategoryId !== DEFAULT_FORM_VALUES.subcategoryId\n      )\n    },\n    [formValues.subcategoryId, isLoading, setShowThumbnailForm]\n  )\n\n  useEffect(\n    function setBookingEmail() {\n      if (!initialValues.bookingEmail) {\n        if (\n          (offerSubCategory && offerSubCategory.onlineOfflinePlatform === PLATFORM.ONLINE) ||\n          venue?.isVirtual\n        ) {\n          handleFormUpdate({ bookingEmail: userEmail })\n        } else if (venue) {\n          handleFormUpdate({ bookingEmail: venue.bookingEmail })\n        }\n      }\n    },\n    [initialValues.bookingEmail, venue, offerSubCategory, handleFormUpdate, userEmail, isEdition]\n  )\n\n  useEffect(\n    function setWithdrawalDetails() {\n      if (venue?.withdrawalDetails) {\n        handleFormUpdate({ withdrawalDetails: venue?.withdrawalDetails })\n      }\n    },\n    [venue, handleFormUpdate]\n  )\n\n  useEffect(() => {\n    if (formRef.current) {\n      const invalidElement = formRef.current.querySelector('.error')\n\n      if (invalidElement && invalidElement.value === '') {\n        const scrollBehavior = doesUserPreferReducedMotion() ? 'auto' : 'smooth'\n\n        invalidElement.scrollIntoView({\n          behavior: scrollBehavior,\n          block: 'center',\n          inline: 'center',\n        })\n      }\n    }\n  }, [formRef, formErrors])\n\n  const selectOfferer = useCallback(\n    event => {\n      const selectedOffererId = event.target.value\n      if (selectedOffererId !== formValues.offererId) {\n        handleFormUpdate({ offererId: selectedOffererId, venueId: DEFAULT_FORM_VALUES.venueId })\n        setSelectedOfferer(selectedOffererId)\n      }\n    },\n    [formValues.offererId, handleFormUpdate, setSelectedOfferer]\n  )\n\n  const isValid = useCallback(() => {\n    let newFormErrors = {}\n    const formFields = [...offerFormFields, 'offererId']\n\n    mandatoryFields.forEach(fieldName => {\n      if (\n        formFields.includes(fieldName) &&\n        formValues[fieldName] === DEFAULT_FORM_VALUES[fieldName]\n      ) {\n        newFormErrors[fieldName] = 'Ce champ est obligatoire.'\n      }\n    })\n\n    if (\n      ![\n        formValues.noDisabilityCompliant,\n        formValues.audioDisabilityCompliant,\n        formValues.mentalDisabilityCompliant,\n        formValues.motorDisabilityCompliant,\n        formValues.visualDisabilityCompliant,\n      ].includes(true)\n    ) {\n      newFormErrors['disabilityCompliant'] = 'Ce champ est obligatoire.'\n    }\n\n    setFormErrors(newFormErrors)\n    return Object.keys(newFormErrors).length === 0\n  }, [offerFormFields, mandatoryFields, formValues])\n\n  const submitForm = useCallback(\n    event => {\n      event.preventDefault()\n\n      if (isValid()) {\n        const editableFields = offerFormFields.filter(field => !readOnlyFields.includes(field))\n\n        const submittedValuesAccumulator = editableFields.some(editableField =>\n          EXTRA_DATA_FIELDS.includes(editableField)\n        )\n          ? { extraData: null }\n          : {}\n\n        const submittedValues = editableFields.reduce((submittedValues, fieldName) => {\n          if (!EXTRA_DATA_FIELDS.includes(fieldName)) {\n            const fieldValue =\n              formValues[fieldName] === TEXT_INPUT_DEFAULT_VALUE ? null : formValues[fieldName]\n            submittedValues = {\n              ...submittedValues,\n              [fieldName]: fieldValue,\n            }\n          } else if (formValues[fieldName] !== DEFAULT_FORM_VALUES[fieldName]) {\n            submittedValues.extraData = {\n              ...submittedValues.extraData,\n              [fieldName]: formValues[fieldName],\n            }\n          }\n\n          return submittedValues\n        }, submittedValuesAccumulator)\n\n        if (!receiveNotificationEmails) {\n          submittedValues.bookingEmail = null\n        }\n\n        onSubmit(submittedValues)\n      } else {\n        showErrorNotification()\n      }\n    },\n    [\n      offerFormFields,\n      formValues,\n      isValid,\n      onSubmit,\n      readOnlyFields,\n      receiveNotificationEmails,\n      showErrorNotification,\n    ]\n  )\n\n  const handleSingleFormUpdate = useCallback(\n    event => {\n      const field = event.target.name\n      const value = event.target.type === 'checkbox' ? !formValues[field] : event.target.value\n      handleFormUpdate({ [field]: value })\n    },\n    [formValues, handleFormUpdate]\n  )\n\n  const handleDisabilityCompliantUpdate = useCallback(\n    event => {\n      let disabilityCompliantValues = {\n        noDisabilityCompliant: formValues.noDisabilityCompliant,\n        audioDisabilityCompliant: formValues.audioDisabilityCompliant,\n        mentalDisabilityCompliant: formValues.mentalDisabilityCompliant,\n        motorDisabilityCompliant: formValues.motorDisabilityCompliant,\n        visualDisabilityCompliant: formValues.visualDisabilityCompliant,\n      }\n\n      const field = event.target.name\n      disabilityCompliantValues[field] = !formValues[field]\n\n      if (field === 'noDisabilityCompliant') {\n        if (disabilityCompliantValues[field]) {\n          disabilityCompliantValues.audioDisabilityCompliant = false\n          disabilityCompliantValues.mentalDisabilityCompliant = false\n          disabilityCompliantValues.motorDisabilityCompliant = false\n          disabilityCompliantValues.visualDisabilityCompliant = false\n        } else {\n          const hasNoDisabilityCompliance = ![\n            disabilityCompliantValues.audioDisabilityCompliant,\n            disabilityCompliantValues.mentalDisabilityCompliant,\n            disabilityCompliantValues.motorDisabilityCompliant,\n            disabilityCompliantValues.visualDisabilityCompliant,\n          ].includes(true)\n          if (hasNoDisabilityCompliance) {\n            disabilityCompliantValues[field] = true\n          }\n        }\n      } else {\n        if (Object.values(disabilityCompliantValues).includes(true)) {\n          disabilityCompliantValues.noDisabilityCompliant = false\n        } else {\n          disabilityCompliantValues.noDisabilityCompliant = true\n        }\n      }\n\n      if (\n        Object.values(disabilityCompliantValues).includes(true) &&\n        'disabilityCompliant' in formErrors\n      ) {\n        let newFormErrors = { ...formErrors }\n        delete newFormErrors['disabilityCompliant']\n        setFormErrors(newFormErrors)\n      }\n\n      handleFormUpdate(disabilityCompliantValues)\n    },\n    [formErrors, formValues, handleFormUpdate, setFormErrors]\n  )\n\n  const handleDurationChange = useCallback(value => handleFormUpdate({ durationMinutes: value }), [\n    handleFormUpdate,\n  ])\n\n  const toggleReceiveNotification = useCallback(\n    () => setReceiveNotificationEmails(!receiveNotificationEmails),\n    [setReceiveNotificationEmails, receiveNotificationEmails]\n  )\n\n  const displayNoRefundWarning =\n    offerSubCategory && offerSubCategory.reimbursementRule === NOT_REIMBURSED\n\n  const getErrorMessage = fieldName => {\n    return fieldName in formErrors ? formErrors[fieldName] : null\n  }\n\n  const getIsbnErrorMessage = () => {\n    const isbnErrorMessage = getErrorMessage('isbn')\n\n    if (\n      isIsbnRequiredInLivreEditionEnabled &&\n      isbnErrorMessage &&\n      isbnErrorMessage.includes('Ce produit n’est pas éligible au pass Culture.')\n    ) {\n      return (\n        <>\n          {isbnErrorMessage}\n          <b>\n            {' Veuillez consulter nos'}\n            <a\n              href={CGU_URL}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n              title={\"Consulter les Conditions Générales d'Utilisation\"}\n            >\n              {' conditions générales d’utilisation'}\n            </a>\n          </b>\n        </>\n      )\n    }\n    return isbnErrorMessage\n  }\n\n  const isTypeOfflineButOnlyVirtualVenues =\n    offerSubCategory &&\n    offerSubCategory.onlineOfflinePlatform === PLATFORM.OFFLINE &&\n    areAllVenuesVirtual\n\n  if (isLoading) {\n    return <Spinner />\n  }\n\n  return (\n    <form\n      className=\"offer-form\"\n      ref={formRef}\n    >\n      {providerName !== null ? (\n        <SynchronizedProviderInformation providerName={providerName} />\n      ) : (\n        <p className=\"page-subtitle\">\n          Tous les champs sont obligatoires sauf mention contraire.\n        </p>\n      )}\n\n      <section className=\"form-section\">\n        <h3 className=\"section-title\">\n          Type d’offre\n        </h3>\n        <p className=\"section-description\">\n          Le type de l’offre permet de la caractériser et de la valoriser au mieux dans\n          l’application.\n        </p>\n\n        <div className=\"form-row\">\n          <OfferCategories\n            categoriesFormValues={{\n              categoryId: formValues.categoryId,\n              subcategoryId: formValues.subcategoryId,\n              musicType: formValues.musicType,\n              musicSubType: formValues.musicSubType,\n              showType: formValues.showType,\n              showSubType: formValues.showSubType,\n            }}\n            isTypeOfflineButOnlyVirtualVenues={isTypeOfflineButOnlyVirtualVenues}\n            readOnlyFields={readOnlyFields}\n            updateCategoriesFormValues={handleFormUpdate}\n          />\n          {isTypeOfflineButOnlyVirtualVenues && (\n            <InternalBanner\n              extraClassName=\"no-physical-venue\"\n              href=\"/accueil\"\n              linkTitle=\"+ Ajouter un lieu\"\n              subtitle=\"Pour créer une offre de ce type, ajoutez d’abord un lieu à l’une de vos structures.\"\n              type=\"notification-info\"\n            />\n          )}\n        </div>\n      </section>\n\n      {formValues.subcategoryId !== DEFAULT_FORM_VALUES.subcategoryId &&\n        !isTypeOfflineButOnlyVirtualVenues && (\n          <Fragment>\n            <section className=\"form-section\">\n              <h3 className=\"section-title\">\n                Informations artistiques\n              </h3>\n\n              <div className=\"form-row\">\n                <TextareaInput\n                  countCharacters\n                  disabled={readOnlyFields.includes('name')}\n                  error={getErrorMessage('name')}\n                  label=\"Titre de l'offre\"\n                  maxLength={90}\n                  name=\"name\"\n                  onChange={handleSingleFormUpdate}\n                  required\n                  rows={1}\n                  subLabel={!mandatoryFields.includes('name') ? 'Optionnel' : ''}\n                  value={formValues.name}\n                />\n              </div>\n              <div className=\"form-row\">\n                <TextareaInput\n                  countCharacters\n                  disabled={readOnlyFields.includes('description')}\n                  error={getErrorMessage('description')}\n                  label=\"Description\"\n                  maxLength={1000}\n                  name=\"description\"\n                  onChange={handleSingleFormUpdate}\n                  rows={6}\n                  subLabel={!mandatoryFields.includes('description') ? 'Optionnel' : ''}\n                  value={formValues.description}\n                />\n              </div>\n              {offerFormFields.includes('speaker') && (\n                <div className=\"form-row\">\n                  <TextInput\n                    disabled={readOnlyFields.includes('speaker')}\n                    error={getErrorMessage('speaker')}\n                    label=\"Intervenant\"\n                    name=\"speaker\"\n                    onChange={handleSingleFormUpdate}\n                    subLabel={!mandatoryFields.includes('speaker') ? 'Optionnel' : ''}\n                    type=\"text\"\n                    value={formValues.speaker}\n                  />\n                </div>\n              )}\n\n              {offerFormFields.includes('author') && (\n                <div className=\"form-row\">\n                  <TextInput\n                    disabled={readOnlyFields.includes('author')}\n                    error={getErrorMessage('author')}\n                    label=\"Auteur\"\n                    name=\"author\"\n                    onChange={handleSingleFormUpdate}\n                    subLabel={!mandatoryFields.includes('author') ? 'Optionnel' : ''}\n                    type=\"text\"\n                    value={formValues.author}\n                  />\n                </div>\n              )}\n\n              {offerFormFields.includes('visa') && (\n                <div className=\"form-row\">\n                  <TextInput\n                    disabled={readOnlyFields.includes('visa')}\n                    error={getErrorMessage('visa')}\n                    label=\"Visa d’exploitation\"\n                    name=\"visa\"\n                    onChange={handleSingleFormUpdate}\n                    subLabel={!mandatoryFields.includes('visa') ? 'Optionnel' : ''}\n                    type=\"text\"\n                    value={formValues.visa}\n                  />\n                </div>\n              )}\n\n              {offerFormFields.includes('isbn') && (\n                <div className=\"form-row\">\n                  <TextInput\n                    disabled={readOnlyFields.includes('isbn')}\n                    error={getIsbnErrorMessage()}\n                    label=\"ISBN\"\n                    name=\"isbn\"\n                    onChange={handleSingleFormUpdate}\n                    required={isIsbnRequiredInLivreEditionEnabled}\n                    subLabel={!mandatoryFields.includes('isbn') ? 'Optionnel' : ''}\n                    type=\"text\"\n                    value={formValues.isbn}\n                  />\n                </div>\n              )}\n\n              {offerFormFields.includes('stageDirector') && (\n                <div className=\"form-row\">\n                  <TextInput\n                    disabled={readOnlyFields.includes('stageDirector')}\n                    error={getErrorMessage('stageDirector')}\n                    label=\"Metteur en scène\"\n                    name=\"stageDirector\"\n                    onChange={handleSingleFormUpdate}\n                    subLabel={!mandatoryFields.includes('stageDirector') ? 'Optionnel' : ''}\n                    type=\"text\"\n                    value={formValues.stageDirector}\n                  />\n                </div>\n              )}\n\n              {offerFormFields.includes('performer') && (\n                <div className=\"form-row\">\n                  <TextInput\n                    disabled={readOnlyFields.includes('performer')}\n                    error={getErrorMessage('perforer')}\n                    label=\"Interprète\"\n                    name=\"performer\"\n                    onChange={handleSingleFormUpdate}\n                    subLabel={!mandatoryFields.includes('performer') ? 'Optionnel' : ''}\n                    type=\"text\"\n                    value={formValues.performer}\n                  />\n                </div>\n              )}\n\n              {offerFormFields.includes('durationMinutes') && (\n                <div className=\"form-row\">\n                  <DurationInput\n                    disabled={readOnlyFields.includes('durationMinutes')}\n                    error={getErrorMessage('durationMinutes')}\n                    initialDurationInMinutes={formValues.durationMinutes}\n                    label=\"Durée\"\n                    name=\"durationMinutes\"\n                    onChange={handleDurationChange}\n                    placeholder=\"HH:MM\"\n                    subLabel={!mandatoryFields.includes('durationMinutes') ? 'Optionnel' : ''}\n                  />\n                </div>\n              )}\n            </section>\n\n            <section className=\"form-section\">\n              <h3 className=\"section-title\">\n                Informations pratiques\n              </h3>\n              <p className=\"section-description\">\n                Les informations pratiques permettent de donner aux utilisateurs des informations\n                sur le retrait de leur commande.\n              </p>\n\n              <div className=\"form-row\">\n                <Select\n                  defaultOption={{\n                    displayName: 'Sélectionnez une structure',\n                    id: DEFAULT_FORM_VALUES.offererId,\n                  }}\n                  error={getErrorMessage('offererId')}\n                  handleSelection={selectOfferer}\n                  isDisabled={readOnlyFields.includes('offererId')}\n                  label=\"Structure\"\n                  name=\"offererId\"\n                  options={offererOptions}\n                  selectedValue={formValues.offererId || DEFAULT_FORM_VALUES.offererId}\n                  subLabel={!mandatoryFields.includes('offererId') ? 'Optionnel' : ''}\n                />\n              </div>\n\n              <div className=\"form-row\">\n                <Select\n                  defaultOption={{\n                    displayName: 'Sélectionnez un lieu',\n                    id: DEFAULT_FORM_VALUES.venueId,\n                  }}\n                  error={getErrorMessage('venueId')}\n                  handleSelection={handleSingleFormUpdate}\n                  isDisabled={readOnlyFields.includes('venueId')}\n                  label=\"Lieu\"\n                  name=\"venueId\"\n                  options={venueOptions}\n                  selectedValue={formValues.venueId || DEFAULT_FORM_VALUES.venueId}\n                  subLabel={!mandatoryFields.includes('venueId') ? 'Optionnel' : ''}\n                />\n              </div>\n              {displayNoRefundWarning && (\n                <div className=\"form-row\">\n                  <OfferRefundWarning />\n                </div>\n              )}\n\n              {!offerSubCategory?.isEvent && venue && !venue.isVirtual && (\n                <div className=\"form-row\">\n                  <WithdrawalReminder />\n                </div>\n              )}\n\n              <div className=\"form-row\">\n                <TextareaInput\n                  countCharacters\n                  disabled={readOnlyFields.includes('withdrawalDetails')}\n                  error={getErrorMessage('withdrawalDetails')}\n                  label=\"Informations de retrait\"\n                  maxLength={500}\n                  name=\"withdrawalDetails\"\n                  onChange={handleSingleFormUpdate}\n                  rows={6}\n                  subLabel={!mandatoryFields.includes('withdrawalDetails') ? 'Optionnel' : ''}\n                  value={formValues.withdrawalDetails}\n                />\n              </div>\n\n              {offerFormFields.includes('url') && (\n                <div className=\"form-row\">\n                  <TextInput\n                    disabled={readOnlyFields.includes('url')}\n                    error={getErrorMessage('url')}\n                    label=\"URL d’accès à l’offre\"\n                    longDescription=\"Vous pouvez inclure {token} {email} et {offerId} dans l’URL, qui seront remplacés respectivement par le code de la contremarque, l’e-mail de la personne ayant reservé et l’identifiant de l’offre\"\n                    name=\"url\"\n                    onChange={handleSingleFormUpdate}\n                    required\n                    type=\"text\"\n                    value={formValues.url}\n                  />\n                </div>\n              )}\n            </section>\n\n            <section className=\"form-section accessibility-section\">\n              <h3 className=\"section-title\">\n                Accessibilité\n              </h3>\n              <p className=\"section-description\">\n                Cette offre est-elle accessible aux publics en situation de handicaps :\n              </p>\n              <CheckboxInput\n                SvgElement={VisualDisabilitySvg}\n                checked={formValues.visualDisabilityCompliant}\n                disabled={readOnlyFields.includes('visualDisabilityCompliant')}\n                isInError={Boolean(getErrorMessage('disabilityCompliant'))}\n                isLabelDisable={isDisabled}\n                label=\"Visuel\"\n                name=\"visualDisabilityCompliant\"\n                onChange={handleDisabilityCompliantUpdate}\n              />\n              <CheckboxInput\n                SvgElement={MentalDisabilitySvg}\n                checked={formValues.mentalDisabilityCompliant}\n                disabled={readOnlyFields.includes('mentalDisabilityCompliant')}\n                isInError={Boolean(getErrorMessage('disabilityCompliant'))}\n                isLabelDisable={isDisabled}\n                label=\"Psychique ou cognitif\"\n                name=\"mentalDisabilityCompliant\"\n                onChange={handleDisabilityCompliantUpdate}\n              />\n              <CheckboxInput\n                SvgElement={MotorDisabilitySvg}\n                checked={formValues.motorDisabilityCompliant}\n                disabled={readOnlyFields.includes('motorDisabilityCompliant')}\n                isInError={Boolean(getErrorMessage('disabilityCompliant'))}\n                isLabelDisable={isDisabled}\n                label=\"Moteur\"\n                name=\"motorDisabilityCompliant\"\n                onChange={handleDisabilityCompliantUpdate}\n              />\n              <CheckboxInput\n                SvgElement={AudioDisabilitySvg}\n                checked={formValues.audioDisabilityCompliant}\n                disabled={readOnlyFields.includes('audioDisabilityCompliant')}\n                isInError={Boolean(getErrorMessage('disabilityCompliant'))}\n                isLabelDisable={isDisabled}\n                label=\"Auditif\"\n                name=\"audioDisabilityCompliant\"\n                onChange={handleDisabilityCompliantUpdate}\n              />\n              <CheckboxInput\n                checked={formValues.noDisabilityCompliant}\n                disabled={readOnlyFields.includes('noDisabilityCompliant')}\n                isInError={Boolean(getErrorMessage('disabilityCompliant'))}\n                isLabelDisable={isDisabled}\n                label=\"Non accessible\"\n                name=\"noDisabilityCompliant\"\n                onChange={handleDisabilityCompliantUpdate}\n              />\n\n              {Boolean(getErrorMessage('disabilityCompliant')) && (\n                <InputError>\n                  Vous devez cocher l’une des options ci-dessus\n                </InputError>\n              )}\n            </section>\n\n            <section className=\"form-section\">\n              <h3 className=\"section-title\">\n                Lien de réservation externe\n              </h3>\n              <p className=\"section-description\">\n                {'Ce lien sera affiché aux utilisateurs ne pouvant pas effectuer la réservation dans l’application. ' +\n                  'Nous vous recommandons d’insérer le lien vers votre billetterie ou votre site internet.'}\n              </p>\n              <TextInput\n                disabled={readOnlyFields.includes('externalTicketOfficeUrl')}\n                error={getErrorMessage('externalTicketOfficeUrl')}\n                label=\"URL de redirection externe\"\n                name=\"externalTicketOfficeUrl\"\n                onChange={handleSingleFormUpdate}\n                subLabel={!mandatoryFields.includes('externalTicketOfficeUrl') ? 'Optionnel' : ''}\n                type=\"text\"\n                value={formValues.externalTicketOfficeUrl}\n              />\n            </section>\n\n            <section className=\"form-section\">\n              <h3 className=\"section-title\">\n                Autre\n              </h3>\n\n              {offerFormFields.includes('isNational') && (\n                <div className=\"form-row\">\n                  <CheckboxInput\n                    checked={formValues.isNational || false}\n                    disabled={readOnlyFields.includes('isNational') ? 'disabled' : ''}\n                    isLabelDisable={isDisabled}\n                    label=\"Rayonnement national\"\n                    name=\"isNational\"\n                    onChange={handleSingleFormUpdate}\n                  />\n                </div>\n              )}\n              {offerFormFields.includes('isDuo') && (\n                <div className=\"form-row\">\n                  <CheckboxInput\n                    checked={formValues.isDuo || false}\n                    disabled={readOnlyFields.includes('isDuo') ? 'disabled' : ''}\n                    isLabelDisable={isDisabled}\n                    label={'Accepter les réservations \"duo\"'}\n                    name=\"isDuo\"\n                    onChange={handleSingleFormUpdate}\n                    subLabel={\n                      \"En activant cette option, vous permettez au bénéficiaire du pass Culture de venir accompagné. La seconde place sera délivrée au même tarif que la première, quel que soit l'accompagnateur.\"\n                    }\n                  />\n                </div>\n              )}\n              <div className=\"form-row\">\n                <CheckboxInput\n                  checked={receiveNotificationEmails}\n                  disabled={readOnlyFields.includes('bookingEmail')}\n                  isLabelDisable={isDisabled}\n                  label=\"Être notifié par email des réservations\"\n                  name=\"receiveNotificationEmails\"\n                  onChange={toggleReceiveNotification}\n                />\n              </div>\n\n              {offerFormFields.includes('bookingEmail') && (\n                <div className=\"form-row\">\n                  <TextInput\n                    disabled={readOnlyFields.includes('bookingEmail')}\n                    error={getErrorMessage('bookingEmail')}\n                    label=\"Email auquel envoyer les notifications :\"\n                    name=\"bookingEmail\"\n                    onChange={handleSingleFormUpdate}\n                    placeholder=\"adresse@email.com\"\n                    required\n                    type=\"email\"\n                    value={formValues.bookingEmail}\n                  />\n                </div>\n              )}\n            </section>\n          </Fragment>\n      )}\n\n      <section className=\"actions-section\">\n        <Link\n          className=\"secondary-link\"\n          to={backUrl}\n        >\n          Annuler et quitter\n        </Link>\n        <SubmitButton\n          className=\"primary-button\"\n          disabled={isDisabled}\n          isLoading={isSubmitLoading}\n          onClick={submitForm}\n        >\n          {isEdition ? 'Enregistrer' : 'Étape suivante'}\n        </SubmitButton>\n      </section>\n    </form>\n  )\n}\n\nOfferForm.defaultProps = {\n  areAllVenuesVirtual: false,\n  backUrl: '',\n  initialValues: {},\n  isDisabled: false,\n  isEdition: false,\n  isUserAdmin: false,\n  providerName: null,\n  readOnlyFields: [],\n  setSelectedOfferer: () => {},\n}\n\nOfferForm.propTypes = {\n  areAllVenuesVirtual: PropTypes.bool,\n  backUrl: PropTypes.string,\n  formValues: PropTypes.shape().isRequired,\n  initialValues: PropTypes.shape(),\n  isDisabled: PropTypes.bool,\n  isEdition: PropTypes.bool,\n  isSubmitLoading: PropTypes.bool.isRequired,\n  isUserAdmin: PropTypes.bool,\n  offerersNames: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  providerName: PropTypes.string,\n  readOnlyFields: PropTypes.arrayOf(PropTypes.string),\n  setFormValues: PropTypes.func.isRequired,\n  setPreviewOfferCategory: PropTypes.func.isRequired,\n  setSelectedOfferer: PropTypes.func,\n  setShowThumbnailForm: PropTypes.func.isRequired,\n  showErrorNotification: PropTypes.func.isRequired,\n  submitErrors: PropTypes.shape().isRequired,\n  userEmail: PropTypes.string.isRequired,\n  venues: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n}\n\nexport default OfferForm\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferForm/_constants.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferPreview/OfferPreview.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferPreview/VenueDetails.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferPreview/__specs__/OfferPreview.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferStatusBanner/OfferStatusBanner.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/OfferThumbnail/OfferThumbnail.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/SynchronizedProviderInformation.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/__specs__/OfferCreationForAdmin.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/__specs__/OfferCreationForPro.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (1812). Maximum allowed is 150.',
        line: 59,
        column: 48,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1870,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (1286). Maximum allowed is 150.',
        line: 144,
        column: 60,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1429,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (1214). Maximum allowed is 150.',
        line: 186,
        column: 46,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1399,
        endColumn: 6,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (1580). Maximum allowed is 300.',
        line: 337,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 1871,
        endColumn: 1,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (201). Maximum allowed is 150.',
        line: 363,
        column: 33,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 563,
        endColumn: 8,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`queryAllByText` does not need `await` operator',
        line: 389,
        column: 31,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 389,
        endColumn: 45,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`queryAllByText` does not need `await` operator',
        line: 405,
        column: 31,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 405,
        endColumn: 45,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 419,
        column: 55,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 513,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 420,
        column: 47,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 440,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 442,
        column: 66,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 466,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 468,
        column: 75,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 488,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 490,
        column: 51,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 512,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 515,
        column: 54,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 537,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 516,
        column: 51,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 536,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 539,
        column: 49,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 561,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 540,
        column: 51,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 560,
        endColumn: 14,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (294). Maximum allowed is 150.',
        line: 647,
        column: 35,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 940,
        endColumn: 8,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (16). Maximum allowed is 15.',
        line: 647,
        column: 35,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 940,
        endColumn: 8,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 912,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 912,
        endColumn: 88,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (182). Maximum allowed is 150.',
        line: 942,
        column: 43,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1123,
        endColumn: 8,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 944,
        column: 55,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 955,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 957,
        column: 87,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 969,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 971,
        column: 128,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 986,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 988,
        column: 130,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1002,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1006,
        column: 54,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1017,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1019,
        column: 85,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1031,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1035,
        column: 59,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1046,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1050,
        column: 54,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1061,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1065,
        column: 67,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1076,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1080,
        column: 52,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1091,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1095,
        column: 64,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1106,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1110,
        column: 58,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1121,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1344,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1347,
        endColumn: 14,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (349). Maximum allowed is 150.',
        line: 1431,
        column: 36,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1779,
        endColumn: 4,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (31). Maximum allowed is 15.',
        line: 1563,
        column: 51,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1604,
        endColumn: 6,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (16). Maximum allowed is 15.',
        line: 1733,
        column: 93,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1778,
        endColumn: 6,
      },
      {
        ruleId: 'testing-library/await-async-utils',
        severity: 1,
        message: 'Promise returned from `waitFor` must be handled',
        line: 1768,
        column: 7,
        nodeType: 'Identifier',
        messageId: 'awaitAsyncUtil',
        endLine: 1768,
        endColumn: 14,
      },
    ],
    errorCount: 0,
    warningCount: 37,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { act, fireEvent, render, screen, waitFor, within } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter, Route } from 'react-router'\n\nimport NotificationContainer from 'components/layout/Notification/NotificationContainer'\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\nimport { loadFakeApiCategories } from 'utils/fakeApi'\nimport { queryByTextTrimHtml } from 'utils/testHelpers'\n\nimport OfferLayoutContainer from '../../OfferLayoutContainer'\n\nimport {\n  fieldLabels,\n  findInputErrorForField,\n  getOfferInputForField,\n  queryInputErrorForField,\n  setOfferValues,\n} from './helpers'\n\nElement.prototype.scrollIntoView = () => {}\n\njest.mock('repository/pcapi/pcapi', () => ({\n  ...jest.requireActual('repository/pcapi/pcapi'),\n  createOffer: jest.fn(),\n  getUserValidatedOfferersNames: jest.fn(),\n  getVenue: jest.fn(),\n  getVenuesForOfferer: jest.fn(),\n  loadOffer: jest.fn(),\n  loadStocks: jest.fn(),\n  loadTypes: jest.fn(),\n  postThumbnail: jest.fn(),\n}))\n\njest.mock('utils/windowMatchMedia', () => ({\n  doesUserPreferReducedMotion: jest.fn().mockReturnValue(false),\n}))\n\nconst renderOffers = async (props, store, queryParams = null) => {\n  await act(async () => {\n    await render(\n      <Provider store={store}>\n        <MemoryRouter initialEntries={[{ pathname: '/offres/creation', search: queryParams }]}>\n          <Route path={['/offres/creation', '/offres/:offerId([A-Z0-9]+)']}>\n            <>\n              <OfferLayoutContainer {...props} />\n              <NotificationContainer />\n            </>\n          </Route>\n        </MemoryRouter>\n      </Provider>\n    )\n  })\n}\n\ndescribe('offerDetails - Creation - pro user', () => {\n  let offerers\n  let props\n  let store\n  let venues\n\n  beforeEach(() => {\n    store = configureTestStore({\n      features: {\n        initialized: true,\n        list: [\n          {\n            isActive: true,\n            name: 'ENABLE_ISBN_REQUIRED_IN_LIVRE_EDITION_OFFER_CREATION',\n            nameKey: 'ENABLE_ISBN_REQUIRED_IN_LIVRE_EDITION_OFFER_CREATION',\n          },\n        ],\n      },\n      data: {\n        users: [{ publicName: 'François', isAdmin: false, email: 'francois@example.com' }],\n      },\n    })\n    props = {\n      setShowThumbnailForm: jest.fn(),\n    }\n    const offerer1Id = 'BA'\n    const offerer2Id = 'BAC'\n\n    offerers = [\n      {\n        id: offerer1Id,\n        name: 'La structure',\n      },\n      {\n        id: offerer2Id,\n        name: \"L'autre structure\",\n      },\n    ]\n\n    venues = [\n      {\n        id: 'AB',\n        isVirtual: false,\n        managingOffererId: offerer1Id,\n        name: 'Le lieu',\n        offererName: 'La structure',\n        bookingEmail: 'lieu@example.com',\n        withdrawalDetails: 'Modalité retrait 1',\n      },\n      {\n        id: 'ABC',\n        isVirtual: false,\n        managingOffererId: offerer2Id,\n        name: \"L'autre lieu\",\n        offererName: \"L'autre structure\",\n        bookingEmail: 'autre-lieu@example.com',\n        withdrawalDetails: 'Modalité retrait 2',\n      },\n      {\n        id: 'ABCD',\n        isVirtual: true,\n        managingOffererId: offerer2Id,\n        name: \"L'autre lieu (Offre numérique)\",\n        offererName: \"L'autre structure\",\n        withdrawalDetails: null,\n      },\n      {\n        id: 'ABCDE',\n        isVirtual: true,\n        managingOffererId: offerer2Id,\n        name: \"L'autre lieu du lieu\",\n        offererName: \"L'autre structure\",\n        publicName: \"Le nom d'usage de l'autre autre lieu\",\n        withdrawalDetails: 'Modalité retrait 3',\n      },\n    ]\n\n    pcapi.getUserValidatedOfferersNames.mockResolvedValue(offerers)\n    pcapi.getVenuesForOfferer.mockResolvedValue(venues)\n    pcapi.getVenue.mockReturnValue(Promise.resolve())\n    pcapi.createOffer.mockResolvedValue({})\n    loadFakeApiCategories()\n    jest.spyOn(window, 'scrollTo').mockImplementation()\n  })\n\n  describe('render when creating a new offer as pro user', () => {\n    it('should get categories from API', async () => {\n      // When\n      await renderOffers(props, store)\n      // Then\n      expect(pcapi.loadCategories).toHaveBeenCalledTimes(1)\n    })\n\n    it(\"should get user's offerer from API\", async () => {\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      expect(pcapi.getUserValidatedOfferersNames).toHaveBeenCalledTimes(1)\n    })\n\n    it(\"should get user's venues from API\", async () => {\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      expect(pcapi.getVenuesForOfferer).toHaveBeenCalledTimes(1)\n    })\n\n    it('should have a section \"Type d\\'offre\"', async () => {\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      expect(screen.getByText(\"Type d’offre\", { selector: '.section-title' })).toBeInTheDocument()\n    })\n\n    it('should not display a placeholder for preview', async () => {\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      expect(\n        screen.queryByText('Ajouter une image', { selector: 'button' })\n      ).not.toBeInTheDocument()\n    })\n\n    describe('when selecting an offer type', () => {\n      describe('when selecting physical type', () => {\n        it('should inform user to add a venue if only virtual venue', async () => {\n          // Given\n          venues = [\n            {\n              id: 'AB',\n              isVirtual: true,\n              managingOffererId: 'AA',\n              name: 'Le lieu (Offre Numérique)',\n              offererName: 'Une structure',\n            },\n            {\n              id: 'ABC',\n              isVirtual: true,\n              managingOffererId: 'AA',\n              name: 'Un lieu (Offre Numérique)',\n              offererName: 'Une structure',\n            },\n            {\n              id: 'ABD',\n              isVirtual: true,\n              managingOffererId: 'AD',\n              name: 'Un lieu (Offre Numérique)',\n              offererName: 'Une autre structure',\n            },\n          ]\n          pcapi.getVenuesForOfferer.mockResolvedValue(venues)\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'LIVRE' })\n          await setOfferValues({ subcategoryId: 'LIVRE_PAPIER' })\n\n          // Then\n          expect(\n            screen.getByText(\n              'Pour créer une offre de ce type, ajoutez d’abord un lieu à l’une de vos structures.'\n            )\n          ).toBeInTheDocument()\n          expect(screen.getByRole('link', { name: '+ Ajouter un lieu' })).toHaveAttribute(\n            'href',\n            '/accueil'\n          )\n          expect(screen.queryByLabelText('Type de spectacle')).not.toBeInTheDocument()\n        })\n\n        it('should not inform user about venue creation if at least one non virtual venue', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // Then\n          expect(\n            screen.queryByText(\n              'Pour créer une offre de ce type, ajoutez d’abord un lieu à l’une de vos structures.'\n            )\n          ).not.toBeInTheDocument()\n          expect(screen.queryByRole('link', { name: '+ Ajouter un lieu' })).not.toBeInTheDocument()\n          expect(screen.getByLabelText('Genre musical')).toBeInTheDocument()\n        })\n      })\n\n      describe('when selecting ONLINE category', () => {\n        it('should not inform user about venue creation if only virtual venue', async () => {\n          // Given\n          venues = [\n            {\n              id: 'AB',\n              isVirtual: true,\n              managingOffererId: 'AA',\n              name: 'Le lieu (Offre Numérique)',\n              offererName: 'Une structure',\n            },\n            {\n              id: 'ABC',\n              isVirtual: true,\n              managingOffererId: 'AA',\n              name: 'Un lieu (Offre Numérique)',\n              offererName: 'Une structure',\n            },\n            {\n              id: 'ABD',\n              isVirtual: true,\n              managingOffererId: 'AD',\n              name: 'Un lieu (Offre Numérique)',\n              offererName: 'Une autre structure',\n            },\n          ]\n          pcapi.getVenuesForOfferer.mockResolvedValue(venues)\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'LIVESTREAM_MUSIQUE' })\n\n          // Then\n          expect(\n            screen.queryByText(\n              'Pour créer une offre de ce type, ajoutez d’abord un lieu à l’une de vos structures.'\n            )\n          ).not.toBeInTheDocument()\n          expect(screen.queryByRole('link', { name: '+ Ajouter un lieu' })).not.toBeInTheDocument()\n        })\n\n        it(\"should pre-fill booking notification email field with user's email\", async () => {\n          // Given\n          venues = [\n            {\n              id: 'ABD',\n              isVirtual: true,\n              managingOffererId: 'AD',\n              name: 'Un lieu (Offre Numérique)',\n              offererName: 'Une autre structure',\n            },\n          ]\n          pcapi.getVenuesForOfferer.mockResolvedValue(venues)\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'LIVESTREAM_MUSIQUE' })\n\n          await screen.findByText('Être notifié par email des réservations')\n\n          // When\n          await setOfferValues({ receiveNotificationEmails: true })\n\n          // Then\n          expect(screen.getByLabelText('Email auquel envoyer les notifications :').value).toBe(\n            'francois@example.com'\n          )\n        })\n      })\n\n      describe('when selecting ONLINE_OR_OFFLINE category', () => {\n        it('should not inform user about venue creation if only virtual venue', async () => {\n          // Given\n          venues = [\n            {\n              id: 'AB',\n              isVirtual: true,\n              managingOffererId: 'AA',\n              name: 'Le lieu (Offre Numérique)',\n              offererName: 'Une structure',\n            },\n          ]\n          pcapi.getVenuesForOfferer.mockResolvedValue(venues)\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSEE' })\n          await setOfferValues({ subcategoryId: 'VISITE_GUIDEE' })\n\n          // Then\n          expect(\n            screen.queryByText(\n              'Pour créer une offre de ce type, ajoutez d’abord un lieu à l’une de vos structures.'\n            )\n          ).not.toBeInTheDocument()\n          expect(screen.queryByRole('link', { name: '+ Ajouter un lieu' })).not.toBeInTheDocument()\n        })\n      })\n\n      it('should display a placeholder for the offer thumbnail', async () => {\n        // Given\n        await renderOffers(props, store)\n\n        // When\n        await setOfferValues({ categoryId: 'CINEMA' })\n        await setOfferValues({ subcategoryId: 'SEANCE_CINE' })\n\n        // Then\n        expect(screen.getByText('Ajouter une image', { selector: 'button' })).toBeInTheDocument()\n      })\n\n      describe('offer preview', () => {\n        it('should display title when input is filled', async () => {\n          // given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'CINEMA' })\n          await setOfferValues({ subcategoryId: 'SEANCE_CINE' })\n\n          // when\n          const titleInput = await screen.findByLabelText(\"Titre de l'offre\", { exact: false })\n          userEvent.type(titleInput, 'Mon joli titre')\n\n          // then\n          expect(screen.getAllByText('Mon joli titre')).toHaveLength(2)\n        })\n\n        it('should display description when input is filled', async () => {\n          // given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'CINEMA' })\n          await setOfferValues({ subcategoryId: 'SEANCE_CINE' })\n\n          // when\n          const descriptionInput = await screen.findByLabelText('Description', { exact: false })\n          userEvent.type(descriptionInput, 'Ma jolie description')\n\n          // then\n          expect(await screen.queryAllByText('Ma jolie description')).toHaveLength(2)\n        })\n\n        it('should display terms of withdrawal when input is filled', async () => {\n          // given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'CINEMA' })\n          await setOfferValues({ subcategoryId: 'SEANCE_CINE' })\n\n          // when\n          const withdrawalInput = await screen.findByLabelText('Informations de retrait', {\n            exact: false,\n          })\n          userEvent.type(withdrawalInput, 'Mes jolies modalités')\n\n          // then\n          expect(await screen.queryAllByText('Mes jolies modalités')).toHaveLength(2)\n        })\n\n        it(\"should display disabled 'isDuo' icone for offers that aren't event\", async () => {\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'LIVRE' })\n          await setOfferValues({ subcategoryId: 'LIVRE_PAPIER' })\n          const disabledisDuoBox = screen.queryByText('À deux !', {\n            selector: '.op-option.disabled .op-option-text',\n          })\n          expect(disabledisDuoBox).toBeInTheDocument()\n        })\n\n        describe('\"Où\" section', () => {\n          describe('when physical venue is selected', () => {\n            it('should display \"Où\" section', async () => {\n              // Given\n              await renderOffers(props, store)\n              const offererWithMultipleVenues = offerers[1]\n              const physicalVenue = venues[1]\n              pcapi.getVenue.mockResolvedValue(physicalVenue)\n              await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n              await setOfferValues({ subcategoryId: 'CONCERT' })\n              await setOfferValues({\n                offererId: offererWithMultipleVenues.id,\n              })\n\n              // When\n              userEvent.selectOptions(screen.getByLabelText('Lieu'), physicalVenue.id)\n\n              // Then\n              const offerPreview = screen.getByTestId('offer-preview-section')\n              expect(within(offerPreview).getByText('Où ?')).toBeInTheDocument()\n              expect(within(offerPreview).getByText('Adresse')).toBeInTheDocument()\n              expect(within(offerPreview).getByText('Distance')).toBeInTheDocument()\n            })\n\n            it(\"should display venue's public name if provided\", async () => {\n              // Given\n              await renderOffers(props, store)\n              const offererWithMultipleVenues = offerers[1]\n              const physicalVenue = venues[1]\n              physicalVenue.publicName = 'Le petit nom du lieu'\n              pcapi.getVenue.mockResolvedValue(physicalVenue)\n              await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n              await setOfferValues({ subcategoryId: 'CONCERT' })\n              await setOfferValues({\n                offererId: offererWithMultipleVenues.id,\n              })\n\n              // When\n              userEvent.selectOptions(screen.getByLabelText('Lieu'), physicalVenue.id)\n\n              // Then\n              const offerPreview = screen.getByTestId('offer-preview-section')\n              expect(\n                within(offerPreview).getByText(physicalVenue.publicName, { exact: false })\n              ).toBeInTheDocument()\n              expect(\n                within(offerPreview).queryByText(physicalVenue.name, { exact: false })\n              ).not.toBeInTheDocument()\n            })\n\n            it(\"should display venue's name if public name not provided\", async () => {\n              // Given\n              await renderOffers(props, store)\n              const offererWithMultipleVenues = offerers[1]\n              const physicalVenue = venues[1]\n              pcapi.getVenue.mockResolvedValue(physicalVenue)\n              await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n              await setOfferValues({ subcategoryId: 'CONCERT' })\n              await setOfferValues({\n                offererId: offererWithMultipleVenues.id,\n              })\n\n              // When\n              userEvent.selectOptions(screen.getByLabelText('Lieu'), physicalVenue.id)\n\n              // Then\n              const offerPreview = screen.getByTestId('offer-preview-section')\n              expect(\n                within(offerPreview).getByText(physicalVenue.name, { exact: false })\n              ).toBeInTheDocument()\n            })\n\n            it('should display formatted adress', async () => {\n              // Given\n              await renderOffers(props, store)\n              const offererWithMultipleVenues = offerers[1]\n              const physicalVenue = venues[1]\n              physicalVenue.address = \"34 avenue de l'Opéra\"\n              physicalVenue.postalCode = '75002'\n              physicalVenue.city = 'Paris'\n              pcapi.getVenue.mockResolvedValue(physicalVenue)\n              await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n              await setOfferValues({ subcategoryId: 'CONCERT' })\n              await setOfferValues({\n                offererId: offererWithMultipleVenues.id,\n              })\n\n              // When\n              userEvent.selectOptions(screen.getByLabelText('Lieu'), physicalVenue.id)\n\n              // Then\n              const offerPreview = screen.getByTestId('offer-preview-section')\n              const expectedFormattedAddress = `${physicalVenue.name} - ${physicalVenue.address} - ${physicalVenue.postalCode} - ${physicalVenue.city}`\n              expect(within(offerPreview).getByText(expectedFormattedAddress)).toBeInTheDocument()\n            })\n          })\n\n          describe('when virtual venue is selected', () => {\n            it('should not display \"Où\" section', async () => {\n              // Given\n              await renderOffers(props, store)\n              const offererWithMultipleVenues = offerers[1]\n              const virtualVenue = venues[2]\n              pcapi.getVenue.mockResolvedValue(virtualVenue)\n              await setOfferValues({ categoryId: 'JEU' })\n              await setOfferValues({ subcategoryId: 'RENCONTRE_JEU' })\n              await setOfferValues({\n                offererId: offererWithMultipleVenues.id,\n              })\n\n              // When\n              userEvent.selectOptions(screen.getByLabelText('Lieu'), virtualVenue.id)\n\n              // Then\n              const offerPreview = screen.getByTestId('offer-preview-section')\n              expect(within(offerPreview).queryByText('Où ?')).not.toBeInTheDocument()\n              expect(within(offerPreview).queryByText('Adresse')).not.toBeInTheDocument()\n              expect(within(offerPreview).queryByText('Distance')).not.toBeInTheDocument()\n            })\n          })\n\n          describe('when no venue is selected', () => {\n            it('should not display \"Où\" section', async () => {\n              // Given\n              await renderOffers(props, store)\n              const offererWithMultipleVenues = offerers[1]\n              const physicalVenue = venues[1]\n              await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n              await setOfferValues({ subcategoryId: 'CONCERT' })\n              await setOfferValues({\n                offererId: offererWithMultipleVenues.id,\n              })\n\n              // When\n              userEvent.selectOptions(screen.getByLabelText('Lieu'), physicalVenue.id)\n              userEvent.selectOptions(screen.getByLabelText('Lieu'), '')\n\n              // Then\n              const offerPreview = screen.getByTestId('offer-preview-section')\n              expect(within(offerPreview).queryByText('Où ?')).not.toBeInTheDocument()\n              expect(within(offerPreview).queryByText('Adresse')).not.toBeInTheDocument()\n              expect(within(offerPreview).queryByText('Distance')).not.toBeInTheDocument()\n            })\n          })\n        })\n      })\n\n      it('should display \"Infos pratiques\", \"Infos artistiques\", \"Accessibilité\", \"Lien de réservation externe\" and \"Autre\" section', async () => {\n        // Given\n        await renderOffers(props, store)\n\n        // When\n        await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n        await setOfferValues({ subcategoryId: 'CONCERT' })\n\n        // Then\n        expect(\n          screen.getByRole('heading', { name: 'Informations artistiques', level: 3 })\n        ).toBeInTheDocument()\n        expect(\n          screen.getByRole('heading', { name: 'Informations pratiques', level: 3 })\n        ).toBeInTheDocument()\n        expect(screen.getByRole('heading', { name: 'Accessibilité', level: 3 })).toBeInTheDocument()\n        expect(\n          screen.getByRole('heading', { name: 'Lien de réservation externe', level: 3 })\n        ).toBeInTheDocument()\n        expect(screen.getByRole('heading', { name: 'Autre', level: 3 })).toBeInTheDocument()\n      })\n\n      it('should display email notification input when asking to receive booking emails', async () => {\n        // Given\n        await renderOffers(props, store)\n        await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n        await setOfferValues({ subcategoryId: 'CONCERT' })\n\n        // When\n        await setOfferValues({ receiveNotificationEmails: true })\n\n        // Then\n        const bookingEmailInput = screen.getByLabelText('Email auquel envoyer les notifications :')\n        expect(bookingEmailInput).toBeInTheDocument()\n      })\n\n      it('should display a text input for an external ticket office url\"', async () => {\n        // Given\n        await renderOffers(props, store)\n\n        // When\n        await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n        await setOfferValues({ subcategoryId: 'CONCERT' })\n\n        // Then\n        const externalTicketOfficeUrlInput = await getOfferInputForField('externalTicketOfficeUrl')\n        expect(externalTicketOfficeUrlInput).toBeInTheDocument()\n      })\n\n      describe('accessibility fields', () => {\n        it('should display accessibility section description', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // Then\n          expect(\n            screen.getByText(\n              'Cette offre est-elle accessible aux publics en situation de handicaps :'\n            )\n          ).toBeInTheDocument()\n        })\n\n        it('should display accessibility checkboxes unchecked by default', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // Then\n          expect(await getOfferInputForField('visualDisabilityCompliant')).not.toBeChecked()\n          expect(await getOfferInputForField('mentalDisabilityCompliant')).not.toBeChecked()\n          expect(await getOfferInputForField('motorDisabilityCompliant')).not.toBeChecked()\n          expect(await getOfferInputForField('audioDisabilityCompliant')).not.toBeChecked()\n        })\n      })\n\n      describe('venue selection', () => {\n        it('should display an offerer selection and a venue selection when user is pro', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // Then\n          expect(screen.queryByLabelText('Structure')).toBeInTheDocument()\n          const venueInput = screen.queryByLabelText('Lieu')\n          expect(venueInput).toBeInTheDocument()\n          expect(venueInput).not.toHaveAttribute('disabled')\n        })\n\n        it('should have offerer selected when given as queryParam and filter venues', async () => {\n          // Given\n          await renderOffers(props, store, `?structure=${offerers[0].id}`)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // Then\n          expect(screen.getByDisplayValue(offerers[0].name)).toBeInTheDocument()\n          expect(screen.getByText(venues[0].name)).toBeInTheDocument()\n          expect(screen.queryByText(venues[1].name)).not.toBeInTheDocument()\n          expect(screen.queryByText(venues[2].name)).not.toBeInTheDocument()\n        })\n\n        it('should select offerer when there is only one option', async () => {\n          // Given\n          pcapi.getUserValidatedOfferersNames.mockResolvedValue([offerers[0]])\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // Then\n          expect(screen.getByDisplayValue(offerers[0].name)).toBeInTheDocument()\n        })\n\n        it('should have venue selected when given as queryParam', async () => {\n          // Given\n          await renderOffers(\n            props,\n            store,\n            `?lieu=${venues[0].id}&structure=${venues[0].managingOffererId}`\n          )\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // Then\n          expect(screen.getByDisplayValue(venues[0].name)).toBeInTheDocument()\n        })\n\n        it('should select venue when there is only one option', async () => {\n          // Given\n          pcapi.getVenuesForOfferer.mockResolvedValue([venues[0]])\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // Then\n          expect(screen.getByDisplayValue(venues[0].name)).toBeInTheDocument()\n        })\n\n        it('should only display virtual venues when offer type is online only', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MEDIA' })\n          await setOfferValues({ subcategoryId: 'ABO_PRESSE_EN_LIGNE' })\n\n          // Then\n          expect(screen.queryByText(venues[0].name)).not.toBeInTheDocument()\n          expect(screen.queryByText(venues[1].name)).not.toBeInTheDocument()\n          expect(screen.getByText(venues[2].name)).toBeInTheDocument()\n        })\n\n        it('should only display physical venues when offer type is offline only', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // Then\n          expect(screen.getByText(venues[0].name)).toBeInTheDocument()\n          expect(screen.getByText(venues[1].name)).toBeInTheDocument()\n          expect(screen.queryByText(venues[2].name)).not.toBeInTheDocument()\n        })\n\n        it('should display all venues when offer type is offline and online', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'JEU' })\n          await setOfferValues({ subcategoryId: 'RENCONTRE_JEU' })\n\n          // Then\n          expect(screen.getByText(venues[0].name)).toBeInTheDocument()\n          expect(screen.getByText(venues[1].name)).toBeInTheDocument()\n          expect(screen.getByText(venues[2].name)).toBeInTheDocument()\n        })\n\n        it('should only display venues of selected offerer', async () => {\n          // Given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // When\n          await setOfferValues({ offererId: offerers[0].id })\n\n          // Then\n          expect(screen.getByText(venues[0].name)).toBeInTheDocument()\n          expect(screen.queryByText(venues[1].name)).not.toBeInTheDocument()\n          expect(screen.queryByText(venues[2].name)).not.toBeInTheDocument()\n        })\n\n        it('should display all venues when unselecting offerer', async () => {\n          // Given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'FESTIVAL_MUSIQUE' })\n          await setOfferValues({ offererId: offerers[0].id })\n\n          // When\n          await setOfferValues({ offererId: '' })\n\n          // Then\n          expect(screen.getByText(venues[0].name)).toBeInTheDocument()\n          expect(screen.getByText(venues[1].name)).toBeInTheDocument()\n          expect(screen.getByText(venues[2].name)).toBeInTheDocument()\n        })\n\n        it('should select offerer of selected venue', async () => {\n          // Given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // When\n          await setOfferValues({ venueId: venues[0].id })\n\n          // Then\n          expect(screen.getByLabelText('Structure')).toHaveDisplayValue(offerers[0].name)\n        })\n\n        it('should warn user if selected offerer has no physical venues but physical type is selected', async () => {\n          // Given\n          const venues = [\n            {\n              id: 'CCC',\n              isVirtual: true,\n              managingOffererId: offerers[0].id,\n              name: 'Le lieu',\n              offererName: 'La structure',\n            },\n            {\n              id: 'DDD',\n              isVirtual: false,\n              managingOffererId: offerers[1].id,\n              name: \"L'autre lieu\",\n              offererName: \"L'autre structure\",\n            },\n            {\n              id: 'EEE',\n              isVirtual: true,\n              managingOffererId: offerers[1].id,\n              name: \"L'autre lieu (Offre numérique)\",\n              offererName: \"L'autre structure\",\n            },\n          ]\n          pcapi.getVenuesForOfferer.mockResolvedValue(venues)\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // When\n          await setOfferValues({ offererId: offerers[0].id })\n\n          // Then\n          const venueInput = screen.getByLabelText('Lieu')\n          expect(venueInput).toBeInTheDocument()\n          expect(venueInput).not.toHaveAttribute('disabled')\n          const venueIdError = await findInputErrorForField('venueId')\n          expect(venueIdError).toHaveTextContent(\n            'Il faut obligatoirement une structure avec un lieu.'\n          )\n        })\n\n        it('should warn user if selected offerer has no physical venues but physical type is selected while coming from offerer page', async () => {\n          // Given\n          const venues = [\n            {\n              id: 'CCC',\n              isVirtual: true,\n              managingOffererId: offerers[0].id,\n              name: 'Le lieu',\n              offererName: 'La structure',\n            },\n            {\n              id: 'DDD',\n              isVirtual: false,\n              managingOffererId: offerers[1].id,\n              name: \"L'autre lieu\",\n              offererName: \"L'autre structure\",\n            },\n            {\n              id: 'EEE',\n              isVirtual: true,\n              managingOffererId: offerers[1].id,\n              name: \"L'autre lieu (Offre numérique)\",\n              offererName: \"L'autre structure\",\n            },\n          ]\n          pcapi.getVenuesForOfferer.mockResolvedValue(venues)\n          await renderOffers(props, store, `?structure=${offerers[1].id}`)\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // When\n          await setOfferValues({ offererId: offerers[0].id })\n\n          // Then\n          const venueInput = screen.getByLabelText('Lieu')\n          expect(venueInput).toBeInTheDocument()\n          expect(venueInput).not.toHaveAttribute('disabled')\n          const venueIdError = await findInputErrorForField('venueId')\n          expect(venueIdError).toHaveTextContent(\n            'Il faut obligatoirement une structure avec un lieu.'\n          )\n        })\n\n        it('should remove no physical venue warning when it is no longer valid', async () => {\n          // Given\n          pcapi.getVenuesForOfferer.mockResolvedValue([\n            {\n              id: 'AB',\n              isVirtual: true,\n              managingOffererId: offerers[0].id,\n              name: 'Le lieu virtuel',\n              offererName: 'La structure',\n            },\n          ])\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'LIVESTREAM_MUSIQUE' })\n\n          // Then\n          await waitFor(() => expect(screen.getByLabelText('Lieu')).toBeInTheDocument())\n          const venueIdError = queryInputErrorForField('venueId')\n          expect(venueIdError).toBeNull()\n        })\n\n        it('should only display venues from active offerers', async () => {\n          // when\n          await renderOffers(props, store)\n\n          // then\n          expect(pcapi.getVenuesForOfferer).toHaveBeenCalledWith({ activeOfferersOnly: true })\n        })\n\n        it('should display venues publicName instead of name if exists', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'JEU' })\n          await setOfferValues({ subcategoryId: 'RENCONTRE_JEU' })\n\n          // Then\n          expect(screen.getByText(venues[0].name)).toBeInTheDocument()\n          expect(screen.getByText(venues[1].name)).toBeInTheDocument()\n          expect(screen.getByText(venues[2].name)).toBeInTheDocument()\n          expect(screen.queryByText(venues[3].name)).not.toBeInTheDocument()\n          expect(screen.getByText(venues[3].publicName)).toBeInTheDocument()\n        })\n      })\n\n      describe('with conditional fields', () => {\n        describe('\"musicType\"', () => {\n          it('should display a music type selection', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n            await setOfferValues({ subcategoryId: 'CONCERT' })\n\n            // Then\n            const musicTypeInput = await getOfferInputForField('musicType')\n            expect(musicTypeInput).toBeInTheDocument()\n          })\n\n          it('should display a music subtype selection when a musicType is selected', async () => {\n            // Given\n            await renderOffers(props, store)\n            await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n            await setOfferValues({ subcategoryId: 'CONCERT' })\n\n            // When\n            await setOfferValues({ musicType: '501' })\n\n            // Then\n            const musicSubTypeInput = await getOfferInputForField('musicSubType')\n            expect(musicSubTypeInput).toBeInTheDocument()\n          })\n\n          it('should not display a music type selection when changing to an offer type wihtout \"musicType\" conditional field', async () => {\n            // Given\n            await renderOffers(props, store)\n            await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n            await setOfferValues({ subcategoryId: 'CONCERT' })\n            await screen.findByLabelText('Genre musical', { exact: false })\n\n            // When\n            await setOfferValues({ categoryId: 'LIVRE' })\n            await setOfferValues({ subcategoryId: 'LIVRE_PAPIER' })\n\n            // Then\n            expect(\n              screen.queryByLabelText('Genre musical', { exact: false })\n            ).not.toBeInTheDocument()\n          })\n\n          it('should not display a music subtype selection when a musicType is not selected and a showType was selected before', async () => {\n            // Given\n            await renderOffers(props, store)\n            await setOfferValues({ categoryId: 'SPECTACLE' })\n            await setOfferValues({ subcategoryId: 'SPECTACLE_REPRESENTATION' })\n            await setOfferValues({ showType: '1300' })\n            await setOfferValues({ showSubType: '1307' })\n\n            // When\n            await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n            await setOfferValues({ subcategoryId: 'CONCERT' })\n\n            // Then\n            expect(screen.queryByLabelText('Sous genre', { exact: false })).not.toBeInTheDocument()\n          })\n        })\n\n        describe('\"showType\"', () => {\n          it('should display a show type selection', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            await setOfferValues({ categoryId: 'SPECTACLE' })\n            await setOfferValues({ subcategoryId: 'SPECTACLE_REPRESENTATION' })\n\n            // Then\n            const showTypeInput = await getOfferInputForField('showType')\n            expect(showTypeInput).toBeInTheDocument()\n          })\n\n          it('should display a show subtype selection when a showType is selected', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            await setOfferValues({ categoryId: 'SPECTACLE' })\n            await setOfferValues({ subcategoryId: 'SPECTACLE_REPRESENTATION' })\n            await setOfferValues({ showType: '1300' })\n\n            // Then\n            const showSubTypeInput = await getOfferInputForField('showSubType')\n            expect(showSubTypeInput).toBeInTheDocument()\n          })\n        })\n\n        describe('\"speaker\"', () => {\n          it('should display a text input \"intervenant\"', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            await setOfferValues({ categoryId: 'CONFERENCE' })\n            await setOfferValues({ subcategoryId: 'RENCONTRE' })\n\n            // Then\n            const speakerInput = await getOfferInputForField('speaker')\n            expect(speakerInput).toBeInTheDocument()\n          })\n        })\n\n        describe('\"author\"', () => {\n          it('should display a text input \"auteur\"', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            await setOfferValues({ categoryId: 'CINEMA' })\n            await setOfferValues({ subcategoryId: 'SEANCE_CINE' })\n\n            // Then\n            const authorInput = await getOfferInputForField('author')\n            expect(authorInput).toBeInTheDocument()\n          })\n        })\n\n        describe('\"visa\"', () => {\n          it(\"should display a text input 'Visa d'exploitation'\", async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            await setOfferValues({ categoryId: 'CINEMA' })\n            await setOfferValues({ subcategoryId: 'SEANCE_CINE' })\n\n            // Then\n            const visaInput = await getOfferInputForField('visa')\n            expect(visaInput).toBeInTheDocument()\n          })\n        })\n\n        describe('\"isbn\"', () => {\n          it('should display a text input \"ISBN\"', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            await setOfferValues({ categoryId: 'LIVRE' })\n            await setOfferValues({ subcategoryId: 'LIVRE_PAPIER' })\n\n            // Then\n            const isbnInput = await getOfferInputForField('isbn')\n            expect(isbnInput).toBeInTheDocument()\n          })\n        })\n\n        describe('\"stageDirector\"', () => {\n          it('should display a text input \"Metteur en scène\"', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            await setOfferValues({ categoryId: 'CINEMA' })\n            await setOfferValues({ subcategoryId: 'SEANCE_CINE' })\n\n            // Then\n            const stageDirectorInput = await getOfferInputForField('stageDirector')\n            expect(stageDirectorInput).toBeInTheDocument()\n          })\n        })\n\n        describe('\"performer\"', () => {\n          it('should display a text input \"Interprète\"', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n            await setOfferValues({ subcategoryId: 'CONCERT' })\n\n            // Then\n            const performerInput = await getOfferInputForField('performer')\n            expect(performerInput).toBeInTheDocument()\n          })\n        })\n      })\n\n      describe('when selecting a virtual venue', () => {\n        it('should display a text input \"url\"', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MEDIA' })\n          await setOfferValues({ subcategoryId: 'ABO_PRESSE_EN_LIGNE' })\n\n          // When\n          await setOfferValues({ venueId: venues[2].id })\n\n          // Then\n          const urlInput = await getOfferInputForField('url')\n          expect(urlInput).toBeInTheDocument()\n        })\n\n        it('should display refundable banner when offer type is online only', async () => {\n          // Given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'MEDIA' })\n          await setOfferValues({ subcategoryId: 'ABO_PRESSE_EN_LIGNE' })\n\n          // When\n          await setOfferValues({ venueId: venues[2].id })\n\n          // Then\n          expect(\n            screen.getByText(\n              \"Cette offre numérique ne fera pas l’objet d’un remboursement. Pour plus d’informations sur les catégories éligibles au remboursement, merci de consulter les CGU.\"\n            )\n          ).toBeInTheDocument()\n        })\n\n        it('should remove refundable banner after selecting a refundable category', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          await setOfferValues({ categoryId: 'MEDIA' })\n          await setOfferValues({ subcategoryId: 'ABO_PRESSE_EN_LIGNE' })\n\n          expect(\n            screen.queryByText(\n              \"Cette offre numérique ne fera pas l’objet d’un remboursement. Pour plus d’informations sur les catégories éligibles au remboursement, merci de consulter les CGU.\"\n            )\n          ).toBeInTheDocument()\n\n          // When\n          await setOfferValues({ categoryId: 'SPECTACLE' })\n          await setOfferValues({ subcategoryId: 'SPECTACLE_REPRESENTATION' })\n\n          // Then\n          expect(\n            screen.queryByText(\n              \"Cette offre numérique ne fera pas l’objet d’un remboursement. Pour plus d’informations sur les catégories éligibles au remboursement, merci de consulter les CGU.\"\n            )\n          ).not.toBeInTheDocument()\n        })\n\n        it('should display refundable banner when offer type is online and offline', async () => {\n          // Given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'FILM' })\n          await setOfferValues({ subcategoryId: 'VOD' })\n\n          // When\n          await setOfferValues({ venueId: venues[2].id })\n\n          // Then\n          expect(\n            screen.getByText(\n              \"Cette offre numérique ne fera pas l’objet d’un remboursement. Pour plus d’informations sur les catégories éligibles au remboursement, merci de consulter les CGU.\"\n            )\n          ).toBeInTheDocument()\n        })\n\n        it('should not display refundable banner when offer category is Livres / livre papier', async () => {\n          // Given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'LIVRE' })\n          await setOfferValues({ subcategoryId: 'LIVRE_PAPIER' })\n\n          // When\n          await setOfferValues({ venueId: venues[2].id })\n\n          // Then\n          expect(\n            screen.queryByText(\n              \"Cette offre numérique ne fera pas l’objet d’un remboursement. Pour plus d’informations sur les catégories éligibles au remboursement, merci de consulter les CGU.\"\n            )\n          ).not.toBeInTheDocument()\n        })\n\n        it('should not display refundable banner when offer type is ThingType.CINEMA_CARD', async () => {\n          // Given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'CINEMA' })\n          await setOfferValues({ subcategoryId: 'CARTE_CINE_MULTISEANCES' })\n\n          // When\n          await setOfferValues({ venueId: venues[2].id })\n\n          // Then\n          expect(\n            screen.queryByText(\n              \"Cette offre numérique ne fera pas l’objet d’un remboursement. Pour plus d’informations sur les catégories éligibles au remboursement, merci de consulter les CGU.\"\n            )\n          ).not.toBeInTheDocument()\n        })\n\n        it('should not remind withdrawal modalities', async () => {\n          // Given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // When\n          await setOfferValues({ venueId: venues[2].id })\n\n          // Then\n          const withdrawalModalitiesReminder = screen.queryByText(\n            \"La livraison d’article n’est pas autorisée. Pour plus d’informations, veuillez consulter nos CGU.\"\n          )\n          expect(withdrawalModalitiesReminder).not.toBeInTheDocument()\n        })\n\n        it(\"should pre-fill booking notification email field with user's email when category is ONLINE_OR_OFFLINE\", async () => {\n          // Given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'MUSEE' })\n          await setOfferValues({ subcategoryId: 'VISITE_GUIDEE' })\n          await setOfferValues({ receiveNotificationEmails: true })\n\n          // When\n          await setOfferValues({ venueId: venues[2].id })\n\n          // Then\n          expect(screen.getByLabelText('Email auquel envoyer les notifications :').value).toBe(\n            'francois@example.com'\n          )\n        })\n      })\n\n      describe('when offer type is event type', () => {\n        it('should display a time input \"Durée\"', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // Then\n          const durationInput = await getOfferInputForField('durationMinutes')\n          expect(durationInput).toBeInTheDocument()\n        })\n\n        it('should display a checkbox input \"Offre duo\" checked by default', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // Then\n          const duoInput = await getOfferInputForField('isDuo')\n          expect(duoInput).toBeInTheDocument()\n          expect(duoInput).toBeChecked()\n        })\n\n        it('should not remind withdrawal modalities', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n          await setOfferValues({ subcategoryId: 'CONCERT' })\n\n          // Then\n          const withdrawalModalitiesReminder = screen.queryByText(\n            \"La livraison d’article n’est pas autorisée. Pour plus d’informations, veuillez consulter nos CGU.\"\n          )\n          expect(withdrawalModalitiesReminder).not.toBeInTheDocument()\n        })\n      })\n\n      describe('when offer type is thing type and venue is not virtual', () => {\n        it('should remind withdrawal modalities in \"Informations pratiques\" section', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          // When\n          await setOfferValues({ categoryId: 'LIVRE' })\n          await setOfferValues({ subcategoryId: 'LIVRE_PAPIER' })\n          await setOfferValues({ venueId: venues[0].id })\n\n          // Then\n          const informationsPratiquesSection = within(\n            screen.getByText('Informations pratiques').closest('section')\n          )\n          const withdrawalModalitiesReminder = informationsPratiquesSection.getByText(\n            \"La livraison d’article n’est pas autorisée. Pour plus d’informations, veuillez consulter nos CGU.\"\n          )\n          expect(withdrawalModalitiesReminder).toBeInTheDocument()\n        })\n\n        it('should pre-fill booking notification email field with venue’s email', async () => {\n          // Given\n          await renderOffers(props, store)\n          await setOfferValues({ categoryId: 'LIVRE' })\n          await setOfferValues({ subcategoryId: 'LIVRE_PAPIER' })\n\n          // When\n          await setOfferValues({ offererId: offerers[0].id })\n          await setOfferValues({ venueId: venues[0].id })\n          await setOfferValues({ receiveNotificationEmails: true })\n\n          // Then\n          await waitFor(() =>\n            expect(screen.getByLabelText('Email auquel envoyer les notifications :').value).toBe(\n              venues[0].bookingEmail\n            )\n          )\n        })\n      })\n\n      it('should initialize empty disabilityCompliance', async () => {\n        // Given\n        await renderOffers(props, store)\n        await setOfferValues({ categoryId: 'LIVRE' })\n        await setOfferValues({ subcategoryId: 'LIVRE_PAPIER', venueId: venues[0].id })\n\n        // Then\n        const audioDisabilityCompliantCheckbox = screen.getByLabelText(\n          fieldLabels.audioDisabilityCompliant.label,\n          {\n            exact: fieldLabels.audioDisabilityCompliant.exact,\n          }\n        )\n        expect(audioDisabilityCompliantCheckbox).not.toBeChecked()\n\n        const mentalDisabilityCompliantCheckbox = screen.getByLabelText(\n          fieldLabels.mentalDisabilityCompliant.label,\n          {\n            exact: fieldLabels.mentalDisabilityCompliant.exact,\n          }\n        )\n        expect(mentalDisabilityCompliantCheckbox).not.toBeChecked()\n\n        const motorDisabilityCompliantCheckbox = screen.getByLabelText(\n          fieldLabels.motorDisabilityCompliant.label,\n          {\n            exact: fieldLabels.motorDisabilityCompliant.exact,\n          }\n        )\n        expect(motorDisabilityCompliantCheckbox).not.toBeChecked()\n\n        const visualDisabilityCompliantCheckbox = screen.getByLabelText(\n          fieldLabels.visualDisabilityCompliant.label,\n          {\n            exact: fieldLabels.visualDisabilityCompliant.exact,\n          }\n        )\n        expect(visualDisabilityCompliantCheckbox).not.toBeChecked()\n\n        const noDisabilityCompliantCheckbox = screen.getByLabelText(\n          fieldLabels.noDisabilityCompliant.label,\n          {\n            exact: fieldLabels.noDisabilityCompliant.exact,\n          }\n        )\n        expect(noDisabilityCompliantCheckbox).not.toBeChecked()\n      })\n    })\n\n    describe('when clicking on cancel link', () => {\n      it('should redirect to offers page', async () => {\n        // When\n        await renderOffers(props, store)\n\n        // Then\n        expect(await screen.findByText('Annuler et quitter', { selector: 'a' })).toHaveAttribute(\n          'href',\n          '/offres'\n        )\n      })\n    })\n\n    describe('when selecting a venue with withdrawal details filled', () => {\n      it(\"should pre-fill withdrawal informations input and preview with venue's\", async () => {\n        // Given\n        await renderOffers(props, store)\n\n        await setOfferValues({ categoryId: 'LIVRE' })\n        await setOfferValues({ subcategoryId: 'LIVRE_PAPIER' })\n\n        // When\n        await setOfferValues({ venueId: venues[1].id })\n\n        // Then\n        expect(screen.getAllByText('Modalité retrait 2')).toHaveLength(2)\n      })\n    })\n  })\n\n  describe('when submitting form', () => {\n    beforeEach(() => {\n      pcapi.loadOffer.mockResolvedValue({ status: 'DRAFT' })\n      pcapi.loadStocks.mockResolvedValue({ stocks: [] })\n    })\n\n    it('should call API with offer data', async () => {\n      // Given\n      const offerValues = {\n        name: 'Ma petite offre',\n        description: 'Pas si petite que ça',\n        durationMinutes: '1:30',\n        isDuo: false,\n        audioDisabilityCompliant: true,\n        mentalDisabilityCompliant: true,\n        motorDisabilityCompliant: true,\n        visualDisabilityCompliant: true,\n        externalTicketOfficeUrl: 'http://example.net',\n        subcategoryId: 'CONCERT',\n        extraData: {\n          musicType: '501',\n          musicSubType: '502',\n          performer: 'TEST PERFORMER NAME',\n        },\n        venueId: venues[0].id,\n        withdrawalDetails: 'À venir chercher sur place.',\n      }\n\n      await renderOffers(props, store)\n\n      await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n      await setOfferValues({ subcategoryId: 'CONCERT' })\n      await setOfferValues(offerValues)\n\n      const createdOffer = {\n        ...offerValues,\n        id: 'CREATED',\n        stocks: [],\n        venue: venues[0],\n        status: 'ACTIVE',\n      }\n\n      pcapi.createOffer.mockResolvedValue(createdOffer)\n      const submitButton = screen.getByText('Étape suivante')\n\n      // When\n      userEvent.click(submitButton)\n\n      // Then\n      expect(submitButton).toBeDisabled()\n      expect(pcapi.createOffer).toHaveBeenCalledWith({\n        ...offerValues,\n        bookingEmail: null,\n        durationMinutes: 90,\n      })\n    })\n\n    it('should submit externalTicketOfficeUrl as null when no value was provided', async () => {\n      // Given\n      const offerValues = {\n        name: 'Ma petite offre',\n        subcategoryId: 'LIVESTREAM_MUSIQUE',\n        venueId: venues[2].id,\n        url: 'http://www.url.com',\n        audioDisabilityCompliant: false,\n        visualDisabilityCompliant: true,\n        motorDisabilityCompliant: false,\n        mentalDisabilityCompliant: false,\n      }\n\n      await renderOffers(props, store)\n\n      await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n      await setOfferValues({ subcategoryId: 'LIVESTREAM_MUSIQUE' })\n      await setOfferValues(offerValues)\n\n      // When\n      await userEvent.click(screen.getByText('Étape suivante'))\n\n      // Then\n      expect(pcapi.createOffer).toHaveBeenCalledWith(\n        expect.objectContaining({\n          externalTicketOfficeUrl: null,\n        })\n      )\n    })\n\n    it('should redirect to stock page when form was correctly submitted', async () => {\n      // Given\n      const offerValues = {\n        name: 'Ma petite offre',\n        description: 'Pas si petite que ça',\n        subcategoryId: 'LIVESTREAM_MUSIQUE',\n        extraData: {\n          musicType: '501',\n          musicSubType: '502',\n          performer: 'TEST PERFORMER NAME',\n        },\n        venueId: venues[2].id,\n        url: 'http://www.url.com',\n        withdrawalDetails: 'À venir chercher sur place.',\n        audioDisabilityCompliant: false,\n        visualDisabilityCompliant: true,\n        motorDisabilityCompliant: false,\n        mentalDisabilityCompliant: false,\n      }\n\n      const createdOffer = {\n        ...offerValues,\n        id: 'CREATED',\n        stocks: [],\n        venue: venues[0],\n        status: 'DRAFT',\n      }\n      pcapi.createOffer.mockResolvedValue(createdOffer)\n      await renderOffers(props, store)\n      pcapi.loadOffer.mockResolvedValue(createdOffer)\n\n      await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n      await setOfferValues({ subcategoryId: offerValues.subcategoryId })\n      await setOfferValues(offerValues)\n\n      // When\n      fireEvent.click(screen.getByText('Étape suivante'))\n\n      // Then\n      await waitFor(() =>\n        expect(screen.getByRole('heading', { name: 'Stock et prix', level: 3 })).toBeInTheDocument()\n      )\n      expect(screen.getByRole('heading', { name: 'Nouvelle offre', level: 1 })).toBeInTheDocument()\n    })\n\n    it('should show errors for mandatory fields', async () => {\n      // Given\n      await renderOffers(props, store)\n      await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n      await setOfferValues({ subcategoryId: 'LIVESTREAM_MUSIQUE' })\n\n      // When\n      userEvent.click(screen.getByText('Étape suivante'))\n\n      // Then\n      expect(pcapi.createOffer).not.toHaveBeenCalled()\n\n      // Mandatory fields\n      const nameError = await findInputErrorForField('name')\n      expect(nameError).toHaveTextContent('Ce champ est obligatoire')\n      const venueIdError = await findInputErrorForField('venueId')\n      expect(venueIdError).toHaveTextContent('Ce champ est obligatoire')\n      const offererIdError = await findInputErrorForField('offererId')\n      expect(offererIdError).toHaveTextContent('Ce champ est obligatoire')\n\n      // Optional fields\n      const descriptionError = queryInputErrorForField('description')\n      expect(descriptionError).toBeNull()\n      const durationMinutesError = queryInputErrorForField('durationMinutes')\n      expect(durationMinutesError).toBeNull()\n      const typeError = queryInputErrorForField('type')\n      expect(typeError).toBeNull()\n      const authorError = queryInputErrorForField('author')\n      expect(authorError).toBeNull()\n      const musicTypeError = queryInputErrorForField('musicType')\n      expect(musicTypeError).toBeNull()\n      const musicSubTypeError = queryInputErrorForField('musicSubType')\n      expect(musicSubTypeError).toBeNull()\n      const performerError = queryInputErrorForField('performer')\n      expect(performerError).toBeNull()\n      const isDuoError = queryInputErrorForField('isDuo')\n      expect(isDuoError).toBeNull()\n      const withdrawalDetailsError = queryInputErrorForField('withdrawalDetails')\n      expect(withdrawalDetailsError).toBeNull()\n      const bookingEmailInput = queryInputErrorForField('bookingEmail')\n      expect(bookingEmailInput).toBeNull()\n    })\n\n    it('should show an error notification when form is not valid', async () => {\n      // Given\n      await renderOffers(props, store)\n      await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n      await setOfferValues({ subcategoryId: 'LIVESTREAM_MUSIQUE' })\n\n      // When\n      userEvent.click(screen.getByText('Étape suivante'))\n\n      // Then\n      const errorNotification = await screen.findByText(\n        'Une ou plusieurs erreurs sont présentes dans le formulaire'\n      )\n      expect(errorNotification).toBeInTheDocument()\n    })\n\n    it('should show error for email notification input when asking to receive booking emails and no email was provided', async () => {\n      // Given\n      await renderOffers(props, store)\n      await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n      await setOfferValues({ subcategoryId: 'LIVESTREAM_MUSIQUE' })\n      await setOfferValues({ receiveNotificationEmails: true })\n\n      // When\n      await setOfferValues({ bookingEmail: '' })\n      fireEvent.click(screen.getByText('Étape suivante'))\n\n      // Then\n      const bookingEmailInput = await findInputErrorForField('bookingEmail')\n      expect(bookingEmailInput).toHaveTextContent('Ce champ est obligatoire')\n    })\n\n    it('should show error for isbn input when creating offer of type livre edition', async () => {\n      // Given\n      await renderOffers(props, store)\n      await setOfferValues({ categoryId: 'LIVRE' })\n      await setOfferValues({ subcategoryId: 'LIVRE_PAPIER' })\n      await setOfferValues({ receiveNotificationEmails: true })\n\n      // When\n      await setOfferValues({ extraData: { isbn: '' } })\n      fireEvent.click(screen.getByText('Étape suivante'))\n\n      // Then\n      const isbn = await findInputErrorForField('isbn')\n      expect(isbn).toHaveTextContent('Ce champ est obligatoire')\n    })\n\n    it('should show error sent by API and show an error notification', async () => {\n      // Given\n      const offerValues = {\n        name: 'Ce nom serait-il invalide ?',\n        description: 'Pas si petite que ça',\n        subcategoryId: 'CONCERT',\n        extraData: {\n          musicType: '501',\n          musicSubType: '502',\n          performer: 'TEST PERFORMER NAME',\n        },\n        venueId: venues[0].id,\n        withdrawalDetails: 'À venir chercher sur place.',\n        audioDisabilityCompliant: false,\n        visualDisabilityCompliant: true,\n        motorDisabilityCompliant: false,\n        mentalDisabilityCompliant: false,\n      }\n\n      pcapi.createOffer.mockRejectedValue({ errors: { name: \"Ce nom n'est pas valide\" } })\n      await renderOffers(props, store)\n\n      await setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n      await setOfferValues({ subcategoryId: 'CONCERT' })\n      await setOfferValues(offerValues)\n\n      // When\n      userEvent.click(screen.getByText('Étape suivante'))\n\n      // Then\n      const nameError = await screen.findByText(\"Ce nom n'est pas valide\")\n      expect(nameError).toBeInTheDocument()\n      const errorNotification = await screen.findByText(\n        'Une ou plusieurs erreurs sont présentes dans le formulaire'\n      )\n      expect(errorNotification).toBeInTheDocument()\n    })\n\n    it('should show an error notification and show error message with CGU link when product is not eligible', async () => {\n      // Given\n      const offerValues = {\n        name: 'Les misérables',\n        extraData: {\n          isbn: '0123456789123',\n        },\n        venueId: venues[0].id,\n        audioDisabilityCompliant: false,\n        visualDisabilityCompliant: true,\n        motorDisabilityCompliant: false,\n        mentalDisabilityCompliant: false,\n      }\n\n      pcapi.createOffer.mockRejectedValue({\n        errors: { isbn: 'Ce produit n’est pas éligible au pass Culture.' },\n      })\n      await renderOffers(props, store)\n\n      await setOfferValues({ categoryId: 'LIVRE' })\n      await setOfferValues({ subcategoryId: 'LIVRE_PAPIER' })\n      await setOfferValues(offerValues)\n\n      // When\n      userEvent.click(screen.getByText('Étape suivante'))\n\n      const errorNotification = await screen.findByText(\n        'Une ou plusieurs erreurs sont présentes dans le formulaire'\n      )\n      expect(errorNotification).toBeInTheDocument()\n      // Then\n      const isbnError = queryByTextTrimHtml(\n        screen,\n        'Ce produit n’est pas éligible au pass Culture. Veuillez consulter nos conditions générales d’utilisation',\n        {\n          selector: 'pre',\n        }\n      )\n      expect(isbnError).toBeInTheDocument()\n    })\n\n    it('should show an error notification and display an error message on the placeholder', async () => {\n      // Given\n      const offerValues = {\n        name: 'Ma petite offre',\n        venueId: venues[0].id,\n        audioDisabilityCompliant: false,\n        visualDisabilityCompliant: true,\n        motorDisabilityCompliant: false,\n        mentalDisabilityCompliant: false,\n      }\n\n      jest.spyOn(Object, 'values').mockReturnValue(['item'])\n      pcapi.postThumbnail.mockRejectedValue({\n        errors: { errors: ['Utilisez une image plus grande (supérieure à 400px par 400px)'] },\n      })\n      const createdOffer = {\n        ...offerValues,\n        venueId: venues[0].id,\n        id: 'AA',\n        stocks: [],\n        venue: venues[0],\n      }\n      pcapi.createOffer.mockResolvedValue(createdOffer)\n      await renderOffers(props, store)\n      pcapi.loadOffer.mockResolvedValue(createdOffer)\n\n      await setOfferValues({ categoryId: 'CINEMA' })\n      await setOfferValues({ subcategoryId: 'CARTE_CINE_MULTISEANCES' })\n\n      await setOfferValues(offerValues)\n\n      // When\n      fireEvent.click(screen.getByText('Étape suivante'))\n\n      // Then\n      waitFor(() => expect(screen.getByText('Ajouter une image')).toBeInTheDocument())\n      const errorNotification = await screen.findByText(\n        'Une ou plusieurs erreurs sont présentes dans le formulaire'\n      )\n      expect(errorNotification).toBeInTheDocument()\n\n      const thumbnailUploadError = await screen.findByText(\n        \"L’image n’a pas pu être ajoutée. Veuillez réessayer.\"\n      )\n      expect(thumbnailUploadError).toBeInTheDocument()\n    })\n  })\n\n  describe('when quitting offer creation', () => {\n    it('should show exit confirmation modal', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      // When\n      fireEvent.click(screen.getByText('Annuler et quitter'))\n\n      // Then\n      const e = screen.getByText('Voulez-vous quitter la création d’offre ?')\n      expect(e).toBeInTheDocument()\n    })\n  })\n\n  describe('when I arrive on offer Creation', () => {\n    it('should display dropdown with categories', async () => {\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      expect(\n        screen.getByText('Musée, patrimoine, architecture, arts visuels', {\n          selector: 'option',\n        })\n      ).toBeInTheDocument()\n    })\n\n    it('should display dropdown with sub categories belonging to its category', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      // When\n      setOfferValues({ categoryId: 'FILM' })\n\n      // Then\n      expect(\n        screen.getByText('Support physique (DVD, Bluray...)', { selector: 'option' })\n      ).toBeInTheDocument()\n      expect(\n        screen.queryByText('Carte cinéma illimité', { selector: 'option' })\n      ).not.toBeInTheDocument()\n      expect(screen.getByLabelText('Sous-catégorie')).toBeInTheDocument()\n      expect(screen.queryByText('Informations artistiques')).not.toBeInTheDocument()\n    })\n\n    it('should display information artistique when sub category is set', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      // When\n      setOfferValues({ categoryId: 'FILM' })\n      setOfferValues({ subcategoryId: 'SUPPORT_PHYSIQUE_FILM' })\n\n      // Then\n      expect(screen.getByText('Informations artistiques')).toBeInTheDocument()\n    })\n\n    it('should display musicType and musicSubType dropdown when I select right category', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      // When\n      setOfferValues({ categoryId: 'MUSIQUE_LIVE' })\n      setOfferValues({ subcategoryId: 'LIVESTREAM_MUSIQUE' })\n\n      // Then\n      expect(screen.getByText('Genre musical')).toBeInTheDocument()\n\n      setOfferValues({ musicType: '501' })\n\n      expect(screen.getByText('Sous genre')).toBeInTheDocument()\n    })\n\n    it('should display showType dropdown when I select right category', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      // When\n      setOfferValues({ categoryId: 'SPECTACLE' })\n      setOfferValues({ subcategoryId: 'SPECTACLE_REPRESENTATION' })\n\n      // Then\n      expect(screen.getByText('Type de spectacle')).toBeInTheDocument()\n\n      setOfferValues({ showType: '100' })\n\n      expect(screen.getByText('Sous type')).toBeInTheDocument()\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/__specs__/OfferEdition.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (1552). Maximum allowed is 150.',
        line: 60,
        column: 36,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1611,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (975). Maximum allowed is 150.',
        line: 140,
        column: 53,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1114,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (235). Maximum allowed is 150.',
        line: 141,
        column: 57,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 375,
        endColumn: 6,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 178,
        column: 45,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 183,
        endColumn: 12,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`queryByText` does not need `await` operator',
        line: 211,
        column: 57,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 211,
        endColumn: 68,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 247,
        column: 45,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 252,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 285,
        column: 43,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 290,
        endColumn: 12,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (1446). Maximum allowed is 300.',
        line: 335,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 1612,
        endColumn: 1,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`getByTitle` does not need `await` operator',
        line: 403,
        column: 24,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 403,
        endColumn: 34,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`getAllByText` does not need `await` operator',
        line: 465,
        column: 29,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 465,
        endColumn: 41,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`getAllByText` does not need `await` operator',
        line: 473,
        column: 29,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 473,
        endColumn: 41,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`getAllByText` does not need `await` operator',
        line: 481,
        column: 29,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 481,
        endColumn: 41,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Async arrow function has too many lines (169). Maximum allowed is 150.',
        line: 605,
        column: 46,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 773,
        endColumn: 6,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (52). Maximum allowed is 15.',
        line: 605,
        column: 46,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 773,
        endColumn: 6,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (205). Maximum allowed is 150.',
        line: 875,
        column: 41,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1079,
        endColumn: 6,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (419). Maximum allowed is 150.',
        line: 1116,
        column: 36,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1534,
        endColumn: 4,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (18). Maximum allowed is 15.',
        line: 1117,
        column: 71,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1158,
        endColumn: 6,
      },
    ],
    errorCount: 0,
    warningCount: 17,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { act, fireEvent, render, screen, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter, Route } from 'react-router'\n\nimport NotificationContainer from 'components/layout/Notification/NotificationContainer'\nimport { getProviderInfo } from 'components/pages/Offers/domain/getProviderInfo'\nimport {\n  fieldLabels,\n  findInputErrorForField,\n  getOfferInputForField,\n  setOfferValues,\n} from 'components/pages/Offers/Offer/OfferDetails/__specs__/helpers'\nimport { DEFAULT_FORM_VALUES } from 'components/pages/Offers/Offer/OfferDetails/OfferForm/_constants'\nimport OfferLayoutContainer from 'components/pages/Offers/Offer/OfferLayoutContainer'\nimport * as computeUrl from 'components/pages/Offers/utils/computeOffersUrl'\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\n\nElement.prototype.scrollIntoView = () => {}\n\njest.mock('repository/pcapi/pcapi', () => ({\n  getValidatedOfferersNames: jest.fn(),\n  getVenuesForOfferer: jest.fn(),\n  getVenue: jest.fn(),\n  loadOffer: jest.fn(),\n  loadCategories: jest.fn(),\n  loadStocks: jest.fn(),\n  postThumbnail: jest.fn(),\n  updateOffer: jest.fn(),\n}))\n\njest.mock('../../../utils/computeOffersUrl', () => ({\n  computeOffersUrl: jest.fn().mockReturnValue('/offres'),\n}))\n\njest.mock('utils/windowMatchMedia', () => ({\n  doesUserPreferReducedMotion: jest.fn().mockReturnValue(false),\n}))\n\nconst renderOffers = async (props, store, queryParams = '') => {\n  await act(async () => {\n    await render(\n      <Provider store={store}>\n        <MemoryRouter initialEntries={[{ pathname: '/offres/ABC12/edition', search: queryParams }]}>\n          <Route path=\"/offres/:offerId([A-Z0-9]+)/\">\n            <>\n              <OfferLayoutContainer {...props} />\n              <NotificationContainer />\n            </>\n          </Route>\n        </MemoryRouter>\n      </Provider>\n    )\n  })\n}\n\ndescribe('offerDetails - Edition', () => {\n  let editedOffer\n  let venueManagingOfferer\n  let props\n  let store\n  let editedOfferVenue\n  let categories\n\n  beforeEach(() => {\n    store = configureTestStore({\n      data: { users: [{ publicName: 'François', isAdmin: false, email: 'francois@example.com' }] },\n    })\n\n    venueManagingOfferer = {\n      id: 'BA',\n      name: 'La structure',\n    }\n\n    editedOfferVenue = {\n      id: 'AB',\n      isVirtual: false,\n      managingOfferer: venueManagingOfferer,\n      managingOffererId: venueManagingOfferer.id,\n      name: 'Le lieu',\n      offererName: 'La structure',\n      bookingEmail: 'venue@example.com',\n      withdrawalDetails: null,\n    }\n\n    editedOffer = {\n      id: 'ABC12',\n      subcategoryId: 'ID',\n      name: 'My edited offer',\n      venue: editedOfferVenue,\n      thumbUrl: null,\n      description: 'My edited description',\n      withdrawalDetails: 'My edited withdrawal details',\n      status: 'SOLD_OUT',\n      extraData: {\n        isbn: '1234567890123',\n      },\n    }\n\n    categories = {\n      categories: [\n        {\n          id: 'ID',\n          name: 'Musique',\n          proLabel: 'Musique',\n          appLabel: 'Musique',\n          isSelectable: true,\n        },\n      ],\n      subcategories: [\n        {\n          id: 'ID',\n          name: 'Musique SubCat 1',\n          categoryId: 'ID',\n          isEvent: false,\n          isDigital: false,\n          isDigitalDeposit: false,\n          isPhysicalDeposit: true,\n          proLabel: 'Musique SubCat 1',\n          appLabel: 'Musique SubCat 1',\n          conditionalFields: ['author', 'musicType', 'performer'],\n          canExpire: true,\n          canBeDuo: false,\n        },\n      ],\n    }\n\n    props = {\n      setShowThumbnailForm: jest.fn(),\n    }\n    pcapi.loadOffer.mockResolvedValue(editedOffer)\n    pcapi.loadCategories.mockResolvedValue(categories)\n    pcapi.getVenue.mockReturnValue(Promise.resolve())\n    pcapi.loadStocks.mockReturnValue(Promise.resolve({ stocks: [] }))\n  })\n\n  describe('render when editing an existing offer', () => {\n    describe('when interacting with disability fields', () => {\n      let audioDisabilityCompliantCheckbox\n      let mentalDisabilityCompliantCheckbox\n      let motorDisabilityCompliantCheckbox\n      let visualDisabilityCompliantCheckbox\n      let noDisabilityCompliantCheckbox\n\n      describe('for offers without any disability compliance information', () => {\n        beforeEach(async () => {\n          const editedOffer = {\n            id: 'ABC12',\n            subcategoryId: 'ID',\n            name: 'My edited offer',\n            venue: editedOfferVenue,\n            thumbUrl: null,\n            audioDisabilityCompliant: null,\n            mentalDisabilityCompliant: null,\n            motorDisabilityCompliant: null,\n            visualDisabilityCompliant: null,\n            status: 'ACTIVE',\n          }\n          pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n          // When\n          await renderOffers(props, store)\n        })\n\n        it('should not have checked values', async () => {\n          const uncheckedDisabilityFields = [\n            'audioDisabilityCompliant',\n            'mentalDisabilityCompliant',\n            'motorDisabilityCompliant',\n            'visualDisabilityCompliant',\n            'visualDisabilityCompliant',\n            'noDisabilityCompliant',\n          ]\n\n          uncheckedDisabilityFields.forEach(label => {\n            const input = screen.getByLabelText(fieldLabels[label].label, {\n              exact: fieldLabels[label].exact,\n            })\n            expect(input).not.toBeChecked()\n          })\n        })\n\n        it('should display error when submitting empty values', async () => {\n          // When\n          userEvent.click(screen.getByText('Enregistrer'))\n\n          // Then\n          const errorNotification = await screen.findByText(\n            'Une ou plusieurs erreurs sont présentes dans le formulaire'\n          )\n          expect(errorNotification).toBeInTheDocument()\n          let accessibilityErrorNotification = await screen.findByText(\n            'Vous devez cocher l’une des options ci-dessus'\n          )\n          expect(accessibilityErrorNotification).toBeInTheDocument()\n          expect(pcapi.updateOffer).not.toHaveBeenCalled()\n\n          // When\n          const mentalDisabilityCompliantCheckbox = screen.getByLabelText(\n            fieldLabels.mentalDisabilityCompliant.label,\n            {\n              exact: fieldLabels.mentalDisabilityCompliant.exact,\n            }\n          )\n          userEvent.click(mentalDisabilityCompliantCheckbox)\n\n          // Then\n          accessibilityErrorNotification = await screen.queryByText(\n            'Vous devez cocher l’une des options ci-dessus'\n          )\n          expect(accessibilityErrorNotification).toBeNull()\n        })\n      })\n\n      describe('for offers with disability compliance information', () => {\n        beforeEach(async () => {\n          const editedOffer = {\n            id: 'ABC12',\n            subcategoryId: 'ID',\n            name: 'My edited offer',\n            venue: editedOfferVenue,\n            thumbUrl: null,\n            audioDisabilityCompliant: true,\n            mentalDisabilityCompliant: true,\n            motorDisabilityCompliant: true,\n            visualDisabilityCompliant: true,\n            status: 'ACTIVE',\n          }\n          pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n          // When\n          await renderOffers(props, store)\n        })\n\n        it('should initialize noDisabilityCompliant unchecked and others checked', async () => {\n          const uncheckedDisabilityFields = [\n            'audioDisabilityCompliant',\n            'mentalDisabilityCompliant',\n            'motorDisabilityCompliant',\n            'visualDisabilityCompliant',\n            'visualDisabilityCompliant',\n          ]\n\n          uncheckedDisabilityFields.forEach(label => {\n            const input = screen.getByLabelText(fieldLabels[label].label, {\n              exact: fieldLabels[label].exact,\n            })\n            expect(input).toBeChecked()\n          })\n\n          const noDisabilityCompliantCheckBox = screen.getByLabelText(\n            fieldLabels.noDisabilityCompliant.label,\n            {\n              exact: fieldLabels.noDisabilityCompliant.exact,\n            }\n          )\n\n          expect(noDisabilityCompliantCheckBox).not.toBeChecked()\n        })\n\n        it('should uncheck all when noDisabilityCompliant is checked', async () => {\n          // When\n          const noDisabilityCompliantCheckBox = screen.getByLabelText(\n            fieldLabels.noDisabilityCompliant.label,\n            {\n              exact: fieldLabels.noDisabilityCompliant.exact,\n            }\n          )\n\n          userEvent.click(noDisabilityCompliantCheckBox)\n\n          // Then\n          expect(noDisabilityCompliantCheckBox).toBeChecked()\n\n          const checkedDisabilityFields = [\n            'audioDisabilityCompliant',\n            'mentalDisabilityCompliant',\n            'motorDisabilityCompliant',\n            'visualDisabilityCompliant',\n            'visualDisabilityCompliant',\n          ]\n          checkedDisabilityFields.forEach(label => {\n            const input = screen.getByLabelText(fieldLabels[label].label, {\n              exact: fieldLabels[label].exact,\n            })\n            expect(input).not.toBeChecked()\n          })\n        })\n      })\n\n      describe('for offers with disability compliance information set to false', () => {\n        beforeEach(async () => {\n          const editedOffer = {\n            id: 'ABC12',\n            subcategoryId: 'ID',\n            name: 'My edited offer',\n            venue: editedOfferVenue,\n            thumbUrl: null,\n            audioDisabilityCompliant: false,\n            mentalDisabilityCompliant: false,\n            motorDisabilityCompliant: false,\n            visualDisabilityCompliant: false,\n            status: 'ACTIVE',\n          }\n          pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n          await renderOffers(props, store)\n          audioDisabilityCompliantCheckbox = screen.getByLabelText(\n            fieldLabels.audioDisabilityCompliant.label,\n            {\n              exact: fieldLabels.audioDisabilityCompliant.exact,\n            }\n          )\n          mentalDisabilityCompliantCheckbox = screen.getByLabelText(\n            fieldLabels.mentalDisabilityCompliant.label,\n            {\n              exact: fieldLabels.mentalDisabilityCompliant.exact,\n            }\n          )\n          motorDisabilityCompliantCheckbox = screen.getByLabelText(\n            fieldLabels.motorDisabilityCompliant.label,\n            {\n              exact: fieldLabels.motorDisabilityCompliant.exact,\n            }\n          )\n          visualDisabilityCompliantCheckbox = screen.getByLabelText(\n            fieldLabels.visualDisabilityCompliant.label,\n            {\n              exact: fieldLabels.visualDisabilityCompliant.exact,\n            }\n          )\n          noDisabilityCompliantCheckbox = screen.getByLabelText(\n            fieldLabels.noDisabilityCompliant.label,\n            {\n              exact: fieldLabels.noDisabilityCompliant.exact,\n            }\n          )\n        })\n\n        it('should initialize noDisabilityCompliant checked and uncheck others', async () => {\n          expect(noDisabilityCompliantCheckbox).toBeChecked()\n          expect(audioDisabilityCompliantCheckbox).not.toBeChecked()\n          expect(mentalDisabilityCompliantCheckbox).not.toBeChecked()\n          expect(motorDisabilityCompliantCheckbox).not.toBeChecked()\n          expect(visualDisabilityCompliantCheckbox).not.toBeChecked()\n        })\n\n        it('should uncheck noDisabilityCompliant when a disabilityCompliant is checked', async () => {\n          // When\n          userEvent.click(mentalDisabilityCompliantCheckbox)\n\n          // Then\n          expect(noDisabilityCompliantCheckbox).not.toBeChecked()\n          expect(audioDisabilityCompliantCheckbox).not.toBeChecked()\n          expect(mentalDisabilityCompliantCheckbox).toBeChecked()\n          expect(motorDisabilityCompliantCheckbox).not.toBeChecked()\n          expect(visualDisabilityCompliantCheckbox).not.toBeChecked()\n        })\n\n        it(\"shouldn't allow noDisabilityCompliant to be unchecked when it's the only one checked\", async () => {\n          // When\n          userEvent.click(noDisabilityCompliantCheckbox)\n\n          // Then\n          expect(noDisabilityCompliantCheckbox).toBeChecked()\n          expect(audioDisabilityCompliantCheckbox).not.toBeChecked()\n          expect(mentalDisabilityCompliantCheckbox).not.toBeChecked()\n          expect(motorDisabilityCompliantCheckbox).not.toBeChecked()\n          expect(visualDisabilityCompliantCheckbox).not.toBeChecked()\n        })\n      })\n    })\n\n    describe('when thumbnail exists', () => {\n      it('should display the actived image', async () => {\n        // Given\n        editedOffer.thumbUrl = 'http://example.net/active-image.png'\n\n        // When\n        await renderOffers({}, store)\n\n        // Then\n        const button = await screen.findByTitle('Modifier l’image', { selector: 'button' })\n        const image = await screen.findByAltText('Image de l’offre')\n        expect(button).toBeInTheDocument()\n        expect(image).toHaveAttribute('src', 'http://example.net/active-image.png')\n      })\n\n      it('should close the modal when user is clicking on close button', async () => {\n        // Given\n        editedOffer.thumbUrl = 'http://example.net/active-image.png'\n        await renderOffers({}, store)\n        userEvent.click(await screen.findByTitle('Modifier l’image', { selector: 'button' }))\n\n        // When\n        userEvent.click(await screen.findByTitle('Fermer la modale', { selector: 'button' }))\n\n        // Then\n        expect(\n          await screen.getByTitle('Modifier l’image', { selector: 'button' })\n        ).toBeInTheDocument()\n        expect(\n          screen.queryByTitle('Fermer la modale', { selector: 'button' })\n        ).not.toBeInTheDocument()\n      })\n\n      it(\"should have a preview link redirecting to the webapp's offer page\", async () => {\n        // When\n        editedOffer.thumbUrl = 'http://example.net/active-image.png'\n        await renderOffers({}, store)\n\n        // Then\n        const previewLink = await screen.findByText('Prévisualiser dans l’app', { selector: 'a' })\n        expect(previewLink).toBeInTheDocument()\n        const expectedWebappUri = `offre/details/${editedOffer.id}`\n        expect(previewLink).toHaveAttribute('href', expect.stringContaining(expectedWebappUri))\n      })\n\n      it(\"should have a preview link redirecting to the webapp's offer page with mediationId as parameter when an active mediation exists\", async () => {\n        // Given\n        editedOffer.thumbUrl = 'http://example.net/active-image.png'\n        editedOffer.activeMediation = { id: 'CBA' }\n\n        // When\n        await renderOffers({}, store)\n\n        // Then\n        const previewLink = await screen.findByText('Prévisualiser dans l’app', { selector: 'a' })\n        expect(previewLink).toBeInTheDocument()\n        const expectedWebappUri = `offre/details/${editedOffer.id}/${editedOffer.activeMediation.id}`\n        expect(previewLink).toHaveAttribute('href', expect.stringContaining(expectedWebappUri))\n      })\n    })\n\n    describe('when thumbnail does not exist', () => {\n      it('should display the placeholder', async () => {\n        // When\n        await renderOffers({}, store)\n\n        // Then\n        expect(screen.getByText('Ajouter une image', { selector: 'button' })).toBeInTheDocument()\n      })\n\n      it('should open the modal when user clicks on the placeholder', async () => {\n        // Given\n        await renderOffers({}, store)\n\n        // When\n        userEvent.click(await screen.findByTitle('Ajouter une image', { selector: 'button' }))\n\n        // Then\n        expect(await screen.findByLabelText('Ajouter une image')).toBeInTheDocument()\n      })\n    })\n\n    describe('offer preview', () => {\n      it('should display title', async () => {\n        // when\n        await renderOffers({}, store)\n\n        // then\n        expect(await screen.getAllByText('My edited offer')).toHaveLength(2)\n      })\n\n      it('should display description', async () => {\n        // when\n        await renderOffers({}, store)\n\n        // then\n        expect(await screen.getAllByText('My edited description')).toHaveLength(2)\n      })\n\n      it('should display terms of withdrawal', async () => {\n        // when\n        await renderOffers({}, store)\n\n        // then\n        expect(await screen.getAllByText('My edited withdrawal details')).toHaveLength(2)\n      })\n\n      describe('when fraud detection', () => {\n        let fullConditionalFieldsCategoryResponse = {}\n        const fieldNames = { ...fieldLabels }\n        delete fieldNames.isNational\n        delete fieldNames.showSubType\n        delete fieldNames.showType\n        delete fieldNames.url\n\n        beforeEach(() => {\n          editedOffer = {\n            ...editedOffer,\n            bookingEmail: 'booking@example.net',\n            isDuo: true,\n            audioDisabilityCompliant: true,\n            mentalDisabilityCompliant: true,\n            motorDisabilityCompliant: true,\n            visualDisabilityCompliant: true,\n            url: 'http://example.net',\n            extraData: {\n              author: 'Mr Offer Author',\n              isbn: '123456789123',\n              musicType: '501',\n              musicSubType: '502',\n              performer: 'Mr Offer Performer',\n              speaker: 'Mr Offer Speaker',\n              stageDirector: 'Mr Offer Stage Director',\n              visa: 'Courtesy of visa',\n            },\n          }\n\n          fullConditionalFieldsCategoryResponse = {\n            ...categories,\n            subcategories: [\n              {\n                ...categories.subcategories[0],\n                isEvent: true,\n                conditionalFields: [\n                  'author',\n                  'isbn',\n                  'musicType',\n                  'performer',\n                  'speaker',\n                  'stageDirector',\n                  'visa',\n                ],\n              },\n            ],\n          }\n        })\n\n        it('should display status informative message and disable all fields when offer is rejected', async () => {\n          // given\n          editedOffer.status = 'REJECTED'\n          editedOffer.isActive = false\n          pcapi.loadOffer.mockResolvedValue(editedOffer)\n          pcapi.loadCategories.mockResolvedValue(fullConditionalFieldsCategoryResponse)\n\n          // when\n          await renderOffers({}, store)\n\n          // then\n          expect(\n            screen.getByText(\n              'Votre offre a été refusée car elle ne respecte pas les Conditions Générales d’Utilisation du pass. Un e-mail contenant les conditions d’éligibilité d’une offre a été envoyé à l’adresse e-mail attachée à votre compte.'\n            )\n          ).toBeInTheDocument()\n\n          for (const fieldName in fieldNames) {\n            expect(\n              screen.getByLabelText(fieldNames[fieldName].label, {\n                exact: fieldNames[fieldName].exact,\n              })\n            ).toBeDisabled()\n          }\n          expect(screen.getByText('Enregistrer')).toBeDisabled()\n          expect(screen.getByTitle('Ajouter une image')).toBeDisabled()\n        })\n\n        it('should display status informative message and disable all fields when offer is pending for validation', async () => {\n          // given\n          editedOffer.status = 'PENDING'\n          editedOffer.isActive = true\n          pcapi.loadOffer.mockResolvedValue(editedOffer)\n          pcapi.loadCategories.mockResolvedValue(fullConditionalFieldsCategoryResponse)\n\n          // when\n          await renderOffers({}, store)\n\n          // then\n          expect(\n            screen.getByText(\n              'Votre offre est en cours de validation par l’équipe du pass Culture. Une fois validée, vous recevrez un e-mail de confirmation et votre offre sera automatiquement mise en ligne.'\n            )\n          ).toBeInTheDocument()\n          for (const fieldName in fieldNames) {\n            expect(\n              screen.getByLabelText(fieldNames[fieldName].label, {\n                exact: fieldNames[fieldName].exact,\n              })\n            ).toBeDisabled()\n          }\n          expect(screen.getByText('Enregistrer')).toBeDisabled()\n          expect(screen.getByTitle('Ajouter une image')).toBeDisabled()\n        })\n      })\n    })\n\n    it('should change title with typed value', async () => {\n      // Given\n      await renderOffers(props, store)\n      const titleInput = await screen.findByLabelText(\"Titre de l'offre\", { exact: false })\n      userEvent.clear(titleInput)\n\n      // When\n      userEvent.type(titleInput, 'Mon nouveau titre')\n\n      // Then\n      const newTitleValue = await screen.findByDisplayValue('Mon nouveau titre')\n      expect(newTitleValue).toBeInTheDocument()\n    })\n\n    it('should show existing offer details', async () => {\n      // Given\n      editedOfferVenue.isVirtual = true\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        bookingEmail: 'booking@example.net',\n        description: 'Offer description',\n        durationMinutes: 90,\n        externalTicketOfficeUrl: 'http://example.fr',\n        isDuo: true,\n        audioDisabilityCompliant: true,\n        mentalDisabilityCompliant: true,\n        motorDisabilityCompliant: true,\n        visualDisabilityCompliant: true,\n        name: 'My edited offer',\n        url: 'http://example.net',\n        venue: editedOfferVenue,\n        venueId: editedOfferVenue.id,\n        withdrawalDetails: 'Offer withdrawal details',\n        status: 'ACTIVE',\n        extraData: {\n          author: 'Mr Offer Author',\n          isbn: '123456789123',\n          musicType: '501',\n          musicSubType: '502',\n          performer: 'Mr Offer Performer',\n          speaker: 'Mr Offer Speaker',\n          stageDirector: 'Mr Offer Stage Director',\n          visa: 'Courtesy of visa',\n        },\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n      const fullConditionalFieldsCategoryResponse = {\n        ...categories,\n        subcategories: [\n          {\n            ...categories.subcategories[0],\n            isEvent: true,\n            conditionalFields: [\n              'author',\n              'isbn',\n              'musicType',\n              'performer',\n              'speaker',\n              'stageDirector',\n              'visa',\n            ],\n          },\n        ],\n      }\n\n      pcapi.loadCategories.mockResolvedValue(fullConditionalFieldsCategoryResponse)\n\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      const categoryInput = screen.getByLabelText(fieldLabels.categoryId.label, {\n        exact: fieldLabels.categoryId.exact,\n      })\n      expect(categoryInput).toHaveValue(categories.subcategories[0].categoryId.toString())\n\n      const musicSubTypeInput = screen.getByLabelText(fieldLabels.musicSubType.label, {\n        exact: fieldLabels.musicSubType.exact,\n      })\n      expect(musicSubTypeInput).toHaveValue(editedOffer.musicSubType)\n      const musicTypeInput = screen.getByLabelText(fieldLabels.musicType.label, {\n        exact: fieldLabels.musicType.exact,\n      })\n      expect(musicTypeInput).toHaveValue(editedOffer.musicType)\n      const offererIdInput = screen.getByLabelText(fieldLabels.offererId.label, {\n        exact: fieldLabels.offererId.exact,\n      })\n      expect(offererIdInput).toHaveValue(editedOfferVenue.managingOffererId)\n      const venueIdInput = screen.getByLabelText(fieldLabels.venueId.label, {\n        exact: fieldLabels.venueId.exact,\n      })\n      expect(venueIdInput).toHaveValue(editedOffer.venueId)\n\n      const authorInput = screen.getByLabelText(fieldLabels.author.label, {\n        exact: fieldLabels.author.exact,\n      })\n      expect(authorInput).toHaveValue(editedOffer.author)\n      const bookingEmailInput = screen.getByLabelText(fieldLabels.bookingEmail.label, {\n        exact: fieldLabels.bookingEmail.exact,\n      })\n      expect(bookingEmailInput).toHaveValue(editedOffer.bookingEmail)\n      const descriptionInput = screen.getByLabelText(fieldLabels.description.label, {\n        exact: fieldLabels.description.exact,\n      })\n      expect(descriptionInput).toHaveValue(editedOffer.description)\n      const durationMinutesInput = screen.getByLabelText(fieldLabels.durationMinutes.label, {\n        exact: fieldLabels.durationMinutes.exact,\n      })\n      expect(durationMinutesInput).toHaveValue('1:30')\n      const isbnInput = screen.getByLabelText(fieldLabels.isbn.label, {\n        exact: fieldLabels.isbn.exact,\n      })\n      expect(isbnInput).toHaveValue(editedOffer.isbn)\n      const isDuoInput = screen.getByLabelText(fieldLabels.isDuo.label, {\n        exact: fieldLabels.isDuo.exact,\n      })\n      expect(isDuoInput).toBeChecked()\n      const audioDisabilityCompliantInput = screen.getByLabelText(\n        fieldLabels.audioDisabilityCompliant.label,\n        {\n          exact: fieldLabels.audioDisabilityCompliant.exact,\n        }\n      )\n      expect(audioDisabilityCompliantInput).toBeChecked()\n      const mentalDisabilityCompliantInput = screen.getByLabelText(\n        fieldLabels.mentalDisabilityCompliant.label,\n        {\n          exact: fieldLabels.mentalDisabilityCompliant.exact,\n        }\n      )\n      expect(mentalDisabilityCompliantInput).toBeChecked()\n      const motorDisabilityCompliantInput = screen.getByLabelText(\n        fieldLabels.motorDisabilityCompliant.label,\n        {\n          exact: fieldLabels.motorDisabilityCompliant.exact,\n        }\n      )\n      expect(motorDisabilityCompliantInput).toBeChecked()\n      const visualDisabilityCompliantInput = screen.getByLabelText(\n        fieldLabels.visualDisabilityCompliant.label,\n        {\n          exact: fieldLabels.visualDisabilityCompliant.exact,\n        }\n      )\n      expect(visualDisabilityCompliantInput).toBeChecked()\n      const nameInput = screen.getByLabelText(fieldLabels.name.label, {\n        exact: fieldLabels.name.exact,\n      })\n      expect(nameInput).toHaveValue(editedOffer.name)\n      const performerInput = screen.getByLabelText(fieldLabels.performer.label, {\n        exact: fieldLabels.performer.exact,\n      })\n      expect(performerInput).toHaveValue(editedOffer.extraData.performer)\n      const stageDirectorInput = screen.getByLabelText(fieldLabels.stageDirector.label, {\n        exact: fieldLabels.stageDirector.exact,\n      })\n      expect(stageDirectorInput).toHaveValue(editedOffer.extraData.stageDirector)\n      const speakerInput = screen.getByLabelText(fieldLabels.speaker.label, {\n        exact: fieldLabels.speaker.exact,\n      })\n      expect(speakerInput).toHaveValue(editedOffer.extraData.speaker)\n      const externalTicketOfficeUrlInput = screen.getByLabelText(\n        fieldLabels.externalTicketOfficeUrl.label,\n        {\n          exact: fieldLabels.externalTicketOfficeUrl.exact,\n        }\n      )\n      expect(externalTicketOfficeUrlInput).toHaveValue(editedOffer.externalTicketOfficeUrl)\n      const urlInput = screen.getByLabelText(fieldLabels.url.label, {\n        exact: fieldLabels.url.exact,\n      })\n      expect(urlInput).toHaveValue(editedOffer.url)\n      const visaInput = screen.getByLabelText(fieldLabels.visa.label, {\n        exact: fieldLabels.visa.exact,\n      })\n      expect(visaInput).toHaveValue(editedOffer.extraData.visa)\n      const withdrawalDetailsInput = screen.getByLabelText(fieldLabels.withdrawalDetails.label, {\n        exact: fieldLabels.withdrawalDetails.exact,\n      })\n      expect(withdrawalDetailsInput).toHaveValue(editedOffer.withdrawalDetails)\n    })\n\n    it('should allow edition of editable fields only', async () => {\n      // Given\n      editedOfferVenue.isVirtual = true\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        name: 'My edited offer',\n        description: 'Offer description',\n        venue: editedOfferVenue,\n        venueId: editedOfferVenue.id,\n        withdrawalDetails: 'Offer withdrawal details',\n        extraData: {\n          author: 'Mr Offer Author',\n          performer: 'Mr Offer Performer',\n          musicType: '501',\n          musicSubType: '502',\n        },\n        bookingEmail: 'booking@example.net',\n        status: 'ACTIVE',\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n      const fullConditionalFieldsCategoryResponse = {\n        ...categories,\n        subcategories: [\n          {\n            ...categories.subcategories[0],\n            isEvent: true,\n            conditionalFields: [\n              'author',\n              'isbn',\n              'musicType',\n              'showType',\n              'performer',\n              'speaker',\n              'stageDirector',\n              'visa',\n            ],\n          },\n        ],\n      }\n\n      pcapi.loadCategories.mockResolvedValue(fullConditionalFieldsCategoryResponse)\n\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      // Edition read only fields\n      const disabledFields = ['categoryId', 'musicSubType', 'musicType', 'offererId', 'venueId']\n\n      disabledFields.forEach(label => {\n        const input = screen.getByLabelText(fieldLabels[label].label, {\n          exact: fieldLabels[label].exact,\n        })\n        expect(input).toBeDisabled()\n      })\n\n      // Editable fields\n      const editableFields = [\n        'author',\n        'bookingEmail',\n        'description',\n        'durationMinutes',\n        'isbn',\n        'isDuo',\n        'name',\n        'performer',\n        'stageDirector',\n        'speaker',\n        'externalTicketOfficeUrl',\n        'url',\n        'visa',\n        'withdrawalDetails',\n        'audioDisabilityCompliant',\n        'motorDisabilityCompliant',\n        'visualDisabilityCompliant',\n      ]\n\n      editableFields.forEach(label => {\n        const input = screen.getByLabelText(fieldLabels[label].label, {\n          exact: fieldLabels[label].exact,\n        })\n        expect(input).toBeEnabled()\n      })\n    })\n\n    it(\"should display venue's publicName instead of name if exists\", async () => {\n      // Given\n      editedOfferVenue.publicName = 'Le publicName du lieu'\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      expect(screen.queryByText(editedOfferVenue.name)).not.toBeInTheDocument()\n      expect(screen.getByText(editedOfferVenue.publicName)).toBeInTheDocument()\n    })\n\n    describe('for synchronized offers', () => {\n      it('should show a banner stating the synchronization and the provider', async () => {\n        // Given\n        const editedOffer = {\n          id: 'ABC12',\n          subcategoryId: 'ID',\n          name: 'My synchronized offer',\n          showType: 400,\n          showSubType: 401,\n          description: 'Offer description',\n          venue: editedOfferVenue,\n          venueId: editedOfferVenue.id,\n          withdrawalDetails: 'Offer withdrawal details',\n          author: 'Mr Offer Author',\n          performer: 'Mr Offer Performer',\n          bookingEmail: 'booking@example.net',\n          lastProvider: {\n            name: 'leslibraires.fr',\n          },\n          status: 'ACTIVE',\n        }\n        pcapi.loadOffer.mockResolvedValue(editedOffer)\n        const providerInformation = getProviderInfo(editedOffer.lastProvider.name)\n\n        // When\n        await renderOffers(props, store)\n\n        // Then\n        const providerBanner = await screen.findByText(\n          `Offre synchronisée avec ${providerInformation.name}`\n        )\n        expect(providerBanner).toBeInTheDocument()\n        expect(\n          screen.getByRole('img', { name: `Icône de ${providerInformation.name}` })\n        ).toHaveAttribute('src', expect.stringContaining(providerInformation.icon))\n      })\n\n      it('should allow edition of accessibility fields and external ticket office url', async () => {\n        // Given\n        editedOfferVenue.isVirtual = true\n        const editedOffer = {\n          id: 'ABC12',\n          subcategoryId: 'ID',\n          name: 'My edited offer',\n          showType: 400,\n          showSubType: 401,\n          description: 'Offer description',\n          venue: editedOfferVenue,\n          venueId: editedOfferVenue.id,\n          withdrawalDetails: 'Offer withdrawal details',\n          author: 'Mr Offer Author',\n          performer: 'Mr Offer Performer',\n          bookingEmail: 'booking@example.net',\n          lastProvider: {\n            name: 'Leslibraires.fr',\n          },\n          status: 'ACTIVE',\n        }\n        pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n        // when\n        await renderOffers(props, store)\n\n        const editableFields = [\n          'mentalDisabilityCompliant',\n          'externalTicketOfficeUrl',\n          'audioDisabilityCompliant',\n          'motorDisabilityCompliant',\n          'visualDisabilityCompliant',\n        ]\n\n        // then\n        editableFields.forEach(label => {\n          const input = screen.getByLabelText(fieldLabels[label].label, {\n            exact: fieldLabels[label].exact,\n          })\n          expect(input).toBeEnabled()\n        })\n      })\n\n      it('should not allow any other edition', async () => {\n        // Given\n        editedOfferVenue.isVirtual = true\n        const editedOffer = {\n          id: 'ABC12',\n          subcategoryId: 'ID',\n          name: 'My edited offer',\n          showType: '400',\n          showSubType: '401',\n          description: 'Offer description',\n          venue: editedOfferVenue,\n          venueId: editedOfferVenue.id,\n          withdrawalDetails: 'Offer withdrawal details',\n          author: 'Mr Offer Author',\n          performer: 'Mr Offer Performer',\n          bookingEmail: 'booking@example.net',\n          lastProvider: {\n            name: 'Leslibraires.fr',\n          },\n          status: 'ACTIVE',\n        }\n        pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n        const fullConditionalFieldsCategoryResponse = {\n          ...categories,\n          subcategories: [\n            {\n              ...categories.subcategories[0],\n              isEvent: true,\n              conditionalFields: [\n                'author',\n                'showType',\n                'performer',\n                'isbn',\n                'stageDirector',\n                'speaker',\n                'visa',\n              ],\n            },\n          ],\n        }\n\n        pcapi.loadCategories.mockResolvedValue(fullConditionalFieldsCategoryResponse)\n\n        // When\n        await renderOffers(props, store)\n\n        // Then\n        // Edition read only fields\n        const disabledFields = [\n          'categoryId',\n          'subcategoryId',\n          'showType',\n          'showSubType',\n          'offererId',\n          'author',\n          'bookingEmail',\n          'receiveNotificationEmails',\n          'description',\n          'durationMinutes',\n          'isbn',\n          'isDuo',\n          'name',\n          'performer',\n          'stageDirector',\n          'speaker',\n          'url',\n          'venueId',\n          'visa',\n          'withdrawalDetails',\n        ]\n\n        disabledFields.forEach(label => {\n          const input = screen.getByLabelText(fieldLabels[label].label, {\n            exact: fieldLabels[label].exact,\n          })\n          expect(input).toBeDisabled()\n        })\n      })\n\n      it('should allow edition of \"isDuo\" for \"Allociné\" offers', async () => {\n        // Given\n        const editedOffer = {\n          id: 'ABC12',\n          subcategoryId: 'ID',\n          name: 'My edited offer',\n          showType: 400,\n          showSubType: 401,\n          description: 'Offer description',\n          venue: editedOfferVenue,\n          venueId: editedOfferVenue.id,\n          withdrawalDetails: 'Offer withdrawal details',\n          author: 'Mr Offer Author',\n          performer: 'Mr Offer Performer',\n          bookingEmail: 'booking@example.net',\n          lastProvider: {\n            name: 'Allociné',\n          },\n          status: 'ACTIVE',\n        }\n\n        pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n        const fullConditionalFieldsCategoryResponse = {\n          ...categories,\n          subcategories: [\n            {\n              ...categories.subcategories[0],\n              isEvent: true,\n            },\n          ],\n        }\n\n        pcapi.loadCategories.mockResolvedValue(fullConditionalFieldsCategoryResponse)\n\n        // When\n        await renderOffers(props, store)\n\n        // Then\n        const isDuoInput = screen.getByLabelText(fieldLabels.isDuo.label, {\n          exact: fieldLabels.isDuo.exact,\n        })\n        expect(isDuoInput).toBeEnabled()\n      })\n    })\n\n    describe('when booking email checkbox is not checked yet and user checks it', () => {\n      it('should prefill booking email input with correct value', async () => {\n        // given\n        const editedOffer = {\n          id: 'ABC12',\n          subcategoryId: 'ID',\n          name: 'My edited offer',\n          description: 'Offer description',\n          venueId: editedOfferVenue.id,\n          venue: editedOfferVenue,\n          withdrawalDetails: 'Offer withdrawal details',\n          bookingEmail: null,\n          extraData: null,\n          audioDisabilityCompliant: false,\n          mentalDisabilityCompliant: false,\n          motorDisabilityCompliant: false,\n          visualDisabilityCompliant: false,\n          status: 'ACTIVE',\n        }\n        pcapi.loadOffer.mockResolvedValue(editedOffer)\n        await renderOffers(props, store)\n\n        // when\n        await act(async () => {\n          await setOfferValues({ receiveNotificationEmails: true })\n        })\n\n        // then\n        expect(screen.getByLabelText('Email auquel envoyer les notifications :').value).toBe(\n          'venue@example.com'\n        )\n      })\n    })\n  })\n\n  describe('when submitting form', () => {\n    it('should show updated fields when going and back to stock tab', async () => {\n      // Given\n      await renderOffers(props, store)\n      const editValues = {\n        name: 'My edited offer',\n        subcategoryId: 'ID',\n        description: 'Offer description edited',\n        withdrawalDetails: 'Offer withdrawal details edited',\n        audioDisabilityCompliant: true,\n        visualDisabilityCompliant: false,\n        motorDisabilityCompliant: true,\n        mentalDisabilityCompliant: true,\n      }\n\n      // When\n      await setOfferValues({ subcategoryId: editValues.subcategoryId })\n      await setOfferValues(editValues)\n      const newEditedOffer = { ...editedOffer, ...editValues }\n      pcapi.loadOffer.mockResolvedValue(newEditedOffer)\n      fireEvent.click(screen.getByText('Enregistrer'))\n      fireEvent.click(screen.getByText('Stock et prix'))\n      fireEvent.click(await screen.findByText(\"Détail de l'offre\"))\n\n      // Then\n      expect(await getOfferInputForField('name')).toHaveTextContent(editValues.name)\n\n      const expectedSubCategoryValue = categories.subcategories.find(\n        subCat => subCat.id.toString() === editValues.subcategoryId\n      ).proLabel\n      expect(await getOfferInputForField('subcategoryId')).toHaveTextContent(\n        expectedSubCategoryValue\n      )\n\n      expect(await getOfferInputForField('description')).toHaveTextContent(editValues.description)\n      expect(await getOfferInputForField('withdrawalDetails')).toHaveTextContent(\n        editValues.withdrawalDetails\n      )\n      expect(await getOfferInputForField('audioDisabilityCompliant')).toBeChecked()\n      expect(await getOfferInputForField('visualDisabilityCompliant')).not.toBeChecked()\n      expect(await getOfferInputForField('motorDisabilityCompliant')).toBeChecked()\n      expect(await getOfferInputForField('mentalDisabilityCompliant')).toBeChecked()\n    })\n\n    it('should not send not editable fields for non-synchronised offers', async () => {\n      // Given\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        name: 'My edited offer',\n        description: 'Offer description',\n        venueId: editedOfferVenue.id,\n        venue: editedOfferVenue,\n        withdrawalDetails: 'Offer withdrawal details',\n        bookingEmail: 'booking@example.net',\n        extraData: {\n          isbn: '1234567890123',\n        },\n        audioDisabilityCompliant: false,\n        visualDisabilityCompliant: true,\n        motorDisabilityCompliant: false,\n        mentalDisabilityCompliant: false,\n        status: 'ACTIVE',\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n      await renderOffers(props, store)\n\n      // When\n      userEvent.click(screen.getByText('Enregistrer'))\n\n      // Then\n      await waitFor(() =>\n        expect(pcapi.updateOffer).toHaveBeenCalledWith(\n          editedOffer.id,\n          expect.not.objectContaining({\n            venueId: expect.anything(),\n            type: expect.anything(),\n          })\n        )\n      )\n    })\n\n    it('should show a success notification when form was correctly submitted', async () => {\n      // Given\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        name: 'My edited offer',\n        description: 'Offer description',\n        venueId: editedOfferVenue.id,\n        venue: editedOfferVenue,\n        withdrawalDetails: 'Offer withdrawal details',\n        bookingEmail: 'booking@example.net',\n        extraData: {\n          isbn: '1234567890123',\n        },\n        audioDisabilityCompliant: false,\n        visualDisabilityCompliant: true,\n        motorDisabilityCompliant: false,\n        mentalDisabilityCompliant: false,\n        status: 'ACTIVE',\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n      await renderOffers(props, store)\n      const submitButton = screen.getByText('Enregistrer')\n\n      // When\n      userEvent.click(submitButton)\n\n      // Then\n      expect(submitButton).toBeDisabled()\n      const successNotification = await screen.findByText('Votre offre a bien été modifiée')\n      expect(successNotification).toBeInTheDocument()\n    })\n\n    it('should send accessibility fields for synchronized offers', async () => {\n      // Given\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        name: 'My edited offer',\n        description: 'Offer description',\n        venueId: editedOfferVenue.id,\n        venue: editedOfferVenue,\n        withdrawalDetails: 'Offer withdrawal details',\n        bookingEmail: 'booking@example.net',\n        extraData: {\n          stageDirector: 'Mr Stage Director',\n        },\n        audioDisabilityCompliant: false,\n        visualDisabilityCompliant: true,\n        motorDisabilityCompliant: false,\n        mentalDisabilityCompliant: false,\n        lastProvider: {\n          name: 'Allociné',\n        },\n        status: 'ACTIVE',\n      }\n\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n      const cinema = {\n        ...categories,\n        subcategories: [\n          {\n            ...categories.subcategories[0],\n            isEvent: true,\n            conditionalFields: ['author', 'visa', 'stageDirector'],\n          },\n        ],\n      }\n\n      pcapi.loadCategories.mockResolvedValue(cinema)\n\n      await renderOffers(props, store)\n\n      // When\n      userEvent.click(screen.getByText('Enregistrer'))\n\n      // Then\n      await waitFor(() =>\n        expect(pcapi.updateOffer).toHaveBeenCalledWith(\n          editedOffer.id,\n          expect.objectContaining({\n            audioDisabilityCompliant: false,\n            visualDisabilityCompliant: true,\n            motorDisabilityCompliant: false,\n            mentalDisabilityCompliant: false,\n          })\n        )\n      )\n    })\n\n    it('should not send extraData for synchronized offers', async () => {\n      // Given\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        name: 'My edited offer',\n        description: 'Offer description',\n        venueId: editedOfferVenue.id,\n        venue: editedOfferVenue,\n        withdrawalDetails: 'Offer withdrawal details',\n        bookingEmail: 'booking@example.net',\n        extraData: {\n          stageDirector: 'Mr Stage Director',\n        },\n        lastProvider: {\n          name: 'Allociné',\n        },\n        status: 'ACTIVE',\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n      await renderOffers(props, store)\n\n      // When\n      userEvent.click(screen.getByText('Enregistrer'))\n\n      // Then\n      await waitFor(() =>\n        expect(pcapi.updateOffer).toHaveBeenCalledWith(\n          editedOffer.id,\n          expect.not.objectContaining({\n            extraData: null,\n          })\n        )\n      )\n    })\n\n    it('should send null extraData when removing them', async () => {\n      // Given\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        name: 'My edited offer',\n        description: 'Offer description',\n        venueId: editedOfferVenue.id,\n        venue: editedOfferVenue,\n        withdrawalDetails: 'Offer withdrawal details',\n        bookingEmail: 'booking@example.net',\n        extraData: {\n          author: 'Mon auteur',\n        },\n        audioDisabilityCompliant: false,\n        visualDisabilityCompliant: true,\n        motorDisabilityCompliant: false,\n        mentalDisabilityCompliant: false,\n        status: 'ACTIVE',\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n      await renderOffers(props, store)\n\n      // When\n      await setOfferValues({ author: DEFAULT_FORM_VALUES.author })\n\n      // Then\n      userEvent.click(screen.getByText('Enregistrer'))\n      await waitFor(() =>\n        expect(pcapi.updateOffer).toHaveBeenCalledWith(\n          editedOffer.id,\n          expect.objectContaining({\n            extraData: null,\n          })\n        )\n      )\n    })\n\n    it('should remove attribute from extraData when no value is provided', async () => {\n      // Given\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        name: 'My edited offer',\n        description: 'Offer description',\n        venueId: editedOfferVenue.id,\n        venue: editedOfferVenue,\n        withdrawalDetails: 'Offer withdrawal details',\n        bookingEmail: 'booking@example.net',\n        extraData: {\n          author: 'Mon auteur',\n          isbn: '123456789',\n        },\n        audioDisabilityCompliant: false,\n        visualDisabilityCompliant: true,\n        motorDisabilityCompliant: false,\n        mentalDisabilityCompliant: false,\n        status: 'ACTIVE',\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n      const category = {\n        ...categories,\n        subcategories: [\n          {\n            ...categories.subcategories[0],\n            conditionalFields: ['author', 'isbn'],\n          },\n        ],\n      }\n\n      pcapi.loadCategories.mockResolvedValue(category)\n\n      await renderOffers(props, store)\n\n      // When\n      await setOfferValues({ author: DEFAULT_FORM_VALUES.author })\n\n      // Then\n      userEvent.click(screen.getByText('Enregistrer'))\n\n      await waitFor(() =>\n        expect(pcapi.updateOffer).toHaveBeenCalledWith(\n          editedOffer.id,\n          expect.objectContaining({\n            extraData: { isbn: editedOffer.extraData.isbn },\n          })\n        )\n      )\n    })\n\n    it('should remove notification email when remove the will to receive notifications', async () => {\n      // Given\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        name: 'My edited offer',\n        description: 'Offer description',\n        venueId: editedOfferVenue.id,\n        venue: editedOfferVenue,\n        withdrawalDetails: 'Offer withdrawal details',\n        bookingEmail: 'booking@example.net',\n        extraData: {\n          isbn: '1234567890123',\n        },\n        audioDisabilityCompliant: false,\n        mentalDisabilityCompliant: false,\n        motorDisabilityCompliant: false,\n        visualDisabilityCompliant: false,\n        status: 'ACTIVE',\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n      await renderOffers(props, store)\n      await setOfferValues({ receiveNotificationEmails: false })\n\n      // When\n      userEvent.click(screen.getByText('Enregistrer'))\n\n      // Then\n      await waitFor(() =>\n        expect(pcapi.updateOffer).toHaveBeenCalledWith(\n          editedOffer.id,\n          expect.objectContaining({\n            bookingEmail: null,\n          })\n        )\n      )\n    })\n\n    it('should show error for email notification input when asking to receive booking emails and no email was provided', async () => {\n      // Given\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        name: 'My edited offer',\n        description: 'Offer description',\n        venueId: editedOfferVenue.id,\n        venue: editedOfferVenue,\n        withdrawalDetails: 'Offer withdrawal details',\n        bookingEmail: null,\n        status: 'ACTIVE',\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n      await renderOffers(props, store)\n      await setOfferValues({ receiveNotificationEmails: true })\n      fireEvent.change(screen.getByLabelText('Email auquel envoyer les notifications :'), {\n        target: { value: '' },\n      })\n\n      // When\n      userEvent.click(screen.getByText('Enregistrer'))\n\n      // Then\n      const bookingEmailInput = await findInputErrorForField('bookingEmail')\n      expect(bookingEmailInput).toHaveTextContent('Ce champ est obligatoire')\n      expect(\n        screen.getByText('Une ou plusieurs erreurs sont présentes dans le formulaire')\n      ).toBeInTheDocument()\n    })\n\n    it('should show error sent by API and show an error notification', async () => {\n      // Given\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        name: 'My edited offer',\n        description: 'Offer description',\n        venueId: editedOfferVenue.id,\n        venue: editedOfferVenue,\n        withdrawalDetails: 'Offer withdrawal details',\n        bookingEmail: 'booking@example.net',\n        extraData: {\n          isbn: '1234567890123',\n        },\n        status: 'ACTIVE',\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n      pcapi.updateOffer.mockRejectedValue({ errors: { name: \"Ce nom n'est pas valide\" } })\n      await renderOffers(props, store)\n      await setOfferValues({ name: 'Ce nom serait-il invalide ?' })\n\n      // When\n      userEvent.click(screen.getByText('Enregistrer'))\n\n      // Then\n      const nameError = await screen.findByText(\"Ce nom n'est pas valide\")\n      expect(nameError).toBeInTheDocument()\n      const errorNotification = await screen.findByText(\n        'Une ou plusieurs erreurs sont présentes dans le formulaire'\n      )\n      expect(errorNotification).toBeInTheDocument()\n    })\n\n    it('should show a success notification when a thumbnail submitted', async () => {\n      // Given\n      jest.spyOn(Object, 'values').mockReturnValue(['item'])\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n      pcapi.updateOffer.mockResolvedValue({ id: 'AA' })\n      pcapi.postThumbnail.mockResolvedValue({ id: 'BB' })\n      await renderOffers(props, store)\n\n      // When\n      fireEvent.click(screen.getByText('Enregistrer'))\n\n      // Then\n      const successNotification = await screen.findByText('Votre offre a bien été modifiée')\n      expect(successNotification).toBeInTheDocument()\n    })\n  })\n\n  describe('when clicking on cancel link', () => {\n    it('should call computeOffersUrl with proper params', async () => {\n      // Given\n      const testStore = {\n        data: { users: [{ publicName: 'François', isAdmin: false }] },\n        offers: {\n          searchFilters: {\n            name: 'test',\n            offererId: 'AY',\n            venueId: 'EQ',\n            typeId: 'EventType.CINEMA',\n            status: 'all',\n            creationMode: 'manual',\n            periodBeginningDate: '2020-11-30T00:00:00+01:00',\n            periodEndingDate: '2021-01-07T23:59:59+01:00',\n          },\n        },\n      }\n      store = configureTestStore(testStore)\n\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        name: 'My edited offer',\n        description: 'Offer description',\n        venueId: editedOfferVenue.id,\n        venue: editedOfferVenue,\n        withdrawalDetails: 'Offer withdrawal details',\n        bookingEmail: 'booking@example.net',\n        extraData: null,\n        status: 'ACTIVE',\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n      await renderOffers(props, store)\n\n      // When\n      userEvent.click(screen.getByRole('link', { name: 'Annuler et quitter' }))\n\n      // Then\n      expect(computeUrl.computeOffersUrl).toHaveBeenLastCalledWith(\n        testStore.offers.searchFilters,\n        1\n      )\n    })\n\n    it('should redirect to offers page', async () => {\n      // Given\n      store = configureTestStore({\n        data: { users: [{ publicName: 'François', isAdmin: false }] },\n        offers: {\n          searchFilters: {},\n        },\n      })\n      const editedOffer = {\n        id: 'ABC12',\n        subcategoryId: 'ID',\n        name: 'My edited offer',\n        description: 'Offer description',\n        venueId: editedOfferVenue.id,\n        venue: editedOfferVenue,\n        withdrawalDetails: 'Offer withdrawal details',\n        bookingEmail: null,\n        status: 'ACTIVE',\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      const cancelLink = screen.getByRole('link', { name: 'Annuler et quitter' })\n      expect(cancelLink).toBeInTheDocument()\n      expect(cancelLink).toHaveAttribute('href', '/offres')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/__specs__/helpers.js',
    messages: [
      {
        ruleId: 'testing-library/no-dom-import',
        severity: 1,
        message:
          'import from DOM Testing Library is restricted, import from @testing-library/react instead',
        line: 1,
        column: 1,
        nodeType: 'ImportDeclaration',
        messageId: 'noDomImportFramework',
        endLine: 1,
        endColumn: 49,
        fix: { range: [26, 48], text: "'@testing-library/react'" },
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 1,
    source:
      "import { fireEvent } from '@testing-library/dom'\nimport { screen } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\nexport const fieldLabels = {\n  author: { label: 'Auteur', exact: false },\n  bookingEmail: { label: 'Email auquel envoyer les notifications :', exact: false },\n  description: { label: 'Description', exact: false },\n  durationMinutes: { label: 'Durée', exact: false },\n  externalTicketOfficeUrl: { label: /URL de redirection externe/, exact: true },\n  isbn: { label: 'ISBN', exact: false },\n  isDuo: { label: 'Accepter les réservations \"duo\"', exact: false },\n  audioDisabilityCompliant: { label: 'Auditif', exact: true },\n  mentalDisabilityCompliant: { label: 'Psychique ou cognitif', exact: true },\n  motorDisabilityCompliant: { label: 'Moteur', exact: true },\n  visualDisabilityCompliant: { label: 'Visuel', exact: true },\n  noDisabilityCompliant: { label: 'Non accessible', exact: true },\n  isNational: { label: 'Rayonnement national', exact: true },\n  name: { label: \"Titre de l'offre\", exact: false },\n  musicType: { label: 'Genre musical', exact: false },\n  musicSubType: { label: 'Sous genre', exact: false },\n  offererId: { label: 'Structure', exact: true },\n  performer: { label: 'Interprète', exact: false },\n  receiveNotificationEmails: { label: 'Être notifié par email des réservations', exact: true },\n  showSubType: { label: 'Sous type', exact: false },\n  showType: { label: 'Type de spectacle', exact: false },\n  stageDirector: { label: 'Metteur en scène', exact: false },\n  speaker: { label: 'Intervenant', exact: false },\n  categoryId: { label: 'Catégorie', exact: true },\n  subcategoryId: { label: 'Sous-catégorie', exact: true },\n  url: { label: 'URL d’accès à l’offre', exact: false },\n  venueId: { label: 'Lieu', exact: true },\n  visa: { label: 'Visa d’exploitation', exact: false },\n  withdrawalDetails: { label: 'Informations de retrait', exact: false },\n}\n\nexport const getOfferInputForField = async fieldName => {\n  const { label, exact } = fieldLabels[fieldName]\n  return await screen.findByLabelText(label, { exact })\n}\n\nexport const findInputErrorForField = fieldName => {\n  return screen.findByTestId(`input-error-field-${fieldName}`)\n}\n\nexport const queryInputErrorForField = fieldName => {\n  return screen.queryByTestId(`input-error-field-${fieldName}`)\n}\n\nexport const setOfferValues = values => {\n  const checkboxes = [\n    'isDuo',\n    'audioDisabilityCompliant',\n    'mentalDisabilityCompliant',\n    'motorDisabilityCompliant',\n    'visualDisabilityCompliant',\n    'receiveNotificationEmails',\n  ]\n\n  const setFormValueForField = (field, value) => {\n    let input\n    const { label, exact } = fieldLabels[field]\n    input = screen.getByLabelText(label, { exact })\n\n    if (checkboxes.includes(field)) {\n      userEvent.click(input)\n    } else if (field === 'durationMinutes') {\n      userEvent.type(input, value)\n    } else {\n      fireEvent.change(input, { target: { value } })\n    }\n\n    return input\n  }\n\n  const modifiedInputs = {}\n  for (const fieldName in values) {\n    if (fieldName === 'extraData') {\n      modifiedInputs[fieldName] = setOfferValues(values.extraData)\n    } else {\n      modifiedInputs[fieldName] = setFormValueForField(fieldName, values[fieldName])\n    }\n  }\n\n  return Promise.resolve(modifiedInputs)\n}\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferDetails/subTypes.js',
    messages: [
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (400). Maximum allowed is 300.',
        line: 302,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 402,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "export const musicOptionsTree = [\n  {\n    code: 501,\n    label: 'Jazz',\n    children: [\n      { code: 502, label: 'Acid Jazz' },\n      { code: 503, label: 'Avant-Garde Jazz' },\n      { code: 504, label: 'Bebop' },\n      { code: 505, label: 'Big Band' },\n      { code: 506, label: 'Blue Note ' },\n      { code: 507, label: 'Cool Jazz' },\n      { code: 508, label: 'Crossover Jazz' },\n      { code: 509, label: 'Dixieland' },\n      { code: 510, label: 'Ethio Jazz' },\n      { code: 511, label: 'Fusion' },\n      { code: 512, label: 'Jazz Contemporain' },\n      { code: 513, label: 'Jazz Funk' },\n      { code: 514, label: 'Mainstream' },\n      { code: 515, label: 'Manouche' },\n      { code: 516, label: 'Traditionel' },\n      { code: 517, label: 'Vocal Jazz' },\n      { code: 518, label: 'Ragtime' },\n      { code: 519, label: 'Smooth' },\n    ],\n  },\n  {\n    code: 520,\n    label: 'Blues',\n    children: [\n      { code: 521, label: 'Blues Accoustique' },\n      { code: 522, label: 'Blues Contemporain' },\n      { code: 523, label: 'Blues Électrique' },\n      { code: 524, label: 'Blues Rock' },\n      { code: 525, label: 'Chicago Blues' },\n      { code: 526, label: 'Classic Blues' },\n      { code: 527, label: 'Country Blues' },\n      { code: 528, label: 'Delta Blues' },\n      { code: 529, label: 'Ragtime' },\n    ],\n  },\n  {\n    code: 530,\n    label: 'Reggae',\n    children: [\n      { code: 531, label: '2-Tone' },\n      { code: 532, label: 'Dancehall' },\n      { code: 533, label: 'Dub' },\n      { code: 534, label: 'Roots ' },\n      { code: 535, label: 'Ska' },\n      { code: 536, label: 'Zouk ' },\n    ],\n  },\n  {\n    code: 600,\n    label: 'Classique',\n    children: [\n      { code: 601, label: 'Avant-garde' },\n      { code: 602, label: 'Baroque' },\n      { code: 603, label: 'Chant' },\n      { code: 604, label: 'Chorale' },\n      { code: 605, label: 'Contemporain' },\n      { code: 606, label: 'Expressioniste' },\n      { code: 607, label: 'Impressioniste' },\n      { code: 608, label: 'Médievale' },\n      { code: 609, label: 'Minimaliste' },\n      { code: 610, label: 'Moderne ' },\n      { code: 611, label: 'Oratorio' },\n      { code: 612, label: 'Opéra' },\n      { code: 613, label: 'Renaissance' },\n      { code: 614, label: 'Romantique' },\n    ],\n  },\n  {\n    code: 700,\n    label: 'Musique du Monde',\n    children: [\n      { code: 701, label: 'Africaine' },\n      { code: 702, label: 'Afro Beat' },\n      { code: 703, label: 'Afro Pop' },\n      { code: 704, label: 'Alternativo ' },\n      { code: 705, label: 'Amérique du Nord' },\n      { code: 706, label: 'Amérique du Sud' },\n      { code: 707, label: 'Asiatique' },\n      { code: 708, label: 'Baladas y Boleros' },\n      { code: 709, label: 'Bossa Nova' },\n      { code: 710, label: 'Brésilienne' },\n      { code: 711, label: 'Cajun' },\n      { code: 712, label: 'Calypso' },\n      { code: 713, label: 'Caribéenne' },\n      { code: 714, label: 'Celtique' },\n      { code: 715, label: 'Cumbia ' },\n      { code: 716, label: 'Flamenco' },\n      { code: 717, label: 'Grècque' },\n      { code: 718, label: 'Indienne' },\n      { code: 719, label: 'Latin Jazz' },\n      { code: 720, label: 'Moyen-Orient' },\n      { code: 721, label: 'Musique Latine Contemporaine' },\n      { code: 722, label: 'Nuevo Flamenco' },\n      { code: 723, label: 'Pop Latino' },\n      { code: 724, label: 'Portuguese fado ' },\n      { code: 725, label: 'Rai' },\n      { code: 726, label: 'Salsa' },\n      { code: 727, label: 'Tango Argentin' },\n      { code: 728, label: 'Yiddish' },\n    ],\n  },\n  {\n    code: 800,\n    label: 'Pop',\n    children: [\n      { code: 801, label: 'Britpop' },\n      { code: 802, label: 'Bubblegum ' },\n      { code: 803, label: 'Dance Pop' },\n      { code: 804, label: 'Dream Pop ' },\n      { code: 805, label: 'Electro Pop' },\n      { code: 806, label: 'Indie Pop' },\n      { code: 808, label: 'J-Pop' },\n      { code: 809, label: 'K-Pop' },\n      { code: 810, label: 'Pop Punk ' },\n      { code: 811, label: 'Pop/Rock' },\n      { code: 812, label: 'Power Pop ' },\n      { code: 813, label: 'Soft Rock' },\n      { code: 814, label: 'Synthpop ' },\n      { code: 815, label: 'Teen Pop' },\n    ],\n  },\n  {\n    code: 820,\n    label: 'Rock',\n    children: [\n      { code: 821, label: 'Acid Rock ' },\n      { code: 822, label: 'Arena Rock' },\n      { code: 823, label: 'Art Rock' },\n      { code: 824, label: 'College Rock' },\n      { code: 825, label: 'Glam Rock' },\n      { code: 826, label: 'Grunge' },\n      { code: 827, label: 'Hard Rock' },\n      { code: 828, label: 'Indie Rock' },\n      { code: 829, label: 'Lo-fi' },\n      { code: 830, label: 'Prog-Rock' },\n      { code: 831, label: 'Psychedelic' },\n      { code: 832, label: 'Rock & Roll' },\n      { code: 833, label: 'Rock Experimental' },\n      { code: 834, label: 'Rockabilly' },\n      { code: 835, label: 'Shoegaze' },\n      { code: 836, label: 'Rock Electro' },\n    ],\n  },\n  {\n    code: 840,\n    label: 'Metal',\n    children: [\n      { code: 841, label: 'Black Metal' },\n      { code: 842, label: 'Death Metal ' },\n      { code: 843, label: 'Doom Metal' },\n      { code: 844, label: 'Gothic ' },\n      { code: 845, label: 'Metal Core' },\n      { code: 846, label: 'Metal Progressif' },\n      { code: 847, label: 'Trash Metal' },\n      { code: 848, label: 'Metal Industriel' },\n      { code: 849, label: 'Fusion' },\n    ],\n  },\n  {\n    code: 850,\n    label: 'Punk',\n    children: [\n      { code: 851, label: 'Post Punk ' },\n      { code: 852, label: 'Hardcore Punk' },\n      { code: 853, label: 'Afro Punk' },\n      { code: 854, label: 'Grindcore' },\n      { code: 855, label: 'Noise Rock ' },\n    ],\n  },\n  {\n    code: 860,\n    label: 'Folk',\n    children: [\n      { code: 861, label: 'Folk Contemporaine' },\n      { code: 862, label: 'Indie Folk' },\n      { code: 863, label: 'Folk Rock' },\n      { code: 864, label: 'New Acoustic' },\n      { code: 865, label: 'Folk Traditionelle' },\n      { code: 866, label: 'Tex-Mex' },\n    ],\n  },\n  {\n    code: 870,\n    label: 'Country',\n    children: [\n      { code: 871, label: 'Country Alternative' },\n      { code: 872, label: 'Americana' },\n      { code: 873, label: 'Bluegrass' },\n      { code: 874, label: 'Country Contemporaine' },\n      { code: 875, label: 'Gospel Country' },\n      { code: 876, label: 'Country Pop' },\n    ],\n  },\n  {\n    code: 880,\n    label: 'Electro',\n    children: [\n      { code: 881, label: 'Bitpop' },\n      { code: 882, label: 'Breakbeat ' },\n      { code: 883, label: 'Chillwave' },\n      { code: 884, label: 'Dance' },\n      { code: 885, label: 'Downtempo' },\n      { code: 886, label: 'Drum & Bass ' },\n      { code: 887, label: 'Dubstep' },\n      { code: 888, label: 'Electro Experimental' },\n      { code: 889, label: 'Electronica' },\n      { code: 890, label: 'Garage' },\n      { code: 891, label: 'Grime' },\n      { code: 892, label: 'Hard Dance' },\n      { code: 893, label: 'Hardcore' },\n      { code: 894, label: 'House' },\n      { code: 895, label: 'Industriel' },\n      { code: 896, label: 'Lounge' },\n      { code: 897, label: 'Techno' },\n      { code: 898, label: 'Trance' },\n    ],\n  },\n  {\n    code: 900,\n    label: 'Hip-Hop/Rap',\n    children: [\n      { code: 901, label: 'Bounce' },\n      { code: 902, label: 'Hip Hop' },\n      { code: 903, label: 'Rap Alternatif' },\n      { code: 905, label: 'Rap East Coast' },\n      { code: 906, label: 'Rap Français' },\n      { code: 907, label: 'Rap Gangsta' },\n      { code: 908, label: 'Rap Hardcore' },\n      { code: 909, label: 'Rap Latino' },\n      { code: 910, label: 'Rap Old School' },\n      { code: 911, label: 'Rap Underground' },\n      { code: 912, label: 'Rap West Coast' },\n      { code: 913, label: 'Trap' },\n      { code: 914, label: 'Trip Hop' },\n      { code: 921, label: 'R&B Contemporain' },\n      { code: 922, label: 'Disco' },\n      { code: 923, label: 'Doo Wop' },\n      { code: 924, label: 'Funk' },\n      { code: 925, label: 'Soul' },\n      { code: 926, label: 'Motown' },\n      { code: 927, label: 'Neo Soul' },\n      { code: 928, label: 'Soul Psychedelique' },\n    ],\n  },\n  {\n    code: 930,\n    label: 'Gospel',\n    children: [\n      { code: 931, label: 'Spiritual Gospel' },\n      { code: 932, label: 'Traditional Gospel' },\n      { code: 933, label: 'Southern Gospel' },\n      { code: 934, label: 'Contemporary Gospel' },\n      { code: 935, label: 'Bluegrass Gospel' },\n      { code: 936, label: 'Blues Gospel' },\n      { code: 937, label: 'Country Gospel' },\n      { code: 938, label: 'Hybrid Gospel' },\n    ],\n  },\n  {\n    code: 1000,\n    label: 'Chansons / Variétés',\n    children: [\n      { code: 1001, label: 'Musette' },\n      { code: 1002, label: 'Chanson Française' },\n      { code: 1003, label: 'Music Hall' },\n      { code: 1004, label: 'Folklore français' },\n      { code: 1005, label: 'Chanson à texte' },\n      { code: 1006, label: 'Slam' },\n    ],\n  },\n]\n\nexport const showOptionsTree = [\n  {\n    code: 100,\n    label: 'Arts de la rue',\n    children: [\n      { code: 101, label: 'Carnaval' },\n      { code: 102, label: 'Fanfare' },\n      { code: 103, label: 'Mime' },\n      { code: 104, label: 'Parade' },\n      { code: 105, label: 'Théâtre de Rue' },\n      { code: 106, label: 'Théâtre Promenade' },\n    ],\n  },\n  {\n    code: 200,\n    label: 'Cirque',\n    children: [\n      { code: 201, label: 'Cirque Contemporain' },\n      { code: 202, label: 'Cirque Hors les murs' },\n      { code: 203, label: 'Cirque Traditionel' },\n      { code: 204, label: 'Cirque Voyageur' },\n      { code: 205, label: 'Clown' },\n      { code: 206, label: 'Hypnose' },\n      { code: 207, label: 'Mentaliste' },\n      { code: 208, label: 'Spectacle de Magie' },\n      { code: 209, label: 'Spectacle Équestre' },\n    ],\n  },\n  {\n    code: 300,\n    label: 'Danse',\n    children: [\n      { code: 302, label: 'Ballet' },\n      { code: 303, label: 'Cancan' },\n      { code: 304, label: 'Claquette' },\n      { code: 305, label: 'Classique' },\n      { code: 306, label: 'Contemporaine' },\n      { code: 307, label: 'Danse du Monde' },\n      { code: 308, label: 'Flamenco' },\n      { code: 309, label: 'Moderne Jazz' },\n      { code: 311, label: 'Salsa' },\n      { code: 312, label: 'Swing' },\n      { code: 313, label: 'Tango' },\n      { code: 314, label: 'Urbaine' },\n    ],\n  },\n  {\n    code: 400,\n    label: 'Humour / Café-théâtre',\n    children: [\n      { code: 401, label: 'Café Théâtre' },\n      { code: 402, label: 'Improvisation' },\n      { code: 403, label: 'Seul.e en scène' },\n      { code: 404, label: 'Sketch' },\n      { code: 405, label: 'Stand Up' },\n      { code: 406, label: 'Ventriloque' },\n    ],\n  },\n  {\n    code: 1100,\n    label: 'Spectacle Musical / Cabaret / Opérette',\n    children: [\n      { code: 1101, label: 'Cabaret' },\n      { code: 1102, label: 'Café Concert' },\n      { code: 1103, label: 'Claquette' },\n      { code: 1104, label: 'Comédie Musicale' },\n      { code: 1105, label: 'Opéra Bouffe' },\n      { code: 1108, label: 'Opérette' },\n      { code: 1109, label: 'Revue' },\n      { code: 1111, label: 'Burlesque' },\n      { code: 1112, label: 'Comédie-Ballet' },\n      { code: 1113, label: 'Opéra Comique' },\n      { code: 1114, label: 'Opéra-Ballet' },\n      { code: 1115, label: 'Théâtre musical' },\n    ],\n  },\n  {\n    code: 1200,\n    label: 'Spectacle Jeunesse',\n    children: [\n      { code: 1201, label: 'Conte' },\n      { code: 1202, label: 'Théâtre jeunesse' },\n      { code: 1203, label: 'Spectacle Petite Enfance' },\n      { code: 1204, label: 'Magie Enfance' },\n      { code: 1205, label: 'Spectacle pédagogique' },\n      { code: 1206, label: 'Marionettes' },\n      { code: 1207, label: 'Comédie musicale jeunesse' },\n      { code: 1208, label: 'Théâtre d’Ombres' },\n    ],\n  },\n  {\n    code: 1300,\n    label: 'Théâtre',\n    children: [\n      { code: 1301, label: 'Boulevard' },\n      { code: 1302, label: 'Classique' },\n      { code: 1303, label: 'Comédie' },\n      { code: 1304, label: 'Contemporain' },\n      { code: 1305, label: 'Lecture' },\n      { code: 1306, label: 'Spectacle Scénographique' },\n      { code: 1307, label: 'Théâtre Experimental' },\n      { code: 1308, label: 'Théâtre d’Objet' },\n      { code: 1309, label: 'Tragédie' },\n    ],\n  },\n  {\n    code: 1400,\n    label: 'Pluridisciplinaire',\n    children: [\n      { code: 1401, label: 'Performance' },\n      { code: 1402, label: 'Poésie' },\n    ],\n  },\n  {\n    code: 1500,\n    label: 'Autre (spectacle sur glace, historique, aquatique…)  ',\n    children: [\n      { code: 1501, label: 'Son et lumière' },\n      { code: 1502, label: 'Spectacle sur glace' },\n      { code: 1503, label: 'Spectacle historique' },\n      { code: 1504, label: 'Spectacle aquatique' },\n    ],\n  },\n]\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferLayout.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferLayoutContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferPreviewLink/OfferPreviewLink.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferStatus/OfferHeader.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferStatus/StatusLabel.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferStatus/StatusToggleButton.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/OfferStatus/StatusToggleButtonContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/ActivationCodesUploadDialog/ActivationCodesConfirmationForm/ActivationCodesConfirmationForm.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/ActivationCodesUploadDialog/ActivationCodesCsvForm/ActivationCodesCsvForm.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/ActivationCodesUploadDialog/ActivationCodesCsvForm/ActivationCodesUploadErrorDescription.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/ActivationCodesUploadDialog/ActivationCodesCsvForm/ActivationCodesUploadInformationDescription.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/ActivationCodesUploadDialog/ActivationCodesUploadDialog.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/ActivationCodesUploadDialog/UploadedFileChecker.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/ActivationCodesUploadDialog/__specs__/ActivationCodesUploadDialog.spec.jsx',
    messages: [
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`getByTestId` does not need `await` operator',
        line: 74,
        column: 27,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 74,
        endColumn: 38,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { act, fireEvent, render, screen } from '@testing-library/react'\nimport React from 'react'\nimport { Provider } from 'react-redux'\n\nimport ActivationCodesUploadDialog from 'components/pages/Offers/Offer/Stocks/ActivationCodesUploadDialog/ActivationCodesUploadDialog'\nimport { configureTestStore } from 'store/testUtils'\n\nconst renderActivationCodesUploadDialog = async (store, props = {}) => {\n  return await act(async () => {\n    return render(\n      <Provider store={store}>\n        <ActivationCodesUploadDialog {...props} />\n      </Provider>\n    )\n  })\n}\n\ndescribe('activationCodesUploadDialog', () => {\n  describe('uI Tests', () => {\n    let store\n\n    beforeEach(() => {\n      store = configureTestStore({\n        data: {\n          users: [\n            {\n              id: 'test_id',\n              hasSeenProTutorials: true,\n            },\n          ],\n        },\n      })\n    })\n\n    it('should display an error when the file violates activation codes upload checks', async () => {\n      // Given\n      const props = {\n        activationCodes: [],\n        changeActivationCodesExpirationDatetime: jest.fn(),\n        closeDialog: jest.fn(),\n        setActivationCodes: jest.fn(),\n        today: new Date(),\n        validateActivationCodes: jest.fn(),\n      }\n\n      // When\n      await renderActivationCodesUploadDialog(store, props)\n\n      const uploadButton = screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n      const file = new File(['ABH\\nJHB\\nJHB\\nCEG\\nCEG'], 'activation_codes.csv', {\n        type: 'text/csv',\n      })\n\n      expect(screen.getByTestId('activation-codes-upload-icon-id')).toBeInTheDocument()\n\n      fireEvent.change(uploadButton, {\n        target: {\n          files: [file],\n        },\n      })\n\n      // Then\n      expect(\n        await screen.findByText(/Une erreur s’est produite lors de l’import de votre fichier/i)\n      ).toBeInTheDocument()\n\n      expect(\n        await screen.findByText(\n          'Plusieurs codes identiques ont été trouvés dans le fichier : JHB, CEG.'\n        )\n      ).toBeInTheDocument()\n\n      expect(await screen.getByTestId('activation-codes-upload-error-icon-id')).toBeInTheDocument()\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/ActivationCodesUploadDialog/__specs__/UploadedFileChecker.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (165). Maximum allowed is 50.',
        line: 3,
        column: 33,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 167,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (97). Maximum allowed is 50.',
        line: 55,
        column: 48,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 151,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { csvToRows, checkAndParseUploadedFile, fileReader } from '../UploadedFileChecker'\n\ndescribe('uploadedFileChecker', () => {\n  describe('csvToRows', () => {\n    it.each`\n      testName       | fileContent\n      ${'null'}      | ${null}\n      ${'undefined'} | ${undefined}\n    `('should return no rows from a $testName fileContent', async ({ fileContent }) => {\n      // When\n      const rows = csvToRows(fileContent)\n\n      // then\n      expect(rows).toHaveLength(0)\n    })\n\n    it.each`\n      fileContent\n      ${''}\n      ${'No Carriage Return in this file'}\n    `(\n      'should return no rows if fileContent does not contains a carriage return',\n      async ({ fileContent }) => {\n        // When\n        const rows = csvToRows(fileContent)\n\n        // then\n        expect(rows).toHaveLength(0)\n      }\n    )\n\n    it('should split a file content in rows', () => {\n      // Given\n      const fileContent = 'CD1122\\nCD1114'\n\n      // When\n      const rows = csvToRows(fileContent)\n\n      // then\n      expect(rows).toStrictEqual(['CD1122', 'CD1114'])\n    })\n\n    it('should split a file content in rows and trim whitespaces', () => {\n      // Given\n      const fileContent = ' CD1122\\nCD1114  '\n\n      // When\n      const rows = csvToRows(fileContent)\n\n      // then\n      expect(rows).toStrictEqual(['CD1122', 'CD1114'])\n    })\n  })\n\n  describe('checkAndParseUploadedFile Method', () => {\n    it('should return an error message if the file is bigger then 1 Mo', async () => {\n      // When\n      const currentFile = { size: 1048577 }\n      const { errorMessage } = await checkAndParseUploadedFile({ currentFile })\n\n      // then\n      expect(errorMessage).toStrictEqual('Le poids du fichier ne doit pas dépasser 1 Mo.')\n    })\n    it('should return an error message if the file is not readable', async () => {\n      // When\n      const currentFile = { size: 1024 }\n      const { errorMessage } = await checkAndParseUploadedFile({\n        fileReader: () => Promise.resolve(null),\n        currentFile,\n      })\n\n      // then\n      expect(errorMessage).toStrictEqual(\n        'Le fichier est vide ou illisible, veuillez réessayer ou contacter le support.'\n      )\n    })\n    it('should return an error message if the file does not contain any activation code', async () => {\n      // When\n      const currentFile = { size: 1024 }\n      const { errorMessage } = await checkAndParseUploadedFile({\n        fileReader: () => Promise.resolve('\\n \\n \\n'),\n        currentFile,\n      })\n\n      // then\n      expect(errorMessage).toStrictEqual('Le fichier ne contient aucun code d’activation.')\n    })\n    it('should return an error message if the file has more than 1 column per row', async () => {\n      // When\n      const currentFile = { size: 1024 }\n      const { errorMessage } = await checkAndParseUploadedFile({\n        fileReader: () => Promise.resolve('Code1\\nCode3,Code4'),\n        currentFile,\n      })\n\n      // then\n      expect(errorMessage).toStrictEqual(\n        'Le fichier ne respecte pas le format attendu. Merci de vous rapporter au gabarit CSV disponible au téléchargement.'\n      )\n    })\n    it('should return an error message if the file contains duplicates (up to 5 are displayed)', async () => {\n      // When\n      const currentFile = { size: 1024 }\n      const { errorMessage } = await checkAndParseUploadedFile({\n        fileReader: () =>\n          Promise.resolve('C1\\nC1\\nC1\\nC2\\nC3\\nC4\\nC5\\nC6\\nC7\\nC1\\nC2\\nC3\\nC4\\nC5\\nC6'),\n        currentFile,\n      })\n\n      // then\n      expect(errorMessage).toStrictEqual(\n        'Plusieurs codes identiques ont été trouvés dans le fichier : C1, C2, C3, C4, C5... .'\n      )\n    })\n    it.each`\n      unauthorizedCharacter\n      ${'.'}\n      ${','}\n      ${';'}\n    `(\n      'should return an error message if the file contains unauthorized characters ($unauthorizedCharacter) more than 1 column per row',\n      async ({ unauthorizedCharacter }) => {\n        // When\n        const currentFile = { size: 1024 }\n        const { errorMessage } = await checkAndParseUploadedFile({\n          fileReader: () =>\n            Promise.resolve(\n              `C1\\nC1\\nC1\\nC2\\nC3${unauthorizedCharacter}\\nC4\\nC5\\nC6\\nC7\\nC1\\nC2\\nC3\\nC4\\nC5\\nC6`\n            ),\n          currentFile,\n        })\n\n        // then\n        expect(errorMessage).toStrictEqual(\n          'Le fichier ne respecte pas le format attendu. Merci de vous rapporter au gabarit CSV disponible au téléchargement.'\n        )\n      }\n    )\n    it('should return activation codes if the file is correct', async () => {\n      // When\n      const currentFile = { size: 1024 }\n      const { errorMessage, activationCodes } = await checkAndParseUploadedFile({\n        fileReader: () => Promise.resolve('ABOCADEAU_RJ3IF962W1\\nABO#@235$01_3I62A4W'),\n        currentFile,\n      })\n\n      // then\n      expect(errorMessage).toBeUndefined()\n      expect(activationCodes).toStrictEqual(['ABOCADEAU_RJ3IF962W1', 'ABO#@235$01_3I62A4W'])\n    })\n  })\n\n  describe('fileReader', () => {\n    it('should return the content of a file as string', async () => {\n      // Given\n      const file = new File(['ABH\\nJHB\\nJHB\\nCEG\\nCEG'], 'activation_codes.csv', {\n        type: 'text/csv',\n      })\n\n      // When\n      const content = await fileReader(file)\n\n      // Then\n      expect(content).toStrictEqual('ABH\\nJHB\\nJHB\\nCEG\\nCEG')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/DeleteStockDialog/DeleteStockDialog.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/DeleteStockDialog/DeleteStockDialogContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/EventStocks.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (297). Maximum allowed is 150.',
        line: 25,
        column: 21,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 321,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (25). Maximum allowed is 15.',
        line: 25,
        column: 21,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 321,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (301). Maximum allowed is 300.',
        line: 332,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 333,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import PropTypes from 'prop-types'\nimport React, { Fragment, useCallback, useEffect, useMemo, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { v4 as generateRandomUuid } from 'uuid'\n\nimport PageTitle from 'components/layout/PageTitle/PageTitle'\nimport SubmitButton from 'components/layout/SubmitButton/SubmitButton'\nimport { isOfferDisabled } from 'components/pages/Offers/domain/isOfferDisabled'\nimport OfferStatusBanner from 'components/pages/Offers/Offer/OfferDetails/OfferStatusBanner/OfferStatusBanner'\nimport {\n  createEventStockPayload,\n  formatAndSortStocks,\n  validateCreatedStock,\n  validateUpdatedStock,\n} from 'components/pages/Offers/Offer/Stocks/StockItem/domain'\nimport StockItemContainer from 'components/pages/Offers/Offer/Stocks/StockItem/StockItemContainer'\nimport { OFFER_STATUS_DRAFT } from 'components/pages/Offers/Offers/_constants'\nimport { ReactComponent as AddStockSvg } from 'icons/ico-plus.svg'\nimport * as pcapi from 'repository/pcapi/pcapi'\n\nimport { queryParamsFromOfferer } from '../../utils/queryParamsFromOfferer'\n\nconst EMPTY_STRING_VALUE = ''\n\nconst EventStocks = ({\n  history,\n  location,\n  offer,\n  showErrorNotification,\n  showSuccessNotification,\n  reloadOffer,\n}) => {\n  const offerId = offer.id\n  const [isLoading, setIsLoading] = useState(true)\n  const [isSendingStocksOfferCreation, setIsSendingStocksOfferCreation] = useState(false)\n  const [stocks, setStocks] = useState([])\n  const isOfferSynchronized = Boolean(offer.lastProvider)\n  const [formErrors, setFormErrors] = useState({})\n  const isOfferDraft = offer.status === OFFER_STATUS_DRAFT\n  const editionOfferLink = `/offres/${offerId}/edition`\n\n  const loadStocks = useCallback(\n    (keepCreationStocks = false) => {\n      return pcapi.loadStocks(offerId).then(receivedStocks => {\n        setStocks(oldStocks => {\n          const stocksOnCreation = keepCreationStocks ? oldStocks.filter(stock => !stock.id) : []\n          return [\n            ...stocksOnCreation,\n            ...formatAndSortStocks(receivedStocks.stocks, offer.venue.departementCode),\n          ]\n        })\n        setIsLoading(false)\n      })\n    },\n    [offerId, offer.venue.departementCode]\n  )\n\n  const onDelete = useCallback(() => {\n    reloadOffer()\n    loadStocks(true)\n  }, [loadStocks, reloadOffer])\n\n  useEffect(() => {\n    loadStocks()\n  }, [loadStocks])\n\n  useEffect(() => {\n    if (Object.values(formErrors).length > 0) {\n      showErrorNotification()\n    }\n  }, [formErrors, showErrorNotification])\n\n  const addNewStock = useCallback(() => {\n    const newStock = {\n      key: generateRandomUuid(),\n      price: EMPTY_STRING_VALUE,\n      quantity: null,\n      bookingLimitDatetime: null,\n      beginningDatetime: null,\n    }\n\n    setStocks(currentStocks => [newStock, ...currentStocks])\n  }, [])\n\n  const removeStockInCreation = useCallback(\n    key => setStocks(currentStocks => currentStocks.filter(stock => stock.key !== key)),\n    []\n  )\n\n  const existingStocks = useMemo(() => stocks.filter(stock => stock.id !== undefined), [stocks])\n  const stocksInCreation = useMemo(() => stocks.filter(stock => stock.id === undefined), [stocks])\n\n  const updateStock = useCallback(updatedStockValues => {\n    setStocks(currentStocks => {\n      const stockToUpdateIndex = currentStocks.findIndex(\n        currentStock => currentStock.key === updatedStockValues.key\n      )\n      const updatedStock = {\n        ...currentStocks[stockToUpdateIndex],\n        ...updatedStockValues,\n        updated: true,\n      }\n      let newStocks = [...currentStocks]\n      newStocks.splice(stockToUpdateIndex, 1, updatedStock)\n      return newStocks\n    })\n  }, [])\n\n  const areValid = stocks => {\n    const stocksErrors = stocks.reduce((stocksErrors, stock) => {\n      const isNewStock = stock.id === undefined\n      const stockErrors = isNewStock ? validateCreatedStock(stock) : validateUpdatedStock(stock)\n      const stockHasErrors = Object.keys(stockErrors).length > 0\n      return stockHasErrors ? { ...stocksErrors, [stock.key]: stockErrors } : stocksErrors\n    }, {})\n\n    const hasErrors = Object.values(stocksErrors).length > 0\n\n    if (hasErrors) {\n      const formErrors = {\n        global: 'Une ou plusieurs erreurs sont présentes dans le formulaire.',\n        ...stocksErrors,\n      }\n      setFormErrors(formErrors)\n    } else {\n      setFormErrors({})\n    }\n\n    return !hasErrors\n  }\n\n  const submitStocks = useCallback(() => {\n    const updatedStocks = existingStocks.filter(stock => stock.updated)\n    if (areValid([...stocksInCreation, ...updatedStocks])) {\n      setIsSendingStocksOfferCreation(true)\n      const stocksToCreate = stocksInCreation.map(stockInCreation =>\n        createEventStockPayload(stockInCreation, offer.venue.departementCode)\n      )\n      const stocksToUpdate = updatedStocks.map(updatedStock => {\n        const payload = createEventStockPayload(updatedStock, offer.venue.departementCode)\n        payload.id = updatedStock.id\n        return payload\n      })\n      pcapi\n        .bulkCreateOrEditStock(offer.id, [...stocksToCreate, ...stocksToUpdate])\n        .then(() => {\n          if (isOfferDraft) {\n            reloadOffer(true)\n            showSuccessNotification('Votre offre a bien été créée et vos stocks sauvegardés.')\n\n            const queryParams = queryParamsFromOfferer(location)\n            let queryString = ''\n\n            if (queryParams.structure !== '') {\n              queryString = `?structure=${queryParams.structure}`\n            }\n\n            if (queryParams.lieu !== '') {\n              queryString += `&lieu=${queryParams.lieu}`\n            }\n\n            history.push(`/offres/${offer.id}/confirmation${queryString}`)\n          } else {\n            loadStocks()\n            reloadOffer()\n            showSuccessNotification('Vos stocks ont bien été sauvegardés.')\n            setIsSendingStocksOfferCreation(false)\n          }\n        })\n        .catch(() => {\n          showErrorNotification()\n          setIsSendingStocksOfferCreation(false)\n        })\n    }\n  }, [\n    existingStocks,\n    history,\n    location,\n    stocksInCreation,\n    offer.id,\n    isOfferDraft,\n    offer.venue.departementCode,\n    loadStocks,\n    reloadOffer,\n    showSuccessNotification,\n    showErrorNotification,\n  ])\n\n  if (isLoading) {\n    return null\n  }\n\n  const isDisabled = offer.status ? isOfferDisabled(offer.status) : false\n  const hasNoStock = stocks.length === 0\n  const hasAtLeastOneStock = stocks.length > 0\n\n  return (\n    <div className=\"stocks-page\">\n      <PageTitle title=\"Vos stocks\" />\n\n      {isDisabled && <OfferStatusBanner status={offer.status} />}\n\n      <h3 className=\"section-title\">\n        Stock et prix\n      </h3>\n\n      <div className=\"cancellation-information\">\n        Les utilisateurs ont un délai de 48h pour annuler leur réservation mais ne peuvent pas le faire moins de 48h avant le début de l’événement. Si la date limite de réservation n’est pas encore passée, la place est alors automatiquement remise en vente.\n      </div>\n      {hasNoStock ? (\n        <button\n          className=\"primary-button with-icon add-first-stock-button\"\n          disabled={isDisabled}\n          onClick={addNewStock}\n          type=\"button\"\n        >\n          <AddStockSvg />\n          Ajouter une date\n        </button>\n      ) : (\n        <Fragment>\n          <button\n            className=\"tertiary-button with-icon\"\n            disabled={isDisabled || isOfferSynchronized}\n            onClick={addNewStock}\n            type=\"button\"\n          >\n            <AddStockSvg />\n            Ajouter une date\n          </button>\n          <table>\n            <thead>\n              <tr>\n                <th>\n                  Date\n                </th>\n                <th>\n                  Horaire\n                </th>\n                <th>\n                  Prix\n                </th>\n                <th>\n                  Date limite de réservation\n                </th>\n                <th>\n                  Quantité\n                </th>\n                {(stocksInCreation.length === 0 || existingStocks.length > 0) && (\n                  <Fragment>\n                    <th>\n                      Stock restant\n                    </th>\n                    <th>\n                      Réservations\n                    </th>\n                  </Fragment>\n                )}\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {stocksInCreation.map(stockInCreation => (\n                <StockItemContainer\n                  departmentCode={offer.venue.departementCode}\n                  errors={formErrors[stockInCreation.key]}\n                  initialStock={stockInCreation}\n                  isDigital={offer.isDigital}\n                  isEvent\n                  isNewStock\n                  key={stockInCreation.key}\n                  onChange={updateStock}\n                  onDelete={onDelete}\n                  removeStockInCreation={removeStockInCreation}\n                />\n              ))}\n\n              {existingStocks.map(stock => (\n                <StockItemContainer\n                  departmentCode={offer.venue.departementCode}\n                  errors={formErrors[stock.key]}\n                  initialStock={stock}\n                  isDigital={offer.isDigital}\n                  isDisabled={isDisabled}\n                  isEvent\n                  key={stock.id}\n                  lastProvider={offer.lastProvider}\n                  onChange={updateStock}\n                  onDelete={onDelete}\n                />\n              ))}\n            </tbody>\n          </table>\n        </Fragment>\n      )}\n      {(isOfferDraft || hasAtLeastOneStock) && (\n        <Fragment>\n          <div className=\"interval cover\" />\n          <div className=\"interval shadow\" />\n          <section className=\"actions-section\">\n            {!isOfferDraft && (\n              <Link\n                className=\"secondary-link\"\n                to={editionOfferLink}\n              >\n                Annuler et quitter\n              </Link>\n            )}\n            <SubmitButton\n              disabled={isDisabled || hasNoStock}\n              isLoading={isSendingStocksOfferCreation}\n              onClick={submitStocks}\n            >\n              {isOfferDraft ? 'Valider et créer l’offre' : 'Enregistrer'}\n            </SubmitButton>\n          </section>\n        </Fragment>\n      )}\n    </div>\n  )\n}\n\nEventStocks.propTypes = {\n  history: PropTypes.shape().isRequired,\n  location: PropTypes.shape().isRequired,\n  offer: PropTypes.shape().isRequired,\n  reloadOffer: PropTypes.func.isRequired,\n  showErrorNotification: PropTypes.func.isRequired,\n  showSuccessNotification: PropTypes.func.isRequired,\n}\n\nexport default EventStocks\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/StockItem/StockItem.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (319). Maximum allowed is 150.',
        line: 22,
        column: 19,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 340,
        endColumn: 2,
      },
      {
        ruleId: 'complexity',
        severity: 1,
        message: 'Arrow function has a complexity of 41. Maximum allowed is 20.',
        line: 22,
        column: 19,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'complex',
        endLine: 340,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (35). Maximum allowed is 15.',
        line: 22,
        column: 19,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 340,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (353). Maximum allowed is 300.',
        line: 326,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 382,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 4,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { isAfter } from 'date-fns'\nimport PropTypes from 'prop-types'\nimport React, { Fragment, useCallback, useEffect, useState } from 'react'\n\nimport DateInput from 'components/layout/inputs/DateInput/DateInput'\nimport TimeInput from 'components/layout/inputs/TimeInput/TimeInput'\nimport { isAllocineProvider } from 'components/pages/Offers/domain/localProvider'\nimport DeleteStockDialogContainer from 'components/pages/Offers/Offer/Stocks/DeleteStockDialog/DeleteStockDialogContainer'\nimport { ReactComponent as DeleteStockIcon } from 'components/pages/Offers/Offer/Stocks/StockItem/assets/delete-stock.svg'\nimport {\n  getMaximumBookingLimitDatetime as getMaximumBookingLimitDatetimeFromExpirationDatetime,\n  hasStockBeenUpdated,\n} from 'components/pages/Offers/Offer/Stocks/StockItem/domain'\nimport { getToday } from 'utils/date'\nimport { getLocalDepartementDateTimeFromUtc } from 'utils/timezone'\n\nimport ActivationCodesUploadDialog from '../ActivationCodesUploadDialog/ActivationCodesUploadDialog'\nimport StockItemOptionsMenu from '../StockItemOptionsMenu/StockItemOptionsMenu'\n\nconst noOperation = () => {}\n\nconst StockItem = ({\n  departmentCode,\n  errors,\n  isActivationCodesEnabled,\n  isDigital,\n  isEvent,\n  isNewStock,\n  isDisabled: isOfferDisabled,\n  lastProvider,\n  onChange,\n  onDelete,\n  removeStockInCreation,\n  initialStock,\n}) => {\n  const today = getLocalDepartementDateTimeFromUtc(getToday(), departmentCode)\n\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [beginningDate, setBeginningDate] = useState(initialStock.beginningDatetime)\n  const [beginningTime, setBeginningTime] = useState(initialStock.beginningDatetime)\n  const [bookingLimitDatetime, setBookingLimitDatetime] = useState(\n    initialStock.bookingLimitDatetime\n  )\n  const [price, setPrice] = useState(initialStock.price)\n  const [totalQuantity, setTotalQuantity] = useState(initialStock.quantity)\n  const [isActivationCodesDialogOpen, setIsActivationCodesDialogOpen] = useState(false)\n  const [activationCodes, setActivationCodes] = useState(initialStock.activationCodes || [])\n  const [activationCodesExpirationDatetime, setActivationCodesExpirationDatetime] = useState(\n    initialStock.activationCodesExpirationDatetime\n  )\n\n  const hasActivationCodes = isNewStock\n    ? activationCodes.length > 0\n    : Boolean(initialStock.hasActivationCodes)\n\n  useEffect(\n    function updateStock() {\n      const initialValues = {\n        activationCodes,\n        activationCodesExpirationDatetime,\n        hasActivationCodes: Boolean(initialStock.hasActivationCodes),\n        beginningDatetime: initialStock.beginningDatetime,\n        bookingLimitDatetime: initialStock.bookingLimitDatetime,\n        price: initialStock.price,\n        quantity: initialStock.quantity,\n      }\n      let updatedStock = {\n        key: initialStock.key,\n        activationCodes,\n        activationCodesExpirationDatetime,\n        bookingLimitDatetime,\n        price,\n        quantity: totalQuantity,\n      }\n      if (isEvent) {\n        updatedStock = { ...updatedStock, beginningDate, beginningTime }\n      }\n      if (isNewStock || hasStockBeenUpdated(initialValues, updatedStock)) {\n        onChange(updatedStock)\n      }\n    },\n    [\n      activationCodes,\n      activationCodesExpirationDatetime,\n      beginningDate,\n      beginningTime,\n      bookingLimitDatetime,\n      initialStock.activationCodes,\n      initialStock.activationCodesExpirationDatetime,\n      initialStock.hasActivationCodes,\n      initialStock.beginningDatetime,\n      initialStock.bookingLimitDatetime,\n      initialStock.key,\n      initialStock.price,\n      initialStock.quantity,\n      isEvent,\n      isNewStock,\n      onChange,\n      price,\n      totalQuantity,\n    ]\n  )\n\n  const changeBeginningDate = useCallback(\n    selectedDateTime => {\n      if (selectedDateTime) {\n        setBeginningDate(selectedDateTime)\n        if (isAfter(bookingLimitDatetime, selectedDateTime)) {\n          setBookingLimitDatetime(selectedDateTime)\n        }\n      } else {\n        setBeginningDate(null)\n      }\n    },\n    [bookingLimitDatetime]\n  )\n\n  const changeBeginningHour = useCallback(selectedTime => {\n    if (selectedTime) {\n      setBeginningTime(selectedTime)\n    } else {\n      setBeginningTime(null)\n    }\n  }, [])\n\n  const changeBookingLimitDatetime = useCallback(dateTime => setBookingLimitDatetime(dateTime), [])\n\n  const changeActivationCodesExpirationDatetime = useCallback(\n    expirationDatetime => {\n      setActivationCodesExpirationDatetime(expirationDatetime)\n      if (expirationDatetime !== null) {\n        const maximumBookingLimitDatetime = getMaximumBookingLimitDatetimeFromExpirationDatetime(\n          expirationDatetime\n        )\n\n        if (bookingLimitDatetime === null) {\n          setBookingLimitDatetime(maximumBookingLimitDatetime)\n        }\n      }\n    },\n    [bookingLimitDatetime]\n  )\n\n  const changePrice = useCallback(event => setPrice(event.target.value), [])\n\n  const changeTotalQuantity = useCallback(event => setTotalQuantity(event.target.value), [])\n\n  const askDeletionConfirmation = useCallback(() => setIsDeleting(true), [])\n\n  const closeActivationCodesDialog = useCallback(() => {\n    setIsActivationCodesDialogOpen(false)\n    setActivationCodes([])\n    changeActivationCodesExpirationDatetime(null)\n  }, [changeActivationCodesExpirationDatetime])\n\n  const totalQuantityValue = totalQuantity !== null ? totalQuantity : ''\n  const computedRemainingQuantity = totalQuantityValue - initialStock.bookingsQuantity\n  const remainingQuantityValue = totalQuantityValue !== '' ? computedRemainingQuantity : 'Illimité'\n  const isEventStockEditable = initialStock.updated || isAfter(beginningDate, today)\n  const isOfferSynchronized = lastProvider !== null\n  const isOfferSynchronizedWithAllocine = isAllocineProvider(lastProvider)\n  const isThingStockEditable = !isOfferSynchronized\n  const isStockEditable = isNewStock || (isEvent ? isEventStockEditable : isThingStockEditable)\n  const isStockDeletable =\n    isNewStock || (isEvent ? initialStock.isEventDeletable : !isOfferSynchronized)\n\n  const computeStockTitle = useCallback(() => {\n    if (initialStock.id && !isEventStockEditable) {\n      return 'Les évènements passés ne sont pas modifiables'\n    }\n  }, [isEventStockEditable, initialStock.id])\n\n  const computeStockDeleteButtonTitle = useCallback(() => {\n    if (isStockDeletable) {\n      return 'Supprimer le stock'\n    }\n\n    return isOfferSynchronized\n      ? 'Les stock synchronisés ne peuvent être supprimés'\n      : 'Les évènements terminés depuis plus de 48h ne peuvent être supprimés'\n  }, [isStockDeletable, isOfferSynchronized])\n\n  const removeNewStockLine = useCallback(() => {\n    removeStockInCreation(initialStock.key)\n  }, [removeStockInCreation, initialStock.key])\n\n  const validateActivationCodes = useCallback(activationCodes => {\n    setTotalQuantity(activationCodes.length)\n    setIsActivationCodesDialogOpen(false)\n  }, [])\n\n  const getMaximumBookingLimitDatetime = useCallback(() => {\n    if (activationCodesExpirationDatetime !== null) {\n      return getMaximumBookingLimitDatetimeFromExpirationDatetime(activationCodesExpirationDatetime)\n    }\n\n    return beginningDate\n  }, [activationCodesExpirationDatetime, beginningDate])\n\n  return (\n    <tr\n      data-testid={`stock-item-${initialStock.key}`}\n      title={computeStockTitle()}\n    >\n      {isEvent && (\n        <Fragment>\n          <td>\n            <DateInput\n              ariaLabel=\"Date de l’événement\"\n              dateTime={beginningDate}\n              disabled={isOfferDisabled || isOfferSynchronized || !isStockEditable}\n              inError={'beginningDate' in errors}\n              minDateTime={today}\n              onChange={changeBeginningDate}\n              openingDateTime={today}\n            />\n          </td>\n          <td className=\"resized-input\">\n            <TimeInput\n              ariaLabel=\"Heure de l’événement\"\n              dateTime={beginningTime}\n              disabled={isOfferDisabled || isOfferSynchronized || !isStockEditable}\n              inError={'beginningTime' in errors}\n              onChange={changeBeginningHour}\n            />\n          </td>\n        </Fragment>\n      )}\n      <td className=\"resized-input input-text\">\n        <input\n          aria-label=\"Prix\"\n          className={`it-input ${price ? 'with-euro-icon' : ''} ${\n            'price' in errors ? 'error' : 'price-input'\n          }`}\n          disabled={\n            isOfferDisabled ||\n            (isOfferSynchronized && !isOfferSynchronizedWithAllocine) ||\n            !isStockEditable\n          }\n          name=\"price\"\n          onChange={changePrice}\n          placeholder=\"Ex : 20€\"\n          type=\"number\"\n          value={price}\n        />\n      </td>\n      <td className={`${!isEvent ? 'resized-input' : ''}`}>\n        <DateInput\n          ariaLabel=\"Date limite de réservation\"\n          dateTime={bookingLimitDatetime}\n          disabled={\n            isOfferDisabled ||\n            (isOfferSynchronized && !isOfferSynchronizedWithAllocine) ||\n            !isStockEditable\n          }\n          maxDateTime={getMaximumBookingLimitDatetime()}\n          onChange={changeBookingLimitDatetime}\n          openingDateTime={today}\n        />\n      </td>\n      {activationCodesExpirationDatetime && (\n        <td>\n          <DateInput\n            ariaLabel=\"Date limite de validité\"\n            dateTime={activationCodesExpirationDatetime}\n            disabled\n            onChange={noOperation}\n          />\n        </td>\n      )}\n      <td className=\"resized-input input-text quantity-input\">\n        <input\n          aria-label=\"Quantité\"\n          className={`it-input ${'quantity' in errors ? 'error' : ''}`}\n          disabled={\n            isOfferDisabled ||\n            (isOfferSynchronized && !isOfferSynchronizedWithAllocine) ||\n            !isStockEditable ||\n            hasActivationCodes\n          }\n          name=\"quantity\"\n          onChange={changeTotalQuantity}\n          placeholder=\"Illimité\"\n          type=\"number\"\n          value={totalQuantityValue}\n        />\n      </td>\n      <td>\n        {!isNewStock && remainingQuantityValue}\n      </td>\n      <td>\n        {!isNewStock && initialStock.bookingsQuantity}\n      </td>\n      <td className=\"action-column\">\n        {isActivationCodesEnabled ? (\n          <StockItemOptionsMenu\n            canAddActivationCodes={isDigital}\n            deleteButtonTitle={computeStockDeleteButtonTitle()}\n            deleteStock={isNewStock ? removeNewStockLine : askDeletionConfirmation}\n            disableDeleteButton={isOfferDisabled || !isStockDeletable || isDeleting}\n            hasActivationCodes={hasActivationCodes}\n            isNewStock={isNewStock}\n            isOfferDisabled={isOfferDisabled}\n            setIsActivationCodesDialogOpen={setIsActivationCodesDialogOpen}\n          />\n        ) : (\n          <button\n            className=\"tertiary-button\"\n            data-testid=\"stock-delete-button\"\n            disabled={isOfferDisabled || !isStockDeletable || isDeleting}\n            onClick={isNewStock ? removeNewStockLine : askDeletionConfirmation}\n            title={computeStockDeleteButtonTitle()}\n            type=\"button\"\n          >\n            <DeleteStockIcon alt=\"Supprimer le stock\" />\n          </button>\n        )}\n        {isDeleting && (\n          <DeleteStockDialogContainer\n            onDelete={onDelete}\n            setIsDeleting={setIsDeleting}\n            stockId={initialStock.id}\n          />\n        )}\n        {isActivationCodesDialogOpen && (\n          <ActivationCodesUploadDialog\n            activationCodes={activationCodes}\n            activationCodesExpirationDatetime={activationCodesExpirationDatetime}\n            bookingLimitDatetime={bookingLimitDatetime}\n            changeActivationCodesExpirationDatetime={changeActivationCodesExpirationDatetime}\n            closeDialog={closeActivationCodesDialog}\n            setActivationCodes={setActivationCodes}\n            today={today}\n            validateActivationCodes={validateActivationCodes}\n          />\n        )}\n      </td>\n    </tr>\n  )\n}\n\nStockItem.defaultProps = {\n  departmentCode: '',\n  errors: {},\n  isActivationCodesEnabled: false,\n  isDigital: false,\n  isDisabled: false,\n  isNewStock: false,\n  lastProvider: null,\n  removeStockInCreation: null,\n}\n\nStockItem.propTypes = {\n  departmentCode: PropTypes.string,\n  errors: PropTypes.shape(),\n  initialStock: PropTypes.shape({\n    id: PropTypes.string,\n    key: PropTypes.string,\n    bookingsQuantity: PropTypes.number,\n    isEventDeletable: PropTypes.bool,\n    hasActivationCodes: PropTypes.bool,\n    activationCodes: PropTypes.arrayOf(PropTypes.string),\n    activationCodesExpirationDatetime: PropTypes.instanceOf(Date),\n    beginningDatetime: PropTypes.instanceOf(Date),\n    bookingLimitDatetime: PropTypes.instanceOf(Date),\n    price: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    quantity: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    updated: PropTypes.bool,\n  }).isRequired,\n  isActivationCodesEnabled: PropTypes.bool,\n  isDigital: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  isEvent: PropTypes.bool.isRequired,\n  isNewStock: PropTypes.bool,\n  lastProvider: PropTypes.shape(),\n  onChange: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  removeStockInCreation: PropTypes.func,\n}\n\nexport default StockItem\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/StockItem/StockItemContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/StockItem/domain.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/StockItemOptionsMenu/StockItemOptionsMenu.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/Stocks.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/StocksContainer.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/ThingStockContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/ThingStocks.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (284). Maximum allowed is 150.',
        line: 25,
        column: 21,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 308,
        endColumn: 2,
      },
      {
        ruleId: 'complexity',
        severity: 1,
        message: 'Arrow function has a complexity of 21. Maximum allowed is 20.',
        line: 25,
        column: 21,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'complex',
        endLine: 308,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (24). Maximum allowed is 15.',
        line: 25,
        column: 21,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 308,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (17). Maximum allowed is 15.',
        line: 102,
        column: 15,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 144,
        endColumn: 10,
      },
    ],
    errorCount: 0,
    warningCount: 4,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import PropTypes from 'prop-types'\nimport React, { Fragment, useCallback, useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { v4 as generateRandomUuid } from 'uuid'\n\nimport PageTitle from 'components/layout/PageTitle/PageTitle'\nimport SubmitButton from 'components/layout/SubmitButton/SubmitButton'\nimport { isOfferDisabled } from 'components/pages/Offers/domain/isOfferDisabled'\nimport OfferStatusBanner from 'components/pages/Offers/Offer/OfferDetails/OfferStatusBanner/OfferStatusBanner'\nimport {\n  createThingStockPayload,\n  formatStock,\n  validateCreatedStock,\n  validateUpdatedStock,\n} from 'components/pages/Offers/Offer/Stocks/StockItem/domain'\nimport StockItemContainer from 'components/pages/Offers/Offer/Stocks/StockItem/StockItemContainer'\nimport { OFFER_STATUS_DRAFT } from 'components/pages/Offers/Offers/_constants'\nimport { ReactComponent as AddStockSvg } from 'icons/ico-plus.svg'\nimport * as pcapi from 'repository/pcapi/pcapi'\n\nimport { queryParamsFromOfferer } from '../../utils/queryParamsFromOfferer'\n\nconst EMPTY_STRING_VALUE = ''\n\nconst ThingStocks = ({\n  history,\n  location,\n  offer,\n  showErrorNotification,\n  showSuccessNotification,\n  reloadOffer,\n  autoActivateDigitalBookings,\n  areActivationCodesEnabled,\n}) => {\n  const offerId = offer.id\n  const [isLoading, setIsLoading] = useState(true)\n  const [enableSubmitButtonSpinner, setEnableSubmitButtonSpinner] = useState(false)\n  const [formErrors, setFormErrors] = useState({})\n  const isOfferDraft = offer.status === OFFER_STATUS_DRAFT\n  const editionOfferLink = `/offres/${offerId}/edition`\n  const [stock, setStock] = useState(null)\n  const displayExpirationDatetime = stock && stock.activationCodesExpirationDatetime !== null\n\n  const loadStocks = useCallback(() => {\n    return pcapi.loadStocks(offerId).then(receivedStocks => {\n      if (!receivedStocks.stocks.length) {\n        setStock(null)\n      } else {\n        setStock(formatStock(receivedStocks.stocks[0], offer.venue.departementCode))\n      }\n      setIsLoading(false)\n    })\n  }, [offerId, offer.venue.departementCode])\n\n  useEffect(() => {\n    loadStocks()\n  }, [loadStocks])\n\n  const onDelete = useCallback(() => {\n    reloadOffer()\n    loadStocks()\n  }, [loadStocks, reloadOffer])\n\n  useEffect(() => {\n    if (Object.values(formErrors).length > 0) {\n      showErrorNotification()\n    }\n  }, [formErrors, showErrorNotification])\n\n  const addNewStock = useCallback(() => {\n    const newStock = {\n      key: generateRandomUuid(),\n      price: EMPTY_STRING_VALUE,\n      quantity: null,\n      bookingLimitDatetime: null,\n      activationCodes: [],\n      activationCodesExpirationDatetime: null,\n    }\n    setStock(newStock)\n  }, [])\n\n  const removeStockInCreation = useCallback(() => setStock(null), [])\n\n  const updateStock = useCallback(updatedStockValues => {\n    setStock(previousStock => ({\n      ...previousStock,\n      ...updatedStockValues,\n      updated: true,\n    }))\n  }, [])\n\n  const submitStocks = useCallback(() => {\n    if (checkStockIsValid(stock)) {\n      setEnableSubmitButtonSpinner(true)\n      const stockToCreateOrEdit = {\n        ...createThingStockPayload(stock, offer.venue.departementCode),\n        id: stock.id,\n      }\n      const quantityOfActivationCodes = (stock.activationCodes || []).length\n      pcapi\n        .bulkCreateOrEditStock(offer.id, [stockToCreateOrEdit])\n        .then(() => {\n          if (isOfferDraft) {\n            reloadOffer(true)\n            if (quantityOfActivationCodes) {\n              showSuccessNotification(\n                `${quantityOfActivationCodes} ${\n                  quantityOfActivationCodes > 1\n                    ? ' Codes d’activation ont été ajoutés'\n                    : ' Code d’activation a été ajouté'\n                }`\n              )\n            } else {\n              showSuccessNotification('Votre offre a bien été créée et vos stocks sauvegardés.')\n            }\n\n            const queryParams = queryParamsFromOfferer(location)\n            let queryString = ''\n\n            if (queryParams.structure !== '') {\n              queryString = `?structure=${queryParams.structure}`\n            }\n\n            if (queryParams.lieu !== '') {\n              queryString += `&lieu=${queryParams.lieu}`\n            }\n\n            history.push(`/offres/${offer.id}/confirmation${queryString}`)\n          } else {\n            loadStocks()\n            reloadOffer()\n            if (quantityOfActivationCodes) {\n              showSuccessNotification(\n                `${quantityOfActivationCodes} ${\n                  quantityOfActivationCodes > 1\n                    ? ' Codes d’activation ont été ajoutés'\n                    : ' Code d’activation a été ajouté'\n                }`\n              )\n            } else {\n              showSuccessNotification('Vos stocks ont bien été sauvegardés.')\n            }\n          }\n        })\n        .catch(() => showErrorNotification())\n        .finally(() => setEnableSubmitButtonSpinner(false))\n    }\n  }, [\n    stock,\n    history,\n    location,\n    offer.id,\n    isOfferDraft,\n    offer.venue.departementCode,\n    loadStocks,\n    reloadOffer,\n    showSuccessNotification,\n    showErrorNotification,\n  ])\n\n  const checkStockIsValid = stock => {\n    const isNewStock = stock.id === undefined\n    const stockErrors = isNewStock ? validateCreatedStock(stock) : validateUpdatedStock(stock)\n    const stockHasErrors = Object.keys(stockErrors).length > 0\n\n    if (stockHasErrors) {\n      const formErrors = {\n        global: 'Une ou plusieurs erreurs sont présentes dans le formulaire.',\n        ...stockErrors,\n      }\n      setFormErrors(formErrors)\n    } else {\n      setFormErrors({})\n    }\n\n    return !stockHasErrors\n  }\n\n  if (isLoading) {\n    return null\n  }\n\n  const isDisabled = offer.status ? isOfferDisabled(offer.status) : false\n  const hasNoStock = !stock\n  const hasAStock = !hasNoStock\n  const inCreateMode = hasNoStock || !stock.id\n\n  return (\n    <div className=\"stocks-page\">\n      <PageTitle title=\"Vos stocks\" />\n\n      {isDisabled && <OfferStatusBanner status={offer.status} />}\n\n      <h3 className=\"section-title\">\n        Stock et prix\n      </h3>\n\n      <div className=\"cancellation-information\">\n        {(!offer.isDigital || !autoActivateDigitalBookings) &&\n          'Les utilisateurs ont 30 jours pour faire valider leur contremarque. Passé ce délai, la réservation est automatiquement annulée et l’offre remise en vente.'}\n        {offer.isDigital &&\n          autoActivateDigitalBookings &&\n          'Les utilisateurs ont 30 jours pour annuler leurs réservations d’offres numériques. Dans le cas d’offres avec codes d’activation, les utilisateurs ne peuvent pas annuler leurs réservations d’offres numériques. Toute réservation est définitive et sera immédiatement validée.'}\n      </div>\n      {areActivationCodesEnabled && offer.isDigital && (\n        <div className=\"activation-codes-information\">\n          Pour ajouter des codes d’activation, veuillez passer par le menu ··· et choisir l’option\n          correspondante.\n        </div>\n      )}\n      {hasNoStock ? (\n        <button\n          className=\"primary-button with-icon add-first-stock-button\"\n          disabled={isDisabled}\n          onClick={addNewStock}\n          type=\"button\"\n        >\n          <AddStockSvg />\n          Ajouter un stock\n        </button>\n      ) : (\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Prix\n              </th>\n              <th>\n                Date limite de réservation\n              </th>\n              {displayExpirationDatetime && (\n                <th>\n                  Date limite de validité\n                </th>\n              )}\n              <th>\n                Quantité\n              </th>\n              {!inCreateMode && (\n                <Fragment>\n                  <th>\n                    Stock restant\n                  </th>\n                  <th>\n                    Réservations\n                  </th>\n                </Fragment>\n              )}\n              <th />\n            </tr>\n          </thead>\n          <tbody>\n            {inCreateMode ? (\n              <StockItemContainer\n                departmentCode={offer.venue.departementCode}\n                errors={formErrors}\n                initialStock={stock}\n                isDigital={offer.isDigital}\n                isEvent={false}\n                isNewStock\n                key={stock.key}\n                onChange={updateStock}\n                onDelete={onDelete}\n                removeStockInCreation={removeStockInCreation}\n              />\n            ) : (\n              <StockItemContainer\n                departmentCode={offer.venue.departementCode}\n                errors={formErrors}\n                initialStock={stock}\n                isDigital={offer.isDigital}\n                isDisabled={isDisabled}\n                isEvent={false}\n                key={stock.id}\n                lastProvider={offer.lastProvider}\n                onChange={updateStock}\n                onDelete={onDelete}\n              />\n            )}\n          </tbody>\n        </table>\n      )}\n      {(isOfferDraft || hasAStock) && (\n        <Fragment>\n          <div className=\"interval cover\" />\n          <div className=\"interval shadow\" />\n          <section className=\"actions-section\">\n            {!isOfferDraft && (\n              <Link\n                className=\"secondary-link\"\n                to={editionOfferLink}\n              >\n                Annuler et quitter\n              </Link>\n            )}\n            <SubmitButton\n              disabled={isDisabled || hasNoStock}\n              isLoading={enableSubmitButtonSpinner}\n              onClick={submitStocks}\n            >\n              {isOfferDraft ? 'Valider et créer l’offre' : 'Enregistrer'}\n            </SubmitButton>\n          </section>\n        </Fragment>\n      )}\n    </div>\n  )\n}\n\nThingStocks.propTypes = {\n  areActivationCodesEnabled: PropTypes.bool.isRequired,\n  autoActivateDigitalBookings: PropTypes.bool.isRequired,\n  history: PropTypes.shape().isRequired,\n  location: PropTypes.shape().isRequired,\n  offer: PropTypes.shape().isRequired,\n  reloadOffer: PropTypes.func.isRequired,\n  showErrorNotification: PropTypes.func.isRequired,\n  showSuccessNotification: PropTypes.func.isRequired,\n}\n\nexport default ThingStocks\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Stocks/__specs__/Stocks.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (2875). Maximum allowed is 150.',
        line: 49,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 2923,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (532). Maximum allowed is 150.',
        line: 99,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 630,
        endColumn: 4,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`queryByRole` does not need `await` operator',
        line: 109,
        column: 29,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 109,
        endColumn: 40,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`queryByText` does not need `await` operator',
        line: 120,
        column: 29,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 120,
        endColumn: 40,
      },
      {
        ruleId: 'testing-library/no-await-sync-query',
        severity: 1,
        message: '`queryByText` does not need `await` operator',
        line: 121,
        column: 29,
        nodeType: 'Identifier',
        messageId: 'noAwaitSyncQuery',
        endLine: 121,
        endColumn: 40,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (2403). Maximum allowed is 300.',
        line: 350,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 2924,
        endColumn: 1,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (20). Maximum allowed is 15.',
        line: 395,
        column: 50,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 429,
        endColumn: 8,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (16). Maximum allowed is 15.',
        line: 473,
        column: 49,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 501,
        endColumn: 8,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (1213). Maximum allowed is 150.',
        line: 710,
        column: 20,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1922,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (829). Maximum allowed is 150.',
        line: 757,
        column: 29,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1585,
        endColumn: 6,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (784). Maximum allowed is 150.',
        line: 773,
        column: 56,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1556,
        endColumn: 8,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 777,
        column: 43,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 777,
        endColumn: 74,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (534). Maximum allowed is 150.',
        line: 870,
        column: 40,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1403,
        endColumn: 10,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 871,
        column: 61,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 882,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 884,
        column: 74,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 895,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 897,
        column: 53,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 908,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 910,
        column: 51,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 921,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 923,
        column: 52,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 935,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 937,
        column: 65,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 948,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 950,
        column: 86,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 961,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 963,
        column: 141,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 973,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 975,
        column: 61,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 987,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 989,
        column: 70,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 998,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1000,
        column: 84,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1015,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1017,
        column: 94,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1027,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1029,
        column: 91,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1051,
        endColumn: 12,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (350). Maximum allowed is 150.',
        line: 1053,
        column: 54,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1402,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1053,
        column: 54,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1402,
        endColumn: 12,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (16). Maximum allowed is 15.',
        line: 1053,
        column: 54,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1402,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1054,
        column: 24,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1056,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1058,
        column: 53,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1097,
        endColumn: 14,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (20). Maximum allowed is 15.',
        line: 1058,
        column: 53,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1097,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1099,
        column: 41,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1126,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1120,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1122,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1128,
        column: 100,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1143,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1136,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1138,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1145,
        column: 109,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1159,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1152,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1154,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1161,
        column: 142,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1175,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1168,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1170,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1177,
        column: 140,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1193,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1186,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1188,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1195,
        column: 66,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1208,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1201,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1203,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1210,
        column: 61,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1236,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1227,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1229,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1238,
        column: 91,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1255,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1245,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1247,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1257,
        column: 83,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1274,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1264,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1266,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1276,
        column: 116,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1298,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1291,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1293,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1300,
        column: 68,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1323,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1314,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1316,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1325,
        column: 61,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1344,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1337,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1339,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1346,
        column: 40,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1370,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (8). Maximum allowed is 5.',
        line: 1364,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1366,
        endColumn: 16,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1372,
        column: 56,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1401,
        endColumn: 14,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (151). Maximum allowed is 150.',
        line: 1405,
        column: 41,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1555,
        endColumn: 10,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1406,
        column: 90,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1432,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1434,
        column: 50,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1444,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1446,
        column: 69,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1456,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1458,
        column: 56,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1478,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1471,
        column: 23,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1474,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1480,
        column: 74,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1513,
        endColumn: 12,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (16). Maximum allowed is 15.',
        line: 1480,
        column: 74,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1513,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1501,
        column: 23,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1505,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1515,
        column: 65,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1525,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1527,
        column: 69,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1540,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1542,
        column: 48,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1554,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1548,
        column: 23,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1550,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1572,
        column: 100,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1582,
        endColumn: 12,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (335). Maximum allowed is 150.',
        line: 1587,
        column: 29,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1921,
        endColumn: 6,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (268). Maximum allowed is 150.',
        line: 1602,
        column: 56,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1869,
        endColumn: 8,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (179). Maximum allowed is 150.',
        line: 1690,
        column: 52,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1868,
        endColumn: 10,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1691,
        column: 51,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1724,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1708,
        column: 23,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1710,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1726,
        column: 39,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1750,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1744,
        column: 23,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1746,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1752,
        column: 105,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1765,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1767,
        column: 103,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1782,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1784,
        column: 78,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1800,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1788,
        column: 23,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1792,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (7). Maximum allowed is 5.',
        line: 1794,
        column: 23,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1796,
        endColumn: 14,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1802,
        column: 64,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1813,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1815,
        column: 59,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1835,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1837,
        column: 66,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1852,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 1854,
        column: 59,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1867,
        endColumn: 12,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (999). Maximum allowed is 150.',
        line: 1924,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 2922,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (309). Maximum allowed is 150.',
        line: 2008,
        column: 29,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 2316,
        endColumn: 6,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (23). Maximum allowed is 15.',
        line: 2092,
        column: 110,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 2172,
        endColumn: 8,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (16). Maximum allowed is 15.',
        line: 2278,
        column: 88,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 2315,
        endColumn: 8,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (604). Maximum allowed is 150.',
        line: 2318,
        column: 29,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 2921,
        endColumn: 6,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (389). Maximum allowed is 150.',
        line: 2532,
        column: 33,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 2920,
        endColumn: 8,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 2607,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 2614,
        endColumn: 12,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (16). Maximum allowed is 15.',
        line: 2646,
        column: 152,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 2689,
        endColumn: 10,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (26). Maximum allowed is 15.',
        line: 2766,
        column: 98,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 2814,
        endColumn: 10,
      },
    ],
    errorCount: 0,
    warningCount: 98,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { act, fireEvent, render, screen, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter, Route } from 'react-router'\n\nimport NotificationContainer from 'components/layout/Notification/NotificationContainer'\nimport OfferLayoutContainer from 'components/pages/Offers/Offer/OfferLayoutContainer'\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\nimport { offerFactory, stockFactory } from 'utils/apiFactories'\nimport { getToday } from 'utils/date'\nimport { bulkFakeApiCreateOrEditStock, loadFakeApiOffer, loadFakeApiStocks } from 'utils/fakeApi'\nimport { queryByTextTrimHtml } from 'utils/testHelpers'\n\nconst GUYANA_CAYENNE_DEPT = '973'\nconst PARIS_FRANCE_DEPT = '75'\n\njest.mock('repository/pcapi/pcapi', () => ({\n  deleteStock: jest.fn(),\n  loadOffer: jest.fn(),\n  loadStocks: jest.fn(),\n  bulkCreateOrEditStock: jest.fn(),\n}))\n\njest.mock('utils/date', () => ({\n  ...jest.requireActual('utils/date'),\n  getToday: jest.fn().mockImplementation(() => new Date('2020-12-15T12:00:00Z')),\n}))\n\nconst renderOffers = async (props, store) => {\n  await act(async () => {\n    await render(\n      <Provider store={store}>\n        <MemoryRouter initialEntries={[{ pathname: '/offres/AG3A/stocks' }]}>\n          <Route path=\"/offres/:offerId([A-Z0-9]+)/\">\n            <>\n              <OfferLayoutContainer {...props} />\n              <NotificationContainer />\n            </>\n          </Route>\n        </MemoryRouter>\n      </Provider>\n    )\n  })\n}\n\ndescribe('stocks page', () => {\n  let props\n  let defaultOffer\n  let defaultStock\n  let stockId\n  let store\n  beforeEach(() => {\n    store = configureTestStore({\n      data: {\n        users: [{ publicName: 'François', isAdmin: false }],\n      },\n      features: {\n        list: [\n          {\n            nameKey: 'ENABLE_ACTIVATION_CODES',\n            isActive: true,\n          },\n        ],\n      },\n    })\n    props = {}\n\n    defaultOffer = {\n      id: 'AG3A',\n      venue: {\n        departementCode: GUYANA_CAYENNE_DEPT,\n      },\n      isEvent: false,\n      status: 'ACTIVE',\n      stocks: [],\n    }\n\n    stockId = '2E'\n    defaultStock = {\n      activationCodes: [],\n      activationCodesExpirationDatetime: null,\n      quantity: 10,\n      price: 10.01,\n      remainingQuantity: 6,\n      bookingsQuantity: 4,\n      bookingLimitDatetime: '2020-12-18T23:59:59Z',\n      id: stockId,\n      isEventDeletable: true,\n    }\n    pcapi.loadOffer.mockResolvedValue(defaultOffer)\n    pcapi.loadStocks.mockResolvedValue({ stocks: [] })\n    pcapi.deleteStock.mockResolvedValue({ id: stockId })\n    pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n  })\n\n  describe('render', () => {\n    describe('when no stocks yet', () => {\n      it('should not display empty stock list', async () => {\n        // given\n        pcapi.loadStocks.mockResolvedValue({ stocks: [] })\n\n        // when\n        await renderOffers(props, store)\n\n        // then\n        expect(await screen.queryByRole('table')).not.toBeInTheDocument()\n      })\n\n      it('should not display action buttons if offer already created', async () => {\n        // given\n        pcapi.loadStocks.mockResolvedValue({ stocks: [] })\n\n        // when\n        await renderOffers(props, store)\n\n        // then\n        expect(await screen.queryByText('Annuler et quitter')).not.toBeInTheDocument()\n        expect(await screen.queryByText('Enregistrer')).not.toBeInTheDocument()\n      })\n\n      it('should display add stock button', async () => {\n        // given\n        pcapi.loadStocks.mockResolvedValue({ stocks: [] })\n\n        // when\n        await renderOffers(props, store)\n\n        // then\n        expect(await screen.findByText('Ajouter un stock')).toBeInTheDocument()\n      })\n    })\n\n    it('should load stocks on mount', async () => {\n      // when\n      await renderOffers(props, store)\n\n      // then\n      expect(pcapi.loadStocks).toHaveBeenCalledTimes(1)\n    })\n\n    it('should display stocks sorted by descending beginning datetime', async () => {\n      // given\n      const offerWithMultipleStocks = {\n        ...defaultOffer,\n        isEvent: true,\n      }\n      const stocks = [\n        {\n          ...defaultStock,\n          beginningDatetime: '2020-12-20T22:00:00Z',\n        },\n        {\n          ...defaultStock,\n          id: '3F',\n          beginningDatetime: '2020-12-25T20:00:00Z',\n        },\n        {\n          ...defaultStock,\n          id: '4G',\n          beginningDatetime: '2020-12-20T20:00:00Z',\n        },\n      ]\n      pcapi.loadOffer.mockResolvedValue(offerWithMultipleStocks)\n      pcapi.loadStocks.mockResolvedValue({ stocks })\n\n      // when\n      await renderOffers(props, store)\n\n      // then\n      const beginningDatetimeFields = await screen.findAllByLabelText('Date de l’événement')\n      const hourFields = await screen.findAllByLabelText('Heure de l’événement')\n      expect(beginningDatetimeFields[0].value).toBe('25/12/2020')\n      expect(beginningDatetimeFields[1].value).toBe('20/12/2020')\n      expect(hourFields[1].value).toBe('19:00')\n      expect(beginningDatetimeFields[1].value).toBe('20/12/2020')\n      expect(hourFields[2].value).toBe('17:00')\n    })\n\n    it('should display \"Illimité\" for total quantity when stock has unlimited quantity', async () => {\n      // given\n      const unlimitedStock = {\n        ...defaultStock,\n        quantity: null,\n      }\n\n      pcapi.loadStocks.mockResolvedValue({ stocks: [unlimitedStock] })\n\n      // when\n      await renderOffers(props, store)\n\n      // then\n      expect((await screen.findByPlaceholderText('Illimité')).value).toBe('')\n    })\n\n    it('should display \"Illimité\" for remaining quantity when stock has unlimited quantity', async () => {\n      // given\n      const unlimitedStock = {\n        ...defaultStock,\n        quantity: null,\n      }\n      pcapi.loadStocks.mockResolvedValue({ stocks: [unlimitedStock] })\n\n      // when\n      await renderOffers(props, store)\n\n      // then\n      expect(await screen.findByText('Illimité')).toBeInTheDocument()\n    })\n\n    it('should have cancel link to go back to offer details', async () => {\n      // given\n      const offer = {\n        ...defaultOffer,\n        stocks: [],\n      }\n\n      pcapi.loadOffer.mockResolvedValue(offer)\n      pcapi.loadStocks.mockResolvedValue({\n        stocks: [\n          {\n            ...defaultStock,\n            quantity: 10,\n          },\n        ],\n      })\n\n      // when\n      await renderOffers(props, store)\n\n      // then\n      const cancelLink = screen.getByRole('link', { name: 'Annuler et quitter' })\n      expect(cancelLink).toBeInTheDocument()\n      expect(cancelLink).toHaveAttribute('href', '/offres/AG3A/edition')\n    })\n\n    describe('when offer is being created (DRAFT status)', () => {\n      beforeEach(() => {\n        const draftOffer = {\n          ...defaultOffer,\n          status: 'DRAFT',\n        }\n\n        pcapi.loadOffer.mockResolvedValue(draftOffer)\n      })\n\n      describe('when no stock yet', () => {\n        it('should display a disabled \"Valider et créer l’offre\" button', async () => {\n          // Given\n          pcapi.loadStocks.mockResolvedValue({ stocks: [] })\n\n          // When\n          await renderOffers(props, store)\n\n          // Then\n          expect(\n            screen.getByText('Valider et créer l’offre', { selector: 'button' })\n          ).toBeDisabled()\n        })\n      })\n\n      describe('when at least one stock', () => {\n        it('should display a \"Valider et créer l’offre\" button', async () => {\n          // Given\n          pcapi.loadStocks.mockResolvedValue({\n            stocks: [\n              {\n                ...defaultStock,\n                quantity: 10,\n              },\n            ],\n          })\n\n          // When\n          await renderOffers(props, store)\n\n          // Then\n          expect(screen.getByText('Valider et créer l’offre', { selector: 'button' })).toBeEnabled()\n        })\n      })\n    })\n\n    describe('when fraud detection', () => {\n      let offer = {}\n      let stocks = {}\n\n      beforeEach(() => {\n        offer = {\n          ...defaultOffer,\n          isEvent: true,\n          stocks: [],\n        }\n        stocks = {\n          stocks: [\n            {\n              ...defaultStock,\n              beginningDatetime: '2222-12-20T22:00:00Z',\n              quantity: 10,\n            },\n          ],\n        }\n      })\n\n      it('should display status informative message and disable all fields when offer is rejected', async () => {\n        // given\n        offer.status = 'REJECTED'\n        offer.isActive = false\n        pcapi.loadOffer.mockResolvedValue(offer)\n        pcapi.loadStocks.mockResolvedValue(stocks)\n\n        // when\n        await renderOffers(props, store)\n\n        // then\n        expect(\n          screen.getByText(\n            'Votre offre a été refusée car elle ne respecte pas les Conditions Générales d’Utilisation du pass. Un e-mail contenant les conditions d’éligibilité d’une offre a été envoyé à l’adresse e-mail attachée à votre compte.'\n          )\n        ).toBeInTheDocument()\n        expect(screen.getByText('Ajouter une date')).toBeDisabled()\n        expect(screen.getByLabelText('Date de l’événement')).toBeDisabled()\n        expect(screen.getByLabelText('Heure de l’événement')).toBeDisabled()\n        expect(screen.getByLabelText('Prix')).toBeDisabled()\n        expect(screen.getByLabelText('Date limite de réservation')).toBeDisabled()\n        expect(screen.getByLabelText('Quantité')).toBeDisabled()\n        expect(screen.getByTitle('Supprimer le stock')).toHaveAttribute('aria-disabled', 'true')\n        expect(screen.getByText('Enregistrer')).toBeDisabled()\n      })\n\n      it('should display status informative message and disable all fields when offer is pending for validation', async () => {\n        // given\n        offer.status = 'PENDING'\n        offer.isActive = true\n        pcapi.loadOffer.mockResolvedValue(offer)\n        pcapi.loadStocks.mockResolvedValue(stocks)\n\n        // when\n        await renderOffers({}, store)\n\n        // then\n        expect(\n          screen.getByText(\n            'Votre offre est en cours de validation par l’équipe du pass Culture. Une fois validée, vous recevrez un e-mail de confirmation et votre offre sera automatiquement mise en ligne.'\n          )\n        ).toBeInTheDocument()\n        expect(screen.getByText('Ajouter une date')).toBeDisabled()\n        expect(screen.getByLabelText('Date de l’événement')).toBeDisabled()\n        expect(screen.getByLabelText('Heure de l’événement')).toBeDisabled()\n        expect(screen.getByLabelText('Prix')).toBeDisabled()\n        expect(screen.getByLabelText('Date limite de réservation')).toBeDisabled()\n        expect(screen.getByLabelText('Quantité')).toBeDisabled()\n        expect(screen.getByTitle('Supprimer le stock')).toHaveAttribute('aria-disabled', 'true')\n        expect(screen.getByText('Enregistrer')).toBeDisabled()\n      })\n    })\n\n    describe('render event offer', () => {\n      let eventOffer\n      beforeEach(() => {\n        const eventStock = {\n          ...defaultStock,\n          beginningDatetime: '2020-12-20T22:00:00Z',\n        }\n        eventOffer = {\n          ...defaultOffer,\n          isEvent: true,\n        }\n\n        pcapi.loadOffer.mockResolvedValue(eventOffer)\n        pcapi.loadStocks.mockResolvedValue({ stocks: [eventStock] })\n      })\n\n      it('should display an information message regarding booking cancellation', async () => {\n        // when\n        await renderOffers(props, store)\n\n        // then\n        const informationMessage = screen.getByText(\n          'Les utilisateurs ont un délai de 48h pour annuler leur réservation mais ne peuvent pas le faire moins de 48h avant le début de l’événement. Si la date limite de réservation n’est pas encore passée, la place est alors automatiquement remise en vente.'\n        )\n        expect(informationMessage).toBeInTheDocument()\n      })\n\n      it('should display button to add date', async () => {\n        // when\n        await renderOffers(props, store)\n\n        // then\n        const buttonAddDate = await screen.findByRole('button', { name: 'Ajouter une date' })\n        expect(buttonAddDate).toBeInTheDocument()\n      })\n\n      it(\"should display offer's stocks fields\", async () => {\n        // when\n        await renderOffers(props, store)\n\n        // then\n        expect(pcapi.loadOffer).toHaveBeenCalledWith('AG3A')\n\n        const columnHeaders = await screen.findAllByRole('columnheader')\n        const columnCells = await screen.findAllByRole('cell')\n\n        expect(columnHeaders).toHaveLength(8)\n\n        expect(columnHeaders[0].textContent).toBe('Date')\n        expect(columnCells[0].querySelector('input').value).toBe('20/12/2020')\n\n        expect(columnHeaders[1].textContent).toBe('Horaire')\n        expect(columnCells[1].querySelector('input').value).toBe('19:00')\n\n        expect(columnHeaders[2].textContent).toBe('Prix')\n        expect(columnCells[2].querySelector('input').value).toBe('10.01')\n\n        expect(columnHeaders[3].textContent).toBe('Date limite de réservation')\n        expect(columnCells[3].querySelector('input').value).toBe('18/12/2020')\n\n        expect(columnHeaders[4].textContent).toBe('Quantité')\n        expect(columnCells[4].querySelector('input').value).toBe('10')\n\n        expect(columnHeaders[5].textContent).toBe('Stock restant')\n        expect(columnCells[5].textContent).toBe('6')\n\n        expect(columnHeaders[6].textContent).toBe('Réservations')\n        expect(columnCells[6].textContent).toBe('4')\n\n        expect(columnCells[7].querySelector('button').title).toBe('Opérations sur le stock')\n      })\n    })\n\n    describe('render thing offer', () => {\n      let thingOffer\n      beforeEach(() => {\n        thingOffer = {\n          ...defaultOffer,\n          isEvent: false,\n        }\n        pcapi.loadOffer.mockResolvedValue(thingOffer)\n        pcapi.loadStocks.mockResolvedValue({ stocks: [{ ...defaultStock }] })\n      })\n\n      it('should display an information message regarding booking cancellation', async () => {\n        // when\n        await renderOffers(props, store)\n\n        // then\n        const informationMessage = screen.getByText(\n          'Les utilisateurs ont 30 jours pour faire valider leur contremarque. Passé ce délai, la réservation est automatiquement annulée et l’offre remise en vente.'\n        )\n        expect(informationMessage).toBeInTheDocument()\n      })\n\n      it('should display button to add stock', async () => {\n        // given\n        pcapi.loadStocks.mockResolvedValue({ stocks: [] })\n\n        // when\n        await renderOffers(props, store)\n\n        // then\n        expect(screen.getByRole('button', { name: 'Ajouter un stock' })).toBeEnabled()\n      })\n\n      it('should not be able to add a new stock if there is already one', async () => {\n        // When\n        await renderOffers(props, store)\n\n        // Then\n        expect(screen.queryByRole('button', { name: 'Ajouter un stock' })).not.toBeInTheDocument()\n      })\n\n      it(\"should display offer's stock fields\", async () => {\n        // when\n        await renderOffers(props, store)\n\n        // then\n        expect(pcapi.loadOffer).toHaveBeenCalledWith('AG3A')\n\n        const columnHeaders = await screen.findAllByRole('columnheader')\n        const columnCells = await screen.findAllByRole('cell')\n\n        expect(columnHeaders).toHaveLength(6)\n\n        expect(columnHeaders[0].textContent).toBe('Prix')\n        expect(columnCells[0].querySelector('input').value).toBe('10.01')\n\n        expect(columnHeaders[1].textContent).toBe('Date limite de réservation')\n        expect(columnCells[1].querySelector('input').value).toBe('18/12/2020')\n\n        expect(columnHeaders[2].textContent).toBe('Quantité')\n        expect(columnCells[2].querySelector('input').value).toBe('10')\n\n        expect(columnHeaders[3].textContent).toBe('Stock restant')\n        expect(columnCells[3].textContent).toBe('6')\n\n        expect(columnHeaders[4].textContent).toBe('Réservations')\n        expect(columnCells[4].textContent).toBe('4')\n\n        expect(columnCells[5].querySelector('button').title).toBe('Opérations sur le stock')\n      })\n\n      describe('when offer is synchronized', () => {\n        beforeEach(() => {\n          const synchronisedThingOffer = {\n            ...defaultOffer,\n            isEvent: false,\n            lastProvider: {\n              id: 'D4',\n              name: 'fnac',\n            },\n          }\n          pcapi.loadOffer.mockResolvedValue(synchronisedThingOffer)\n          pcapi.loadStocks.mockResolvedValue({ stocks: [] })\n        })\n\n        it('should not be able to add a stock', async () => {\n          // Given\n          pcapi.loadStocks.mockResolvedValue({\n            stocks: [\n              {\n                ...defaultStock,\n                quantity: 10,\n              },\n            ],\n          })\n\n          // When\n          await renderOffers(props, store)\n\n          // Then\n          expect(screen.queryByRole('button', { name: 'Ajouter un stock' })).not.toBeInTheDocument()\n        })\n      })\n    })\n\n    describe('render digital offer', () => {\n      let digitalOffer\n      beforeEach(() => {\n        digitalOffer = {\n          ...defaultOffer,\n          isDigital: true,\n          isEvent: false,\n        }\n        pcapi.loadOffer.mockResolvedValue(digitalOffer)\n        pcapi.loadStocks.mockResolvedValue({ stocks: [{ ...defaultStock }] })\n      })\n\n      it('should display an information message regarding booking cancellation (when feature toggling)', async () => {\n        store = configureTestStore({\n          data: {\n            users: [{ publicName: 'François', isAdmin: false }],\n          },\n          features: {\n            list: [\n              { isActive: true, nameKey: 'AUTO_ACTIVATE_DIGITAL_BOOKINGS' },\n              { isActive: true, nameKey: 'ENABLE_ACTIVATION_CODES' },\n            ],\n          },\n        })\n\n        // when\n        await renderOffers(props, store)\n\n        // then\n        const informationMessage = screen.getByText(\n          'Les utilisateurs ont 30 jours pour annuler leurs réservations d’offres numériques. Dans le cas d’offres avec codes d’activation, les utilisateurs ne peuvent pas annuler leurs réservations d’offres numériques. Toute réservation est définitive et sera immédiatement validée.'\n        )\n        expect(informationMessage).toBeInTheDocument()\n      })\n\n      it('should display an information message regarding booking cancellation (when no feature toggling)', async () => {\n        // when\n        await renderOffers(props, store)\n\n        // then\n        const informationMessage = screen.getByText(\n          'Les utilisateurs ont 30 jours pour faire valider leur contremarque. Passé ce délai, la réservation est automatiquement annulée et l’offre remise en vente.'\n        )\n        expect(informationMessage).toBeInTheDocument()\n      })\n    })\n\n    describe('when the user clicks several time on the \"Enregistrer\" button', () => {\n      it('should display a disabled \"Enregistrer\" button when no errors', async () => {\n        // Given\n        const stock = stockFactory()\n        const offer = offerFactory({ id: 'AG3A', status: 'ACTIVE' })\n        loadFakeApiOffer(offer)\n        loadFakeApiStocks([stock])\n        bulkFakeApiCreateOrEditStock({ id: stock.id })\n        await renderOffers(props, store)\n        const submitButton = screen.getByText('Enregistrer', { selector: 'button' })\n\n        // When\n        fireEvent.click(submitButton)\n\n        // Then\n        expect(submitButton.textContent).toBe('')\n        expect(submitButton).toBeDisabled()\n      })\n\n      it('should display an enabled \"Enregistrer\" button after clicking on it when there is an error in the form', async () => {\n        // Given\n        let eventOffer = {\n          ...defaultOffer,\n          isEvent: true,\n        }\n\n        pcapi.loadOffer.mockResolvedValue(eventOffer)\n        pcapi.loadStocks.mockResolvedValue({ stocks: [] })\n        pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n\n        await renderOffers(props, store)\n\n        fireEvent.click(await screen.findByText('Ajouter une date'))\n        fireEvent.click(screen.getByLabelText('Date de l’événement'))\n        fireEvent.click(screen.getByText('26'))\n        fireEvent.click(screen.getByLabelText('Heure de l’événement'))\n        fireEvent.click(screen.getByText('20:00'))\n        const submitButton = screen.getByText('Enregistrer', { selector: 'button' })\n\n        // When\n        fireEvent.click(submitButton)\n\n        // Then\n        expect(submitButton).toBeEnabled()\n      })\n    })\n  })\n\n  describe('mandatory fields', () => {\n    let eventOffer\n    beforeEach(() => {\n      eventOffer = {\n        ...defaultOffer,\n        isEvent: true,\n      }\n\n      pcapi.loadOffer.mockResolvedValue(eventOffer)\n      pcapi.loadStocks.mockResolvedValue({ stocks: [] })\n      pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n    })\n\n    it('should have mandatory beginning date field for event offer', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      fireEvent.click(await screen.findByText('Ajouter une date'))\n\n      fireEvent.click(screen.getByLabelText('Heure de l’événement'))\n      fireEvent.click(screen.getByText('20:00'))\n\n      fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '10' } })\n\n      // When\n      fireEvent.click(screen.getByText('Enregistrer'))\n\n      // Then\n      const errorMessage = await screen.findByText(\n        'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n      )\n      expect(errorMessage).toBeInTheDocument()\n    })\n\n    it('should have mandatory beginning time field for event offer', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      fireEvent.click(await screen.findByText('Ajouter une date'))\n\n      fireEvent.click(screen.getByLabelText('Date de l’événement'))\n      fireEvent.click(screen.getByText('26'))\n\n      fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '10' } })\n\n      // When\n      fireEvent.click(screen.getByText('Enregistrer'))\n\n      // Then\n      const errorMessage = await screen.findByText(\n        'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n      )\n      expect(errorMessage).toBeInTheDocument()\n    })\n\n    it('should have mandatory price field', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      fireEvent.click(await screen.findByText('Ajouter une date'))\n\n      fireEvent.click(screen.getByLabelText('Date de l’événement'))\n      fireEvent.click(screen.getByText('26'))\n\n      fireEvent.click(screen.getByLabelText('Heure de l’événement'))\n      fireEvent.click(screen.getByText('20:00'))\n\n      // When\n      fireEvent.click(screen.getByText('Enregistrer'))\n\n      // Then\n      const errorMessage = await screen.findByText(\n        'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n      )\n      expect(errorMessage).toBeInTheDocument()\n    })\n  })\n\n  describe('edit', () => {\n    it('should update displayed offer status', async () => {\n      // Given\n      const initialOffer = {\n        ...defaultOffer,\n        status: 'ACTIVE',\n      }\n      const updatedOffer = {\n        ...defaultOffer,\n        status: 'SOLD_OUT',\n      }\n      pcapi.loadOffer.mockResolvedValueOnce(initialOffer).mockResolvedValueOnce(updatedOffer)\n      pcapi.loadStocks\n        .mockResolvedValueOnce({ stocks: [defaultStock] })\n        .mockResolvedValueOnce({ stocks: [] })\n\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      expect(screen.getByText('active')).toBeInTheDocument()\n\n      // When\n      await act(async () => {\n        userEvent.click(screen.getByTitle('Supprimer le stock'))\n        fireEvent.click(await screen.findByText('Supprimer', { selector: 'button' }))\n      })\n\n      // Then\n      expect(screen.queryByText('épuisée')).toBeInTheDocument()\n    })\n\n    it('should stay on stocks page after validating of stocks', async () => {\n      // Given\n      const stock = stockFactory()\n      const offer = offerFactory({ id: 'AG3A', status: 'ACTIVE' })\n      loadFakeApiOffer(offer)\n      loadFakeApiStocks([stock])\n      await renderOffers(props, store)\n\n      // When\n      fireEvent.click(screen.getByText('Enregistrer', { selector: 'button' }))\n\n      // Then\n      expect(screen.getByText('Stock et prix', { selector: 'h3' })).toBeInTheDocument()\n    })\n\n    describe('event offer', () => {\n      let eventOffer\n      beforeEach(() => {\n        const eventStock = {\n          ...defaultStock,\n          beginningDatetime: '2020-12-20T22:00:00Z',\n        }\n        eventOffer = {\n          ...defaultOffer,\n          isEvent: true,\n        }\n\n        pcapi.loadOffer.mockResolvedValue(eventOffer)\n        pcapi.loadStocks.mockResolvedValue({ stocks: [eventStock] })\n      })\n\n      describe('when offer has been manually created', () => {\n        it('should not be able to edit a stock when expired', async () => {\n          // Given\n          const dayAfterBeginningDatetime = new Date('2020-12-21T12:00:00Z')\n          getToday.mockImplementationOnce(() => dayAfterBeginningDatetime)\n\n          // When\n          await renderOffers(props, store)\n\n          // Then\n          expect(screen.getByLabelText('Prix')).toBeDisabled()\n          expect(screen.getByLabelText('Date de l’événement')).toBeDisabled()\n          expect(screen.getByLabelText('Heure de l’événement')).toBeDisabled()\n          expect(screen.getByLabelText('Date limite de réservation')).toBeDisabled()\n          expect(screen.getByLabelText('Quantité')).toBeDisabled()\n        })\n\n        it('should not be able to delete a non deletable stock', async () => {\n          // Given\n          const eventOffer = {\n            ...defaultOffer,\n            isEvent: true,\n            stocks: [\n              {\n                ...defaultStock,\n                beginningDatetime: '2020-12-20T22:00:00Z',\n                isEventDeletable: false,\n              },\n            ],\n          }\n\n          pcapi.loadOffer.mockResolvedValue(eventOffer)\n          await renderOffers(props, store)\n\n          // When\n          userEvent.click(screen.getByTitle('Supprimer le stock'))\n\n          // Then\n          expect(screen.getByTitle('Supprimer le stock')).toHaveAttribute('aria-disabled', 'true')\n          expect(pcapi.deleteStock).not.toHaveBeenCalled()\n        })\n\n        it('should inform user that stock cannot be updated when event is over', async () => {\n          // When\n          const eventInThePast = {\n            ...defaultStock,\n            beginningDatetime: '2020-12-14T22:00:00Z',\n            isEventDeletable: true,\n            isEventEditable: false,\n          }\n\n          pcapi.loadStocks.mockResolvedValue({ stocks: [eventInThePast] })\n          await renderOffers(props, store)\n\n          // Then\n          expect(\n            screen.getByRole('row', { name: 'Les évènements passés ne sont pas modifiables' })\n          ).toBeInTheDocument()\n        })\n\n        it('should inform user that stock cannot be updated when event is over when beginningDatetime is with milliseconds', async () => {\n          // When\n          const eventInThePast = {\n            ...defaultStock,\n            beginningDatetime: '2020-12-09T20:15:00.231Z',\n            isEventDeletable: true,\n            isEventEditable: false,\n          }\n\n          pcapi.loadStocks.mockResolvedValue({ stocks: [eventInThePast] })\n          await renderOffers(props, store)\n\n          // Then\n          expect(\n            screen.getByRole('row', { name: 'Les évènements passés ne sont pas modifiables' })\n          ).toBeInTheDocument()\n        })\n\n        it('should inform user that stock cannot be deleted when event is over for more than 48h', async () => {\n          // When\n          const eventInThePast = {\n            ...defaultStock,\n            beginningDatetime: '2020-12-20T22:00:00Z',\n            isEventDeletable: false,\n          }\n\n          pcapi.loadStocks.mockResolvedValue({ stocks: [eventInThePast] })\n          await renderOffers(props, store)\n\n          // Then\n          expect(\n            screen.getByTitle(\n              'Les évènements terminés depuis plus de 48h ne peuvent être supprimés'\n            )\n          ).toBeInTheDocument()\n        })\n\n        describe('when editing stock', () => {\n          it('should be able to edit beginning date field', async () => {\n            // given\n            await renderOffers(props, store)\n\n            // when\n            fireEvent.click(screen.getByDisplayValue('20/12/2020'))\n            fireEvent.click(screen.getByText('21'))\n\n            // then\n            expect(screen.queryByDisplayValue('20/12/2020')).not.toBeInTheDocument()\n            expect(screen.getByDisplayValue('21/12/2020')).toBeInTheDocument()\n          })\n\n          it('should not be able to select beginning date before today', async () => {\n            // given\n            await renderOffers(props, store)\n\n            // when\n            fireEvent.click(screen.getByDisplayValue('20/12/2020'))\n            fireEvent.click(screen.getByText('13'))\n\n            // then\n            expect(screen.queryByDisplayValue('13/12/2020')).not.toBeInTheDocument()\n            expect(screen.getByDisplayValue('20/12/2020')).toBeInTheDocument()\n          })\n\n          it('should be able to remove date field', async () => {\n            // given\n            await renderOffers(props, store)\n\n            // when\n            fireEvent.change(screen.getByLabelText('Date de l’événement'), {\n              target: { value: null },\n            })\n\n            // then\n            expect(screen.getByLabelText('Date de l’événement')).toBeEnabled()\n          })\n\n          it('should be able to edit hour field', async () => {\n            // given\n            await renderOffers(props, store)\n\n            // when\n            fireEvent.click(screen.getByDisplayValue('19:00'))\n            fireEvent.click(screen.getByText('18:30'))\n\n            // then\n            expect(screen.queryByDisplayValue('19:00')).not.toBeInTheDocument()\n            expect(screen.getByDisplayValue('18:30')).toBeInTheDocument()\n          })\n\n          it('should be able to edit price field', async () => {\n            // given\n            await renderOffers(props, store)\n            const priceField = screen.getByDisplayValue('10.01')\n\n            // when\n            fireEvent.change(priceField)\n            fireEvent.change(priceField, { target: { value: '127.03' } })\n\n            // then\n            expect(screen.queryByDisplayValue('10.01')).not.toBeInTheDocument()\n            expect(screen.getByDisplayValue('127.03')).toBeInTheDocument()\n          })\n\n          it('should be able to edit booking limit date field', async () => {\n            // given\n            await renderOffers(props, store)\n\n            // when\n            fireEvent.click(screen.getByDisplayValue('18/12/2020'))\n            fireEvent.click(screen.getByText('17'))\n\n            // then\n            expect(screen.queryByDisplayValue('18/12/2020')).not.toBeInTheDocument()\n            expect(screen.getByDisplayValue('17/12/2020')).toBeInTheDocument()\n          })\n\n          it('should not be able to select booking limit date after beginning date', async () => {\n            // given\n            await renderOffers(props, store)\n\n            // when\n            fireEvent.click(screen.getByDisplayValue('18/12/2020'))\n            fireEvent.click(screen.getByText('21'))\n\n            // then\n            expect(screen.queryByDisplayValue('21/12/2020')).not.toBeInTheDocument()\n            expect(screen.getByDisplayValue('18/12/2020')).toBeInTheDocument()\n          })\n\n          it('should set booking limit datetime to beginning datetime when selecting a beginning datetime prior to booking limit datetime', async () => {\n            // given\n            await renderOffers(props, store)\n\n            // when\n            fireEvent.click(screen.getByDisplayValue('20/12/2020'))\n            fireEvent.click(screen.getByText('17'))\n\n            // then\n            expect(screen.getByLabelText('Date limite de réservation').value).toBe('17/12/2020')\n          })\n\n          it('should be able to edit total quantity field', async () => {\n            // given\n            await renderOffers(props, store)\n            const quantityField = screen.getByDisplayValue('10')\n\n            // when\n            fireEvent.change(quantityField, { target: { value: null } })\n            fireEvent.change(quantityField, { target: { value: '23' } })\n\n            // then\n            expect(screen.queryByDisplayValue('10')).not.toBeInTheDocument()\n            expect(screen.getByDisplayValue('23')).toBeInTheDocument()\n          })\n\n          it('should not empty date field when emptying hour field', async () => {\n            // given\n            await renderOffers(props, store)\n\n            // when\n            fireEvent.change(screen.getByDisplayValue('19:00'), { target: { value: null } })\n\n            // then\n            expect(screen.queryByDisplayValue('20/12/2020')).toBeInTheDocument()\n          })\n\n          it('should compute remaining quantity based on inputted total quantity', async () => {\n            // given\n            await renderOffers(props, store)\n            const quantityField = screen.getByDisplayValue('10')\n\n            // when\n            fireEvent.change(quantityField, { target: { value: null } })\n            fireEvent.change(quantityField, { target: { value: '9' } })\n\n            // then\n            const initialRemainingQuantity = screen.queryByText(6)\n            expect(initialRemainingQuantity).not.toBeInTheDocument()\n\n            const computedRemainingQuantity = screen.queryByText('5')\n            expect(computedRemainingQuantity).toBeInTheDocument()\n          })\n\n          it('should set remaining quantity to Illimité when emptying total quantity field', async () => {\n            // given\n            await renderOffers(props, store)\n\n            // when\n            fireEvent.change(screen.getByDisplayValue('10'), { target: { value: null } })\n\n            // then\n            const computedRemainingQuantity = screen.getByText('Illimité')\n            expect(computedRemainingQuantity).toBeInTheDocument()\n          })\n\n          it('should not set remaining quantity to Illimité when total quantity is zero', async () => {\n            // given\n            pcapi.loadStocks.mockResolvedValue({\n              stocks: [\n                {\n                  ...defaultStock,\n                  beginningDatetime: '2020-12-20T22:00:00Z',\n                  quantity: 0,\n                  bookingsQuantity: 0,\n                },\n              ],\n            })\n\n            // when\n            await renderOffers(props, store)\n\n            // then\n            expect(screen.getByLabelText('Quantité').value).not.toBe('')\n            expect(screen.getByLabelText('Quantité').value).toBe('0')\n            const remainingQuantityValue = screen.getAllByRole('cell')[5].textContent\n            expect(remainingQuantityValue).not.toBe('Illimité')\n            expect(remainingQuantityValue).toBe('0')\n          })\n\n          describe('when clicking on submit button', () => {\n            beforeEach(() => {\n              pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n            })\n\n            it('should save changes done to stock', async () => {\n              // Given\n              await renderOffers(props, store)\n\n              fireEvent.click(screen.getByLabelText('Date de l’événement'))\n              fireEvent.click(screen.getByText('26'))\n\n              fireEvent.click(screen.getByLabelText('Heure de l’événement'))\n              fireEvent.click(screen.getByText('20:00'))\n\n              const priceField = screen.getByLabelText('Prix')\n              fireEvent.change(priceField, { target: { value: null } })\n              fireEvent.change(priceField, { target: { value: '14.01' } })\n\n              fireEvent.click(screen.getByLabelText('Date limite de réservation'))\n              fireEvent.click(screen.getByText('25'))\n\n              const quantityField = screen.getByLabelText('Quantité')\n              fireEvent.change(quantityField, { target: { value: null } })\n              fireEvent.change(quantityField, { target: { value: '6' } })\n\n              // When\n              fireEvent.click(screen.getByText('Enregistrer'))\n\n              // Then\n              expect(pcapi.bulkCreateOrEditStock).toHaveBeenCalledWith(defaultOffer.id, [\n                {\n                  beginningDatetime: '2020-12-26T23:00:00Z',\n                  bookingLimitDatetime: '2020-12-26T02:59:59Z',\n                  id: '2E',\n                  price: '14.01',\n                  quantity: '6',\n                },\n              ])\n              expect(screen.getByLabelText('Date de l’événement').value).toBe('26/12/2020')\n              expect(screen.getByLabelText('Heure de l’événement').value).toBe('20:00')\n              expect(screen.getByLabelText('Prix').value).toBe('14.01')\n              expect(screen.getByLabelText('Date limite de réservation').value).toBe('25/12/2020')\n              expect(screen.getByLabelText('Quantité').value).toBe('6')\n            })\n\n            it('should refresh stocks', async () => {\n              // Given\n              const stock = {\n                ...defaultStock,\n                beginningDatetime: '2020-12-20T22:00:00Z',\n              }\n              const initialStock = {\n                ...stock,\n                price: 10.01,\n              }\n              const updatedStock = {\n                ...stock,\n                price: 10,\n              }\n              pcapi.loadStocks\n                .mockResolvedValueOnce({ stocks: [initialStock] })\n                .mockResolvedValueOnce({ stocks: [updatedStock] })\n              await renderOffers(props, store)\n              pcapi.loadStocks.mockClear()\n\n              // When\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // Then\n              expect(pcapi.loadStocks).toHaveBeenCalledTimes(1)\n            })\n\n            it('should set booking limit datetime to exact beginning datetime when not specified', async () => {\n              // Given\n              await renderOffers(props, store)\n              fireEvent.change(screen.getByLabelText('Date limite de réservation'), {\n                target: { value: '' },\n              })\n\n              // When\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // Then\n              const savedStocks = pcapi.bulkCreateOrEditStock.mock.calls[0][1]\n              expect(savedStocks[0].bookingLimitDatetime).toBe('2020-12-20T22:00:00Z')\n            })\n\n            it('should set booking limit datetime to exact beginning datetime when same as beginning date', async () => {\n              // Given\n              await renderOffers(props, store)\n              fireEvent.click(screen.getByLabelText('Date limite de réservation'))\n              fireEvent.click(screen.getByText('20'))\n\n              // When\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // Then\n              const savedStocks = pcapi.bulkCreateOrEditStock.mock.calls[0][1]\n              expect(savedStocks[0].bookingLimitDatetime).toBe('2020-12-20T22:00:00Z')\n            })\n\n            it('should set booking limit time to end of selected locale day when specified and different than beginning date in Cayenne TZ', async () => {\n              // Given\n              await renderOffers(props, store)\n              fireEvent.click(screen.getByLabelText('Date limite de réservation'))\n              fireEvent.click(screen.getByText('19'))\n\n              // When\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // Then\n              const savedStocks = pcapi.bulkCreateOrEditStock.mock.calls[0][1]\n              expect(savedStocks[0].bookingLimitDatetime).toBe('2020-12-20T02:59:59Z')\n            })\n\n            it('should set booking limit time to end of selected locale day when specified and different than beginning date in Paris TZ', async () => {\n              // Given\n              eventOffer.venue.departementCode = PARIS_FRANCE_DEPT\n\n              await renderOffers(props, store)\n              fireEvent.click(screen.getByLabelText('Date limite de réservation'))\n              fireEvent.click(screen.getByText('17'))\n\n              // When\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // Then\n              const savedStocks = pcapi.bulkCreateOrEditStock.mock.calls[0][1]\n              expect(savedStocks[0].bookingLimitDatetime).toBe('2020-12-17T22:59:59Z')\n            })\n\n            it('should set quantity to null when not specified', async () => {\n              // Given\n              await renderOffers(props, store)\n              fireEvent.change(screen.getByLabelText('Quantité'), { target: { value: null } })\n\n              // When\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // Then\n              const savedStocks = pcapi.bulkCreateOrEditStock.mock.calls[0][1]\n              expect(savedStocks[0].quantity).toBeNull()\n            })\n\n            it('should display error message on api error', async () => {\n              // Given\n              pcapi.bulkCreateOrEditStock.mockRejectedValueOnce({\n                errors: {\n                  price: 'Le prix est invalide.',\n                  quantity: 'La quantité est invalide.',\n                },\n              })\n              await renderOffers(props, store)\n\n              fireEvent.click(screen.getByLabelText('Date de l’événement'))\n              fireEvent.click(screen.getByText('26'))\n\n              fireEvent.click(screen.getByLabelText('Heure de l’événement'))\n              fireEvent.click(screen.getByText('20:00'))\n\n              // When\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // Then\n              const errorMessage = await screen.findByText(\n                'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n              )\n              expect(errorMessage).toBeInTheDocument()\n            })\n\n            it('should not be able to submit changes when beginning date field is empty', async () => {\n              // given\n              await renderOffers(props, store)\n              const beginningDateField = screen.getByDisplayValue('20/12/2020')\n              fireEvent.change(beginningDateField, { target: { value: null } })\n\n              // when\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // then\n              const errorMessage = await screen.findByText(\n                'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n              )\n              expect(errorMessage).toBeInTheDocument()\n              expect(pcapi.bulkCreateOrEditStock).not.toHaveBeenCalled()\n            })\n\n            it('should not be able to validate changes when hour field is empty', async () => {\n              // given\n              await renderOffers(props, store)\n              const beginningHourField = screen.getByDisplayValue('19:00')\n              fireEvent.change(beginningHourField, { target: { value: null } })\n\n              // when\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // then\n              const errorMessage = await screen.findByText(\n                'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n              )\n              expect(errorMessage).toBeInTheDocument()\n              expect(pcapi.bulkCreateOrEditStock).not.toHaveBeenCalled()\n            })\n\n            it('should be able to edit stock when remaining quantity is unlimited and there is existing bookings', async () => {\n              // Given\n              const eventStock = {\n                ...defaultStock,\n                beginningDatetime: '2020-12-20T22:00:00Z',\n                quantity: null,\n              }\n              pcapi.loadStocks.mockResolvedValue({ stocks: [eventStock] })\n              pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n\n              await renderOffers(props, store)\n              fireEvent.click(screen.getByLabelText('Heure de l’événement'))\n              fireEvent.click(screen.getByText('20:00'))\n\n              // When\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // Then\n              const errorMessage = await screen.findByText('Vos stocks ont bien été sauvegardés.')\n              expect(errorMessage).toBeInTheDocument()\n            })\n\n            it('should display error message on pre-submit error', async () => {\n              // Given\n              await renderOffers(props, store)\n\n              fireEvent.click(screen.getByLabelText('Date de l’événement'))\n              fireEvent.click(screen.getByText('26'))\n\n              fireEvent.click(screen.getByLabelText('Heure de l’événement'))\n              fireEvent.click(screen.getByText('20:00'))\n\n              fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '-10' } })\n              fireEvent.change(screen.getByLabelText('Quantité'), { target: { value: '-20' } })\n\n              // When\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // Then\n              const errorMessage = await screen.findByText(\n                'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n              )\n              expect(errorMessage).toBeInTheDocument()\n            })\n\n            it('should display success message on success', async () => {\n              // Given\n              pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n              await renderOffers(props, store)\n\n              fireEvent.click(screen.getByLabelText('Date de l’événement'))\n              fireEvent.click(screen.getByText('26'))\n\n              fireEvent.click(screen.getByLabelText('Heure de l’événement'))\n              fireEvent.click(screen.getByText('20:00'))\n\n              // When\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // Then\n              const errorMessage = await screen.findByText('Vos stocks ont bien été sauvegardés.')\n              expect(errorMessage).toBeInTheDocument()\n            })\n\n            it('should refresh offer', async () => {\n              // Given\n              pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n              const initialOffer = {\n                ...eventOffer,\n                status: 'SOLD_OUT',\n              }\n              const updatedOffer = {\n                ...eventOffer,\n                status: 'ACTIVE',\n              }\n              pcapi.loadOffer\n                .mockResolvedValueOnce(initialOffer)\n                .mockResolvedValueOnce(updatedOffer)\n              await renderOffers(props, store)\n              pcapi.loadOffer.mockClear()\n\n              // When\n              await act(async () => {\n                fireEvent.click(screen.getByText('Enregistrer'))\n              })\n\n              // Then\n              expect(pcapi.loadOffer).toHaveBeenCalledTimes(1)\n            })\n\n            it('should update displayed offer status', async () => {\n              // Given\n              pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n              const initialOffer = {\n                ...eventOffer,\n                status: 'SOLD_OUT',\n              }\n              const updatedOffer = {\n                ...eventOffer,\n                status: 'ACTIVE',\n              }\n              pcapi.loadOffer\n                .mockResolvedValueOnce(initialOffer)\n                .mockResolvedValueOnce(updatedOffer)\n\n              // When\n              await renderOffers(props, store)\n\n              // Then\n              const soldOutOfferStatus = await screen.findByText('épuisée')\n              expect(soldOutOfferStatus).toBeInTheDocument()\n\n              fireEvent.click(screen.getByText('Enregistrer'))\n\n              const successMessage = await screen.findByText('Vos stocks ont bien été sauvegardés.')\n              expect(successMessage).toBeInTheDocument()\n\n              const activeOfferStatus = await screen.findByText('active')\n              expect(activeOfferStatus).toBeInTheDocument()\n            })\n          })\n        })\n\n        describe('when deleting stock', () => {\n          it('should display confirmation dialog box with focus on confirmation button', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            userEvent.click(screen.getByTitle('Supprimer le stock'))\n\n            // Then\n            expect(screen.getByLabelText('Voulez-vous supprimer ce stock ?')).toBeInTheDocument()\n            expect(\n              queryByTextTrimHtml(\n                screen,\n                'Ce stock ne sera plus disponible à la réservation et entraînera l’annulation des réservations en cours !'\n              )\n            ).toBeInTheDocument()\n            expect(\n              screen.getByText('entraînera l’annulation des réservations en cours !', {\n                selector: 'strong',\n              })\n            ).toBeInTheDocument()\n            expect(\n              screen.getByText(\n                'L’ensemble des utilisateurs concernés sera automatiquement averti par e-mail.'\n              )\n            ).toBeInTheDocument()\n            expect(screen.getByRole('button', { name: 'Supprimer' })).toHaveFocus()\n          })\n\n          it('should be able to delete a stock', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            userEvent.click(screen.getByTitle('Supprimer le stock'))\n            fireEvent.click(screen.getByRole('button', { name: 'Supprimer' }))\n\n            // Then\n            expect(pcapi.deleteStock).toHaveBeenCalledWith(stockId)\n          })\n\n          it('should not delete stock if aborting on confirmation', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            userEvent.click(screen.getByTitle('Supprimer le stock'))\n            fireEvent.click(screen.getByRole('button', { name: 'Annuler' }))\n\n            // Then\n            expect(pcapi.deleteStock).not.toHaveBeenCalled()\n          })\n\n          it('should discard deleted stock from list', async () => {\n            // Given\n            const initialStock = {\n              ...defaultStock,\n              beginningDatetime: '2020-12-20T22:00:00Z',\n            }\n            pcapi.loadStocks\n              .mockResolvedValueOnce({ stocks: [initialStock] })\n              .mockResolvedValueOnce({ stocks: [] })\n\n            await renderOffers(props, store)\n\n            // When\n            await act(async () => {\n              userEvent.click(await screen.findByTitle('Supprimer le stock'))\n              fireEvent.click(screen.getByRole('button', { name: 'Supprimer' }))\n            })\n\n            // Then\n            expect(screen.queryByRole('row')).not.toBeInTheDocument()\n          })\n\n          it('should not discard creation stocks when deleting a stock', async () => {\n            // Given\n            const initialStock = {\n              ...defaultStock,\n              beginningDatetime: '2020-12-20T22:00:00Z',\n            }\n            pcapi.loadStocks\n              .mockResolvedValueOnce({ stocks: [initialStock] })\n              .mockResolvedValueOnce({ stocks: [] })\n            pcapi.loadOffer.mockResolvedValue({ ...defaultOffer, isEvent: true })\n\n            await renderOffers(props, store)\n            await fireEvent.click(await screen.findByText('Ajouter une date'))\n\n            let nbExpectedRows = 0\n            nbExpectedRows += 1 // header row\n            nbExpectedRows += 1 // existing stock row\n            nbExpectedRows += 1 // creation stock row\n            expect(screen.getAllByRole('row')).toHaveLength(nbExpectedRows)\n\n            // When\n            await act(async () => {\n              userEvent.click(screen.getAllByTitle('Opérations sur le stock')[0])\n              userEvent.click(screen.getAllByText('Supprimer le stock')[0])\n              fireEvent.click(await screen.findByRole('button', { name: 'Supprimer' }))\n            })\n\n            // Then\n            expect(screen.queryByTestId(`stock-item-${initialStock.id}`)).not.toBeInTheDocument()\n            nbExpectedRows = 0\n            nbExpectedRows += 1 // header row\n            nbExpectedRows += 1 // creation stock row\n            expect(screen.getAllByRole('row')).toHaveLength(nbExpectedRows)\n          })\n\n          it('should display a success message after deletion', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            // When\n            userEvent.click(screen.getByTitle('Supprimer le stock'))\n            fireEvent.click(screen.getByRole('button', { name: 'Supprimer' }))\n\n            // Then\n            expect(await screen.findByText('Le stock a été supprimé.')).toBeInTheDocument()\n          })\n\n          it('should display an error message when deletion fails', async () => {\n            // Given\n            pcapi.deleteStock.mockRejectedValue({})\n            await renderOffers(props, store)\n\n            // When\n            userEvent.click(screen.getByTitle('Supprimer le stock'))\n            fireEvent.click(screen.getByRole('button', { name: 'Supprimer' }))\n\n            // Then\n            expect(\n              await screen.findByText('Une erreur est survenue lors de la suppression du stock.')\n            ).toBeInTheDocument()\n          })\n\n          it('should disable deleting button', async () => {\n            // given\n            await renderOffers(props, store)\n\n            // when\n            const deleteButton = screen.getByTitle('Supprimer le stock')\n            await act(async () => {\n              userEvent.click(deleteButton)\n            })\n\n            // then\n            expect(deleteButton).toHaveAttribute('aria-disabled', 'true')\n          })\n        })\n      })\n\n      describe('when offer has been synchronized with Allocine', () => {\n        beforeEach(() => {\n          const eventOfferFromAllocine = {\n            ...eventOffer,\n            lastProvider: {\n              id: 'CY',\n              name: 'allociné',\n            },\n          }\n\n          pcapi.loadOffer.mockResolvedValue(eventOfferFromAllocine)\n        })\n\n        describe('when editing stock', () => {\n          it('should be able to update price and quantity but not beginning date nor hour fields', async () => {\n            // When\n            await renderOffers(props, store)\n\n            // Then\n            expect(screen.getByLabelText('Date de l’événement')).toBeDisabled()\n            expect(screen.getByLabelText('Heure de l’événement')).toBeDisabled()\n            expect(screen.getByLabelText('Date limite de réservation')).toBeEnabled()\n            expect(screen.getByLabelText('Prix')).toBeEnabled()\n            expect(screen.getByLabelText('Quantité')).toBeEnabled()\n          })\n        })\n      })\n    })\n\n    describe('thing offer', () => {\n      let thingOffer\n      beforeEach(() => {\n        const thingStock = {\n          ...defaultStock,\n          isEventDeletable: true,\n        }\n        thingOffer = {\n          ...defaultOffer,\n          isEvent: false,\n        }\n        pcapi.loadOffer.mockResolvedValue(thingOffer)\n        pcapi.loadStocks.mockResolvedValue({ stocks: [thingStock] })\n      })\n\n      describe('when offer has been manually created', () => {\n        it('should be able to edit price field', async () => {\n          // given\n          await renderOffers(props, store)\n          const priceField = screen.getByDisplayValue('10.01')\n\n          // when\n          fireEvent.change(priceField)\n          fireEvent.change(priceField, { target: { value: '127.03' } })\n\n          // then\n          expect(screen.queryByDisplayValue('10.01')).not.toBeInTheDocument()\n          expect(screen.getByDisplayValue('127.03')).toBeInTheDocument()\n        })\n\n        it('should be able to edit booking limit date field', async () => {\n          // given\n          await renderOffers(props, store)\n\n          // when\n          fireEvent.click(screen.getByDisplayValue('18/12/2020'))\n          fireEvent.click(screen.getByText('17'))\n\n          // then\n          expect(screen.queryByDisplayValue('18/12/2020')).not.toBeInTheDocument()\n          expect(screen.getByDisplayValue('17/12/2020')).toBeInTheDocument()\n        })\n\n        it('should be able to edit total quantity field', async () => {\n          // given\n          await renderOffers(props, store)\n          const quantityField = screen.getByDisplayValue('10')\n\n          // when\n          fireEvent.change(quantityField, { target: { value: null } })\n          fireEvent.change(quantityField, { target: { value: '23' } })\n\n          // then\n          expect(screen.queryByDisplayValue('10')).not.toBeInTheDocument()\n          expect(screen.getByDisplayValue('23')).toBeInTheDocument()\n        })\n\n        it('should compute remaining quantity based on inputted total quantity', async () => {\n          // given\n          await renderOffers(props, store)\n          const quantityField = screen.getByDisplayValue('10')\n\n          // when\n          fireEvent.change(quantityField, { target: { value: null } })\n          fireEvent.change(quantityField, { target: { value: '9' } })\n\n          // then\n          const initialRemainingQuantity = screen.queryByText(6)\n          expect(initialRemainingQuantity).not.toBeInTheDocument()\n\n          const computedRemainingQuantity = screen.queryByText('5')\n          expect(computedRemainingQuantity).toBeInTheDocument()\n        })\n\n        it('should set remaining quantity to Illimité when emptying total quantity field', async () => {\n          // given\n          await renderOffers(props, store)\n\n          // when\n          fireEvent.change(screen.getByDisplayValue('10'), { target: { value: null } })\n\n          // then\n          const computedRemainingQuantity = screen.getByText('Illimité')\n          expect(computedRemainingQuantity).toBeInTheDocument()\n        })\n\n        it('should not set remaining quantity to Illimité when total quantity is zero', async () => {\n          // given\n          pcapi.loadStocks.mockResolvedValue({\n            stocks: [{ ...defaultStock, quantity: 0, bookingsQuantity: 0 }],\n          })\n\n          // when\n          await renderOffers(props, store)\n\n          // then\n          expect(screen.getByLabelText('Quantité').value).not.toBe('')\n          expect(screen.getByLabelText('Quantité').value).toBe('0')\n          const remainingQuantityValue = screen.getAllByRole('cell')[3].textContent\n          expect(remainingQuantityValue).not.toBe('Illimité')\n          expect(remainingQuantityValue).toBe('0')\n        })\n\n        describe('when clicking on submit button', () => {\n          it('should save changes done to stock', async () => {\n            // Given\n            pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n            await renderOffers(props, store)\n\n            const priceField = screen.getByLabelText('Prix')\n            fireEvent.change(priceField, { target: { value: null } })\n            fireEvent.change(priceField, { target: { value: '14.01' } })\n\n            fireEvent.click(screen.getByLabelText('Date limite de réservation'))\n            fireEvent.click(screen.getByText('25'))\n\n            const quantityField = screen.getByLabelText('Quantité')\n            fireEvent.change(quantityField, { target: { value: null } })\n            fireEvent.change(quantityField, { target: { value: '6' } })\n\n            // When\n            await act(async () => {\n              fireEvent.click(screen.getByText('Enregistrer'))\n            })\n\n            // Then\n            expect(pcapi.bulkCreateOrEditStock).toHaveBeenCalledWith(defaultOffer.id, [\n              {\n                bookingLimitDatetime: '2020-12-26T02:59:59Z',\n                id: '2E',\n                price: '14.01',\n                quantity: '6',\n              },\n            ])\n            expect(screen.getByLabelText('Prix').value).toBe('14.01')\n            expect(screen.getByLabelText('Date limite de réservation').value).toBe('25/12/2020')\n            expect(screen.getByLabelText('Quantité').value).toBe('6')\n          })\n\n          it('should refresh stocks', async () => {\n            // Given\n            pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n            const initialStock = {\n              ...defaultStock,\n              price: 10.01,\n            }\n            const updatedStock = {\n              ...defaultStock,\n              price: 10,\n            }\n            pcapi.loadStocks\n              .mockResolvedValueOnce({ stocks: [initialStock] })\n              .mockResolvedValueOnce({ stocks: [updatedStock] })\n            await renderOffers(props, store)\n            pcapi.loadStocks.mockClear()\n\n            // When\n            await act(async () => {\n              fireEvent.click(screen.getByText('Enregistrer'))\n            })\n\n            // Then\n            expect(pcapi.loadStocks).toHaveBeenCalledTimes(1)\n          })\n\n          it('should set booking limit time to end of selected local day when specified in Cayenne TZ', async () => {\n            // Given\n            pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n            await renderOffers(props, store)\n            fireEvent.click(screen.getByLabelText('Date limite de réservation'))\n            fireEvent.click(screen.getByText('19'))\n\n            // When\n            fireEvent.click(screen.getByText('Enregistrer'))\n\n            // Then\n            const savedStocks = pcapi.bulkCreateOrEditStock.mock.calls[0][1]\n            expect(savedStocks[0].bookingLimitDatetime).toBe('2020-12-20T02:59:59Z')\n          })\n\n          it('should set booking limit time to end of selected local day when specified in Paris TZ', async () => {\n            // Given\n            thingOffer.venue.departementCode = PARIS_FRANCE_DEPT\n\n            pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n            await renderOffers(props, store)\n            fireEvent.click(screen.getByLabelText('Date limite de réservation'))\n            fireEvent.click(screen.getByText('17'))\n\n            // When\n            fireEvent.click(screen.getByText('Enregistrer'))\n\n            // Then\n            const savedStocks = pcapi.bulkCreateOrEditStock.mock.calls[0][1]\n            expect(savedStocks[0].bookingLimitDatetime).toBe('2020-12-17T22:59:59Z')\n          })\n\n          it('should set booking limit datetime to null when not specified', async () => {\n            // Given\n            pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n            await renderOffers(props, store)\n            await act(async () => {\n              fireEvent.change(screen.getByLabelText('Date limite de réservation'), {\n                target: { value: null },\n              })\n            })\n            // When\n            await act(async () => {\n              fireEvent.click(screen.getByText('Enregistrer'))\n            })\n            // Then\n            const savedStocks = pcapi.bulkCreateOrEditStock.mock.calls[0][1]\n            expect(savedStocks[0].bookingLimitDatetime).toBeNull()\n          })\n\n          it('should set quantity to null when not specified', async () => {\n            // Given\n            pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n            await renderOffers(props, store)\n            fireEvent.change(screen.getByLabelText('Quantité'), { target: { value: null } })\n\n            // When\n            fireEvent.click(screen.getByText('Enregistrer'))\n            // Then\n            const savedStocks = pcapi.bulkCreateOrEditStock.mock.calls[0][1]\n            expect(savedStocks[0].quantity).toBeNull()\n          })\n\n          it('should display error message on api error', async () => {\n            // Given\n            pcapi.bulkCreateOrEditStock.mockRejectedValueOnce({\n              errors: {\n                price: 'Le prix est invalide.',\n                quantity: 'La quantité est invalide.',\n              },\n            })\n            await renderOffers(props, store)\n\n            fireEvent.change(screen.getByLabelText('Quantité'), { target: { value: '10' } })\n\n            // When\n            fireEvent.click(screen.getByText('Enregistrer'))\n\n            // Then\n            const errorMessage = await screen.findByText(\n              'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n            )\n            expect(errorMessage).toBeInTheDocument()\n          })\n\n          it('should display error message on pre-submit error', async () => {\n            // Given\n            await renderOffers(props, store)\n\n            fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '-10' } })\n            fireEvent.change(screen.getByLabelText('Quantité'), { target: { value: '-20' } })\n\n            // When\n            fireEvent.click(screen.getByText('Enregistrer'))\n\n            // Then\n            const errorMessage = await screen.findByText(\n              'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n            )\n            expect(errorMessage).toBeInTheDocument()\n          })\n\n          it('should display success message on success', async () => {\n            // Given\n            pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n            await renderOffers(props, store)\n\n            fireEvent.change(screen.getByLabelText('Quantité'), { target: { value: '10' } })\n\n            // When\n            fireEvent.click(screen.getByText('Enregistrer'))\n\n            // Then\n            const errorMessage = await screen.findByText('Vos stocks ont bien été sauvegardés.')\n            expect(errorMessage).toBeInTheDocument()\n          })\n        })\n      })\n\n      describe('when offer has been synchronized (with Titelive, leslibraires.fr, FNAC or Praxiel)', () => {\n        beforeEach(() => {\n          const synchronisedThingOffer = {\n            ...thingOffer,\n            lastProvider: {\n              id: 'D4',\n              name: 'fnac',\n            },\n          }\n          pcapi.loadOffer.mockResolvedValue(synchronisedThingOffer)\n        })\n\n        it('should not be able to edit a stock', async () => {\n          // When\n          await renderOffers(props, store)\n\n          // Then\n          expect(screen.getByLabelText('Prix')).toBeDisabled()\n          expect(screen.getByLabelText('Date limite de réservation')).toBeDisabled()\n          expect(screen.getByLabelText('Quantité')).toBeDisabled()\n        })\n\n        it('should not be able to delete a stock', async () => {\n          // Given\n          await renderOffers(props, store)\n          const deleteButton = screen.getByTitle('Les stock synchronisés ne peuvent être supprimés')\n\n          // When\n          fireEvent.click(deleteButton)\n\n          // Then\n          expect(deleteButton).toHaveAttribute('aria-disabled', 'true')\n          expect(screen.getAllByRole('row')).toHaveLength(2)\n        })\n      })\n\n      describe('digital offer', () => {\n        it('should disable add activation codes option', async () => {\n          // when\n          pcapi.loadOffer.mockResolvedValue({ ...thingOffer, isDigital: true })\n          await renderOffers(props, store)\n\n          // then\n          const informationMessage = screen\n            .getByText('Ajouter des codes d’activation')\n            .closest('div')\n          expect(informationMessage).toBeInTheDocument()\n          expect(informationMessage).toHaveAttribute('aria-disabled', 'true')\n        })\n      })\n    })\n  })\n\n  describe('create', () => {\n    it('should not display offer status', async () => {\n      // Given\n      const draftOffer = {\n        ...defaultOffer,\n        status: 'DRAFT',\n      }\n      pcapi.loadOffer.mockResolvedValueOnce(draftOffer)\n\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      expect(screen.queryByText('brouillon')).not.toBeInTheDocument()\n    })\n\n    it('should display a specific success notification when the user has finished the offer creation process', async () => {\n      // Given\n      const draftOffer = {\n        ...defaultOffer,\n        name: 'mon offre',\n        status: 'DRAFT',\n      }\n\n      pcapi.loadOffer.mockResolvedValue(draftOffer)\n      pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n\n      await renderOffers(props, store)\n\n      fireEvent.click(screen.getByText('Ajouter un stock'))\n      fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '15' } })\n\n      // When\n      fireEvent.click(screen.getByText('Valider et créer l’offre'))\n\n      // Then\n      const successMessage = await screen.findByText(\n        'Votre offre a bien été créée et vos stocks sauvegardés.'\n      )\n      expect(successMessage).toBeInTheDocument()\n    })\n\n    it('should redirect to confirmation page after stocks validation', async () => {\n      // Given\n      const offerDraftStatus = offerFactory({ name: 'mon offre', id: 'AG3A', status: 'DRAFT' })\n      const offerApprovedStatus = offerFactory({\n        name: 'mon offre',\n        id: 'AG3A',\n        status: 'APPROVED',\n      })\n      loadFakeApiOffer(offerApprovedStatus).mockResolvedValueOnce(offerDraftStatus)\n      loadFakeApiStocks([])\n      bulkFakeApiCreateOrEditStock({ id: 'createdStock' })\n      await renderOffers(props, store)\n      fireEvent.click(screen.getByText('Ajouter un stock', { selector: 'button' }))\n      fireEvent.change(screen.getByLabelText('Prix'), { target: { value: 20 } })\n\n      // When\n      fireEvent.click(screen.getByText('Valider et créer l’offre', { selector: 'button' }))\n\n      // Then\n      expect(await screen.findByText('Offre créée !', { selectof: 'h2' })).toBeInTheDocument()\n    })\n\n    it('should redirect to confirmation page with pending message when offer is pending validation', async () => {\n      // Given\n      const offerDraftStatus = offerFactory({ name: 'mon offre', id: 'AG3A', status: 'DRAFT' })\n      const offerPendingStatus = offerFactory({ name: 'mon offre', id: 'AG3A', status: 'PENDING' })\n      loadFakeApiOffer(offerPendingStatus).mockResolvedValueOnce(offerDraftStatus)\n      loadFakeApiStocks([])\n      bulkFakeApiCreateOrEditStock({ id: 'createdStock' })\n      await renderOffers(props, store)\n      fireEvent.click(screen.getByText('Ajouter un stock', { selector: 'button' }))\n      fireEvent.change(screen.getByLabelText('Prix'), { target: { value: 20 } })\n\n      // When\n      fireEvent.click(screen.getByText('Valider et créer l’offre', { selector: 'button' }))\n\n      // Then\n      expect(\n        await screen.findByText('Offre en cours de validation', { selectof: 'h2' })\n      ).toBeInTheDocument()\n    })\n\n    describe('event offer', () => {\n      let noStockOffer\n      beforeEach(() => {\n        noStockOffer = {\n          ...defaultOffer,\n          isEvent: true,\n          stocks: [],\n        }\n\n        pcapi.loadOffer.mockResolvedValue(noStockOffer)\n      })\n\n      it('should not display remaining stocks and bookings columns when no stocks yet', async () => {\n        // given\n        await renderOffers(props, store)\n\n        // when\n        fireEvent.click(await screen.findByText('Ajouter une date'))\n\n        // then\n        expect(screen.queryByText('Stock restant')).not.toBeInTheDocument()\n        expect(screen.queryByText('Réservations')).not.toBeInTheDocument()\n      })\n\n      it('should append new stock line on top of stocks list when clicking on add button', async () => {\n        // given\n        const eventStock = {\n          ...defaultStock,\n          beginningDatetime: '2020-12-20T22:00:00Z',\n        }\n        pcapi.loadStocks.mockResolvedValue({ stocks: [eventStock] })\n        await renderOffers(props, store)\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        // when\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        // then\n        expect(screen.getAllByRole('row')).toHaveLength(4)\n        const eventsDates = screen.getAllByLabelText('Date de l’événement')\n        expect(eventsDates[0].value).toBe('')\n        expect(eventsDates[1].value).toBe('')\n        expect(eventsDates[2].value).toBe('20/12/2020')\n      })\n\n      it('should have date, hour, price, limit datetime and quantity fields emptied by default', async () => {\n        // given\n        await renderOffers(props, store)\n\n        // when\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        // then\n        expect(screen.getByLabelText('Date de l’événement').value).toBe('')\n        expect(screen.getByLabelText('Heure de l’événement').value).toBe('')\n        expect(screen.getByLabelText('Prix').value).toBe('')\n        expect(screen.getByLabelText('Date limite de réservation').value).toBe('')\n        expect(screen.getByLabelText('Quantité').value).toBe('')\n      })\n\n      it('should not have remaining stocks and bookings columns', async () => {\n        // given\n        await renderOffers(props, store)\n\n        // when\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        // then\n        const columnCells = screen.getAllByRole('cell')\n        expect(columnCells[3].textContent).toBe('')\n        expect(columnCells[4].textContent).toBe('')\n      })\n\n      it('should have a cancel button to cancel new stock', async () => {\n        // given\n        await renderOffers(props, store)\n\n        // when\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        // then\n        expect(screen.queryByTitle('Supprimer le stock')).toBeInTheDocument()\n      })\n\n      it('should add new stocks to stocks and remove new empty stock line when clicking on validate button', async () => {\n        // given\n        pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n        const createdStocks = [\n          {\n            quantity: 15,\n            price: 15,\n            activationCodes: [],\n            remainingQuantity: 15,\n            bookingsQuantity: 0,\n            beginningDatetime: '2020-12-24T23:00:00Z',\n            bookingLimitDatetime: '2020-12-22T23:59:59Z',\n            id: '2E',\n            isEventDeletable: true,\n          },\n          {\n            quantity: 15,\n            price: 15,\n            activationCodes: [],\n            remainingQuantity: 15,\n            bookingsQuantity: 0,\n            beginningDatetime: '2020-12-25T23:00:00Z',\n            bookingLimitDatetime: '2020-12-23T23:59:59Z',\n            id: '3E',\n            isEventDeletable: true,\n          },\n        ]\n        pcapi.loadStocks\n          .mockResolvedValueOnce({ stocks: [] })\n          .mockResolvedValueOnce({ stocks: createdStocks })\n        await renderOffers(props, store)\n\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        fireEvent.click(screen.getAllByLabelText('Date de l’événement')[0])\n        fireEvent.click(screen.getByText('24'))\n\n        fireEvent.click(screen.getAllByLabelText('Heure de l’événement')[0])\n        fireEvent.click(screen.getByText('20:00'))\n\n        fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '15' } })\n\n        fireEvent.click(screen.getAllByLabelText('Date limite de réservation')[0])\n        fireEvent.click(screen.getByText('22'))\n\n        fireEvent.change(screen.getByLabelText('Quantité'), { target: { value: '15' } })\n\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        fireEvent.click(screen.getAllByLabelText('Date de l’événement')[0])\n        fireEvent.click(screen.getByText('25'))\n\n        fireEvent.click(screen.getAllByLabelText('Heure de l’événement')[0])\n        fireEvent.click(screen.getByText('20:00'))\n\n        fireEvent.change(screen.getAllByLabelText('Prix')[0], { target: { value: '0' } })\n\n        fireEvent.click(screen.getAllByLabelText('Date limite de réservation')[0])\n        fireEvent.click(screen.getByText('23'))\n\n        // when\n        await act(async () => {\n          fireEvent.click(screen.getByText('Enregistrer'))\n        })\n\n        // then\n        expect(pcapi.bulkCreateOrEditStock).toHaveBeenCalledWith(defaultOffer.id, [\n          {\n            beginningDatetime: '2020-12-25T23:00:00Z',\n            bookingLimitDatetime: '2020-12-24T02:59:59Z',\n            price: '0',\n            quantity: null,\n          },\n          {\n            beginningDatetime: '2020-12-24T23:00:00Z',\n            bookingLimitDatetime: '2020-12-23T02:59:59Z',\n            price: '15',\n            quantity: '15',\n          },\n        ])\n      })\n\n      it('should cancel new stock addition when clicking on cancel button', async () => {\n        // Given\n        await renderOffers(props, store)\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        // When\n        userEvent.click(screen.getByTitle('Opérations sur le stock'))\n\n        userEvent.click(screen.getByTitle('Supprimer le stock'))\n\n        // Then\n        expect(pcapi.bulkCreateOrEditStock).not.toHaveBeenCalled()\n        expect(screen.queryByRole('row')).not.toBeInTheDocument()\n      })\n\n      it('should be able to add second stock while first one is not validated', async () => {\n        // Given\n        await renderOffers(props, store)\n\n        // When\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        // Then\n        expect(screen.getByText('Ajouter une date')).toBeEnabled()\n      })\n\n      it('should display error message on api error', async () => {\n        // Given\n        pcapi.bulkCreateOrEditStock.mockRejectedValueOnce({\n          errors: {\n            price: 'Le prix est invalide.',\n            quantity: 'La quantité est invalide.',\n          },\n        })\n        await renderOffers(props, store)\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        fireEvent.click(screen.getByLabelText('Date de l’événement'))\n        fireEvent.click(screen.getByText('26'))\n\n        fireEvent.click(screen.getByLabelText('Heure de l’événement'))\n        fireEvent.click(screen.getByText('20:00'))\n\n        fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '10' } })\n\n        // When\n        fireEvent.click(screen.getByText('Enregistrer'))\n\n        // Then\n        const errorMessage = await screen.findByText(\n          'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n        )\n        expect(errorMessage).toBeInTheDocument()\n      })\n\n      it('should display error message on pre-submit error', async () => {\n        // Given\n        await renderOffers(props, store)\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        fireEvent.click(screen.getByLabelText('Date de l’événement'))\n        fireEvent.click(screen.getByText('26'))\n\n        fireEvent.click(screen.getByLabelText('Heure de l’événement'))\n        fireEvent.click(screen.getByText('20:00'))\n\n        fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '-10' } })\n        fireEvent.change(screen.getByLabelText('Quantité'), { target: { value: '-20' } })\n\n        // When\n        fireEvent.click(screen.getByText('Enregistrer'))\n\n        // Then\n        const errorMessage = await screen.findByText(\n          'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n        )\n        expect(errorMessage).toBeInTheDocument()\n        expect(screen.getByLabelText('Prix')).toHaveClass('error')\n        expect(screen.getByLabelText('Quantité')).toHaveClass('error')\n        expect(pcapi.bulkCreateOrEditStock).toHaveBeenCalledTimes(0)\n      })\n\n      it('should display success message on success', async () => {\n        // Given\n        pcapi.bulkCreateOrEditStock.mockResolvedValueOnce({})\n        await renderOffers(props, store)\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        fireEvent.click(screen.getByLabelText('Date de l’événement'))\n        fireEvent.click(screen.getByText('26'))\n\n        fireEvent.click(screen.getByLabelText('Heure de l’événement'))\n        fireEvent.click(screen.getByText('20:00'))\n\n        fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '10' } })\n\n        // When\n        fireEvent.click(screen.getByText('Enregistrer'))\n\n        // Then\n        const errorMessage = await screen.findByText('Vos stocks ont bien été sauvegardés.')\n        expect(errorMessage).toBeInTheDocument()\n      })\n\n      it('should redirect offer with stock to confirmation page after offer creation', async () => {\n        // Given\n        const offerDraftStatus = offerFactory({\n          name: 'mon offre',\n          id: 'AG3A',\n          isEvent: true,\n          status: 'DRAFT',\n        })\n        const offerApprovedStatus = offerFactory({\n          name: 'mon offre',\n          id: 'AG3A',\n          status: 'APPROVED',\n        })\n        loadFakeApiOffer(offerApprovedStatus).mockResolvedValueOnce(offerDraftStatus)\n        loadFakeApiStocks([])\n        bulkFakeApiCreateOrEditStock({ id: 'createdStock' })\n        await renderOffers(props, store)\n        fireEvent.click(screen.getByText('Ajouter une date'))\n\n        fireEvent.click(screen.getByLabelText('Date de l’événement'))\n        fireEvent.click(screen.getByText('26'))\n\n        fireEvent.click(screen.getByLabelText('Heure de l’événement'))\n        fireEvent.click(screen.getByText('20:00'))\n\n        fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '10' } })\n\n        // When\n        fireEvent.click(screen.getByText('Valider et créer l’offre', { selector: 'button' }))\n\n        // Then\n        const successMessage = await screen.findByText(\n          'Votre offre a bien été créée et vos stocks sauvegardés.'\n        )\n        expect(successMessage).toBeInTheDocument()\n\n        expect(await screen.findByText('Offre créée !', { selectof: 'h2' })).toBeInTheDocument()\n      })\n    })\n\n    describe('thing offer', () => {\n      let noStockOffer\n      beforeEach(() => {\n        noStockOffer = {\n          ...defaultOffer,\n          isEvent: false,\n          stocks: [],\n        }\n\n        pcapi.loadOffer.mockResolvedValue(noStockOffer)\n      })\n\n      it('should not display add activation codes option when not digital', async () => {\n        // given\n        const digitalOffer = {\n          ...noStockOffer,\n          isDigital: false,\n        }\n        pcapi.loadOffer.mockResolvedValue(digitalOffer)\n        await renderOffers(props, store)\n\n        // when\n        fireEvent.click(screen.getByText('Ajouter un stock'))\n\n        // then\n        expect(screen.queryByText('Ajouter des codes d’activation')).not.toBeInTheDocument()\n      })\n\n      it('should not display remaining stocks and bookings columns when no stocks yet', async () => {\n        // given\n        const thingOffer = {\n          ...defaultOffer,\n          isEvent: false,\n          stocks: [],\n        }\n        pcapi.loadOffer.mockResolvedValue(thingOffer)\n        await renderOffers(props, store)\n\n        // when\n        fireEvent.click(screen.getByText('Ajouter un stock'))\n\n        // then\n        expect(screen.queryByText('Stock restant')).not.toBeInTheDocument()\n        expect(screen.queryByText('Réservations')).not.toBeInTheDocument()\n      })\n\n      it('should append new stock line when clicking on add button', async () => {\n        // given\n        const thingOffer = {\n          ...defaultOffer,\n          isEvent: false,\n          stocks: [],\n        }\n        pcapi.loadOffer.mockResolvedValue(thingOffer)\n        await renderOffers(props, store)\n\n        // when\n        fireEvent.click(screen.getByText('Ajouter un stock'))\n\n        // then\n        expect(screen.getAllByRole('row')).toHaveLength(2)\n      })\n\n      it('should have price, limit datetime and quantity fields emptied by default', async () => {\n        // given\n        await renderOffers(props, store)\n\n        // when\n        fireEvent.click(screen.getByText('Ajouter un stock'))\n\n        // then\n        expect(screen.getByLabelText('Prix').value).toBe('')\n        expect(screen.getByLabelText('Date limite de réservation').value).toBe('')\n        expect(screen.getByLabelText('Quantité').value).toBe('')\n      })\n\n      it('should not have remaining stocks and bookings columns', async () => {\n        // given\n        await renderOffers(props, store)\n\n        // when\n        fireEvent.click(screen.getByText('Ajouter un stock'))\n\n        // then\n        expect(screen.queryByText('Stock restant')).not.toBeInTheDocument()\n        expect(screen.queryByText('Réservations')).not.toBeInTheDocument()\n      })\n\n      it('should have a cancel button to cancel new stock', async () => {\n        // given\n        await renderOffers(props, store)\n\n        // when\n        fireEvent.click(screen.getByText('Ajouter un stock'))\n\n        // then\n        expect(screen.queryByTitle('Supprimer le stock')).toBeInTheDocument()\n      })\n\n      it('should add new stock to stocks and remove new empty stock line when clicking on validate button', async () => {\n        // given\n        pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n        const createdStock = {\n          activationCodes: [],\n          quantity: 15,\n          price: 15,\n          remainingQuantity: 15,\n          bookingsQuantity: 0,\n          bookingLimitDatetime: '2020-12-22T23:59:59Z',\n          id: stockId,\n        }\n        pcapi.loadStocks\n          .mockResolvedValueOnce({ stocks: [] })\n          .mockResolvedValueOnce({ stocks: [createdStock] })\n        await renderOffers(props, store)\n\n        fireEvent.click(screen.getByText('Ajouter un stock'))\n\n        fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '15' } })\n\n        fireEvent.click(screen.getByLabelText('Date limite de réservation'))\n        fireEvent.click(screen.getByText('22'))\n\n        fireEvent.change(screen.getByLabelText('Quantité'), { target: { value: '15' } })\n\n        // when\n        await act(async () => {\n          fireEvent.click(screen.getByText('Enregistrer'))\n        })\n\n        // then\n        expect(pcapi.bulkCreateOrEditStock).toHaveBeenCalledWith('AG3A', [\n          {\n            bookingLimitDatetime: '2020-12-23T02:59:59Z',\n            price: '15',\n            quantity: '15',\n          },\n        ])\n      })\n\n      it('should display error message on api error', async () => {\n        // Given\n        pcapi.bulkCreateOrEditStock.mockRejectedValue({\n          errors: {\n            price: 'Le prix est invalide.',\n            quantity: 'La quantité est invalide.',\n          },\n        })\n        await renderOffers(props, store)\n        fireEvent.click(screen.getByText('Ajouter un stock'))\n\n        fireEvent.change(screen.getByLabelText('Quantité'), { target: { value: '15' } })\n\n        // When\n        fireEvent.click(screen.getByText('Enregistrer'))\n\n        // Then\n        const errorMessage = await screen.findByText(\n          'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n        )\n        expect(errorMessage).toBeInTheDocument()\n      })\n\n      it('should display error message on pre-submit error', async () => {\n        // Given\n        await renderOffers(props, store)\n        fireEvent.click(screen.getByText('Ajouter un stock'))\n\n        fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '-10' } })\n        fireEvent.change(screen.getByLabelText('Quantité'), { target: { value: '-20' } })\n\n        // When\n        fireEvent.click(screen.getByText('Enregistrer'))\n\n        // Then\n        const errorMessage = await screen.findByText(\n          'Une ou plusieurs erreurs sont présentes dans le formulaire.'\n        )\n        expect(errorMessage).toBeInTheDocument()\n        expect(screen.getByLabelText('Prix')).toHaveClass('error')\n        expect(screen.getByLabelText('Quantité')).toHaveClass('error')\n        expect(pcapi.bulkCreateOrEditStock).toHaveBeenCalledTimes(0)\n      })\n\n      it('should display success message on success', async () => {\n        // Given\n        pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n        await renderOffers(props, store)\n        fireEvent.click(screen.getByText('Ajouter un stock'))\n\n        fireEvent.change(screen.getByLabelText('Prix'), { target: { value: '15' } })\n        fireEvent.change(screen.getByLabelText('Quantité'), { target: { value: '15' } })\n\n        // When\n        fireEvent.click(screen.getByText('Enregistrer'))\n\n        // Then\n        const errorMessage = await screen.findByText('Vos stocks ont bien été sauvegardés.')\n        expect(errorMessage).toBeInTheDocument()\n      })\n\n      it('should cancel new stock addition when clicking on cancel button', async () => {\n        // Given\n        await renderOffers(props, store)\n        fireEvent.click(screen.getByText('Ajouter un stock'))\n\n        // When\n        userEvent.click(screen.getByTitle('Supprimer le stock'))\n\n        // Then\n        expect(pcapi.bulkCreateOrEditStock).not.toHaveBeenCalled()\n        expect(screen.queryByRole('row')).not.toBeInTheDocument()\n      })\n\n      describe('digital offer', () => {\n        let digitalOffer\n        beforeEach(() => {\n          digitalOffer = {\n            ...defaultOffer,\n            isDigital: true,\n            isEvent: false,\n            stocks: [],\n          }\n\n          pcapi.loadOffer.mockResolvedValue(digitalOffer)\n        })\n        it('should allow the user to add activation codes when offer is digital', async () => {\n          // given\n          await renderOffers(props, store)\n\n          // when\n          fireEvent.click(screen.getByText('Ajouter un stock'))\n          const activationCodeButton = screen\n            .getByText('Ajouter des codes d’activation')\n            .closest('div')\n          userEvent.click(activationCodeButton)\n\n          // then\n          expect(\n            screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n          ).toBeInTheDocument()\n        })\n\n        it('should display number of activation codes to be added', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          fireEvent.click(screen.getByText('Ajouter un stock'))\n          const activationCodeButton = screen\n            .getByText('Ajouter des codes d’activation')\n            .closest('div')\n          userEvent.click(activationCodeButton)\n          const uploadButton = screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n          const file = new File(['ABH\\nJHB'], 'activation_codes.csv', {\n            type: 'text/csv',\n          })\n\n          // When\n          fireEvent.change(uploadButton, {\n            target: {\n              files: [file],\n            },\n          })\n\n          // Then\n          expect(\n            await screen.findByText('Vous êtes sur le point d’ajouter 2 codes d’activation.')\n          ).toBeInTheDocument()\n        })\n\n        it('should not change step when file is null', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          fireEvent.click(screen.getByText('Ajouter un stock'))\n          const activationCodeButton = screen\n            .getByText('Ajouter des codes d’activation')\n            .closest('div')\n          userEvent.click(activationCodeButton)\n          const uploadButton = screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n\n          // When\n          fireEvent.change(uploadButton, {\n            target: {\n              files: [null],\n            },\n          })\n\n          // Then\n          await waitFor(() => {\n            expect(\n              screen.queryByText('Vous êtes sur le point d’ajouter 2 codes d’activations.')\n            ).not.toBeInTheDocument()\n            expect(\n              screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n            ).toBeInTheDocument()\n          })\n        })\n\n        it('should allow user to go back', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          fireEvent.click(screen.getByText('Ajouter un stock'))\n          const activationCodeButton = screen\n            .getByText('Ajouter des codes d’activation')\n            .closest('div')\n          userEvent.click(activationCodeButton)\n          const uploadButton = screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n          const file = new File(['ABH\\nJHB'], 'activation_codes.csv', {\n            type: 'text/csv',\n          })\n\n          // When\n          fireEvent.change(uploadButton, {\n            target: {\n              files: [file],\n            },\n          })\n\n          fireEvent.click(await screen.findByText('Retour'))\n\n          // Then\n          expect(\n            screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n          ).toBeInTheDocument()\n        })\n\n        it('should save changes done to stock with activation codes and readjust bookingLimitDatetime according to activationCodesExpirationDatetime', async () => {\n          // Given\n          pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n          await renderOffers(props, store)\n\n          fireEvent.click(screen.getByText('Ajouter un stock'))\n          const activationCodeButton = screen\n            .getByText('Ajouter des codes d’activation')\n            .closest('div')\n          userEvent.click(activationCodeButton)\n          const uploadButton = screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n          const file = new File(['ABH\\nJHB'], 'activation_codes.csv', {\n            type: 'text/csv',\n          })\n\n          // When\n          fireEvent.change(uploadButton, {\n            target: {\n              files: [file],\n            },\n          })\n\n          fireEvent.click(await screen.findByLabelText('Date limite de validité'))\n          fireEvent.click(screen.getByText('25'))\n          fireEvent.click(screen.getByText('Valider'))\n\n          const priceField = screen.getByLabelText('Prix')\n          fireEvent.change(priceField, { target: { value: null } })\n          fireEvent.change(priceField, { target: { value: '14.01' } })\n\n          fireEvent.click(screen.getByText('Enregistrer'))\n\n          // Then\n          expect(pcapi.bulkCreateOrEditStock).toHaveBeenCalledWith(defaultOffer.id, [\n            {\n              activationCodes: ['ABH', 'JHB'],\n              activationCodesExpirationDatetime: '2020-12-26T02:59:59Z',\n              bookingLimitDatetime: '2020-12-19T02:59:59Z',\n              id: undefined,\n              price: '14.01',\n              quantity: 2,\n            },\n          ])\n        })\n\n        it('should save changes done to stock with activation codes and no activationCodesExpirationDatetime', async () => {\n          // Given\n          pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n          await renderOffers(props, store)\n\n          fireEvent.click(screen.getByText('Ajouter un stock'))\n          const activationCodeButton = screen\n            .getByText('Ajouter des codes d’activation')\n            .closest('div')\n          userEvent.click(activationCodeButton)\n          const uploadButton = screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n          const file = new File(['ABH\\nJHB'], 'activation_codes.csv', {\n            type: 'text/csv',\n          })\n\n          // When\n          fireEvent.change(uploadButton, {\n            target: {\n              files: [file],\n            },\n          })\n\n          fireEvent.click(await screen.findByText('Valider'))\n\n          const priceField = screen.getByLabelText('Prix')\n          fireEvent.change(priceField, { target: { value: null } })\n          fireEvent.change(priceField, { target: { value: '14.01' } })\n\n          fireEvent.click(screen.getByText('Enregistrer'))\n\n          // Then\n          expect(pcapi.bulkCreateOrEditStock).toHaveBeenCalledWith(defaultOffer.id, [\n            {\n              activationCodes: ['ABH', 'JHB'],\n              activationCodesExpirationDatetime: null,\n              bookingLimitDatetime: null,\n              id: undefined,\n              price: '14.01',\n              quantity: 2,\n            },\n          ])\n        })\n\n        it('should change stock quantity and disable activation codes button on upload', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          fireEvent.click(screen.getByText('Ajouter un stock'))\n          const activationCodeButton = screen\n            .getByText('Ajouter des codes d’activation')\n            .closest('div')\n          userEvent.click(activationCodeButton)\n          const uploadButton = screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n          const file = new File(['ABH\\nJHB'], 'activation_codes.csv', {\n            type: 'text/csv',\n          })\n\n          // When\n          fireEvent.change(uploadButton, {\n            target: {\n              files: [file],\n            },\n          })\n          fireEvent.click(await screen.findByText('Valider'))\n\n          // Then\n          expect(screen.getByLabelText('Quantité').value).toBe('2')\n          expect(screen.getByLabelText('Quantité')).toBeDisabled()\n          expect(screen.getByText('Ajouter des codes d’activation').closest('div')).toHaveAttribute(\n            'aria-disabled',\n            'true'\n          )\n          expect(screen.queryByText('Valider')).not.toBeInTheDocument()\n        })\n\n        it('should limit expiration datetime when booking limit datetime is set and vice versa', async () => {\n          // Given\n          await renderOffers(props, store)\n          fireEvent.click(screen.getByText('Ajouter un stock'))\n          fireEvent.click(screen.getByLabelText('Date limite de réservation'))\n          fireEvent.click(screen.getByText('18'))\n\n          const activationCodeButton = screen\n            .getByText('Ajouter des codes d’activation')\n            .closest('div')\n          userEvent.click(activationCodeButton)\n          const uploadButton = screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n          const file = new File(['ABH\\nJHB'], 'activation_codes.csv', {\n            type: 'text/csv',\n          })\n          fireEvent.change(uploadButton, {\n            target: {\n              files: [file],\n            },\n          })\n\n          fireEvent.click(await screen.findByLabelText('Date limite de validité'))\n\n          fireEvent.click(screen.getByText('22'))\n          expect(screen.queryByDisplayValue('22/12/2020')).not.toBeInTheDocument()\n\n          fireEvent.click(screen.getByLabelText('Date limite de validité'))\n          fireEvent.click(screen.getByText('25'))\n          expect(screen.getAllByDisplayValue('25/12/2020')[0]).toBeInTheDocument()\n          expect(screen.getAllByDisplayValue('25/12/2020')[1]).toBeInTheDocument()\n\n          // When\n          fireEvent.click(screen.getByText('Valider'))\n\n          // Then\n          fireEvent.click(screen.getByDisplayValue('18/12/2020'))\n          fireEvent.click(screen.getByText('19'))\n          expect(screen.queryByDisplayValue('19/12/2020')).not.toBeInTheDocument()\n          expect(screen.queryByDisplayValue('18/12/2020')).toBeInTheDocument()\n\n          expect(screen.getByLabelText('Quantité').value).toBe('2')\n          expect(screen.getByLabelText('Quantité')).toBeDisabled()\n          expect(screen.getByText('Ajouter des codes d’activation').closest('div')).toHaveAttribute(\n            'aria-disabled',\n            'true'\n          )\n          expect(screen.queryByText('Valider')).not.toBeInTheDocument()\n          expect(screen.getByDisplayValue('25/12/2020')).toBeDisabled()\n        })\n\n        it('should set booking limit datetime on expiration datetime change', async () => {\n          // Given\n          await renderOffers(props, store)\n          fireEvent.click(screen.getByText('Ajouter un stock'))\n\n          const activationCodeButton = screen\n            .getByText('Ajouter des codes d’activation')\n            .closest('div')\n          userEvent.click(activationCodeButton)\n          const uploadButton = screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n          const file = new File(['ABH\\nJHB'], 'activation_codes.csv', {\n            type: 'text/csv',\n          })\n          fireEvent.change(uploadButton, {\n            target: {\n              files: [file],\n            },\n          })\n\n          fireEvent.click(await screen.findByLabelText('Date limite de validité'))\n          fireEvent.click(screen.getByText('22'))\n\n          // When\n          fireEvent.click(screen.getByText('Valider'))\n\n          // Then\n          expect(screen.getByLabelText('Date limite de réservation')).toHaveDisplayValue(\n            '15/12/2020'\n          )\n          expect(screen.getByText('Date limite de validité')).toBeInTheDocument()\n        })\n\n        it('should discard activation codes and expiration datetime and close modal on close button click', async () => {\n          // Given\n          await renderOffers(props, store)\n\n          fireEvent.click(screen.getByText('Ajouter un stock'))\n          const activationCodeButton = screen\n            .getByText('Ajouter des codes d’activation')\n            .closest('div')\n          userEvent.click(activationCodeButton)\n          const uploadButton = screen.getByLabelText('Importer un fichier .csv depuis l’ordinateur')\n          const file = new File(['ABH\\nJHB'], 'activation_codes.csv', {\n            type: 'text/csv',\n          })\n          fireEvent.change(uploadButton, {\n            target: {\n              files: [file],\n            },\n          })\n\n          fireEvent.click(await screen.findByLabelText('Date limite de validité'))\n          fireEvent.click(screen.getByText('22'))\n\n          // When\n          fireEvent.click(screen.getByTitle('Fermer la modale'))\n\n          // Then\n          expect(screen.queryByDisplayValue('22/12/2020')).not.toBeInTheDocument()\n          expect(screen.getByLabelText('Quantité').value).toBe('')\n          expect(screen.getByLabelText('Quantité')).not.toBeDisabled()\n          expect(\n            screen.getByText('Ajouter des codes d’activation').closest('div')\n          ).not.toHaveAttribute('aria-disabled', 'true')\n          expect(screen.queryByText('Valider')).not.toBeInTheDocument()\n        })\n\n        it('should not allow to set activation codes on an existing stock', async () => {\n          // given\n          pcapi.bulkCreateOrEditStock.mockResolvedValue({})\n          const offer = {\n            ...defaultOffer,\n            isDigital: true,\n          }\n\n          pcapi.loadOffer.mockResolvedValue(offer)\n          const createdStock = {\n            hasActivationCodes: true,\n            activationCodes: ['ABC'],\n            activationCodesExpirationDatetime: '2020-12-26T23:59:59Z',\n            quantity: 15,\n            price: 15,\n            remainingQuantity: 15,\n            bookingsQuantity: 0,\n            bookingLimitDatetime: '2020-12-22T23:59:59Z',\n            id: stockId,\n          }\n          pcapi.loadStocks.mockResolvedValueOnce({ stocks: [createdStock] })\n\n          // when\n          await renderOffers(props, store)\n\n          // then\n          expect(await screen.findByText('Enregistrer')).toBeInTheDocument()\n          expect(screen.getByLabelText('Quantité').value).toBe('15')\n          expect(screen.getByLabelText('Quantité')).toBeDisabled()\n          expect(screen.getByLabelText('Prix').value).toBe('15')\n          expect(screen.getByLabelText('Date limite de réservation').value).toBe('22/12/2020')\n          expect(screen.getByLabelText('Date limite de validité').value).toBe('26/12/2020')\n          expect(screen.getByText('Ajouter des codes d’activation').closest('div')).toHaveAttribute(\n            'aria-disabled',\n            'true'\n          )\n        })\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/Advices/Advices.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/Credit/Credit.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/ImageEditor/ImageEditor.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/ImageEditor/ImageEditorWrapper.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/ImageEditor/canvas.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/ImportFromComputer/ImportFromComputer.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/ImportFromURL/ImportFromURL.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/ImportTab/ImportTab.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/Preview/Preview.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/ThumbnailDialog.jsx',
    messages: [
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (22). Maximum allowed is 15.',
        line: 14,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 160,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import PropTypes from 'prop-types'\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport { DialogBox } from 'components/layout/DialogBox/DialogBox'\nimport { IMPORT_TAB_ID } from 'components/pages/Offers/Offer/Thumbnail/_constants'\nimport Advices from 'components/pages/Offers/Offer/Thumbnail/Advices/Advices'\nimport Credit from 'components/pages/Offers/Offer/Thumbnail/Credit/Credit'\nimport ImageEditorWrapper from 'components/pages/Offers/Offer/Thumbnail/ImageEditor/ImageEditorWrapper'\nimport ImportFromComputer from 'components/pages/Offers/Offer/Thumbnail/ImportFromComputer/ImportFromComputer'\nimport ImportFromURL from 'components/pages/Offers/Offer/Thumbnail/ImportFromURL/ImportFromURL'\nimport ImportTab from 'components/pages/Offers/Offer/Thumbnail/ImportTab/ImportTab'\nimport Preview from 'components/pages/Offers/Offer/Thumbnail/Preview/Preview'\n\nconst ThumbnailDialog = ({\n  offerId,\n  postThumbnail,\n  setIsModalOpened,\n  setPreview,\n  setThumbnailInfo,\n}) => {\n  const DIALOG_LABEL_ID = 'label_for_aria'\n\n  const [activeTab, setActiveTab] = useState(IMPORT_TAB_ID)\n  const [credit, setCredit] = useState('')\n  const [hidden, setHidden] = useState(true)\n  const [step, setStep] = useState(1)\n  const [tabId, setTabId] = useState(IMPORT_TAB_ID)\n  const [thumbnail, setThumbnail] = useState({})\n  const [url, setURL] = useState('')\n  const [previewBase64, setPreviewBase64] = useState('')\n  const [editedThumbnail, setEditedThumbnail] = useState('')\n  const [croppingRect, setCroppingRect] = useState({})\n  const [isLoading, setIsLoading] = useState(false)\n\n  const IMPORT_STEP = 1\n  const CREDIT_STEP = 2\n  const RESIZE_STEP = 3\n  const PREVIEW_STEP = 4\n  const VALIDATION_STEP = 5\n\n  useEffect(() => {\n    setHidden(true)\n  }, [activeTab])\n\n  const closeModal = useCallback(() => {\n    setIsModalOpened(false)\n  }, [setIsModalOpened])\n\n  useEffect(() => {\n    if (step === VALIDATION_STEP) {\n      const thumbnailInfo = {\n        credit: credit,\n        thumbnail: thumbnail,\n        croppingRect: croppingRect,\n        thumbUrl: url,\n      }\n\n      setThumbnailInfo(thumbnailInfo)\n      offerId && postThumbnail(offerId, thumbnailInfo)\n      setPreview(editedThumbnail)\n      setIsModalOpened(false)\n    }\n  }, [\n    closeModal,\n    credit,\n    croppingRect,\n    editedThumbnail,\n    offerId,\n    postThumbnail,\n    setIsModalOpened,\n    setPreview,\n    setThumbnailInfo,\n    step,\n    thumbnail,\n    url,\n  ])\n\n  const changeTab = useCallback(\n    tabId => () => {\n      setTabId(tabId)\n      setActiveTab(tabId)\n    },\n    []\n  )\n\n  return (\n    <DialogBox\n      extraClassNames={step === 1 ? 'thumbnail-dialog tnd-step1' : 'thumbnail-dialog'}\n      hasCloseButton\n      labelledBy={DIALOG_LABEL_ID}\n      onDismiss={closeModal}\n    >\n      <header>\n        <h1\n          className=\"tnd-header\"\n          id={DIALOG_LABEL_ID}\n        >\n          Ajouter une image\n        </h1>\n      </header>\n      <>\n        {step === IMPORT_STEP && (\n          <>\n            <ImportTab\n              activeTab={activeTab}\n              changeTab={changeTab}\n              isLoading={isLoading}\n            />\n            {tabId === IMPORT_TAB_ID ? (\n              <ImportFromComputer\n                setStep={setStep}\n                setThumbnail={setThumbnail}\n                step={step}\n              />\n            ) : (\n              <ImportFromURL\n                isLoading={isLoading}\n                setIsLoading={setIsLoading}\n                setPreviewBase64={setPreviewBase64}\n                setStep={setStep}\n                setURL={setURL}\n                step={step}\n              />\n            )}\n            <hr className=\"tnd-hr\" />\n            <Advices\n              hidden={hidden}\n              setHidden={setHidden}\n            />\n          </>\n        )}\n        {step === CREDIT_STEP && (\n          <Credit\n            credit={credit}\n            setCredit={setCredit}\n            setStep={setStep}\n            step={step}\n          />\n        )}\n        {step === RESIZE_STEP && (\n          <ImageEditorWrapper\n            setCroppingRect={setCroppingRect}\n            setEditedThumbnail={setEditedThumbnail}\n            setStep={setStep}\n            step={step}\n            thumbnail={thumbnail}\n            url={previewBase64}\n          />\n        )}\n        {step === PREVIEW_STEP && (\n          <Preview\n            preview={editedThumbnail}\n            setStep={setStep}\n            step={step}\n          />\n        )}\n      </>\n    </DialogBox>\n  )\n}\n\nThumbnailDialog.defaultProps = {\n  offerId: undefined,\n}\n\nThumbnailDialog.propTypes = {\n  offerId: PropTypes.string,\n  postThumbnail: PropTypes.func.isRequired,\n  setIsModalOpened: PropTypes.func.isRequired,\n  setPreview: PropTypes.func.isRequired,\n  setThumbnailInfo: PropTypes.func.isRequired,\n}\n\nexport default ThumbnailDialog\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/__specs__/ImageEditor.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/__specs__/Thumbnail.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (482). Maximum allowed is 150.',
        line: 21,
        column: 31,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 502,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (469). Maximum allowed is 150.',
        line: 33,
        column: 57,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 501,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (212). Maximum allowed is 150.',
        line: 34,
        column: 48,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 245,
        endColumn: 6,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (19). Maximum allowed is 15.',
        line: 73,
        column: 53,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 106,
        endColumn: 8,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (433). Maximum allowed is 300.',
        line: 347,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 503,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 5,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { fireEvent, screen, waitFor } from '@testing-library/react'\n\nimport {\n  createFile,\n  createImageFile,\n  renderThumbnail,\n} from 'components/pages/Offers/Offer/Thumbnail/__specs__/setup'\nimport {\n  CANVAS_HEIGHT,\n  CANVAS_WIDTH,\n  CROP_BORDER_COLOR,\n  CROP_BORDER_HEIGHT,\n  CROP_BORDER_WIDTH,\n} from 'components/pages/Offers/Offer/Thumbnail/_constants'\nimport CanvasTools from 'components/pages/Offers/Offer/Thumbnail/ImageEditor/canvas.js'\nimport * as pcapi from 'repository/pcapi/pcapi'\n\njest.mock('components/pages/Offers/Offer/Thumbnail/ImageEditor/canvas.js')\n\ndescribe('thumbnail edition', () => {\n  describe('when thumbnail exists', () => {\n    it('should display a modal when the user is clicking on thumbnail', () => {\n      // When\n      renderThumbnail()\n\n      // Then\n      expect(screen.getByLabelText('Ajouter une image')).toBeInTheDocument()\n      expect(screen.getByTitle('Fermer la modale', { selector: 'button' })).toBeInTheDocument()\n    })\n  })\n\n  describe('when the user is within the upload tunnel', () => {\n    describe('when the user is on import tab', () => {\n      Object.defineProperty(global, 'createImageBitmap', {\n        writable: true,\n        value: () => Promise.resolve({}),\n      })\n\n      it('should display information for importing', async () => {\n        // When\n        renderThumbnail()\n\n        // Then\n        expect(\n          screen.getByText('Utilisez de préférence un visuel en orientation portrait', {\n            selector: 'p',\n          })\n        ).toBeInTheDocument()\n        const fileInput = screen.getByLabelText('Importer une image depuis l’ordinateur')\n        expect(fileInput).toHaveAttribute('type', 'file')\n        expect(fileInput).toHaveAttribute('accept', 'image/png,image/jpeg')\n        expect(\n          screen.getByText('Formats supportés : JPG, PNG', {\n            selector: 'li',\n          })\n        ).toBeInTheDocument()\n        expect(\n          screen.getByText('Le poids du fichier ne doit pas dépasser 10 Mo', {\n            selector: 'li',\n          })\n        ).toBeInTheDocument()\n        expect(\n          screen.getByText(\n            'La taille de l’image doit être au format 6/9, avec une largeur minimale de 400px',\n            {\n              selector: 'li',\n            }\n          )\n        ).toBeInTheDocument()\n      })\n\n      it('should display advices for a good image', () => {\n        // Given\n        renderThumbnail()\n\n        // When\n        fireEvent.click(screen.getByText('Conseils pour votre image', { selector: 'button' }))\n\n        // Then\n        expect(\n          screen.getByText(\n            'Pour maximiser vos chances de réservations, choisissez avec soin l’image qui accompagne votre offre. Les ressources suivantes sont à votre disposition :'\n          )\n        ).toBeInTheDocument()\n        expect(screen.getByText('Banques d’images libres de droits')).toBeInTheDocument()\n        const pexelsLink = screen.getByRole('link', { name: 'Pexels (nouvel onglet)' })\n        expect(pexelsLink).toHaveAttribute('href', 'https://www.pexels.com/fr-fr/')\n        expect(pexelsLink).toHaveAttribute('rel', 'noopener noreferrer')\n        expect(pexelsLink).toHaveAttribute('target', '_blank')\n        const pixabayLink = screen.getByRole('link', { name: 'Pixabay (nouvel onglet)' })\n        expect(pixabayLink).toHaveAttribute('href', 'https://pixabay.com/fr/')\n        expect(pixabayLink).toHaveAttribute('rel', 'noopener noreferrer')\n        expect(pixabayLink).toHaveAttribute('target', '_blank')\n        const shutterstockLink = screen.getByRole('link', { name: 'Shutterstock (nouvel onglet)' })\n        expect(shutterstockLink).toHaveAttribute('href', 'https://www.shutterstock.com/')\n        expect(shutterstockLink).toHaveAttribute('rel', 'noopener noreferrer')\n        expect(shutterstockLink).toHaveAttribute('target', '_blank')\n        expect(screen.getByText('Gabarits')).toBeInTheDocument()\n        expect(\n          screen.getByRole('link', { name: 'Gabarit Photoshop (.psd, 116 Ko)' })\n        ).toBeInTheDocument()\n        expect(\n          screen.getByRole('link', { name: 'Gabarit Illustrator (.eps, 836 Ko)' })\n        ).toBeInTheDocument()\n      })\n\n      describe('and is selecting and image', () => {\n        it('should display no error if file respects all rules', async () => {\n          // Given\n          renderThumbnail()\n          const file = createImageFile()\n\n          // When\n          fireEvent.change(screen.getByLabelText('Importer une image depuis l’ordinateur'), {\n            target: { files: [file] },\n          })\n\n          // Then\n          await waitFor(() => {\n            expect(\n              screen.queryByText('Formats supportés : JPG, PNG', {\n                selector: 'strong',\n              })\n            ).not.toBeInTheDocument()\n            expect(\n              screen.queryByText('Le poids du fichier ne doit pas dépasser 10 Mo', {\n                selector: 'strong',\n              })\n            ).not.toBeInTheDocument()\n            expect(\n              screen.queryByText(\n                'La taille de l’image doit être au format 6/9, avec une largeur minimale de 400px',\n                {\n                  selector: 'strong',\n                }\n              )\n            ).not.toBeInTheDocument()\n          })\n        })\n\n        it('should not import a file other than png or jpg', async () => {\n          // Given\n          renderThumbnail()\n          const file = createFile()\n\n          // When\n          fireEvent.change(screen.getByLabelText('Importer une image depuis l’ordinateur'), {\n            target: { files: [file] },\n          })\n\n          // Then\n          expect(\n            await screen.findByText('Formats supportés : JPG, PNG', {\n              selector: 'strong',\n            })\n          ).toBeInTheDocument()\n        })\n\n        it('should only display the first encountered validation error', async () => {\n          // Given\n          renderThumbnail()\n          const file = createFile({ sizeInMB: 50 })\n\n          // When\n          fireEvent.change(screen.getByLabelText('Importer une image depuis l’ordinateur'), {\n            target: { files: [file] },\n          })\n\n          // Then\n          await waitFor(() => {\n            expect(\n              screen.getByText('Formats supportés : JPG, PNG', {\n                selector: 'strong',\n              })\n            ).toBeInTheDocument()\n            expect(\n              screen.queryByText('Le poids du fichier ne doit pas dépasser 10 Mo', {\n                selector: 'strong',\n              })\n            ).not.toBeInTheDocument()\n          })\n        })\n\n        it('should not import an image which exceeds maximum size', async () => {\n          // Given\n          renderThumbnail()\n          const bigFile = createImageFile({ sizeInMB: 10 })\n\n          // When\n          fireEvent.change(screen.getByLabelText('Importer une image depuis l’ordinateur'), {\n            target: { files: [bigFile] },\n          })\n\n          // Then\n          expect(\n            await screen.findByText('Le poids du fichier ne doit pas dépasser 10 Mo', {\n              selector: 'strong',\n            })\n          ).toBeInTheDocument()\n        })\n\n        it('should not import an image whose height is below minimum', async () => {\n          // Given\n          renderThumbnail()\n          const file = createImageFile({ height: 200 })\n\n          // When\n          fireEvent.change(screen.getByLabelText('Importer une image depuis l’ordinateur'), {\n            target: { files: [file] },\n          })\n\n          // Then\n          expect(\n            await screen.findByText(\n              'La taille de l’image doit être au format 6/9, avec une largeur minimale de 400px',\n              {\n                selector: 'strong',\n              }\n            )\n          ).toBeInTheDocument()\n        })\n\n        it('should not import an image whose width is below minimum', async () => {\n          // Given\n          renderThumbnail()\n          const file = createImageFile({ width: 200 })\n\n          // When\n          fireEvent.change(screen.getByLabelText('Importer une image depuis l’ordinateur'), {\n            target: { files: [file] },\n          })\n\n          // Then\n          expect(\n            await screen.findByText(\n              'La taille de l’image doit être au format 6/9, avec une largeur minimale de 400px',\n              {\n                selector: 'strong',\n              }\n            )\n          ).toBeInTheDocument()\n        })\n      })\n    })\n\n    describe('when the user is on url tab', () => {\n      it('should display information for importing', async () => {\n        // Given\n        renderThumbnail()\n\n        // When\n        fireEvent.click(screen.getByText('Utiliser une URL'))\n\n        // Then\n        expect(\n          await screen.findByText('Utilisez de préférence un visuel en orientation portrait', {\n            selector: 'p',\n          })\n        ).toBeInTheDocument()\n        const urlInput = screen.getByLabelText('URL de l’image')\n        expect(urlInput).toHaveAttribute('type', 'text')\n        expect(urlInput).toHaveAttribute('placeholder', 'Ex : http://...')\n        expect(screen.getByText('Valider', { selector: 'button' })).toHaveAttribute('disabled')\n      })\n\n      it('should enable submit button if there is a string', () => {\n        // Given\n        renderThumbnail()\n        fireEvent.click(screen.getByText('Utiliser une URL'))\n\n        // When\n        fireEvent.change(screen.getByLabelText('URL de l’image'), { target: { value: 'MEFA' } })\n\n        // Then\n        expect(screen.getByText('Valider', { selector: 'button' })).not.toHaveAttribute('disabled')\n      })\n\n      it('should display an error if the url does not meet the requirements', async () => {\n        // Given\n        jest\n          .spyOn(pcapi, 'validateDistantImage')\n          .mockResolvedValue({ errors: ['API error message'] })\n        renderThumbnail()\n\n        fireEvent.click(screen.getByText('Utiliser une URL'))\n        fireEvent.change(screen.getByLabelText('URL de l’image'), {\n          target: { value: 'http://not-an-image' },\n        })\n\n        // When\n        fireEvent.click(screen.getByText('Valider', { selector: 'button' }))\n\n        // Then\n        expect(screen.getByLabelText('URL de l’image')).toHaveAttribute('disabled')\n        expect(await screen.findByText('Valider', { selector: 'button' })).toHaveAttribute(\n          'disabled'\n        )\n        expect(\n          await screen.findByText('API error message', { selector: 'pre' })\n        ).toBeInTheDocument()\n      })\n\n      it('should display a generic error if the api did not send a valid response', async () => {\n        // Given\n        jest.spyOn(pcapi, 'validateDistantImage').mockRejectedValue({})\n        renderThumbnail()\n\n        fireEvent.click(screen.getByText('Utiliser une URL'))\n        fireEvent.change(screen.getByLabelText('URL de l’image'), {\n          target: { value: 'http://not-an-image' },\n        })\n\n        // When\n        fireEvent.click(screen.getByText('Valider', { selector: 'button' }))\n\n        // Then\n        expect(screen.getByLabelText('URL de l’image')).toHaveAttribute('disabled')\n        expect(await screen.findByText('Valider', { selector: 'button' })).toHaveAttribute(\n          'disabled'\n        )\n        expect(\n          await screen.findByText('Une erreur est survenue', { selector: 'pre' })\n        ).toBeInTheDocument()\n      })\n\n      it('should display a URL format error if URL format is invalid', () => {\n        // Given\n        renderThumbnail()\n        fireEvent.click(screen.getByText('Utiliser une URL'))\n        fireEvent.change(screen.getByLabelText('URL de l’image'), {\n          target: { value: 'htp://url_example.com' },\n        })\n\n        // When\n        fireEvent.click(screen.getByText('Valider', { selector: 'button' }))\n\n        // Then\n        expect(screen.getByText('Format d’URL non valide', { selector: 'pre' })).toBeInTheDocument()\n      })\n\n      it('should not display a URL format error if URL format is valid', async () => {\n        // Given\n        renderThumbnail()\n        fireEvent.click(screen.getByText('Utiliser une URL'))\n        fireEvent.change(screen.getByLabelText('URL de l’image'), {\n          target: { value: 'https://url_example.com' },\n        })\n\n        // When\n        fireEvent.click(screen.getByText('Valider', { selector: 'button' }))\n\n        // Then\n        await waitFor(() => {\n          expect(screen.queryByText('Format d’URL non valide')).not.toBeInTheDocument()\n        })\n      })\n\n      it('should remove the error if the user rewrite the URL after a first error', () => {\n        // Given\n        renderThumbnail()\n        fireEvent.click(screen.getByText('Utiliser une URL'))\n        fireEvent.change(screen.getByLabelText('URL de l’image'), {\n          target: { value: 'htp://url_example.com' },\n        })\n        fireEvent.click(screen.getByText('Valider', { selector: 'button' }))\n\n        // When\n        fireEvent.change(screen.getByPlaceholderText('Ex : http://...'), {\n          target: { value: 'http://url_example.com' },\n        })\n\n        // Then\n        expect(\n          screen.queryByText('Format d’URL non valide', { selector: 'pre' })\n        ).not.toBeInTheDocument()\n      })\n\n      it('should go to the credit step if there is no validation error', async () => {\n        // Given\n        jest.spyOn(pcapi, 'validateDistantImage').mockResolvedValue({ errors: [] })\n        renderThumbnail()\n        fireEvent.click(screen.getByText('Utiliser une URL'))\n        fireEvent.change(screen.getByLabelText('URL de l’image'), {\n          target: { value: 'http://url_example.com' },\n        })\n\n        // When\n        fireEvent.click(screen.getByText('Valider', { selector: 'button' }))\n\n        // Then\n        expect(await screen.findByText('Crédit image et droits d’utilisation')).toBeInTheDocument()\n      })\n    })\n\n    describe('when the user is on the credit step', () => {\n      it('should display the credit step infos', async () => {\n        // Given\n        renderThumbnail()\n        const file = createImageFile()\n\n        // When\n        fireEvent.change(screen.getByLabelText('Importer une image depuis l’ordinateur'), {\n          target: { files: [file] },\n        })\n\n        // Then\n        expect(await screen.findByText('Crédit image et droits d’utilisation')).toBeInTheDocument()\n        expect(await screen.findByText('Crédit image')).toBeInTheDocument()\n        const inputCredit = await screen.findByPlaceholderText('Photographe...')\n        expect(inputCredit.maxLength).toBe(255)\n        expect(\n          await screen.findByText(\n            'En utilisant ce contenu, je certifie que je suis propriétaire ou que je dispose des autorisations nécessaires pour l’utilisation de celui-ci'\n          )\n        ).toBeInTheDocument()\n        expect(await screen.findByText('Retour', { selector: 'button' })).toBeInTheDocument()\n        expect(await screen.findByText('Suivant', { selector: 'button' })).toBeInTheDocument()\n      })\n\n      it('should return to the previous page if the return button is clicked', async () => {\n        // Given\n        renderThumbnail()\n        const file = createImageFile()\n        fireEvent.change(screen.getByLabelText('Importer une image depuis l’ordinateur'), {\n          target: { files: [file] },\n        })\n\n        // When\n        fireEvent.click(await screen.findByText('Retour', { selector: 'button' }))\n\n        // Then\n        expect(screen.getByLabelText('Importer une image depuis l’ordinateur')).toBeInTheDocument()\n      })\n    })\n\n    describe('when the user is on the crop step', () => {\n      it('should display the crop step infos', async () => {\n        // Given\n        renderThumbnail()\n        const file = createImageFile()\n        fireEvent.change(screen.getByLabelText('Importer une image depuis l’ordinateur'), {\n          target: { files: [file] },\n        })\n\n        // When\n        fireEvent.click(await screen.findByText('Suivant', { selector: 'button' }))\n\n        // Then\n        expect(screen.getByText('Recadrer votre image')).toBeInTheDocument()\n        expect(screen.getByLabelText('Zoom')).toBeInTheDocument()\n        expect(screen.getByRole('slider')).toBeInTheDocument()\n        expect(screen.getByText('min')).toBeInTheDocument()\n        expect(screen.getByText('max')).toBeInTheDocument()\n        expect(screen.getByText('Retour', { selector: 'button' })).toBeInTheDocument()\n        expect(screen.getByText('Prévisualiser', { selector: 'button' })).toBeInTheDocument()\n      })\n\n      it('should return to the credit step and the user must see the previous credit', async () => {\n        // Given\n        renderThumbnail()\n        const file = createImageFile()\n        fireEvent.change(screen.getByLabelText('Importer une image depuis l’ordinateur'), {\n          target: { files: [file] },\n        })\n        fireEvent.change(await screen.findByPlaceholderText('Photographe...'), {\n          target: { value: 'A fake credit' },\n        })\n        fireEvent.click(await screen.findByText('Suivant', { selector: 'button' }))\n\n        // When\n        fireEvent.click(screen.getByText('Retour', { selector: 'button' }))\n\n        // Then\n        expect(screen.getByDisplayValue('A fake credit')).toBeInTheDocument()\n      })\n\n      it('should update the cropping border at each zoom', async () => {\n        // Given\n        renderThumbnail()\n        const file = createImageFile()\n        fireEvent.change(screen.getByLabelText('Importer une image depuis l’ordinateur'), {\n          target: { files: [file] },\n        })\n        fireEvent.change(await screen.findByPlaceholderText('Photographe...'), {\n          target: { value: 'A fake credit' },\n        })\n        fireEvent.click(await screen.findByText('Suivant', { selector: 'button' }))\n\n        // When\n        fireEvent.change(screen.getByRole('slider'), { target: { value: 2.3 } })\n\n        // Then\n        expect(CanvasTools.mock.instances[0].drawArea).toHaveBeenCalledWith({\n          width: 0,\n          color: CROP_BORDER_COLOR,\n          coordinates: [CROP_BORDER_WIDTH, CROP_BORDER_HEIGHT, CANVAS_WIDTH, CANVAS_HEIGHT],\n        })\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/__specs__/setup.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/_constants.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/Thumbnail/_error_validator.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/__specs__/Breadcrumb.spec.jsx',
    messages: [
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (16). Maximum allowed is 15.',
        line: 18,
        column: 50,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 40,
        endColumn: 6,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { screen } from '@testing-library/react'\n\nimport { renderOffer } from 'components/pages/Offers/Offer/__specs__/render'\nimport { offerFactory, offererFactory, venueFactory, stockFactory } from 'utils/apiFactories'\nimport {\n  getFakeApiUserValidatedOfferersNames,\n  getFakeApiVenuesForOfferer,\n  loadFakeApiOffer,\n  loadFakeApiStocks,\n  loadFakeApiCategories,\n  loadFakeApiVenue,\n} from 'utils/fakeApi'\nimport { queryByTextTrimHtml } from 'utils/testHelpers'\n\ndescribe('offer step', () => {\n  describe('in creation mode', () => {\n    it('should display breadcrumb without link', async () => {\n      // Given\n      const offerer = offererFactory()\n      const venue = venueFactory()\n      loadFakeApiCategories()\n      getFakeApiUserValidatedOfferersNames(offerer)\n      getFakeApiVenuesForOfferer(venue)\n\n      // When\n      await renderOffer({ pathname: '/offres/creation' })\n\n      // Then\n      const detailTab = await screen.findByText(\"Détail de l'offre\")\n      expect(detailTab).toBeInTheDocument()\n      expect(detailTab).not.toHaveAttribute('href')\n      expect(detailTab.closest('.bc-step')).toHaveClass('active')\n      const stockTab = screen.getByText('Stock et prix')\n      expect(stockTab).toBeInTheDocument()\n      expect(stockTab).not.toHaveAttribute('href')\n      const confirmationTab = screen.getByText('Confirmation')\n      expect(confirmationTab).toBeInTheDocument()\n      expect(confirmationTab).not.toHaveAttribute('href')\n    })\n  })\n\n  describe('in edition mode', () => {\n    it('should display breadcrumb whithout \"Confirmation\" tab', async () => {\n      // Given\n      const offer = offerFactory({ subcategoryId: 'LIVRE_PAPIER' })\n      loadFakeApiOffer(offer)\n      const venue = venueFactory()\n      loadFakeApiVenue(venue)\n      loadFakeApiCategories()\n\n      // When\n      await renderOffer({ pathname: `/offres/${offer.id}/edition` })\n\n      // Then\n      const detailTab = await screen.findByText(\"Détail de l'offre\", { selector: 'a' })\n      expect(detailTab).toBeInTheDocument()\n      expect(detailTab.closest('.bc-step')).toHaveClass('active')\n      expect(screen.getByText('Stock et prix', { selector: 'a' })).toBeInTheDocument()\n      expect(screen.queryByText('Confirmation')).not.toBeInTheDocument()\n    })\n  })\n})\n\ndescribe('stocks step', () => {\n  describe('in creation mode', () => {\n    it('should display breadcrumb without link', async () => {\n      // Given\n      const offer = offerFactory({ status: 'DRAFT', subcategoryId: 'LIVRE_PAPIER' })\n      loadFakeApiOffer(offer)\n      loadFakeApiStocks([])\n\n      // When\n      await renderOffer({ pathname: `/offres/${offer.id}/stocks` })\n\n      // Then\n      const detailTab = await screen.findByText(\"Détail de l'offre\")\n      expect(detailTab).toBeInTheDocument()\n      expect(detailTab).not.toHaveAttribute('href')\n      const stockTab = queryByTextTrimHtml(screen, 'Stock et prix', {\n        selector: 'li',\n        leafOnly: false,\n      })\n      expect(stockTab).toBeInTheDocument()\n      expect(stockTab).not.toHaveAttribute('href')\n      expect(stockTab).toHaveClass('active')\n      const confirmationTab = screen.getByText('Confirmation')\n      expect(confirmationTab).toBeInTheDocument()\n      expect(confirmationTab).not.toHaveAttribute('href')\n    })\n  })\n\n  describe('in edition mode', () => {\n    it('should display breadcrumb without \"Confirmation\" tab', async () => {\n      // Given\n      const stock = stockFactory()\n      const offer = offerFactory({ status: 'ACTIVE', subcategoryId: 'LIVRE_PAPIER' })\n      loadFakeApiOffer(offer)\n      loadFakeApiStocks([stock])\n\n      // When\n      await renderOffer({ pathname: `/offres/${offer.id}/stocks` })\n\n      // Then\n      const detailTab = await screen.findByText(\"Détail de l'offre\", { selector: 'a' })\n      expect(detailTab).toBeInTheDocument()\n      const stockTab = screen.getByText('Stock et prix', { selector: 'a' })\n      expect(stockTab).toBeInTheDocument()\n      expect(stockTab.closest('.bc-step')).toHaveClass('active')\n      expect(screen.queryByText('Confirmation')).not.toBeInTheDocument()\n    })\n  })\n})\n\ndescribe('confirmation step', () => {\n  describe('in creation mode', () => {\n    it('should display breadcrumb without link', async () => {\n      // Given\n      const offer = offerFactory({\n        name: 'mon offer',\n        status: 'DRAFT',\n        subcategoryId: 'LIVRE_PAPIER',\n      })\n      loadFakeApiOffer(offer)\n\n      // When\n      await renderOffer({ pathname: `/offres/${offer.id}/confirmation` })\n\n      // Then\n      const detailTab = await screen.findByText(\"Détail de l'offre\")\n      expect(detailTab).toBeInTheDocument()\n      expect(detailTab).not.toHaveAttribute('href')\n      const stockTab = screen.getByText('Stock et prix')\n      expect(stockTab).toBeInTheDocument()\n      expect(stockTab).not.toHaveAttribute('href')\n      const confirmationTab = queryByTextTrimHtml(screen, 'Confirmation', {\n        selector: 'li',\n        leafOnly: false,\n      })\n      expect(confirmationTab).toBeInTheDocument()\n      expect(confirmationTab).not.toHaveAttribute('href')\n      expect(confirmationTab).toHaveClass('active')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/__specs__/OfferLayout.spec.jsx',
    messages: [
      {
        ruleId: 'testing-library/no-dom-import',
        severity: 1,
        message:
          'import from DOM Testing Library is restricted, import from @testing-library/react instead',
        line: 1,
        column: 1,
        nodeType: 'ImportDeclaration',
        messageId: 'noDomImportFramework',
        endLine: 1,
        endColumn: 49,
        fix: { range: [26, 48], text: "'@testing-library/react'" },
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 1,
    source:
      "import { fireEvent } from '@testing-library/dom'\nimport '@testing-library/jest-dom'\nimport { act, render, screen, waitForElementToBeRemoved } from '@testing-library/react'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport NotificationContainer from 'components/layout/Notification/NotificationContainer'\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\n\nimport OfferLayout from '../OfferLayout'\n\njest.mock('repository/pcapi/pcapi', () => ({\n  loadOffer: jest.fn(),\n  updateOffersActiveStatus: jest.fn(),\n}))\n\nconst renderOfferDetails = async (props, store) => {\n  await act(async () => {\n    await render(\n      <Provider store={store}>\n        <MemoryRouter>\n          <>\n            <OfferLayout {...props} />\n            <NotificationContainer />\n          </>\n        </MemoryRouter>\n      </Provider>\n    )\n  })\n}\n\ndescribe('offerLayout', () => {\n  let editedOffer\n  let props\n  let store\n\n  beforeEach(() => {\n    store = configureTestStore({ data: { users: [{ publicName: 'François', isAdmin: false }] } })\n    props = {}\n  })\n\n  describe('render when editing an existing offer', () => {\n    beforeEach(() => {\n      editedOffer = {\n        id: 'AB',\n        name: 'My edited offer',\n        status: 'SOLD_OUT',\n      }\n      props = {\n        match: {\n          url: '/offres/AB',\n          params: { offerId: 'AB' },\n        },\n        location: {\n          pathname: '/offres/AB/edition',\n        },\n      }\n      pcapi.loadOffer.mockResolvedValue(editedOffer)\n    })\n\n    it('should have title \"Éditer une offre\"', async () => {\n      // When\n      await renderOfferDetails(props, store)\n\n      // Then\n      const title = await screen.findByText('Éditer une offre', { selector: 'h1' })\n      expect(title).toBeInTheDocument()\n    })\n\n    it('should allow to activate inactive offer', async () => {\n      // Given\n      pcapi.updateOffersActiveStatus.mockResolvedValue()\n      pcapi.loadOffer\n        .mockResolvedValueOnce({ ...editedOffer, isActive: false, status: 'INACTIVE' })\n        .mockResolvedValue({ ...editedOffer, isActive: true, status: 'ACTIVE' })\n      await renderOfferDetails(props, store)\n\n      // When\n      fireEvent.click(screen.getByRole('button', { name: 'Activer' }))\n\n      // Then\n      expect(pcapi.updateOffersActiveStatus).toHaveBeenCalledWith(false, {\n        ids: [editedOffer.id],\n        isActive: true,\n      })\n      await waitForElementToBeRemoved(() => screen.getByRole('button', { name: 'Activer' }))\n      expect(screen.getByText('L’offre a bien été activée.')).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: 'Désactiver' })).toBeInTheDocument()\n    })\n\n    it('should allow to deactivate active offer', async () => {\n      // Given\n      pcapi.updateOffersActiveStatus.mockResolvedValue()\n      pcapi.loadOffer\n        .mockResolvedValueOnce({ ...editedOffer, isActive: true, status: 'ACTIVE' })\n        .mockResolvedValue({ ...editedOffer, isActive: false, status: 'INACTIVE' })\n      await renderOfferDetails(props, store)\n\n      // When\n      fireEvent.click(screen.getByRole('button', { name: 'Désactiver' }))\n\n      // Then\n      expect(pcapi.updateOffersActiveStatus).toHaveBeenCalledWith(false, {\n        ids: [editedOffer.id],\n        isActive: false,\n      })\n      await waitForElementToBeRemoved(() => screen.getByRole('button', { name: 'Désactiver' }))\n      expect(screen.getByText('L’offre a bien été désactivée.')).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: 'Activer' })).toBeInTheDocument()\n    })\n\n    it('should not allow to deactivate pending offer', async () => {\n      // Given\n      pcapi.loadOffer.mockResolvedValue({ ...editedOffer, status: 'PENDING', isActive: true })\n\n      // When\n      await renderOfferDetails(props, store)\n\n      // Then\n      expect(screen.getByRole('button', { name: 'Désactiver' })).toBeDisabled()\n    })\n\n    it('should not allow to deactivate rejected offer', async () => {\n      // Given\n      pcapi.loadOffer.mockResolvedValue({ ...editedOffer, status: 'REJECTED', isActive: false })\n\n      // When\n      await renderOfferDetails(props, store)\n\n      // Then\n      expect(screen.getByRole('button', { name: 'Désactiver' })).toBeDisabled()\n    })\n\n    it('should inform user something went wrong when impossible to toggle offer status', async () => {\n      // Given\n      pcapi.loadOffer.mockResolvedValue({ ...editedOffer, isActive: true })\n      pcapi.updateOffersActiveStatus.mockRejectedValue()\n      await renderOfferDetails(props, store)\n\n      // When\n      fireEvent.click(screen.getByRole('button', { name: 'Désactiver' }))\n\n      // Then\n      expect(\n        await screen.findByText('Une erreur est survenue, veuillez réessayer ultérieurement.')\n      ).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: 'Désactiver' })).toBeInTheDocument()\n      expect(screen.queryByRole('button', { name: 'Activer' })).not.toBeInTheDocument()\n    })\n  })\n\n  describe('render when creating a new offer', () => {\n    beforeEach(() => {\n      props = {\n        match: {\n          url: '/offres',\n          params: {},\n        },\n        location: {\n          pathname: '/offres/AB/creation',\n        },\n      }\n    })\n\n    it('should have title \"Ajouter une offre\"', async () => {\n      // When\n      await renderOfferDetails(props, store)\n\n      // Then\n      expect(screen.getByText('Nouvelle offre', { selector: 'h1' })).toBeInTheDocument()\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offer/__specs__/render.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/ActionsBar/ActionsBar.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/ActionsBar/ActionsBarContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/ActionsBar/__specs__/ActionsBar.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (229). Maximum allowed is 150.',
        line: 17,
        column: 60,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 245,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { fireEvent, render, screen, waitFor } from '@testing-library/react'\nimport React from 'react'\n\nimport { updateOffersActiveStatus } from 'repository/pcapi/pcapi'\n\nimport ActionsBar from '../ActionsBar'\n\nconst renderActionsBar = props => {\n  return render(<ActionsBar {...props} />)\n}\n\njest.mock('repository/pcapi/pcapi', () => ({\n  updateOffersActiveStatus: jest.fn().mockResolvedValue({}),\n}))\n\ndescribe('src | components | pages | Offers | ActionsBar', () => {\n  let props\n  beforeEach(() => {\n    props = {\n      refreshOffers: jest.fn(),\n      selectedOfferIds: ['testId1', 'testId2'],\n      clearSelectedOfferIds: jest.fn(),\n      toggleSelectAllCheckboxes: jest.fn(),\n      showSuccessNotification: jest.fn(),\n      showPendingNotification: jest.fn(),\n      trackActivateOffers: jest.fn(),\n      trackDeactivateOffers: jest.fn(),\n      searchFilters: {\n        name: 'keyword',\n        venueId: 'E3',\n        offererId: 'A4',\n        active: 'non',\n      },\n      switchAllOffersStatus: jest.fn(),\n      nbSelectedOffers: 2,\n    }\n  })\n\n  it('should have buttons to activate and deactivate offers, and to abort action', () => {\n    // when\n    renderActionsBar(props)\n\n    // then\n    expect(screen.queryByText('Activer', { selector: 'button' })).toBeInTheDocument()\n    expect(screen.queryByText('Désactiver', { selector: 'button' })).toBeInTheDocument()\n    expect(screen.queryByText('Annuler', { selector: 'button' })).toBeInTheDocument()\n  })\n\n  it('should say how many offers are selected when only 1 offer is selected', () => {\n    // given\n    props.nbSelectedOffers = 1\n\n    // when\n    renderActionsBar(props)\n\n    // then\n    expect(screen.queryByText('1 offre sélectionnée')).toBeInTheDocument()\n  })\n\n  it('should say how many offers are selected when more than 1 offer are selected', () => {\n    // when\n    renderActionsBar(props)\n\n    // then\n    expect(screen.queryByText('2 offres sélectionnées')).toBeInTheDocument()\n  })\n\n  it('should say how many offers are selected when more than 200 offers are selected', () => {\n    // given\n    props.nbSelectedOffers = 201\n\n    // when\n    renderActionsBar(props)\n\n    // then\n    expect(screen.queryByText('200+ offres sélectionnées')).toBeInTheDocument()\n  })\n\n  describe('on click on \"Activer\" button', () => {\n    it('should activate selected offers', async () => {\n      // given\n      renderActionsBar(props)\n      const expectedBody = {\n        ids: ['testId1', 'testId2'],\n        isActive: true,\n      }\n\n      // when\n      fireEvent.click(screen.queryByText('Activer'))\n\n      // then\n      await waitFor(() => {\n        expect(updateOffersActiveStatus).toHaveBeenLastCalledWith(false, expectedBody)\n        expect(props.clearSelectedOfferIds).toHaveBeenCalledTimes(1)\n        expect(props.refreshOffers).toHaveBeenCalledWith({ shouldTriggerSpinner: false })\n        expect(props.trackActivateOffers).toHaveBeenCalledWith(['testId1', 'testId2'])\n      })\n    })\n\n    it('should show notification with success message when only 1 offer is activated', async () => {\n      // given\n      props.nbSelectedOffers = 1\n      renderActionsBar(props)\n\n      // when\n      fireEvent.click(screen.queryByText('Activer'))\n\n      // then\n      await waitFor(() => {\n        expect(props.showSuccessNotification).toHaveBeenCalledWith('1 offre a bien été activée')\n      })\n    })\n\n    it('should show notification with success message when more than 1 offer are activated', async () => {\n      // given\n      renderActionsBar(props)\n\n      // when\n      fireEvent.click(screen.queryByText('Activer'))\n\n      // then\n      await waitFor(() => {\n        expect(props.showSuccessNotification).toHaveBeenCalledWith('2 offres ont bien été activées')\n      })\n    })\n  })\n\n  describe('on click on \"Désactiver\" button', () => {\n    it('should deactivate selected offers', async () => {\n      // given\n      renderActionsBar(props)\n      const expectedBody = {\n        ids: ['testId1', 'testId2'],\n        isActive: false,\n      }\n\n      // when\n      fireEvent.click(screen.queryByText('Désactiver'))\n\n      // then\n      await waitFor(() => {\n        expect(updateOffersActiveStatus).toHaveBeenLastCalledWith(false, expectedBody)\n        expect(props.clearSelectedOfferIds).toHaveBeenCalledTimes(1)\n        expect(props.refreshOffers).toHaveBeenCalledWith({ shouldTriggerSpinner: false })\n        expect(props.trackDeactivateOffers).toHaveBeenCalledWith(['testId1', 'testId2'])\n      })\n    })\n\n    it('should show success notificiation with correct message when only 1 offer is deactivated', async () => {\n      // given\n      props.nbSelectedOffers = 1\n      renderActionsBar(props)\n\n      // when\n      fireEvent.click(screen.queryByText('Désactiver'))\n\n      // then\n      await waitFor(() => {\n        expect(props.showSuccessNotification).toHaveBeenCalledWith('1 offre a bien été désactivée')\n      })\n    })\n\n    it('should show success notificiation with correct message when more than 1 offer are deactivated', async () => {\n      // given\n      renderActionsBar(props)\n\n      // when\n      fireEvent.click(screen.queryByText('Désactiver'))\n\n      // then\n      await waitFor(() => {\n        expect(props.showSuccessNotification).toHaveBeenCalledWith(\n          '2 offres ont bien été désactivées'\n        )\n      })\n    })\n  })\n\n  it('should unselect offers and hide action bar on click on \"Annuler\" button', () => {\n    // given\n    renderActionsBar(props)\n    // when\n    fireEvent.click(screen.queryByText('Annuler'))\n\n    // then\n    expect(props.clearSelectedOfferIds).toHaveBeenCalledTimes(1)\n  })\n\n  describe('when all offers are selected', () => {\n    it('should activate all offers on click on \"Activer\" button', async () => {\n      // given\n      props.areAllOffersSelected = true\n      renderActionsBar(props)\n      const activateButton = screen.getByText('Activer')\n      const expectedBody = {\n        active: 'non',\n        isActive: true,\n        name: 'keyword',\n        offererId: 'A4',\n        venueId: 'E3',\n      }\n\n      // when\n      fireEvent.click(activateButton)\n\n      // then\n      await waitFor(() => {\n        expect(updateOffersActiveStatus).toHaveBeenLastCalledWith(true, expectedBody)\n        expect(props.clearSelectedOfferIds).toHaveBeenCalledTimes(1)\n        expect(props.refreshOffers).toHaveBeenCalledWith({ shouldTriggerSpinner: false })\n        expect(props.showPendingNotification).toHaveBeenCalledWith(\n          'Les offres sont en cours d’activation, veuillez rafraichir dans quelques instants'\n        )\n      })\n    })\n\n    it('should deactivate all offers on click on \"Désactiver\" button', async () => {\n      // given\n      props.areAllOffersSelected = true\n      renderActionsBar(props)\n      const deactivateButton = screen.getByText('Désactiver')\n      const expectedBody = {\n        active: 'non',\n        isActive: false,\n        name: 'keyword',\n        offererId: 'A4',\n        venueId: 'E3',\n      }\n\n      // when\n      fireEvent.click(deactivateButton)\n\n      // then\n      await waitFor(() => {\n        expect(updateOffersActiveStatus).toHaveBeenLastCalledWith(true, expectedBody)\n        expect(props.clearSelectedOfferIds).toHaveBeenCalledTimes(1)\n        expect(props.refreshOffers).toHaveBeenCalledWith({ shouldTriggerSpinner: false })\n        expect(props.showPendingNotification).toHaveBeenCalledWith(\n          'Les offres sont en cours de désactivation, veuillez rafraichir dans quelques instants'\n        )\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/NoOffers/NoOffers.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/NoResults/NoResults.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/OfferItem/OfferItem.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/OfferItem/__specs__/OfferItem.spec.jsx',
    messages: [
      {
        ruleId: 'testing-library/no-dom-import',
        severity: 1,
        message:
          'import from DOM Testing Library is restricted, import from @testing-library/react instead',
        line: 2,
        column: 1,
        nodeType: 'ImportDeclaration',
        messageId: 'noDomImportFramework',
        endLine: 2,
        endColumn: 46,
        fix: { range: [58, 80], text: "'@testing-library/react'" },
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (338). Maximum allowed is 150.',
        line: 21,
        column: 59,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 358,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (300). Maximum allowed is 150.',
        line: 58,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 357,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 1,
    source:
      "import '@testing-library/jest-dom'\nimport { within } from '@testing-library/dom'\nimport { render, screen } from '@testing-library/react'\nimport React from 'react'\nimport { MemoryRouter } from 'react-router'\n\nimport OfferItem from '../OfferItem'\n\nconst renderOfferItem = props => {\n  return render(\n    <MemoryRouter>\n      <table>\n        <tbody>\n          <OfferItem {...props} />\n        </tbody>\n      </table>\n    </MemoryRouter>\n  )\n}\n\ndescribe('src | components | pages | Offers | OfferItem', () => {\n  let props\n  let eventOffer\n\n  beforeEach(() => {\n    eventOffer = {\n      id: 'M4',\n      isActive: true,\n      isEditable: true,\n      isFullyBooked: false,\n      isEvent: true,\n      isThing: false,\n      hasBookingLimitDatetimesPassed: false,\n      name: 'My little offer',\n      thumbUrl: '/my-fake-thumb',\n      status: 'ACTIVE',\n      stocks: [],\n      venue: {\n        isVirtual: false,\n        name: 'Paris',\n        departementCode: '973',\n      },\n    }\n\n    props = {\n      dispatch: jest.fn(),\n      offer: eventOffer,\n      location: {\n        search: '?orderBy=offer.id+desc',\n      },\n      selectOffer: jest.fn(),\n      trackActivateOffer: jest.fn(),\n      trackDeactivateOffer: jest.fn(),\n      refreshOffers: jest.fn(),\n    }\n  })\n\n  describe('render', () => {\n    describe('thumb Component', () => {\n      it('should render an image with url from offer when offer has a thumb url', () => {\n        // when\n        renderOfferItem(props)\n\n        // then\n        expect(screen.getByAltText(\"Miniature d'offre\")).toHaveAttribute('src', eventOffer.thumbUrl)\n      })\n\n      it('should render an image with an empty url when offer does not have a thumb url', () => {\n        // given\n        props.offer.thumbUrl = null\n\n        // when\n        renderOfferItem(props)\n\n        // then\n        expect(screen.getByText(\"Miniature d'offre\")).toBeInTheDocument()\n      })\n    })\n\n    describe('action buttons', () => {\n      it('should display a button to show offer stocks', () => {\n        // given\n        renderOfferItem(props)\n\n        // then\n        expect(screen.queryByText('Stocks')).toBeInTheDocument()\n        expect(screen.queryByText('Stocks')).toHaveAttribute(\n          'href',\n          `/offres/${eventOffer.id}/stocks`\n        )\n      })\n\n      describe('edit offer link', () => {\n        it('should be displayed when offer is editable', () => {\n          // when\n          renderOfferItem(props)\n\n          // then\n          const links = screen.getAllByRole('link')\n          expect(links[links.length - 1]).toHaveAttribute(\n            'href',\n            `/offres/${eventOffer.id}/edition`\n          )\n        })\n\n        it('should not be displayed when offer is no editable', () => {\n          props.offer.isEditable = false\n\n          // when\n          renderOfferItem(props)\n\n          // then\n          const links = screen.getAllByRole('link')\n          expect(links[links.length - 1]).not.toHaveAttribute(\n            'href',\n            `/offres/${eventOffer.id}/edition`\n          )\n        })\n      })\n    })\n\n    describe('offer title', () => {\n      it('should contain a link with the offer name and details link', () => {\n        // when\n        renderOfferItem(props)\n\n        // then\n        const offerTitle = screen.queryByText(props.offer.name, 'a')\n        expect(offerTitle).toBeInTheDocument()\n        expect(offerTitle).toHaveAttribute('href', `/offres/${props.offer.id}/edition`)\n        expect(offerTitle).toHaveAttribute('title', \"Afficher le détail de l'offre\")\n      })\n    })\n\n    it('should display the venue name when venue public name is not given', () => {\n      // given\n      props.offer.venue = {\n        name: 'Paris',\n        isVirtual: false,\n      }\n\n      // when\n      renderOfferItem(props)\n\n      // then\n      expect(screen.queryByText(props.offer.venue.name)).toBeInTheDocument()\n    })\n\n    it('should display the venue public name when is given', () => {\n      // given\n      props.offer.venue = {\n        name: 'Paris',\n        publicName: 'lieu de ouf',\n        isVirtual: false,\n      }\n\n      // when\n      renderOfferItem(props)\n\n      // then\n      expect(screen.queryByText(props.offer.venue.publicName)).toBeInTheDocument()\n    })\n\n    it('should display the offerer name with \"- Offre numérique\" when venue is virtual', () => {\n      // given\n      props.offer.venue = {\n        isVirtual: true,\n        name: 'Gaumont Montparnasse',\n        offererName: 'Gaumont',\n        publicName: 'Gaumontparnasse',\n      }\n\n      // when\n      renderOfferItem(props)\n\n      // then\n      expect(screen.queryByText('Gaumont - Offre numérique')).toBeInTheDocument()\n    })\n\n    it('should display the isbn when given', () => {\n      // given\n      eventOffer.productIsbn = '123456789'\n\n      // when\n      renderOfferItem(props)\n\n      // then\n      expect(screen.queryByText('123456789')).toBeInTheDocument()\n    })\n\n    describe('offer remaining quantity', () => {\n      it('should be 0 when offer has no stock', () => {\n        // when\n        renderOfferItem(props)\n\n        // then\n        expect(screen.queryByText('0')).toBeInTheDocument()\n      })\n\n      it('should be the sum of offer stocks remaining quantity', () => {\n        // given\n        props.offer.stocks = [\n          { remainingQuantity: 0 },\n          { remainingQuantity: 2 },\n          { remainingQuantity: 3 },\n        ]\n\n        // when\n        renderOfferItem(props)\n\n        // then\n        expect(screen.queryByText('5')).toBeInTheDocument()\n      })\n\n      it('should be \"illimité\" when at least one stock is unlimited', () => {\n        // given\n        props.offer.stocks = [{ remainingQuantity: 0 }, { remainingQuantity: 'unlimited' }]\n\n        // when\n        renderOfferItem(props)\n\n        // then\n        expect(screen.queryByText('Illimité')).toBeInTheDocument()\n      })\n    })\n\n    describe('when offer is an event product', () => {\n      it('should display the correct text \"2 dates\"', () => {\n        // given\n        props.offer.stocks = [\n          { remainingQuantity: 'unlimited' },\n          { remainingQuantity: 'unlimited' },\n        ]\n\n        // when\n        renderOfferItem(props)\n\n        // then\n        expect(screen.queryByText('2 dates')).toBeInTheDocument()\n      })\n\n      it('should display the beginning date time when only one date', () => {\n        // given\n        props.offer.stocks = [{ beginningDatetime: '2021-05-27T20:00:00Z', remainingQuantity: 10 }]\n\n        // when\n        renderOfferItem(props)\n\n        // then\n        expect(screen.getByText('27/05/2021 17:00')).toBeInTheDocument()\n      })\n\n      it('should not display a warning when no stocks are sold out', () => {\n        // given\n        props.offer.stocks = [{ remainingQuantity: 'unlimited' }, { remainingQuantity: 13 }]\n\n        // when\n        renderOfferItem(props)\n\n        // then\n        const numberOfStocks = screen.getByText('2 dates').closest('span')\n        expect(within(numberOfStocks).queryByRole('img')).not.toBeInTheDocument()\n      })\n\n      it('should not display a warning when all stocks are sold out', () => {\n        // given\n        props.offer.stocks = [{ remainingQuantity: 0 }, { remainingQuantity: 0 }]\n        eventOffer.status = 'SOLD_OUT'\n\n        // when\n        renderOfferItem(props)\n\n        // then\n        const numberOfStocks = screen.getByText('2 dates').closest('span')\n        expect(within(numberOfStocks).queryByRole('img')).not.toBeInTheDocument()\n      })\n\n      it('should display a warning with number of stocks sold out when at least one stock is sold out', () => {\n        // given\n        props.offer.stocks = [\n          { remainingQuantity: 0, hasBookingLimitDatetimePassed: false },\n          { remainingQuantity: 'unlimited', hasBookingLimitDatetimePassed: false },\n        ]\n\n        // when\n        renderOfferItem(props)\n\n        // then\n        const numberOfStocks = screen.getByText('2 dates').closest('span')\n        expect(within(numberOfStocks).queryAllByRole('img')[0]).toHaveAttribute(\n          'src',\n          expect.stringContaining('ico-warning-stocks')\n        )\n        expect(within(numberOfStocks).queryByText('1 date épuisée')).toBeInTheDocument()\n      })\n\n      it('should pluralize number of stocks sold out when at least two stocks are sold out', () => {\n        // given\n        props.offer.stocks = [\n          { remainingQuantity: 0, hasBookingLimitDatetimePassed: false },\n          { remainingQuantity: 0, hasBookingLimitDatetimePassed: false },\n          { remainingQuantity: 12, hasBookingLimitDatetimePassed: false },\n        ]\n\n        // when\n        renderOfferItem(props)\n\n        // then\n        const numberOfStocks = screen.getByText('3 dates').closest('span')\n        expect(within(numberOfStocks).queryByText('2 dates épuisées')).toBeInTheDocument()\n      })\n    })\n\n    it('should display the offer greyed when offer has pending status', () => {\n      // Given\n      props.offer.status = 'PENDING'\n\n      // When\n      renderOfferItem(props)\n\n      // Then\n      expect(screen.getByText('My little offer').closest('tr')).toHaveClass('inactive')\n    })\n\n    it('should display the offer greyed when offer has rejected status', () => {\n      // Given\n      props.offer.status = 'REJECTED'\n\n      // When\n      renderOfferItem(props)\n\n      // Then\n      expect(screen.getByText('My little offer').closest('tr')).toHaveClass('inactive')\n    })\n\n    it('should display the offer greyed when offer is inactive', () => {\n      // Given\n      props.offer.isActive = false\n\n      // When\n      renderOfferItem(props)\n\n      // Then\n      expect(screen.getByText('My little offer').closest('tr')).toHaveClass('inactive')\n    })\n\n    it('should not display the offer greyed when offer is active', () => {\n      // Given\n      props.offer.status = 'ACTIVE'\n\n      // When\n      renderOfferItem(props)\n\n      // Then\n      expect(screen.getByText('My little offer').closest('tr')).not.toHaveClass('inactive')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/Offers.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (379). Maximum allowed is 150.',
        line: 32,
        column: 16,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 410,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (43). Maximum allowed is 15.',
        line: 32,
        column: 16,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 410,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (382). Maximum allowed is 300.',
        line: 339,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 423,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import PropTypes from 'prop-types'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport ActionsBarPortal from 'components/layout/ActionsBarPortal/ActionsBarPortal'\nimport Icon from 'components/layout/Icon'\nimport PageTitle from 'components/layout/PageTitle/PageTitle'\nimport Spinner from 'components/layout/Spinner'\nimport Titles from 'components/layout/Titles/Titles'\nimport { getOffersCountToDisplay } from 'components/pages/Offers/domain/getOffersCountToDisplay'\nimport { isOfferDisabled } from 'components/pages/Offers/domain/isOfferDisabled'\nimport { ReactComponent as AddOfferSvg } from 'icons/ico-plus.svg'\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { savePageNumber, saveSearchFilters } from 'store/offers/actions'\nimport { mapApiToBrowser, mapBrowserToApi, translateQueryParamsToApiParams } from 'utils/translate'\n\nimport {\n  DEFAULT_PAGE,\n  DEFAULT_SEARCH_FILTERS,\n  MAX_OFFERS_TO_DISPLAY,\n  MAX_TOTAL_PAGES,\n  NUMBER_OF_OFFERS_PER_PAGE,\n} from './_constants'\nimport ActionsBarContainer from './ActionsBar/ActionsBarContainer'\nimport NoOffers from './NoOffers/NoOffers'\nimport NoResults from './NoResults/NoResults'\nimport OffersTableBody from './OffersTableBody/OffersTableBody'\nimport OffersTableHead from './OffersTableHead/OffersTableHead'\nimport SearchFilters from './SearchFilters/SearchFilters'\n\nconst Offers = ({ currentUser, getOfferer, query, showInformationNotification }) => {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const searchFiltersInUri = translateQueryParamsToApiParams(query.parse())\n    dispatch(\n      saveSearchFilters({\n        nameOrIsbn: searchFiltersInUri.nameOrIsbn || DEFAULT_SEARCH_FILTERS.nameOrIsbn,\n        offererId: searchFiltersInUri.offererId || DEFAULT_SEARCH_FILTERS.offererId,\n        venueId: searchFiltersInUri.venueId || DEFAULT_SEARCH_FILTERS.venueId,\n        typeId: searchFiltersInUri.typeId || DEFAULT_SEARCH_FILTERS.typeId,\n        status: searchFiltersInUri.status\n          ? mapBrowserToApi[searchFiltersInUri.status]\n          : DEFAULT_SEARCH_FILTERS.status,\n        creationMode: searchFiltersInUri.creationMode\n          ? mapBrowserToApi[searchFiltersInUri.creationMode]\n          : DEFAULT_SEARCH_FILTERS.creationMode,\n        periodBeginningDate:\n          searchFiltersInUri.periodBeginningDate || DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n        periodEndingDate:\n          searchFiltersInUri.periodEndingDate || DEFAULT_SEARCH_FILTERS.periodEndingDate,\n      })\n    )\n    dispatch(savePageNumber(Number(searchFiltersInUri.page) || DEFAULT_PAGE))\n  }, [dispatch, query])\n  const [isLoading, setIsLoading] = useState(true)\n  const [offersCount, setOffersCount] = useState(0)\n  const [currentPageNumber, setCurrentPageNumber] = useState(DEFAULT_PAGE)\n  const [pageCount, setPageCount] = useState(null)\n  const [searchFilters, setSearchFilters] = useState({ ...DEFAULT_SEARCH_FILTERS })\n  const [offerer, setOfferer] = useState(null)\n  const [isStatusFiltersVisible, setIsStatusFiltersVisible] = useState(false)\n  const [areAllOffersSelected, setAreAllOffersSelected] = useState(false)\n\n  const [offers, setOffers] = useState([])\n  const [selectedOfferIds, setSelectedOfferIds] = useState([])\n  const savedSearchFilters = useSelector(state => state.offers.searchFilters)\n  const savedPageNumber = useSelector(state => state.offers.pageNumber)\n  const currentPageOffersSubset = offers.slice(\n    (currentPageNumber - 1) * NUMBER_OF_OFFERS_PER_PAGE,\n    currentPageNumber * NUMBER_OF_OFFERS_PER_PAGE\n  )\n\n  useEffect(() => {\n    setSearchFilters({ ...savedSearchFilters })\n  }, [savedSearchFilters])\n\n  useEffect(() => {\n    setCurrentPageNumber(savedPageNumber)\n  }, [savedPageNumber])\n\n  useEffect(() => {\n    if (\n      savedSearchFilters.offererId &&\n      savedSearchFilters.offererId !== DEFAULT_SEARCH_FILTERS.offererId\n    ) {\n      getOfferer(savedSearchFilters.offererId).then(offerer => setOfferer(offerer))\n    }\n  }, [getOfferer, savedSearchFilters.offererId])\n\n  useEffect(() => {\n    if (currentUser.isAdmin) {\n      const isVenueFilterSelected = searchFilters.venueId !== DEFAULT_SEARCH_FILTERS.venueId\n      const isOffererFilterApplied =\n        savedSearchFilters.offererId !== DEFAULT_SEARCH_FILTERS.offererId\n      const isFilterByVenueOrOfferer = isVenueFilterSelected || isOffererFilterApplied\n\n      if (!isFilterByVenueOrOfferer) {\n        setSearchFilters(currentSearchFilters => ({\n          ...currentSearchFilters,\n          status: DEFAULT_SEARCH_FILTERS.status,\n        }))\n      }\n    }\n  }, [currentUser.isAdmin, savedSearchFilters.offererId, searchFilters.venueId])\n\n  useEffect(\n    function updateUrlMatchingState() {\n      let queryParams = Object.keys(savedSearchFilters).reduce((params, field) => {\n        const translatedFilterName = mapApiToBrowser[field]\n        const isFilterSet = savedSearchFilters[field] !== DEFAULT_SEARCH_FILTERS[field]\n        return {\n          ...params,\n          [translatedFilterName]: isFilterSet ? savedSearchFilters[field] : null,\n        }\n      }, {})\n\n      const fieldsWithTranslatedValues = ['statut', 'creation']\n      fieldsWithTranslatedValues.forEach(field => {\n        if (queryParams[field]) {\n          const translatedValue = mapApiToBrowser[queryParams[field]]\n          queryParams[field] = translatedValue\n        }\n      })\n\n      queryParams.page = savedPageNumber !== DEFAULT_PAGE ? savedPageNumber : null\n\n      query.change(queryParams)\n    },\n    [query, savedSearchFilters, savedPageNumber]\n  )\n\n  const loadAndUpdateOffers = useCallback(filters => {\n    pcapi\n      .loadFilteredOffers({ ...filters })\n      .then(offers => {\n        const offersCount = offers.length\n        setIsLoading(false)\n        setOffersCount(offersCount)\n        const pageCount = Math.ceil(offersCount / NUMBER_OF_OFFERS_PER_PAGE)\n        const cappedPageCount = Math.min(pageCount, MAX_TOTAL_PAGES)\n        setPageCount(cappedPageCount)\n        setOffers(offers)\n      })\n      .catch(() => setIsLoading(false))\n  }, [])\n\n  useEffect(() => {\n    Object.keys(savedSearchFilters).length > 0 && loadAndUpdateOffers(savedSearchFilters)\n  }, [loadAndUpdateOffers, savedSearchFilters])\n\n  const applyFilters = useCallback(() => {\n    setIsLoading(true)\n    setIsStatusFiltersVisible(false)\n    dispatch(savePageNumber(DEFAULT_PAGE))\n    dispatch(\n      saveSearchFilters({\n        ...searchFilters,\n      })\n    )\n  }, [dispatch, searchFilters])\n\n  const removeOfferer = useCallback(() => {\n    setIsLoading(true)\n    setOfferer(null)\n    const updatedFilters = {\n      offererId: DEFAULT_SEARCH_FILTERS.offererId,\n    }\n    if (\n      searchFilters.venueId === DEFAULT_SEARCH_FILTERS.venueId &&\n      searchFilters.status !== DEFAULT_SEARCH_FILTERS.status\n    ) {\n      updatedFilters.status = DEFAULT_SEARCH_FILTERS.status\n    }\n    dispatch(saveSearchFilters({ ...updatedFilters }))\n  }, [dispatch, searchFilters.status, searchFilters.venueId])\n\n  const refreshOffers = useCallback(() => loadAndUpdateOffers(savedSearchFilters), [\n    loadAndUpdateOffers,\n    savedSearchFilters,\n  ])\n\n  const hasSearchFilters = useCallback(\n    (searchFilters, filterNames = Object.keys(searchFilters)) => {\n      return filterNames\n        .map(filterName => searchFilters[filterName] !== { ...DEFAULT_SEARCH_FILTERS }[filterName])\n        .includes(true)\n    },\n    []\n  )\n\n  const isAdminForbidden = useCallback(\n    searchFilters => {\n      return currentUser.isAdmin && !hasSearchFilters(searchFilters, ['venueId', 'offererId'])\n    },\n    [currentUser.isAdmin, hasSearchFilters]\n  )\n\n  const updateStatusFilter = useCallback(selectedStatus => {\n    setSearchFilters(currentSearchFilters => ({ ...currentSearchFilters, status: selectedStatus }))\n  }, [])\n\n  const onPreviousPageClick = useCallback(() => {\n    setCurrentPageNumber(currentPageNumber => {\n      const newPageNumber = currentPageNumber - 1\n      dispatch(savePageNumber(newPageNumber))\n      return newPageNumber\n    })\n  }, [dispatch])\n\n  const onNextPageClick = useCallback(() => {\n    setCurrentPageNumber(currentPageNumber => {\n      const newPageNumber = currentPageNumber + 1\n      dispatch(savePageNumber(newPageNumber))\n      return newPageNumber\n    })\n  }, [dispatch])\n\n  const selectOffer = useCallback((offerId, selected) => {\n    setSelectedOfferIds(currentSelectedIds => {\n      let newSelectedOfferIds = [...currentSelectedIds]\n      if (selected) {\n        newSelectedOfferIds.push(offerId)\n      } else {\n        const offerIdIndex = newSelectedOfferIds.indexOf(offerId)\n        newSelectedOfferIds.splice(offerIdIndex, 1)\n      }\n      return newSelectedOfferIds\n    })\n  }, [])\n\n  const toggleSelectAllCheckboxes = useCallback(() => {\n    setAreAllOffersSelected(currentValue => !currentValue)\n  }, [])\n\n  function selectAllOffers() {\n    setSelectedOfferIds(\n      areAllOffersSelected\n        ? []\n        : currentPageOffersSubset\n          .filter(offer => !isOfferDisabled(offer.status))\n          .map(offer => offer.id)\n    )\n\n    toggleSelectAllCheckboxes()\n  }\n\n  const clearSelectedOfferIds = useCallback(() => {\n    setSelectedOfferIds([])\n  }, [])\n\n  const resetFilters = useCallback(() => {\n    setIsLoading(true)\n    setOfferer(null)\n    dispatch(\n      saveSearchFilters({\n        ...DEFAULT_SEARCH_FILTERS,\n      })\n    )\n    dispatch(savePageNumber(DEFAULT_PAGE))\n  }, [dispatch])\n\n  const { isAdmin } = currentUser || {}\n  const hasOffers = currentPageOffersSubset.length > 0\n  const userHasNoOffers = !isLoading && !hasOffers && !hasSearchFilters(savedSearchFilters)\n\n  const actionLink =\n    userHasNoOffers || isAdmin ? null : (\n      <Link\n        className=\"primary-button with-icon\"\n        to=\"/offres/creation\"\n      >\n        <AddOfferSvg />\n        Créer une offre\n      </Link>\n    )\n\n  const nbSelectedOffers = areAllOffersSelected ? offersCount : selectedOfferIds.length\n\n  const isLastPage = currentPageNumber === pageCount\n\n  useEffect(() => {\n    const hasMoreOffersToFetch = offersCount > MAX_OFFERS_TO_DISPLAY\n    if (isLastPage && hasMoreOffersToFetch) {\n      showInformationNotification(\n        'L’affichage des offres a été limité à 200 offres. Vous pouvez modifier les filtres pour affiner votre recherche.'\n      )\n    }\n  }, [isLastPage, offersCount, showInformationNotification])\n\n  return (\n    <div className=\"offers-page\">\n      <PageTitle title=\"Vos offres\" />\n      <Titles\n        action={actionLink}\n        title=\"Offres\"\n      />\n      <ActionsBarPortal isVisible={nbSelectedOffers > 0}>\n        <ActionsBarContainer\n          areAllOffersSelected={areAllOffersSelected}\n          clearSelectedOfferIds={clearSelectedOfferIds}\n          nbSelectedOffers={nbSelectedOffers}\n          refreshOffers={refreshOffers}\n          selectedOfferIds={selectedOfferIds}\n          toggleSelectAllCheckboxes={toggleSelectAllCheckboxes}\n        />\n      </ActionsBarPortal>\n      {userHasNoOffers ? (\n        <NoOffers />\n      ) : (\n        <>\n          <h3 className=\"op-title\">\n            Rechercher une offre\n          </h3>\n          {hasSearchFilters(savedSearchFilters) ? (\n            <Link\n              className=\"reset-filters-link\"\n              onClick={resetFilters}\n              to=\"/offres\"\n            >\n              Réinitialiser les filtres\n            </Link>\n          ) : (\n            <span className=\"reset-filters-link disabled\">\n              Réinitialiser les filtres\n            </span>\n          )}\n\n          <SearchFilters\n            applyFilters={applyFilters}\n            offerer={offerer}\n            removeOfferer={removeOfferer}\n            selectedFilters={searchFilters}\n            setSearchFilters={setSearchFilters}\n          />\n\n          <div\n            aria-busy={isLoading}\n            aria-live=\"polite\"\n            className=\"section\"\n          >\n            {isLoading ? (\n              <Spinner />\n            ) : (\n              <>\n                {hasOffers && (\n                  <div className=\"offers-count\">\n                    {`${getOffersCountToDisplay(offersCount)} ${\n                      offersCount <= 1 ? 'offre' : 'offres'\n                    }`}\n                  </div>\n                )}\n                <table>\n                  <OffersTableHead\n                    applyFilters={applyFilters}\n                    areAllOffersSelected={areAllOffersSelected}\n                    areOffersPresent={hasOffers}\n                    filters={searchFilters}\n                    isAdminForbidden={isAdminForbidden}\n                    isStatusFiltersVisible={isStatusFiltersVisible}\n                    selectAllOffers={selectAllOffers}\n                    setIsStatusFiltersVisible={setIsStatusFiltersVisible}\n                    updateStatusFilter={updateStatusFilter}\n                  />\n                  <OffersTableBody\n                    areAllOffersSelected={areAllOffersSelected}\n                    offers={currentPageOffersSubset}\n                    selectOffer={selectOffer}\n                    selectedOfferIds={selectedOfferIds}\n                  />\n                </table>\n                {hasOffers && (\n                  <div className=\"pagination\">\n                    <button\n                      disabled={currentPageNumber === 1}\n                      onClick={onPreviousPageClick}\n                      type=\"button\"\n                    >\n                      <Icon\n                        alt=\"Aller à la page précédente\"\n                        svg=\"ico-left-arrow\"\n                      />\n                    </button>\n                    <span>\n                      {`Page ${currentPageNumber}/${pageCount}`}\n                    </span>\n                    <button\n                      disabled={isLastPage}\n                      onClick={onNextPageClick}\n                      type=\"button\"\n                    >\n                      <Icon\n                        alt=\"Aller à la page suivante\"\n                        svg=\"ico-right-arrow\"\n                      />\n                    </button>\n                  </div>\n                )}\n                {!hasOffers && hasSearchFilters(savedSearchFilters) && (\n                  <NoResults resetFilters={resetFilters} />\n                )}\n              </>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n\nOffers.propTypes = {\n  currentUser: PropTypes.shape().isRequired,\n  getOfferer: PropTypes.func.isRequired,\n  query: PropTypes.shape({\n    change: PropTypes.func.isRequired,\n    parse: PropTypes.func.isRequired,\n  }).isRequired,\n  showInformationNotification: PropTypes.func.isRequired,\n}\n\nexport default Offers\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/OffersContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/OffersStatusFiltersModal/OffersStatusFiltersModal.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/OffersTableBody/OffersTableBody.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/OffersTableHead/OffersTableHead.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/OffersTableHead/StatusFiltersButton.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/SearchFilters/SearchFilters.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (177). Maximum allowed is 150.',
        line: 22,
        column: 23,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 198,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      'import { endOfDay } from \'date-fns\'\nimport { utcToZonedTime } from \'date-fns-tz\'\nimport PropTypes from \'prop-types\'\nimport React, { Fragment, useCallback, useEffect, useState } from \'react\'\n\nimport Icon from \'components/layout/Icon\'\nimport PeriodSelector from \'components/layout/inputs/PeriodSelector/PeriodSelector\'\nimport Select from \'components/layout/inputs/Select\'\nimport TextInput from \'components/layout/inputs/TextInput/TextInput\'\nimport * as pcapi from \'repository/pcapi/pcapi\'\nimport { fetchAllVenuesByProUser, formatAndOrderVenues } from \'repository/venuesService\'\nimport { formatBrowserTimezonedDateAsUTC, getToday } from \'utils/date\'\n\nimport {\n  ALL_TYPES_OPTION,\n  ALL_VENUES_OPTION,\n  CREATION_MODES_FILTERS,\n  DEFAULT_CREATION_MODE,\n  DEFAULT_SEARCH_FILTERS,\n} from \'../_constants\'\n\nconst SearchFilters = ({\n  applyFilters,\n  offerer,\n  removeOfferer,\n  selectedFilters,\n  setSearchFilters,\n}) => {\n  const [typeOptions, setTypeOptions] = useState([])\n  const [venueOptions, setVenueOptions] = useState([])\n\n  useEffect(() => {\n    pcapi.loadTypes().then(types => {\n      let typeOptions = types.map(type => ({\n        id: type.value,\n        displayName: type.proLabel,\n      }))\n      setTypeOptions(typeOptions.sort((a, b) => a.displayName.localeCompare(b.displayName)))\n    })\n    fetchAllVenuesByProUser(offerer?.id).then(venues =>\n      setVenueOptions(formatAndOrderVenues(venues))\n    )\n  }, [offerer?.id])\n\n  const updateSearchFilters = useCallback(\n    newSearchFilters => {\n      setSearchFilters(currentSearchFilters => ({ ...currentSearchFilters, ...newSearchFilters }))\n    },\n    [setSearchFilters]\n  )\n\n  const storeNameOrIsbnSearchValue = useCallback(\n    event => {\n      updateSearchFilters({ nameOrIsbn: event.target.value })\n    },\n    [updateSearchFilters]\n  )\n\n  const storeSelectedVenue = useCallback(\n    event => {\n      updateSearchFilters({ venueId: event.target.value })\n    },\n    [updateSearchFilters]\n  )\n\n  const storeSelectedType = useCallback(\n    event => {\n      updateSearchFilters({ typeId: event.target.value })\n    },\n    [updateSearchFilters]\n  )\n\n  const storeCreationMode = useCallback(\n    event => {\n      updateSearchFilters({ creationMode: event.target.value })\n    },\n    [updateSearchFilters]\n  )\n\n  const changePeriodBeginningDateValue = useCallback(\n    periodBeginningDate => {\n      const dateToFilter = periodBeginningDate\n        ? formatBrowserTimezonedDateAsUTC(periodBeginningDate)\n        : DEFAULT_SEARCH_FILTERS.periodBeginningDate\n      updateSearchFilters({ periodBeginningDate: dateToFilter })\n    },\n    [updateSearchFilters]\n  )\n\n  const changePeriodEndingDateValue = useCallback(\n    periodEndingDate => {\n      const dateToFilter = periodEndingDate\n        ? formatBrowserTimezonedDateAsUTC(endOfDay(periodEndingDate))\n        : DEFAULT_SEARCH_FILTERS.periodEndingDate\n      updateSearchFilters({ periodEndingDate: dateToFilter })\n    },\n    [updateSearchFilters]\n  )\n\n  const requestFilteredOffers = useCallback(\n    event => {\n      event.preventDefault()\n      applyFilters()\n    },\n    [applyFilters]\n  )\n\n  return (\n    <>\n      {offerer && (\n        <span className="offerer-filter">\n          {offerer.name}\n          <button\n            onClick={removeOfferer}\n            type="button"\n          >\n            <Icon\n              alt="Supprimer le filtre par structure"\n              svg="ico-close-b"\n            />\n          </button>\n        </span>\n      )}\n      <form onSubmit={requestFilteredOffers}>\n        <TextInput\n          label="Nom de l’offre ou ISBN"\n          name="offre"\n          onChange={storeNameOrIsbnSearchValue}\n          placeholder="Rechercher par nom d’offre ou par ISBN"\n          value={selectedFilters.nameOrIsbn}\n        />\n        <div className="form-row">\n          <Select\n            defaultOption={ALL_VENUES_OPTION}\n            handleSelection={storeSelectedVenue}\n            label="Lieu"\n            name="lieu"\n            options={venueOptions}\n            selectedValue={selectedFilters.venueId}\n          />\n          <Select\n            defaultOption={ALL_TYPES_OPTION}\n            handleSelection={storeSelectedType}\n            label="Catégories"\n            name="type"\n            options={typeOptions}\n            selectedValue={selectedFilters.typeId}\n          />\n          <Select\n            defaultOption={DEFAULT_CREATION_MODE}\n            handleSelection={storeCreationMode}\n            label="Mode de création"\n            name="creationMode"\n            options={CREATION_MODES_FILTERS}\n            selectedValue={selectedFilters.creationMode}\n          />\n          <PeriodSelector\n            changePeriodBeginningDateValue={changePeriodBeginningDateValue}\n            changePeriodEndingDateValue={changePeriodEndingDateValue}\n            isDisabled={false}\n            label="Période de l’évènement"\n            maxDateBeginning={\n              selectedFilters.periodEndingDate\n                ? utcToZonedTime(selectedFilters.periodEndingDate, \'UTC\')\n                : undefined\n            }\n            minDateEnding={\n              selectedFilters.periodBeginningDate\n                ? utcToZonedTime(selectedFilters.periodBeginningDate, \'UTC\')\n                : undefined\n            }\n            periodBeginningDate={\n              selectedFilters.periodBeginningDate\n                ? utcToZonedTime(selectedFilters.periodBeginningDate, \'UTC\')\n                : undefined\n            }\n            periodEndingDate={\n              selectedFilters.periodEndingDate\n                ? utcToZonedTime(selectedFilters.periodEndingDate, \'UTC\')\n                : undefined\n            }\n            todayDate={getToday()}\n          />\n        </div>\n        <div className="search-separator">\n          <div className="separator" />\n          <button\n            className="primary-button"\n            type="submit"\n          >\n            Lancer la recherche\n          </button>\n          <div className="separator" />\n        </div>\n      </form>\n    </>\n  )\n}\n\nSearchFilters.defaultProps = {\n  offerer: null,\n}\n\nSearchFilters.propTypes = {\n  applyFilters: PropTypes.func.isRequired,\n  offerer: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n  removeOfferer: PropTypes.func.isRequired,\n  selectedFilters: PropTypes.shape({\n    nameOrIsbn: PropTypes.string,\n    offererId: PropTypes.string,\n    venueId: PropTypes.string,\n    typeId: PropTypes.string,\n    creationMode: PropTypes.string,\n    periodBeginningDate: PropTypes.string,\n    periodEndingDate: PropTypes.string,\n  }).isRequired,\n  setSearchFilters: PropTypes.func.isRequired,\n}\n\nexport default SearchFilters\n',
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/__specs__/Offers.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (1441). Maximum allowed is 150.',
        line: 84,
        column: 56,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1524,
        endColumn: 2,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (16). Maximum allowed is 15.',
        line: 84,
        column: 56,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1524,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (604). Maximum allowed is 150.',
        line: 131,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 734,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (461). Maximum allowed is 150.',
        line: 242,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 702,
        endColumn: 6,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (1289). Maximum allowed is 300.',
        line: 358,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 1525,
        endColumn: 1,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (265). Maximum allowed is 150.',
        line: 437,
        column: 38,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 701,
        endColumn: 8,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (195). Maximum allowed is 150.',
        line: 442,
        column: 110,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 636,
        endColumn: 10,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 443,
        column: 92,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 452,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 454,
        column: 127,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 469,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 471,
        column: 88,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 498,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 500,
        column: 123,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 531,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 533,
        column: 87,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 558,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 560,
        column: 120,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 590,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 592,
        column: 95,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 607,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 609,
        column: 75,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 621,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 623,
        column: 77,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 635,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 639,
        column: 96,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 646,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 648,
        column: 118,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 661,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 663,
        column: 98,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 675,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 677,
        column: 80,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 687,
        endColumn: 12,
      },
      {
        ruleId: 'max-nested-callbacks',
        severity: 1,
        message: 'Too many nested callbacks (6). Maximum allowed is 5.',
        line: 689,
        column: 82,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 699,
        endColumn: 12,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (161). Maximum allowed is 150.',
        line: 736,
        column: 41,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 896,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (277). Maximum allowed is 150.',
        line: 974,
        column: 32,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1250,
        endColumn: 4,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Async arrow function has too many statements (18). Maximum allowed is 15.',
        line: 1418,
        column: 58,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1460,
        endColumn: 8,
      },
    ],
    errorCount: 0,
    warningCount: 24,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import '@testing-library/jest-dom'\nimport { fireEvent, render, screen } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport {\n  ALL_OFFERERS,\n  ALL_OFFERS,\n  ALL_STATUS,\n  ALL_TYPES,\n  ALL_TYPES_OPTION,\n  ALL_VENUES,\n  ALL_VENUES_OPTION,\n  ALL_EVENT_PERIODS,\n  CREATION_MODES_FILTERS,\n  DEFAULT_CREATION_MODE,\n  DEFAULT_PAGE,\n  DEFAULT_SEARCH_FILTERS,\n} from 'components/pages/Offers/Offers/_constants'\nimport Offers from 'components/pages/Offers/Offers/Offers'\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { fetchAllVenuesByProUser } from 'repository/venuesService'\nimport { configureTestStore } from 'store/testUtils'\nimport { offerFactory } from 'utils/apiFactories'\nimport { queryByTextTrimHtml, renderWithStyles } from 'utils/testHelpers'\n\nconst renderOffers = (props, store) => {\n  return render(\n    <Provider store={store}>\n      <MemoryRouter>\n        <Offers {...props} />\n      </MemoryRouter>\n    </Provider>\n  )\n}\n\nconst offerTypes = [\n  {\n    appLabel: 'Cinéma',\n    conditionalFields: ['author', 'visa', 'stageDirector'],\n    description:\n      'Action, science-fiction, documentaire ou comédie sentimentale ? En salle, en plein air ou bien au chaud chez soi ? Et si c’était plutôt cette exposition qui allait faire son cinéma ?',\n    isActive: true,\n    offlineOnly: true,\n    onlineOnly: false,\n    proLabel: 'Cinéma - projections et autres évènements',\n    sublabel: 'Regarder',\n    type: 'Event',\n    value: 'EventType.CINEMA',\n    status: 'ACTIVE',\n  },\n  {\n    appLabel: 'Conférences, rencontres et découverte des métiers',\n    conditionalFields: ['speaker'],\n    description: 'Parfois une simple rencontre peut changer une vie...',\n    isActive: true,\n    offlineOnly: true,\n    onlineOnly: false,\n    proLabel: 'Conférences, rencontres et découverte des métiers',\n    sublabel: 'Rencontrer',\n    type: 'Event',\n    value: 'EventType.CONFERENCE_DEBAT_DEDICACE',\n    status: 'ACTIVE',\n  },\n]\n\njest.mock('repository/venuesService', () => ({\n  ...jest.requireActual('repository/venuesService'),\n  fetchAllVenuesByProUser: jest.fn(),\n}))\n\njest.mock('repository/pcapi/pcapi', () => ({\n  loadFilteredOffers: jest.fn(),\n  loadTypes: jest.fn().mockResolvedValue(offerTypes),\n}))\n\njest.mock('utils/date', () => ({\n  ...jest.requireActual('utils/date'),\n  getToday: jest.fn().mockImplementation(() => new Date('2020-12-15T12:00:00Z')),\n}))\n\ndescribe('src | components | pages | Offers | Offers', () => {\n  let change\n  let parse\n  let props\n  let currentUser\n  let store\n  const proVenues = [\n    {\n      id: 'JI',\n      name: 'Ma venue',\n      offererName: 'Mon offerer',\n      isVirtual: false,\n    },\n    {\n      id: 'JQ',\n      name: 'Ma venue virtuelle',\n      offererName: 'Mon offerer',\n      isVirtual: true,\n    },\n  ]\n  let offersRecap\n\n  beforeEach(() => {\n    change = jest.fn()\n    parse = jest.fn().mockReturnValue({})\n    currentUser = { id: 'EY', isAdmin: false, name: 'Current User', publicName: 'USER' }\n    store = configureTestStore({\n      data: {\n        users: [currentUser],\n      },\n    })\n    offersRecap = [offerFactory({ venue: proVenues[0] })]\n\n    pcapi.loadFilteredOffers.mockResolvedValue(offersRecap)\n\n    props = {\n      currentUser,\n      query: {\n        change,\n        parse,\n      },\n      getOfferer: jest.fn().mockResolvedValue({}),\n      showInformationNotification: jest.fn(),\n    }\n    fetchAllVenuesByProUser.mockResolvedValue(proVenues)\n  })\n\n  describe('render', () => {\n    it('should load offers from API with defaults props', () => {\n      // When\n      renderOffers(props, store)\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledWith({\n        nameOrIsbn: ALL_OFFERS,\n        venueId: ALL_VENUES,\n        typeId: ALL_TYPES,\n        offererId: ALL_OFFERERS,\n        status: ALL_STATUS,\n        creationMode: DEFAULT_CREATION_MODE.id,\n        periodBeginningDate: ALL_EVENT_PERIODS,\n        periodEndingDate: ALL_EVENT_PERIODS,\n      })\n    })\n\n    it('should display column titles when offers are returned', async () => {\n      // When\n      renderOffers(props, store)\n\n      // Then\n      expect(await screen.findByText('Lieu', { selector: 'th' })).toBeInTheDocument()\n      expect(screen.getByText('Stock', { selector: 'th' })).toBeInTheDocument()\n    })\n\n    it('should not display column titles when no offers are returned', async () => {\n      // Given\n      props.offers = []\n\n      // When\n      renderOffers(props, store)\n\n      // Then\n      expect(screen.queryByText('Lieu', { selector: 'th' })).toBeNull()\n      expect(screen.queryByText('Stock', { selector: 'th' })).toBeNull()\n    })\n\n    it('should render as much offers as returned by the api', async () => {\n      // Given\n      const firstOffer = offerFactory()\n      const secondOffer = offerFactory()\n      pcapi.loadFilteredOffers.mockResolvedValue([firstOffer, secondOffer])\n\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      const firstOfferLine = await screen.findByText(firstOffer.name)\n      expect(firstOfferLine).toBeInTheDocument()\n      expect(screen.getByText(secondOffer.name)).toBeInTheDocument()\n    })\n\n    it('should display an unchecked by default checkbox to select all offers when user is not admin', async () => {\n      // Given\n      props.currentUser.isAdmin = false\n      const firstOffer = offerFactory()\n      const secondOffer = offerFactory()\n      pcapi.loadFilteredOffers.mockResolvedValue([firstOffer, secondOffer])\n\n      // When\n      await renderOffers(props, store)\n\n      // Then\n      await screen.findByText(firstOffer.name)\n      const selectAllOffersCheckbox = screen.queryByLabelText('Tout sélectionner')\n      expect(selectAllOffersCheckbox).toBeInTheDocument()\n      expect(selectAllOffersCheckbox).not.toBeChecked()\n      expect(selectAllOffersCheckbox).not.toBeDisabled()\n    })\n\n    describe('total number of offers', () => {\n      it('should display total number of offers in plural if multiple offers', async () => {\n        // Given\n        pcapi.loadFilteredOffers.mockResolvedValueOnce([...offersRecap, offerFactory()])\n\n        // When\n        renderOffers(props, store)\n\n        // Then\n        await screen.findByText(offersRecap[0].name)\n        expect(queryByTextTrimHtml(screen, '2 offres')).toBeInTheDocument()\n      })\n\n      it('should display total number of offers in singular if one or no offer', async () => {\n        // Given\n        pcapi.loadFilteredOffers.mockResolvedValueOnce(offersRecap)\n\n        // When\n        renderOffers(props, store)\n\n        // Then\n        await screen.findByText(offersRecap[0].name)\n        expect(queryByTextTrimHtml(screen, '1 offre')).toBeInTheDocument()\n      })\n\n      it('should display 200+ for total number of offers if more than 200 offers are fetched', async () => {\n        // Given\n        offersRecap = Array.from({ length: 201 }, offerFactory)\n        pcapi.loadFilteredOffers.mockResolvedValueOnce(offersRecap)\n\n        // When\n        renderOffers(props, store)\n\n        // Then\n        await screen.findByText(offersRecap[0].name)\n        expect(queryByTextTrimHtml(screen, '200+ offres')).toBeInTheDocument()\n      })\n    })\n\n    describe('filters', () => {\n      it('should render venue filter with default option selected and given venues as options', async () => {\n        // Given\n        const expectedSelectOptions = [\n          { id: [ALL_VENUES_OPTION.id], value: ALL_VENUES_OPTION.displayName },\n          { id: [proVenues[0].id], value: proVenues[0].name },\n          { id: [proVenues[1].id], value: `${proVenues[1].offererName} - Offre numérique` },\n        ]\n\n        // When\n        renderOffers(props, store)\n\n        // Then\n        const defaultOption = screen.getByDisplayValue(expectedSelectOptions[0].value)\n        expect(defaultOption).toBeInTheDocument()\n\n        const firstVenueOption = await screen.findByRole('option', {\n          name: expectedSelectOptions[1].value,\n        })\n        expect(firstVenueOption).toBeInTheDocument()\n\n        const secondVenueOption = await screen.findByRole('option', {\n          name: expectedSelectOptions[2].value,\n        })\n        expect(secondVenueOption).toBeInTheDocument()\n      })\n\n      it('should render venue filter with given venue selected', async () => {\n        // Given\n        const expectedSelectOptions = [{ id: [proVenues[0].id], value: proVenues[0].name }]\n        jest.spyOn(props.query, 'parse').mockReturnValue({ lieu: proVenues[0].id })\n\n        // When\n        await renderOffers(props, store)\n\n        // Then\n        let venueSelect = screen.getByDisplayValue(expectedSelectOptions[0].value, {\n          selector: 'select[name=\"lieu\"]',\n        })\n        expect(venueSelect).toBeInTheDocument()\n      })\n\n      it('should render creation mode filter with default option selected', async () => {\n        // When\n        renderOffers(props, store)\n\n        // Then\n        expect(screen.getByDisplayValue('Tous les modes')).toBeInTheDocument()\n      })\n\n      it('should render creation mode filter with given creation mode selected', async () => {\n        // Given\n        jest.spyOn(props.query, 'parse').mockReturnValue({ creation: 'importee' })\n\n        // When\n        renderOffers(props, store)\n\n        // Then\n        expect(screen.getByDisplayValue('Importée')).toBeInTheDocument()\n      })\n\n      it('should allow user to select manual creation mode filter', () => {\n        // Given\n        renderOffers(props, store)\n        const creationModeSelect = screen.getByDisplayValue('Tous les modes')\n\n        // When\n        fireEvent.change(creationModeSelect, { target: { value: 'manual' } })\n\n        // Then\n        expect(screen.getByDisplayValue('Manuelle')).toBeInTheDocument()\n      })\n\n      it('should allow user to select imported creation mode filter', () => {\n        // Given\n        renderOffers(props, store)\n        const creationModeSelect = screen.getByDisplayValue('Tous les modes')\n\n        // When\n        fireEvent.change(creationModeSelect, { target: { value: 'imported' } })\n\n        // Then\n        expect(screen.getByDisplayValue('Importée')).toBeInTheDocument()\n      })\n\n      it('should display event period filter with no default option', async () => {\n        // When\n        await renderOffers(props, store)\n\n        // Then\n        const eventPeriodSelect = screen.queryAllByPlaceholderText('JJ/MM/AAAA')\n        expect(eventPeriodSelect).toHaveLength(2)\n      })\n\n      describe('status filters', () => {\n        it('should not display status filters modal', async () => {\n          // When\n          renderOffers(props, store)\n\n          // Then\n          expect(await screen.findByText('Statut')).toBeInTheDocument()\n          expect(screen.queryByText('Afficher les statuts')).not.toBeInTheDocument()\n          expect(screen.queryByLabelText('Tous')).not.toBeInTheDocument()\n          expect(screen.queryByLabelText('Active')).not.toBeInTheDocument()\n          expect(screen.queryByLabelText('Inactive')).not.toBeInTheDocument()\n          expect(screen.queryByLabelText('Épuisée')).not.toBeInTheDocument()\n          expect(screen.queryByLabelText('Expirée')).not.toBeInTheDocument()\n          expect(screen.queryByLabelText('Appliquer')).not.toBeInTheDocument()\n          expect(screen.queryByLabelText('Validation en attente')).not.toBeInTheDocument()\n          expect(screen.queryByLabelText('Refusée')).not.toBeInTheDocument()\n        })\n\n        it('should display status filters with \"Tous\" as default value when clicking on \"Statut\" filter icon', async () => {\n          // Given\n          renderOffers(props, store)\n\n          // When\n          fireEvent.click(await screen.findByAltText('Afficher ou masquer le filtre par statut'))\n\n          // Then\n          expect(screen.queryByText('Afficher les statuts')).toBeInTheDocument()\n          expect(screen.getByLabelText('Tous')).toBeChecked()\n          expect(screen.getByLabelText('Active')).not.toBeChecked()\n          expect(screen.getByLabelText('Inactive')).not.toBeChecked()\n          expect(screen.getByLabelText('Épuisée')).not.toBeChecked()\n          expect(screen.getByLabelText('Expirée')).not.toBeChecked()\n          expect(screen.getByLabelText('Validation en attente')).not.toBeChecked()\n          expect(screen.getByLabelText('Refusée')).not.toBeChecked()\n          expect(screen.queryByText('Appliquer', { selector: 'button' })).toBeInTheDocument()\n        })\n\n        it('should filter offers given status filter when clicking on \"Appliquer\"', async () => {\n          // Given\n          renderOffers(props, store)\n          fireEvent.click(await screen.findByAltText('Afficher ou masquer le filtre par statut'))\n          fireEvent.click(screen.getByLabelText('Expirée'))\n\n          // When\n          fireEvent.click(screen.getByText('Appliquer'))\n\n          // Then\n          expect(pcapi.loadFilteredOffers).toHaveBeenLastCalledWith({\n            creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n            nameOrIsbn: '',\n            offererId: DEFAULT_SEARCH_FILTERS.offererId,\n            venueId: DEFAULT_SEARCH_FILTERS.venueId,\n            typeId: DEFAULT_SEARCH_FILTERS.typeId,\n            periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n            periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n            status: 'EXPIRED',\n          })\n        })\n\n        it('should hide status filters when clicking outside the modal', async () => {\n          // Given\n          renderOffers(props, store)\n          fireEvent.click(await screen.findByAltText('Afficher ou masquer le filtre par statut'))\n\n          // When\n          fireEvent.click(screen.getByRole('heading', { name: 'Rechercher une offre', level: 3 }))\n\n          // Then\n          expect(screen.queryByText('Afficher les statuts')).toBeNull()\n        })\n\n        it('should indicate that no offers match selected filters', async () => {\n          // Given\n          pcapi.loadFilteredOffers.mockResolvedValueOnce(offersRecap).mockResolvedValueOnce([])\n          renderOffers(props, store)\n\n          // When\n          fireEvent.click(await screen.findByAltText('Afficher ou masquer le filtre par statut'))\n          fireEvent.click(screen.getByLabelText('Expirée'))\n          fireEvent.click(screen.getByText('Appliquer'))\n\n          // Then\n          const noOffersForSearchFiltersText = await screen.findByText(\n            'Aucune offre trouvée pour votre recherche'\n          )\n          expect(noOffersForSearchFiltersText).toBeInTheDocument()\n        })\n\n        it('should indicate that user has no offers yet', async () => {\n          // Given\n          pcapi.loadFilteredOffers.mockResolvedValue([])\n\n          // When\n          await renderOffers(props, store)\n\n          // Then\n          const noOffersText = await screen.findByText(\"Vous n’avez pas encore créé d’offre.\")\n          expect(noOffersText).toBeInTheDocument()\n        })\n      })\n\n      describe('when user is admin', () => {\n        beforeEach(() => {\n          props.currentUser.isAdmin = true\n        })\n\n        describe('status filter can only be used with an offerer or a venue filter for performance reasons', () => {\n          it('should disable status filters when no venue nor offerer filter is selected', async () => {\n            // When\n            renderOffers(props, store)\n\n            // Then\n            const statusFiltersIcon = await screen.findByAltText(\n              'Afficher ou masquer le filtre par statut'\n            )\n            expect(statusFiltersIcon.closest('button')).toBeDisabled()\n          })\n\n          it('should disable status filters when no venue filter is selected, even if one venue filter is currently applied', async () => {\n            // Given\n            props.query.parse.mockReturnValueOnce({ lieu: 'JI' })\n            renderOffers(props, store)\n\n            // When\n            fireEvent.change(await screen.findByDisplayValue('Ma venue'), {\n              target: { value: 'all' },\n            })\n\n            // Then\n            const statusFiltersIcon = screen.getByAltText(\n              'Afficher ou masquer le filtre par statut'\n            )\n            expect(statusFiltersIcon.closest('button')).toBeDisabled()\n          })\n\n          it('should reset and disable status filter when venue filter is deselected', async () => {\n            // Given\n            const { id: venueId, name: venueName } = proVenues[0]\n            props.query.parse.mockReturnValueOnce({ lieu: venueId, statut: 'inactive' })\n            await renderOffers(props, store)\n            fireEvent.change(screen.getByDisplayValue(venueName), {\n              target: { value: ALL_VENUES },\n            })\n\n            // When\n            await fireEvent.click(screen.getByText('Lancer la recherche'))\n\n            // Then\n            const statusFiltersIcon = screen.getByAltText(\n              'Afficher ou masquer le filtre par statut'\n            )\n            expect(statusFiltersIcon.closest('button')).toBeDisabled()\n            expect(pcapi.loadFilteredOffers).toHaveBeenLastCalledWith({\n              nameOrIsbn: DEFAULT_SEARCH_FILTERS.nameOrIsbn,\n              venueId: DEFAULT_SEARCH_FILTERS.venueId,\n              typeId: DEFAULT_SEARCH_FILTERS.typeId,\n              offererId: DEFAULT_SEARCH_FILTERS.offererId,\n              status: DEFAULT_SEARCH_FILTERS.status,\n              creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n              periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n              periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n            })\n          })\n\n          it('should not reset or disable status filter when venue filter is deselected while offerer filter is applied', async () => {\n            // Given\n            const { id: venueId, name: venueName } = proVenues[0]\n            props.query.parse.mockReturnValueOnce({\n              lieu: venueId,\n              statut: 'inactive',\n              structure: 'EF',\n            })\n            await renderOffers(props, store)\n            fireEvent.change(screen.getByDisplayValue(venueName), {\n              target: { value: ALL_VENUES },\n            })\n\n            // When\n            await fireEvent.click(screen.getByText('Lancer la recherche'))\n\n            // Then\n            const statusFiltersIcon = screen.getByAltText(\n              'Afficher ou masquer le filtre par statut'\n            )\n            expect(statusFiltersIcon.closest('button')).not.toBeDisabled()\n            expect(pcapi.loadFilteredOffers).toHaveBeenLastCalledWith({\n              nameOrIsbn: DEFAULT_SEARCH_FILTERS.nameOrIsbn,\n              venueId: DEFAULT_SEARCH_FILTERS.venueId,\n              typeId: DEFAULT_SEARCH_FILTERS.typeId,\n              offererId: 'EF',\n              status: 'INACTIVE',\n              creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n              periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n              periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n            })\n          })\n\n          it('should reset and disable status filter when offerer filter is removed', async () => {\n            // Given\n            const offerer = { name: 'La structure', id: 'EF' }\n            props.getOfferer.mockResolvedValueOnce(offerer)\n            props.query.parse.mockReturnValueOnce({ structure: offerer.id, statut: 'inactive' })\n            await renderOffers(props, store)\n\n            // When\n            await fireEvent.click(screen.getByAltText('Supprimer le filtre par structure'))\n\n            // Then\n            const statusFiltersIcon = screen.getByAltText(\n              'Afficher ou masquer le filtre par statut'\n            )\n            expect(statusFiltersIcon.closest('button')).toBeDisabled()\n            expect(pcapi.loadFilteredOffers).toHaveBeenLastCalledWith({\n              nameOrIsbn: DEFAULT_SEARCH_FILTERS.nameOrIsbn,\n              venueId: DEFAULT_SEARCH_FILTERS.venueId,\n              typeId: DEFAULT_SEARCH_FILTERS.typeId,\n              offererId: DEFAULT_SEARCH_FILTERS.offererId,\n              status: DEFAULT_SEARCH_FILTERS.status,\n              creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n              periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n              periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n            })\n          })\n\n          it('should not reset or disable status filter when offerer filter is removed while venue filter is applied', async () => {\n            // Given\n            const { id: venueId } = proVenues[0]\n            const offerer = { name: 'La structure', id: 'EF' }\n            props.getOfferer.mockResolvedValueOnce(offerer)\n            props.query.parse.mockReturnValueOnce({\n              lieu: venueId,\n              statut: 'inactive',\n              structure: offerer.id,\n            })\n            await renderOffers(props, store)\n\n            // When\n            await fireEvent.click(screen.getByAltText('Supprimer le filtre par structure'))\n\n            // Then\n            const statusFiltersIcon = screen.getByAltText(\n              'Afficher ou masquer le filtre par statut'\n            )\n            expect(statusFiltersIcon.closest('button')).not.toBeDisabled()\n            expect(pcapi.loadFilteredOffers).toHaveBeenLastCalledWith({\n              nameOrIsbn: DEFAULT_SEARCH_FILTERS.nameOrIsbn,\n              venueId: venueId,\n              typeId: DEFAULT_SEARCH_FILTERS.typeId,\n              offererId: DEFAULT_SEARCH_FILTERS.offererId,\n              status: 'INACTIVE',\n              creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n              periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n              periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n            })\n          })\n\n          it('should enable status filters when venue is selected but filter is not applied', async () => {\n            // Given\n            renderOffers(props, store)\n            const venueOptionToSelect = await screen.findByRole('option', {\n              name: proVenues[0].name,\n            })\n\n            // When\n            userEvent.selectOptions(screen.getByLabelText('Lieu'), venueOptionToSelect)\n\n            // Then\n            const statusFiltersIcon = screen.getByAltText(\n              'Afficher ou masquer le filtre par statut'\n            )\n            expect(statusFiltersIcon.closest('button')).not.toBeDisabled()\n          })\n\n          it('should enable status filters when venue filter is applied', async () => {\n            // Given\n            props.query.parse.mockReturnValueOnce({ lieu: 'IJ' })\n\n            // When\n            renderOffers(props, store)\n\n            // Then\n            const statusFiltersIcon = await screen.findByAltText(\n              'Afficher ou masquer le filtre par statut'\n            )\n            expect(statusFiltersIcon.closest('button')).not.toBeDisabled()\n          })\n\n          it('should enable status filters when offerer filter is applied', async () => {\n            // Given\n            props.query.parse.mockReturnValueOnce({ structure: 'A4' })\n\n            // When\n            renderOffers(props, store)\n\n            // Then\n            const statusFiltersIcon = await screen.findByAltText(\n              'Afficher ou masquer le filtre par statut'\n            )\n            expect(statusFiltersIcon.closest('button')).not.toBeDisabled()\n          })\n        })\n\n        describe('select all offers checkbox', () => {\n          it('should disable select all checkbox when no venue nor offerer filter is applied', async () => {\n            // When\n            renderOffers(props, store)\n\n            // Then\n            const selectAllOffersCheckbox = await screen.findByLabelText('Tout sélectionner')\n            expect(selectAllOffersCheckbox).toBeDisabled()\n          })\n\n          it('should not disable select all checkbox when no venue filter is selected but one is currently applied', async () => {\n            // Given\n            props.query.parse.mockReturnValueOnce({ lieu: 'JI' })\n            renderOffers(props, store)\n\n            // When\n            fireEvent.change(await screen.findByDisplayValue('Ma venue'), {\n              target: { value: 'all' },\n            })\n\n            // Then\n            const selectAllOffersCheckbox = screen.getByLabelText('Tout sélectionner')\n            expect(selectAllOffersCheckbox).not.toBeDisabled()\n          })\n\n          it('should disable select all checkbox when venue filter is selected but not applied', async () => {\n            // Given\n            renderOffers(props, store)\n\n            // When\n            fireEvent.change(await screen.findByDisplayValue('Tous les lieux'), {\n              target: { value: 'JI' },\n            })\n\n            // Then\n            const selectAllOffersCheckbox = screen.getByLabelText('Tout sélectionner')\n            expect(selectAllOffersCheckbox).toBeDisabled()\n          })\n\n          it('should enable select all checkbox when venue filter is applied', async () => {\n            // Given\n            props.query.parse.mockReturnValueOnce({ lieu: 'IJ' })\n\n            // When\n            renderOffers(props, store)\n\n            // Then\n            const selectAllOffersCheckbox = await screen.findByLabelText('Tout sélectionner')\n            expect(selectAllOffersCheckbox).not.toBeDisabled()\n          })\n\n          it('should enable select all checkbox when offerer filter is applied', async () => {\n            // Given\n            props.query.parse.mockReturnValueOnce({ structure: 'A4' })\n\n            // When\n            renderOffers(props, store)\n\n            // Then\n            const selectAllOffersCheckbox = await screen.findByLabelText('Tout sélectionner')\n            expect(selectAllOffersCheckbox).not.toBeDisabled()\n          })\n        })\n      })\n    })\n\n    describe('when fraud detection', () => {\n      it('should disabled checkbox when offer is rejected or pending for validation', async () => {\n        // Given\n        props.currentUser.isAdmin = false\n        const offers = [\n          offerFactory({\n            isActive: false,\n            status: 'REJECTED',\n          }),\n          offerFactory({\n            isActive: true,\n            status: 'PENDING',\n          }),\n          offerFactory({\n            isActive: true,\n            status: 'ACTIVE',\n          }),\n        ]\n        pcapi.loadFilteredOffers.mockResolvedValue(offers)\n\n        // When\n        renderOffers(props, store)\n\n        // Then\n        await screen.findByText(offers[0].name)\n        expect(screen.queryByTestId(`select-offer-${offers[0].id}`)).toBeDisabled()\n        expect(screen.queryByTestId(`select-offer-${offers[1].id}`)).toBeDisabled()\n        expect(screen.queryByTestId(`select-offer-${offers[2].id}`)).toBeEnabled()\n      })\n    })\n  })\n\n  describe('on click on search button', () => {\n    it('should load offers with default filters when no changes where made', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      // When\n      await fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledWith({\n        nameOrIsbn: DEFAULT_SEARCH_FILTERS.nameOrIsbn,\n        venueId: DEFAULT_SEARCH_FILTERS.venueId,\n        typeId: DEFAULT_SEARCH_FILTERS.typeId,\n        offererId: DEFAULT_SEARCH_FILTERS.offererId,\n        status: DEFAULT_SEARCH_FILTERS.status,\n        creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n        periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n        periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n      })\n    })\n\n    it('should load offers with written offer name filter', async () => {\n      // Given\n      renderOffers(props, store)\n      fireEvent.change(screen.getByPlaceholderText('Rechercher par nom d’offre ou par ISBN'), {\n        target: { value: 'Any word' },\n      })\n\n      // When\n      fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledWith({\n        nameOrIsbn: 'Any word',\n        venueId: DEFAULT_SEARCH_FILTERS.venueId,\n        typeId: DEFAULT_SEARCH_FILTERS.typeId,\n        offererId: DEFAULT_SEARCH_FILTERS.offererId,\n        status: DEFAULT_SEARCH_FILTERS.status,\n        creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n        periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n        periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n      })\n    })\n\n    it('should load offers with selected venue filter', async () => {\n      // Given\n      await renderOffers(props, store)\n      const firstVenueOption = await screen.findByRole('option', { name: proVenues[0].name })\n      const venueSelect = screen.getByLabelText('Lieu')\n      userEvent.selectOptions(venueSelect, firstVenueOption)\n\n      // When\n      fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledWith({\n        venueId: proVenues[0].id,\n        nameOrIsbn: DEFAULT_SEARCH_FILTERS.nameOrIsbn,\n        typeId: DEFAULT_SEARCH_FILTERS.typeId,\n        offererId: DEFAULT_SEARCH_FILTERS.offererId,\n        status: DEFAULT_SEARCH_FILTERS.status,\n        creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n        periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n        periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n      })\n    })\n\n    it('should load offers with selected type filter', async () => {\n      // Given\n      await renderOffers(props, store)\n      const firstTypeOption = await screen.findByRole('option', { name: offerTypes[0].proLabel })\n      const typeSelect = screen.getByDisplayValue(ALL_TYPES_OPTION.displayName, {\n        selector: 'select[name=\"type\"]',\n      })\n      userEvent.selectOptions(typeSelect, firstTypeOption)\n\n      // When\n      fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenLastCalledWith({\n        venueId: DEFAULT_SEARCH_FILTERS.venueId,\n        nameOrIsbn: DEFAULT_SEARCH_FILTERS.nameOrIsbn,\n        typeId: offerTypes[0].value,\n        offererId: DEFAULT_SEARCH_FILTERS.offererId,\n        status: DEFAULT_SEARCH_FILTERS.status,\n        creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n        periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n        periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n      })\n    })\n\n    it('should load offers with selected creation mode filter', () => {\n      // Given\n      renderOffers(props, store)\n      const creationModeSelect = screen.getByDisplayValue(DEFAULT_CREATION_MODE.displayName)\n      const importedCreationMode = CREATION_MODES_FILTERS[1].id\n      fireEvent.change(creationModeSelect, { target: { value: importedCreationMode } })\n\n      // When\n      fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenLastCalledWith({\n        creationMode: 'imported',\n        nameOrIsbn: DEFAULT_SEARCH_FILTERS.nameOrIsbn,\n        venueId: DEFAULT_SEARCH_FILTERS.venueId,\n        typeId: DEFAULT_SEARCH_FILTERS.typeId,\n        offererId: DEFAULT_SEARCH_FILTERS.offererId,\n        status: DEFAULT_SEARCH_FILTERS.status,\n        periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n        periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n      })\n    })\n\n    it('should load offers with selected period beginning date', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      fireEvent.click(screen.getAllByPlaceholderText('JJ/MM/AAAA')[0])\n      fireEvent.click(screen.getByText('25'))\n\n      // When\n      fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenLastCalledWith({\n        venueId: DEFAULT_SEARCH_FILTERS.venueId,\n        nameOrIsbn: DEFAULT_SEARCH_FILTERS.nameOrIsbn,\n        typeId: DEFAULT_SEARCH_FILTERS.typeId,\n        offererId: DEFAULT_SEARCH_FILTERS.offererId,\n        status: DEFAULT_SEARCH_FILTERS.status,\n        creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n        periodBeginningDate: '2020-12-25T00:00:00Z',\n        periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n      })\n    })\n\n    it('should load offers with selected period ending date', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      fireEvent.click(screen.getAllByPlaceholderText('JJ/MM/AAAA')[1])\n      fireEvent.click(screen.getByText('27'))\n\n      // When\n      fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenLastCalledWith({\n        venueId: DEFAULT_SEARCH_FILTERS.venueId,\n        nameOrIsbn: DEFAULT_SEARCH_FILTERS.nameOrIsbn,\n        typeId: DEFAULT_SEARCH_FILTERS.typeId,\n        offererId: DEFAULT_SEARCH_FILTERS.offererId,\n        status: DEFAULT_SEARCH_FILTERS.status,\n        creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n        periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n        periodEndingDate: '2020-12-27T23:59:59Z',\n      })\n    })\n  })\n\n  describe('on click on event filter ending date', () => {\n    it('should properly format received date', async () => {\n      // Given\n      renderOffers(props, store)\n      fireEvent.change(screen.getByPlaceholderText('Rechercher par nom d’offre ou par ISBN'), {\n        target: { value: 'Any word' },\n      })\n\n      // When\n      await fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledWith({\n        nameOrIsbn: 'Any word',\n        venueId: DEFAULT_SEARCH_FILTERS.venueId,\n        typeId: DEFAULT_SEARCH_FILTERS.typeId,\n        offererId: DEFAULT_SEARCH_FILTERS.offererId,\n        status: DEFAULT_SEARCH_FILTERS.status,\n        creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n        periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n        periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n      })\n    })\n\n    it('should set new date value on filters', async () => {\n      // Given\n      renderOffers(props, store)\n      fireEvent.change(screen.getByPlaceholderText('Rechercher par nom d’offre ou par ISBN'), {\n        target: { value: 'Any word' },\n      })\n\n      // When\n      await fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledWith({\n        nameOrIsbn: 'Any word',\n        venueId: DEFAULT_SEARCH_FILTERS.venueId,\n        typeId: DEFAULT_SEARCH_FILTERS.typeId,\n        offererId: DEFAULT_SEARCH_FILTERS.offererId,\n        status: DEFAULT_SEARCH_FILTERS.status,\n        creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n        periodBeginningDate: DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n        periodEndingDate: DEFAULT_SEARCH_FILTERS.periodEndingDate,\n      })\n    })\n  })\n\n  describe('button to create an offer', () => {\n    it('should not be displayed when user is an admin', () => {\n      // Given\n      props.currentUser.isAdmin = true\n\n      // When\n      renderOffers(props, store)\n\n      // Then\n      expect(screen.queryByText('Créer une offre')).toBeNull()\n    })\n\n    it('should be displayed when user is not an admin', () => {\n      // Given\n      props.currentUser.isAdmin = false\n\n      // When\n      renderOffers(props, store)\n\n      // Then\n      const createLink = queryByTextTrimHtml(screen, 'Créer une offre', {\n        selector: 'a',\n        leafOnly: false,\n      })\n      expect(createLink).not.toBeNull()\n    })\n  })\n\n  describe('url query params', () => {\n    it('should have page value when page value is not first page', async () => {\n      // Given\n      offersRecap = Array.from({ length: 11 }, offerFactory)\n      pcapi.loadFilteredOffers.mockResolvedValueOnce(offersRecap)\n      renderOffers(props, store)\n      const nextPageIcon = await screen.findByAltText('Aller à la page suivante')\n\n      // When\n      fireEvent.click(nextPageIcon)\n\n      // Then\n      expect(props.query.change).toHaveBeenLastCalledWith({\n        categorie: null,\n        creation: null,\n        lieu: null,\n        'nom-ou-isbn': null,\n        page: 2,\n        'periode-evenement-debut': null,\n        'periode-evenement-fin': null,\n        statut: null,\n        structure: null,\n      })\n    })\n\n    it('should have offer name value when name search value is not an empty string', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      // When\n      fireEvent.change(screen.getByPlaceholderText('Rechercher par nom d’offre ou par ISBN'), {\n        target: { value: 'AnyWord' },\n      })\n      await fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(props.query.change).toHaveBeenCalledWith({\n        categorie: null,\n        creation: null,\n        lieu: null,\n        'nom-ou-isbn': 'AnyWord',\n        page: null,\n        'periode-evenement-debut': null,\n        'periode-evenement-fin': null,\n        statut: null,\n        structure: null,\n      })\n    })\n\n    it('should store search value', async () => {\n      // Given\n      await renderOffers(props, store)\n      const searchInput = screen.getByPlaceholderText('Rechercher par nom d’offre ou par ISBN')\n\n      // When\n      fireEvent.change(searchInput, { target: { value: 'search string' } })\n      await fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledWith({\n        venueId: ALL_VENUES,\n        typeId: ALL_TYPES,\n        nameOrIsbn: 'search string',\n        offererId: ALL_OFFERERS,\n        status: ALL_STATUS,\n        creationMode: DEFAULT_CREATION_MODE.id,\n        periodBeginningDate: ALL_EVENT_PERIODS,\n        periodEndingDate: ALL_EVENT_PERIODS,\n      })\n    })\n\n    it('should have offer name value be removed when name search value is an empty string', async () => {\n      // Given\n      await renderOffers(props, store)\n\n      // When\n      fireEvent.change(screen.getByPlaceholderText('Rechercher par nom d’offre ou par ISBN'), {\n        target: { value: ALL_OFFERS },\n      })\n      await fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(props.query.change).toHaveBeenCalledWith({\n        categorie: null,\n        creation: null,\n        lieu: null,\n        'nom-ou-isbn': null,\n        page: null,\n        'periode-evenement-debut': null,\n        'periode-evenement-fin': null,\n        statut: null,\n        structure: null,\n      })\n    })\n\n    it('should have venue value when user filters by venue', async () => {\n      // Given\n      await renderOffers(props, store)\n      const firstVenueOption = await screen.findByRole('option', { name: proVenues[0].name })\n      const venueSelect = screen.getByLabelText('Lieu')\n\n      // When\n      userEvent.selectOptions(venueSelect, firstVenueOption)\n      await fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(props.query.change).toHaveBeenCalledWith({\n        lieu: proVenues[0].id,\n        categorie: null,\n        creation: null,\n        'nom-ou-isbn': null,\n        page: null,\n        'periode-evenement-debut': null,\n        'periode-evenement-fin': null,\n        statut: null,\n        structure: null,\n      })\n    })\n\n    it('should have venue value be removed when user asks for all venues', async () => {\n      // Given\n      pcapi.loadTypes.mockResolvedValue([\n        { value: 'test_id_1', proLabel: 'My test value' },\n        { value: 'test_id_2', proLabel: 'My second test value' },\n      ])\n\n      await renderOffers(props, store)\n      const firstTypeOption = await screen.findByRole('option', { name: 'My test value' })\n      const typeSelect = screen.getByDisplayValue(ALL_TYPES_OPTION.displayName, {\n        selector: 'select[name=\"type\"]',\n      })\n\n      // When\n      userEvent.selectOptions(typeSelect, firstTypeOption)\n      await fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(props.query.change).toHaveBeenCalledWith({\n        categorie: 'test_id_1',\n        creation: null,\n        lieu: null,\n        'nom-ou-isbn': null,\n        page: null,\n        'periode-evenement-debut': null,\n        'periode-evenement-fin': null,\n        statut: null,\n        structure: null,\n      })\n    })\n\n    it('should have status value when user filters by status', async () => {\n      // Given\n      props.offers = [{ id: 'KE', availabilityMessage: 'Pas de stock', status: 'ACTIVE' }]\n      renderOffers(props, store)\n      fireEvent.click(await screen.findByAltText('Afficher ou masquer le filtre par statut'))\n      fireEvent.click(screen.getByLabelText('Épuisée'))\n\n      // When\n      await fireEvent.click(screen.getByText('Appliquer'))\n\n      // Then\n      expect(props.query.change).toHaveBeenLastCalledWith({\n        statut: 'epuisee',\n        categorie: null,\n        creation: null,\n        lieu: null,\n        'nom-ou-isbn': null,\n        page: null,\n        'periode-evenement-debut': null,\n        'periode-evenement-fin': null,\n        structure: null,\n      })\n    })\n\n    it('should have status value be removed when user ask for all status', async () => {\n      // Given\n      props.offers = [{ id: 'KE', availabilityMessage: 'Pas de stock', status: 'ACTIVE' }]\n      await renderOffers(props, store)\n      fireEvent.click(await screen.findByAltText('Afficher ou masquer le filtre par statut'))\n      fireEvent.click(screen.getByLabelText('Tous'))\n\n      // When\n      fireEvent.click(screen.getByText('Appliquer'))\n\n      // Then\n      expect(props.query.change).toHaveBeenLastCalledWith({\n        categorie: null,\n        creation: null,\n        lieu: null,\n        'nom-ou-isbn': null,\n        page: null,\n        'periode-evenement-debut': null,\n        'periode-evenement-fin': null,\n        statut: null,\n        structure: null,\n      })\n    })\n\n    it('should have offerer filter when user filters by offerer', async () => {\n      // Given\n      props.query.parse.mockReturnValueOnce({ structure: 'A4' })\n      props.getOfferer.mockResolvedValueOnce({ name: 'La structure' })\n\n      // When\n      renderOffers(props, store)\n\n      // Then\n      const offererFilter = await screen.findByText('La structure')\n      expect(offererFilter).toBeInTheDocument()\n    })\n\n    it('should have offerer value be removed when user removes offerer filter', async () => {\n      // Given\n      props.query.parse.mockReturnValueOnce({ structure: 'A4' })\n      props.getOfferer.mockResolvedValueOnce({ name: 'La structure' })\n      await renderOffers(props, store)\n\n      // When\n      await fireEvent.click(screen.getByAltText('Supprimer le filtre par structure'))\n\n      // Then\n      expect(screen.queryByText('La structure')).not.toBeInTheDocument()\n    })\n\n    it('should have creation mode value when user filters by creation mode', async () => {\n      // Given\n      renderOffers(props, store)\n\n      // When\n      fireEvent.change(screen.getByDisplayValue('Tous les modes'), {\n        target: { value: 'manual' },\n      })\n      await fireEvent.click(screen.getByText('Lancer la recherche'))\n\n      // Then\n      expect(props.query.change).toHaveBeenLastCalledWith({\n        creation: 'manuelle',\n        categorie: null,\n        lieu: null,\n        'nom-ou-isbn': null,\n        page: null,\n        'periode-evenement-debut': null,\n        'periode-evenement-fin': null,\n        statut: null,\n        structure: null,\n      })\n    })\n\n    it('should have creation mode value be removed when user ask for all creation modes', async () => {\n      // Given\n      renderOffers(props, store)\n      const searchButton = screen.getByText('Lancer la recherche')\n      fireEvent.change(screen.getByDisplayValue('Tous les modes'), {\n        target: { value: 'manual' },\n      })\n      fireEvent.click(searchButton)\n\n      // When\n      fireEvent.change(screen.getByDisplayValue('Manuelle'), {\n        target: { value: DEFAULT_CREATION_MODE.id },\n      })\n      await fireEvent.click(searchButton)\n\n      // Then\n      expect(props.query.change).toHaveBeenLastCalledWith({\n        categorie: null,\n        creation: null,\n        lieu: null,\n        'nom-ou-isbn': null,\n        page: null,\n        'periode-evenement-debut': null,\n        'periode-evenement-fin': null,\n        statut: null,\n        structure: null,\n      })\n    })\n  })\n\n  describe('page navigation', () => {\n    it('should display next page when clicking on right arrow', async () => {\n      // Given\n      const offers = Array.from({ length: 11 }, offerFactory)\n      pcapi.loadFilteredOffers.mockResolvedValueOnce(offers)\n      renderOffers(props, store)\n      const nextIcon = await screen.findByAltText('Aller à la page suivante')\n\n      // When\n      await fireEvent.click(nextIcon)\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledTimes(1)\n      expect(await screen.findByText(offers[10].name)).toBeInTheDocument()\n      expect(screen.queryByText(offers[0].name)).not.toBeInTheDocument()\n    })\n\n    it('should display previous page when clicking on left arrow', async () => {\n      // Given\n      const offers = Array.from({ length: 11 }, offerFactory)\n      pcapi.loadFilteredOffers.mockResolvedValueOnce(offers)\n      renderOffers(props, store)\n      const nextIcon = await screen.findByAltText('Aller à la page suivante')\n      const previousIcon = await screen.findByAltText('Aller à la page précédente')\n      await fireEvent.click(nextIcon)\n\n      // When\n      await fireEvent.click(previousIcon)\n\n      // Then\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledTimes(1)\n      expect(await screen.findByText(offers[0].name)).toBeInTheDocument()\n      expect(screen.queryByText(offers[10].name)).not.toBeInTheDocument()\n    })\n\n    it('should not be able to click on previous arrow when being on the first page', async () => {\n      // Given\n      props.query.parse.mockReturnValue({ page: DEFAULT_PAGE })\n\n      // When\n      renderOffers(props, store)\n\n      // Then\n      const previousIcon = await screen.findByAltText('Aller à la page précédente')\n      expect(previousIcon.closest('button')).toBeDisabled()\n    })\n\n    it('should not be able to click on next arrow when being on the last page', async () => {\n      // Given\n      pcapi.loadFilteredOffers.mockResolvedValueOnce(offersRecap)\n\n      // When\n      renderOffers(props, store)\n\n      // Then\n      const nextIcon = await screen.findByAltText('Aller à la page suivante')\n      expect(nextIcon.closest('button')).toBeDisabled()\n    })\n\n    it('should not inform user there is more offers to fetch when less than 201', () => {\n      // Given\n      pcapi.loadFilteredOffers.mockResolvedValueOnce(offersRecap)\n\n      // When\n      renderOffers(props, store)\n\n      // Then\n      expect(props.showInformationNotification).not.toHaveBeenCalledWith(\n        'L’affichage des offres a été limité à 200 offres. Vous pouvez modifier les filtres pour affiner votre recherche.'\n      )\n    })\n\n    describe('when 201 offers are fetched', () => {\n      beforeEach(() => {\n        offersRecap = Array.from({ length: 201 }, offerFactory)\n      })\n\n      it('should have max number page of 20', async () => {\n        // Given\n        pcapi.loadFilteredOffers.mockResolvedValueOnce(offersRecap)\n\n        // When\n        renderOffers(props, store)\n\n        // Then\n        expect(await screen.findByText('Page 1/20')).toBeInTheDocument()\n      })\n\n      it('should not display the 201st offer', async () => {\n        // Given\n        pcapi.loadFilteredOffers.mockResolvedValueOnce(offersRecap)\n        renderOffers(props, store)\n        const nextIcon = await screen.findByAltText('Aller à la page suivante')\n\n        // When\n        for (let i = 1; i < 21; i++) {\n          fireEvent.click(nextIcon)\n        }\n\n        // Then\n        expect(screen.getByText(offersRecap[199].name)).toBeInTheDocument()\n        expect(screen.queryByText(offersRecap[200].name)).not.toBeInTheDocument()\n      })\n\n      it('should inform user on the last page there is more offers to fetch', async () => {\n        // Given\n        pcapi.loadFilteredOffers.mockResolvedValueOnce(offersRecap)\n        renderOffers(props, store)\n        const nextIcon = await screen.findByAltText('Aller à la page suivante')\n\n        // When\n        for (let i = 1; i < 20; i++) {\n          fireEvent.click(nextIcon)\n        }\n\n        // Then\n        expect(props.showInformationNotification).toHaveBeenCalledWith(\n          'L’affichage des offres a été limité à 200 offres. Vous pouvez modifier les filtres pour affiner votre recherche.'\n        )\n      })\n    })\n  })\n\n  describe('offers selection', () => {\n    it('should display actionsBar when at least one offer is selected', async () => {\n      // Given\n      renderWithStyles(\n        <Provider store={store}>\n          <MemoryRouter>\n            <Offers {...props} />\n          </MemoryRouter>\n        </Provider>,\n        {\n          stylesheet: 'components/layout/ActionsBarPortal/_ActionsBarPortal',\n        }\n      )\n\n      const actionBar = await screen.findByTestId('actions-bar')\n      expect(actionBar).not.toBeVisible()\n\n      // When\n      const checkbox = await screen.findByTestId(`select-offer-${offersRecap[0].id}`)\n      await fireEvent.click(checkbox)\n\n      // Then\n      expect(actionBar).toBeVisible()\n\n      // When\n      await fireEvent.click(checkbox)\n\n      // Then\n      expect(actionBar).not.toBeVisible()\n    })\n\n    describe('on click on select all offers checkbox', () => {\n      it('should display \"Tout désélectionner\" when initial label was \"Tout sélectionner\"', async () => {\n        // Given\n        renderOffers(props, store)\n\n        // When\n        fireEvent.click(await screen.findByLabelText('Tout sélectionner'))\n\n        // Then\n        expect(screen.queryByLabelText('Tout désélectionner')).toBeInTheDocument()\n      })\n\n      it('should check all validated offers checkboxes', async () => {\n        // Given\n        const offers = [\n          offerFactory(),\n          offerFactory({\n            isFullyBooked: true,\n          }),\n          offerFactory({\n            isActive: false,\n            status: 'REJECTED',\n          }),\n          offerFactory({\n            status: 'PENDING',\n          }),\n        ]\n        pcapi.loadFilteredOffers.mockResolvedValue(offers)\n        pcapi.loadFilteredOffers.mockResolvedValue(offers)\n\n        renderOffers(props, store)\n\n        const firstOfferCheckbox = await screen.findByTestId(`select-offer-${offers[0].id}`)\n        const secondOfferCheckbox = await screen.findByTestId(`select-offer-${offers[1].id}`)\n        const thirdOfferCheckbox = await screen.findByTestId(`select-offer-${offers[2].id}`)\n        const fourthOfferCheckbox = await screen.findByTestId(`select-offer-${offers[3].id}`)\n\n        // When\n        fireEvent.click(screen.getByLabelText('Tout sélectionner'))\n\n        // Then\n        expect(firstOfferCheckbox).toBeChecked()\n        expect(secondOfferCheckbox).toBeChecked()\n        expect(thirdOfferCheckbox).not.toBeChecked()\n        expect(fourthOfferCheckbox).not.toBeChecked()\n\n        // When\n        fireEvent.click(screen.getByLabelText('Tout désélectionner'))\n\n        // Then\n        expect(firstOfferCheckbox).not.toBeChecked()\n        expect(secondOfferCheckbox).not.toBeChecked()\n        expect(thirdOfferCheckbox).not.toBeChecked()\n        expect(fourthOfferCheckbox).not.toBeChecked()\n      })\n    })\n  })\n\n  describe('should reset filters', () => {\n    it('when clicking on \"afficher toutes les offres\" when no offers are displayed', async () => {\n      pcapi.loadFilteredOffers.mockResolvedValueOnce(offersRecap).mockResolvedValueOnce([])\n      await renderOffers(props, store)\n      const firstVenueOption = await screen.findByRole('option', { name: proVenues[0].name })\n      const venueSelect = screen.getByDisplayValue(ALL_VENUES_OPTION.displayName, {\n        selector: 'select[name=\"lieu\"]',\n      })\n      userEvent.selectOptions(venueSelect, firstVenueOption)\n\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledTimes(1)\n      expect(pcapi.loadFilteredOffers).toHaveBeenNthCalledWith(1, {\n        ...DEFAULT_SEARCH_FILTERS,\n      })\n\n      props.offers = []\n      fireEvent.click(screen.getByText('Lancer la recherche'))\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledTimes(2)\n      expect(pcapi.loadFilteredOffers).toHaveBeenNthCalledWith(2, {\n        ...DEFAULT_SEARCH_FILTERS,\n        venueId: proVenues[0].id,\n      })\n\n      await screen.findByText('Aucune offre trouvée pour votre recherche')\n      fireEvent.click(screen.getByText('afficher toutes les offres'))\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledTimes(3)\n      expect(pcapi.loadFilteredOffers).toHaveBeenNthCalledWith(3, {\n        ...DEFAULT_SEARCH_FILTERS,\n      })\n    })\n\n    it('when clicking on \"Réinitialiser les filtres\"', async () => {\n      pcapi.loadFilteredOffers.mockResolvedValueOnce(offersRecap).mockResolvedValueOnce([])\n      await renderOffers(props, store)\n      const venueOptionToSelect = await screen.findByRole('option', { name: proVenues[0].name })\n      const venueSelect = screen.getByDisplayValue(ALL_VENUES_OPTION.displayName, {\n        selector: 'select[name=\"lieu\"]',\n      })\n      userEvent.selectOptions(venueSelect, venueOptionToSelect)\n\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledTimes(1)\n      expect(pcapi.loadFilteredOffers).toHaveBeenNthCalledWith(1, {\n        ...DEFAULT_SEARCH_FILTERS,\n      })\n\n      props.offers = []\n      fireEvent.click(screen.getByText('Lancer la recherche'))\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledTimes(2)\n      expect(pcapi.loadFilteredOffers).toHaveBeenNthCalledWith(2, {\n        ...DEFAULT_SEARCH_FILTERS,\n        venueId: proVenues[0].id,\n      })\n\n      await fireEvent.click(screen.getByText('Réinitialiser les filtres'))\n      expect(pcapi.loadFilteredOffers).toHaveBeenCalledTimes(3)\n      expect(pcapi.loadFilteredOffers).toHaveBeenNthCalledWith(3, {\n        ...DEFAULT_SEARCH_FILTERS,\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/Offers/_constants.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/domain/__specs__/getProviderInfo.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/domain/__specs__/isAllocineOffer.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (60). Maximum allowed is 50.',
        line: 3,
        column: 35,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 62,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { isAllocineOffer } from '../localProvider'\n\ndescribe('src | isAllocineOffer', () => {\n  it('should return true if last provider name is Allociné', () => {\n    // given\n    const offer = {\n      id: 'AZER',\n      lastProvider: {\n        name: 'Allociné',\n      },\n    }\n\n    // when\n    const isOfferAllocineGenerated = isAllocineOffer(offer)\n\n    // then\n    expect(isOfferAllocineGenerated).toBe(true)\n  })\n\n  it('should return false if last provider name does not contain Allociné', () => {\n    // given\n    const offer = {\n      id: 'AZER',\n      lastProvider: {\n        name: 'Anyotherprovider',\n      },\n    }\n\n    // when\n    const isOfferAllocineGenerated = isAllocineOffer(offer)\n\n    // then\n    expect(isOfferAllocineGenerated).toBe(false)\n  })\n\n  it('should return false if last provider is null', () => {\n    // given\n    const offer = {\n      id: 'AZER',\n      lastProvider: null,\n    }\n\n    // when\n    const isOfferLibrairesGenerated = isAllocineOffer(offer)\n\n    // then\n    expect(isOfferLibrairesGenerated).toBe(false)\n  })\n\n  it('should return false if last provider is undefined', () => {\n    // given\n    const offer = {\n      id: 'AZER',\n    }\n\n    // when\n    const isOfferLibrairesGenerated = isAllocineOffer(offer)\n\n    // then\n    expect(isOfferLibrairesGenerated).toBe(false)\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/domain/__specs__/isOfferFromStockProvider.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/domain/getOffersCountToDisplay.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/domain/getProviderInfo.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (56). Maximum allowed is 50.',
        line: 1,
        column: 32,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 56,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "export const getProviderInfo = providerName => {\n  const providers = [\n    {\n      id: 'allociné',\n      icon: 'logo-allocine',\n      name: 'Allociné',\n    },\n    {\n      id: 'leslibraires.fr',\n      icon: 'logo-libraires',\n      name: 'Leslibraires.fr',\n    },\n    {\n      id: 'titelive',\n      icon: 'logo-titeLive',\n      name: 'Tite Live',\n    },\n    {\n      id: 'fnac',\n      icon: 'logo-fnac',\n      name: 'Fnac',\n    },\n    {\n      id: 'mollat',\n      icon: 'logo-cdi-bookshop',\n      name: 'Mollat',\n    },\n    {\n      id: 'cdi-bookshop',\n      icon: 'logo-cdi-bookshop',\n      name: 'CDI-Bookshop',\n    },\n    {\n      id: 'tmic-ellipses',\n      icon: 'logo-tmic-ellipses',\n      name: 'TMIC Ellipses',\n    },\n    {\n      id: 'praxiel',\n      icon: 'logo-praxiel',\n      name: 'Praxiel',\n    },\n    {\n      id: 'librisoft',\n      icon: 'logo-librisoft',\n      name: 'Librisoft',\n    },\n    {\n      id: 'decitre',\n      icon: 'logo-decitre',\n      name: 'Decitre',\n    },\n  ]\n\n  return providers.find(providerInfo => providerName.toLowerCase().startsWith(providerInfo.id))\n}\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/domain/isOfferDisabled.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/domain/localProvider.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/utils/__specs__/computeOffersUrl.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/utils/computeOffersUrl.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Offers/utils/queryParamsFromOfferer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Reimbursements/Reimbursements.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Reimbursements/ReimbursementsContainer.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Reimbursements/ReimbursementsWithFilters.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Reimbursements/__specs__/ReimbursementWithFilters.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Reimbursements/__specs__/Reimbursements.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/SetPassword/SetPassword.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/SetPassword/SetPasswordContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/SetPassword/__specs__/SetPassword.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (163). Maximum allowed is 150.',
        line: 39,
        column: 52,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 201,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { render, screen, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { createBrowserHistory } from 'history'\nimport React from 'react'\nimport '@testing-library/jest-dom'\nimport { act } from 'react-dom/test-utils'\nimport { Provider } from 'react-redux'\nimport { Router, Route } from 'react-router'\n\nimport NotificationContainer from 'components/layout/Notification/NotificationContainer'\nimport * as pcapi from 'repository/pcapi/pcapi'\nimport { configureTestStore } from 'store/testUtils'\n\nimport {\n  INVALID_FORM_MESSAGE,\n  UNKNOWN_ERROR_MESSAGE,\n  DIFFERENT_PASSWORDS_ERROR_MESSAGE,\n} from '../SetPassword'\nimport SetPasswordContainer from '../SetPasswordContainer'\n\njest.mock('repository/pcapi/pcapi', () => ({\n  setPassword: jest.fn(),\n}))\n\nconst renderSetPassword = (store, history) =>\n  render(\n    <Provider store={store}>\n      <Router history={history}>\n        <Route path=\"/creation-de-mot-de-passe/:token?\">\n          <>\n            <SetPasswordContainer />\n            <NotificationContainer />\n          </>\n        </Route>\n      </Router>\n    </Provider>\n  )\n\ndescribe('src | components | pages | SetPassword', () => {\n  let store, history, historyPushSpy\n  beforeEach(() => {\n    store = configureTestStore()\n    history = createBrowserHistory()\n    history.push('/creation-de-mot-de-passe/AT3VXY5EB')\n    historyPushSpy = jest.spyOn(history, 'push')\n  })\n  it('should redirect the user to structure page', async () => {\n    // Given\n\n    store = configureTestStore({\n      data: { users: [{ publicName: 'Bosetti' }] },\n    })\n    renderSetPassword(store, history)\n\n    // Then\n    expect(historyPushSpy).toHaveBeenCalledWith('/accueil')\n  })\n\n  it('should render the default page without redirect', async () => {\n    // Given\n    renderSetPassword(store, history)\n\n    // Then\n    expect(screen.getByText('Bienvenue sur l’espace dédié aux acteurs culturels')).toBeVisible()\n  })\n\n  it('should display form validation error on wrong confirmation', async () => {\n    // Given\n    renderSetPassword(store, history)\n    const passwordInput = screen.getByLabelText('Mot de passe')\n    const confirmationPasswordInput = screen.getByLabelText('Confirmer le mot de passe')\n    const submitButton = screen.getByText('Envoyer', { selector: 'button' })\n\n    // When\n    userEvent.type(passwordInput, 'password1')\n    userEvent.type(confirmationPasswordInput, 'password2')\n    await act(async () => userEvent.click(submitButton))\n\n    // Then\n    expect(screen.getByText(DIFFERENT_PASSWORDS_ERROR_MESSAGE)).toBeVisible()\n  })\n\n  it('should send the right data', async () => {\n    // Given\n    history = createBrowserHistory()\n    history.push('/creation-de-mot-de-passe/fakeToken')\n    historyPushSpy = jest.spyOn(history, 'push')\n    pcapi.setPassword.mockResolvedValue()\n    renderSetPassword(store, history)\n    const passwordInput = screen.getByLabelText('Mot de passe')\n    const confirmationPasswordInput = screen.getByLabelText('Confirmer le mot de passe')\n    const submitButton = screen.getByText('Envoyer', { selector: 'button' })\n\n    // When\n    userEvent.type(passwordInput, 'password1')\n    userEvent.type(confirmationPasswordInput, 'password1')\n    await act(async () => userEvent.click(submitButton))\n\n    // Then\n    await waitFor(() => {\n      expect(pcapi.setPassword).toHaveBeenCalledWith('fakeToken', 'password1')\n    })\n  })\n\n  it('should display the success message and redirect to login page', async () => {\n    // Given\n    pcapi.setPassword.mockResolvedValue()\n    renderSetPassword(store, history)\n    const passwordInput = screen.getByLabelText('Mot de passe')\n    const confirmationPasswordInput = screen.getByLabelText('Confirmer le mot de passe')\n    const submitButton = screen.getByText('Envoyer', { selector: 'button' })\n\n    // When\n    userEvent.type(passwordInput, 'password1')\n    userEvent.type(confirmationPasswordInput, 'password1')\n    await act(async () => userEvent.click(submitButton))\n\n    // Then\n    await waitFor(() => {\n      expect(history.push).toHaveBeenCalledWith('/creation-de-mot-de-passe-confirmation')\n    })\n  })\n\n  it('should display the form error', async () => {\n    // Given\n    const passwordErrorMessage = 'Ton mot de passe est trop faible'\n    pcapi.setPassword.mockRejectedValue({ errors: { newPassword: [passwordErrorMessage] } })\n    renderSetPassword(store, history)\n    const passwordInput = screen.getByLabelText('Mot de passe')\n    const confirmationPasswordInput = screen.getByLabelText('Confirmer le mot de passe')\n    const submitButton = screen.getByText('Envoyer', { selector: 'button' })\n\n    // When\n    userEvent.type(passwordInput, 'password1')\n    userEvent.type(confirmationPasswordInput, 'password1')\n    await act(async () => userEvent.click(submitButton))\n\n    // Then\n    await waitFor(() => {\n      expect(screen.getByText(INVALID_FORM_MESSAGE)).toBeVisible()\n      expect(\n        screen.getByText(\n          'Votre mot de passe doit contenir au moins : - 12 caractères - Un chiffre - Une majuscule et une minuscule - Un caractère spécial'\n        )\n      ).toBeVisible()\n    })\n  })\n\n  it('should display the token error', async () => {\n    // Given\n    pcapi.setPassword.mockRejectedValue({ errors: { token: ['token problem'] } })\n    renderSetPassword(store, history)\n    const passwordInput = screen.getByLabelText('Mot de passe')\n    const confirmationPasswordInput = screen.getByLabelText('Confirmer le mot de passe')\n    const submitButton = screen.getByText('Envoyer', { selector: 'button' })\n\n    // When\n    userEvent.type(passwordInput, 'password1')\n    userEvent.type(confirmationPasswordInput, 'password1')\n    await act(async () => userEvent.click(submitButton))\n\n    // Then\n    await waitFor(() => {\n      expect(history.push).toHaveBeenCalledWith(\n        '/creation-de-mot-de-passe-confirmation?error=unvalid-link'\n      )\n    })\n  })\n\n  it('should display the unknown error', async () => {\n    // Given\n    pcapi.setPassword.mockRejectedValue({ errors: { unknownField: ['unknown problem'] } })\n    renderSetPassword(store, history)\n    const passwordInput = screen.getByLabelText('Mot de passe')\n    const confirmationPasswordInput = screen.getByLabelText('Confirmer le mot de passe')\n    const submitButton = screen.getByText('Envoyer', { selector: 'button' })\n\n    // When\n    userEvent.type(passwordInput, 'password1')\n    userEvent.type(confirmationPasswordInput, 'password1')\n    await act(async () => userEvent.click(submitButton))\n\n    // Then\n    await waitFor(() => {\n      expect(screen.getByText(UNKNOWN_ERROR_MESSAGE)).toBeVisible()\n    })\n  })\n\n  it('should redirect the user to reset password page with a toaster when no token', async () => {\n    // Given\n    history = createBrowserHistory()\n    history.push('/creation-de-mot-de-passe')\n    historyPushSpy = jest.spyOn(history, 'push')\n    renderSetPassword(store, history)\n\n    // Then\n    expect(history.push).toHaveBeenCalledWith(\n      '/creation-de-mot-de-passe-confirmation?error=unvalid-link'\n    )\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/SetPasswordConfirm/SetPasswordConfirm.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/SetPasswordConfirm/SetPasswordConfirmContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/SetPasswordConfirm/__specs__/SetPasswordConfirm.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signin/Signin.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signin/SigninContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signin/__specs__/Signin.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (224). Maximum allowed is 150.',
        line: 10,
        column: 56,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 233,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { shallow, mount } from 'enzyme'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { MemoryRouter } from 'react-router'\n\nimport configureStore from 'store'\n\nimport Signin from '../Signin'\n\ndescribe('src | components | pages | Signin | Signin', () => {\n  let submit\n  let props\n  let store\n\n  beforeEach(() => {\n    submit = jest.fn()\n\n    props = {\n      submit,\n      history: {\n        push: jest.fn(),\n      },\n      isAccountCreationAvailable: true,\n      showErrorNotification: jest.fn(),\n    }\n\n    store = configureStore({\n      data: {\n        users: [{ id: 'CMOI' }],\n      },\n    }).store\n  })\n\n  it('should display 2 inputs and one link to account creation and one button to login', () => {\n    // when\n    const wrapper = mount(\n      <Provider store={store}>\n        <MemoryRouter>\n          <Signin {...props} />\n        </MemoryRouter>\n      </Provider>\n    )\n\n    const emailInput = wrapper.find('input[type=\"email\"]')\n    const passwordInput = wrapper.find('input[type=\"password\"]')\n    const createAccountLink = wrapper.find({ children: 'Créer un compte' }).at(0)\n    const signinButton = wrapper.find({ children: 'Se connecter' })\n\n    //then\n    expect(emailInput).toHaveLength(1)\n    expect(passwordInput).toHaveLength(1)\n    expect(createAccountLink).toHaveLength(1)\n    expect(signinButton).toHaveLength(1)\n  })\n\n  describe('when user clicks on the eye on password input', () => {\n    it('should reveal password', () => {\n      // Given\n      const wrapper = mount(\n        <Provider store={store}>\n          <MemoryRouter>\n            <Signin {...props} />\n          </MemoryRouter>\n        </Provider>\n      )\n      const eyePasswordInput = wrapper.find('label').at(1).find('button')\n\n      // When\n      eyePasswordInput.invoke('onClick')({ preventDefault: jest.fn() })\n\n      //then\n      const passwordInput = wrapper.find('label').at(1).find('input')\n      expect(passwordInput.prop('type')).toBe('text')\n    })\n\n    describe('when user re-click on eye', () => {\n      it('should hide password', () => {\n        // Given\n        const wrapper = mount(\n          <Provider store={store}>\n            <MemoryRouter>\n              <Signin {...props} />\n            </MemoryRouter>\n          </Provider>\n        )\n        const eyePasswordInput = wrapper.find('label').at(1).find('button')\n\n        // When\n        eyePasswordInput.invoke('onClick')({ preventDefault: jest.fn() })\n        eyePasswordInput.invoke('onClick')({ preventDefault: jest.fn() })\n\n        //then\n        const passwordInput = wrapper.find('label').at(1).find('input')\n        expect(passwordInput.prop('type')).toBe('password')\n      })\n    })\n  })\n\n  describe(\"when user clicks on 'Créer un compte'\", () => {\n    describe('when the API sirene is available', () => {\n      it('should redirect to the creation page', () => {\n        // when\n        const wrapper = shallow(<Signin {...props} />)\n        const createAccountLink = wrapper.find({ children: 'Créer un compte' })\n\n        // then\n        expect(createAccountLink.prop('to')).toStrictEqual('/inscription')\n      })\n    })\n\n    describe('when the API sirene feature is disabled', () => {\n      it('should redirect to the unavailable error page', () => {\n        // given\n        props.isAccountCreationAvailable = false\n\n        // when\n        const wrapper = mount(\n          <Provider store={store}>\n            <MemoryRouter>\n              <Signin {...props} />\n            </MemoryRouter>\n          </Provider>\n        )\n\n        const createAccountLink = wrapper.find({ children: 'Créer un compte' }).at(0)\n\n        // then\n        expect(createAccountLink.prop('to')).toStrictEqual('/erreur/indisponible')\n      })\n    })\n  })\n\n  describe('when user clicks on \"Se connecter\"', () => {\n    it('should call submit prop', () => {\n      // Given\n      const wrapper = mount(\n        <Provider store={store}>\n          <MemoryRouter>\n            <Signin {...props} />\n          </MemoryRouter>\n        </Provider>\n      )\n\n      const emailInput = wrapper.find('input[type=\"email\"]')\n      emailInput.invoke('onChange')({ target: { value: 'un email' } })\n      const passwordInput = wrapper.find('input[type=\"password\"]')\n      passwordInput.invoke('onChange')({ target: { value: 'un mot de passe' } })\n      const submitButton = wrapper.find('form')\n\n      // When\n      submitButton.invoke('onSubmit')({ preventDefault: jest.fn() })\n\n      // then\n      expect(props.submit).toHaveBeenCalledWith(\n        'un email',\n        'un mot de passe',\n        expect.any(Function),\n        expect.any(Function)\n      )\n    })\n\n    describe('when user is signed in', () => {\n      it('should redirect to offerers page if user is admin', () => {\n        // Given\n        props.currentUser = { isAdmin: true }\n        const wrapper = shallow(<Signin {...props} />)\n\n        // when\n        wrapper.instance().onHandleSuccessRedirect()\n\n        // then\n        expect(props.history.push).toHaveBeenCalledWith('/structures')\n      })\n\n      it('should redirect to homepage if user is not admin', () => {\n        // Given\n        props.currentUser = { isAdmin: false }\n        const wrapper = shallow(<Signin {...props} />)\n\n        // when\n        wrapper.instance().onHandleSuccessRedirect()\n\n        // then\n        expect(props.history.push).toHaveBeenCalledWith('/accueil')\n      })\n    })\n\n    describe('when login failed', () => {\n      it('should display an error message', () => {\n        const action = {\n          payload: {\n            errors: {\n              password: 'erreur',\n            },\n          },\n        }\n        const state = {}\n        const wrapper = shallow(<Signin {...props} />)\n\n        // when\n        wrapper.instance().onHandleFail(state, action)\n\n        // then\n        expect(props.showErrorNotification).toHaveBeenCalledWith(\n          'Identifiant ou mot de passe incorrect.'\n        )\n      })\n    })\n\n    describe('when login rate limit exceeded', () => {\n      it('should display an error message', () => {\n        const action = {\n          payload: {\n            errors: {\n              global: 'Trop de tentatives',\n            },\n            status: 429,\n          },\n        }\n        const state = {}\n        const wrapper = shallow(<Signin {...props} />)\n\n        // when\n        wrapper.instance().onHandleFail(state, action)\n\n        // then\n        expect(props.showErrorNotification).toHaveBeenCalledWith(\n          'Nombre de tentatives de connexion dépassé. Veuillez réessayer dans 1 minute.'\n        )\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signin/__specs__/SigninContainer.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/Signup.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupConfirmation/SignupConfirmation.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupConfirmation/SignupConfirmationContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupForm/SignupForm.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupForm/SignupFormContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupForm/SirenField/SirenField.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupForm/SirenField/__specs__/SirenField.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupForm/SirenField/__specs__/formatSiren.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (79). Maximum allowed is 50.',
        line: 3,
        column: 78,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 81,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import formatSiren from '../formatSiren'\n\ndescribe('src | components | pages | OffererCreation | siren | formatSiren', () => {\n  describe('when siren is undefined', () => {\n    it('should return an empty string', () => {\n      // given\n      const siren = undefined\n\n      // when\n      const formatedSiren = formatSiren(siren)\n\n      // then\n      expect(formatedSiren).toBe('')\n    })\n  })\n\n  describe('when siren given is an empty string', () => {\n    it('should return an empty string', () => {\n      // given\n      const siren = ''\n\n      // when\n      const formatedSiren = formatSiren(siren)\n\n      // then\n      expect(formatedSiren).toBe('')\n    })\n  })\n\n  describe('when siren given is a letter', () => {\n    it('should return an empty string', () => {\n      // given\n      const siren = 'a'\n\n      // when\n      const formatedSiren = formatSiren(siren)\n\n      // then\n      expect(formatedSiren).toBe('')\n    })\n  })\n\n  describe('when siren given is not a number', () => {\n    it('should return a string with only numbers', () => {\n      // given\n      const siren = '100F'\n\n      // when\n      const formatedSiren = formatSiren(siren)\n\n      // then\n      expect(formatedSiren).toBe('100')\n    })\n  })\n\n  describe('when value given is a valid SIRET', () => {\n    it('returns a formatted siren', () => {\n      // given\n      const siren = '41816609600069'\n\n      // when\n      const formatedSiren = formatSiren(siren)\n\n      // then\n      expect(formatedSiren).toBe('418166096')\n    })\n  })\n\n  describe('when value given is a valid SIREN', () => {\n    it('should ignore whitespaces', () => {\n      // given\n      const siren = '418    166 096'\n\n      // when\n      const formatedSiren = formatSiren(siren)\n\n      // then\n      expect(formatedSiren).toBe('418166096')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupForm/SirenField/formatSiren.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupForm/__specs__/SignupForm.spec.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (309). Maximum allowed is 150.',
        line: 9,
        column: 60,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 317,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (293). Maximum allowed is 150.',
        line: 24,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 316,
        endColumn: 4,
      },
      {
        ruleId: 'max-statements',
        severity: 1,
        message: 'Arrow function has too many statements (19). Maximum allowed is 15.',
        line: 24,
        column: 22,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 316,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { mount } from 'enzyme'\nimport { createBrowserHistory } from 'history'\nimport React from 'react'\nimport { Router } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport SignupForm from '../SignupForm'\n\ndescribe('src | components | pages | Signup | SignupForm', () => {\n  let props\n  let history\n\n  beforeEach(() => {\n    props = {\n      createNewProUser: jest.fn(),\n      errors: {},\n      redirectToConfirmation: jest.fn(),\n      showNotification: jest.fn(),\n    }\n\n    history = createBrowserHistory()\n  })\n\n  describe('render', () => {\n    it('should display the title \"Créer votre compte professionnel\"', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const signUpFormTitle = wrapper.find({ children: 'Créer votre compte professionnel' })\n      expect(signUpFormTitle).toHaveLength(1)\n    })\n\n    it('should display a subtitle', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const signUpFormSubTitle = wrapper.find({\n        children: 'Merci de compléter les champs suivants pour créer votre compte.',\n      })\n      expect(signUpFormSubTitle).toHaveLength(1)\n    })\n\n    it('should display an external link to the presentation of Pass Culture Pro', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const presentationLink = wrapper\n        .find({ children: 'Fonctionnement du pass Culture pro' })\n        .parent('a')\n      expect(presentationLink).toHaveLength(1)\n      expect(presentationLink.prop('href')).toBe(\n        'https://docs.passculture.app/le-pass-culture-en-quelques-mots'\n      )\n    })\n\n    it('should display an external link to the help center', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const helpCenterLink = wrapper.find({ children: 'Consulter notre centre d’aide' }).parent('a')\n      expect(helpCenterLink).toHaveLength(1)\n      expect(helpCenterLink.prop('href')).toBe(\n        'https://aide.passculture.app/fr/articles/5095632-comment-creer-un-compte-d-acteur-partenaire'\n      )\n    })\n\n    it('should display an external link to CGU', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const cguLink = wrapper.find({ children: 'Conditions Générales d’Utilisation' }).parent('a')\n      expect(cguLink).toHaveLength(1)\n      expect(cguLink.prop('href')).toBe('https://pass.culture.fr/cgu-professionnels/')\n    })\n\n    it('should display an external link to GDPR chart', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const gdprLink = wrapper.find({ children: 'Charte des Données Personnelles' }).parent('a')\n      expect(gdprLink).toHaveLength(1)\n      expect(gdprLink.prop('href')).toBe('https://pass.culture.fr/donnees-personnelles/')\n    })\n\n    it('should display a mail to support', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const mailToSupportLink = wrapper.find({ children: 'contactez notre support.' }).parent('a')\n      expect(mailToSupportLink).toHaveLength(1)\n      expect(mailToSupportLink.prop('href')).toBe('mailto:support@passculture.app')\n    })\n\n    it('should render a disabled submit button when required inputs are not filled', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const submitButton = wrapper.find('button[type=\"submit\"]')\n      expect(submitButton.prop('disabled')).toBe(true)\n    })\n\n    it('should render seven Field components', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const fields = wrapper.find('label')\n      expect(fields).toHaveLength(7)\n    })\n\n    it('should render a Field component for email with the right props', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const field = wrapper.find('label').at(0)\n      expect(field.text()).toBe('Adresse e-mail')\n      const input = field.find('input')\n      expect(input.prop('name')).toBe('email')\n      expect(input.prop('placeholder')).toBe('nom@exemple.fr')\n      expect(input.prop('type')).toBe('text')\n    })\n\n    it('should render a Field component for password with the right props', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const field = wrapper.find('label').at(1)\n      expect(field.text()).toBe('Mot de passe')\n      const input = field.find('input')\n      expect(input.prop('name')).toBe('password')\n      expect(input.prop('placeholder')).toBe('Mon mot de passe')\n      expect(input.prop('type')).toBe('password')\n    })\n\n    it('should render a Field component for lastname with the right props', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const field = wrapper.find('label').at(2)\n      expect(field.text()).toBe('Nom')\n      const input = field.find('input')\n      expect(input.prop('name')).toBe('lastName')\n      expect(input.prop('placeholder')).toBe('Mon nom')\n    })\n\n    it('should render a Field component for firstname with the right props', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const field = wrapper.find('label').at(3)\n      expect(field.text()).toBe('Prénom')\n      const input = field.find('input')\n      expect(input.prop('name')).toBe('firstName')\n      expect(input.prop('placeholder')).toBe('Mon prénom')\n    })\n\n    it('should render a Field component for phone number with the right props', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const field = wrapper.find('label').at(4)\n      expect(field.text()).toBe('Téléphone (utilisé uniquement par l’équipe du pass Culture)')\n      const input = field.find('input')\n      expect(input.prop('name')).toBe('phoneNumber')\n      expect(input.prop('placeholder')).toBe('Mon numéro de téléphone')\n    })\n\n    it('should render a Field component for siren with the right props', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const field = wrapper.find('label').at(5)\n      expect(field.text()).toBe('SIREN de la structure que vous représentez')\n      const input = field.find('input')\n      expect(input.prop('name')).toBe('siren')\n      expect(input.prop('placeholder')).toBe('123456789')\n      expect(input.prop('type')).toBe('text')\n    })\n\n    it('should render a Field component for contact agreement with the right props', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const field = wrapper.find('label').at(6)\n      expect(field.text()).toBe(\n        \"J’accepte d’être contacté par e-mail pour recevoir les nouveautés du pass Culture et contribuer à son amélioration (facultatif)\"\n      )\n      const input = field.find('input')\n      expect(input.prop('name')).toBe('contactOk')\n      expect(input.prop('type')).toBe('checkbox')\n    })\n\n    it('should render errors when provided', () => {\n      // given\n      props.errors = { email: 'erreur sur le mail' }\n\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const error = wrapper.find({ children: 'erreur sur le mail' }).hostNodes()\n      expect(error).toHaveLength(1)\n    })\n\n    it('should render a Link component', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const link = wrapper.find(Link)\n      expect(link).toHaveLength(1)\n      expect(link.prop('to')).toStrictEqual('/connexion')\n    })\n\n    it('should render a SubmitButton component with the right props', () => {\n      // when\n      const wrapper = mount(\n        <Router history={history}>\n          <SignupForm {...props} />\n        </Router>\n      )\n\n      // then\n      const submitButton = wrapper.find('button[type=\"submit\"]')\n      expect(submitButton).toHaveLength(1)\n      expect(submitButton.prop('type')).toBe('submit')\n      expect(submitButton.text()).toBe('Créer mon compte')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupForm/__specs__/SignupFormContainer.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (157). Maximum allowed is 50.',
        line: 5,
        column: 69,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 161,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (155). Maximum allowed is 50.',
        line: 6,
        column: 34,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 160,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (97). Maximum allowed is 50.',
        line: 31,
        column: 34,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 127,
        endColumn: 6,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { showNotification } from 'store/reducers/notificationReducer'\n\nimport { mapDispatchToProps } from '../SignupFormContainer'\n\ndescribe('src | components | pages | Signup | SignupFormContainer', () => {\n  describe('mapDispatchToProps', () => {\n    let dispatch\n    let props\n\n    beforeEach(() => {\n      dispatch = jest.fn()\n      props = {\n        history: {\n          replace: jest.fn(),\n        },\n      }\n    })\n\n    it('should return an object containing functions to pass to component', () => {\n      // when\n      const result = mapDispatchToProps(dispatch, props)\n\n      // then\n      expect(result).toStrictEqual({\n        createNewProUser: expect.any(Function),\n        redirectToConfirmation: expect.any(Function),\n        notifyError: expect.any(Function),\n      })\n    })\n\n    describe('createNewProUser', () => {\n      it('should create a new user using API', () => {\n        // given\n        const payload = {\n          lastName: 'Lastname',\n          firstName: 'Firstname',\n          phoneNumber: '0666666666',\n          password: 'P@ssw0rd',\n          email: 'Firstname@test.test',\n          siren: '123456789',\n          name: 'GAUMONT',\n          address: '999 Rue des tests',\n          postalCode: '92200',\n          city: 'Ville de test',\n          cgu_ok: true,\n          contactOk: true,\n        }\n        const expectedFetchPayload = {\n          ...payload,\n          publicName: payload.firstName,\n        }\n        const onHandleFail = jest.fn()\n        const onHandleSuccess = jest.fn()\n        const functions = mapDispatchToProps(dispatch, props)\n\n        // when\n        functions.createNewProUser(payload, onHandleFail, onHandleSuccess)\n\n        // then\n        expect(dispatch).toHaveBeenCalledWith({\n          config: {\n            apiPath: '/users/signup/pro',\n            body: expectedFetchPayload,\n            handleFail: onHandleFail,\n            handleSuccess: onHandleSuccess,\n            method: 'POST',\n            name: 'user',\n          },\n          type: 'REQUEST_DATA_POST_/USERS/SIGNUP/PRO',\n        })\n      })\n\n      it('should insert publicName value equal to firstName', () => {\n        // given\n        const payload = {\n          lastName: 'Lastname',\n          firstName: 'Firstname',\n        }\n        const functions = mapDispatchToProps(dispatch, props)\n\n        // when\n        functions.createNewProUser(payload, jest.fn(), jest.fn())\n\n        // then\n        expect(dispatch).toHaveBeenCalledWith({\n          config: {\n            apiPath: '/users/signup/pro',\n            body: {\n              lastName: 'Lastname',\n              firstName: 'Firstname',\n              publicName: 'Firstname',\n            },\n            handleFail: expect.any(Function),\n            handleSuccess: expect.any(Function),\n            method: 'POST',\n            name: 'user',\n          },\n          type: 'REQUEST_DATA_POST_/USERS/SIGNUP/PRO',\n        })\n      })\n\n      it('should remove whistespaces from siren', () => {\n        // given\n        const payload = {\n          siren: '123 456 789',\n        }\n        const functions = mapDispatchToProps(dispatch, props)\n\n        // when\n        functions.createNewProUser(payload, jest.fn(), jest.fn())\n\n        // then\n        expect(dispatch).toHaveBeenCalledWith({\n          config: {\n            apiPath: '/users/signup/pro',\n            body: {\n              siren: '123456789',\n            },\n            handleFail: expect.any(Function),\n            handleSuccess: expect.any(Function),\n            method: 'POST',\n            name: 'user',\n          },\n          type: 'REQUEST_DATA_POST_/USERS/SIGNUP/PRO',\n        })\n      })\n    })\n\n    describe('redirectToConfirmation', () => {\n      it('should redirect to confirmation page', () => {\n        // given\n        const functions = mapDispatchToProps(dispatch, props)\n\n        // when\n        functions.redirectToConfirmation()\n\n        // then\n        expect(props.history.replace).toHaveBeenCalledWith('/inscription/confirmation')\n      })\n    })\n\n    describe('showNotification', () => {\n      it('should display a notification', () => {\n        // given\n        const functions = mapDispatchToProps(dispatch, props)\n        const messageText = 'message text'\n\n        // when\n        functions.notifyError(messageText)\n\n        // then\n        expect(dispatch).toHaveBeenCalledWith(\n          showNotification({\n            text: messageText,\n            type: 'error',\n          })\n        )\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupValidation/SignupValidation.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupValidation/SignupValidationContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/SignupValidation/__specs__/SignupValidation.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Signup/__specs__/Signup.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Styleguide/Styleguide.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Styleguide/StyleguideAgenda.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Styleguide/StyleguideContainer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Styleguide/StyleguideElements/StyleguideBanners.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Styleguide/StyleguideElements/StyleguideButtons.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Styleguide/StyleguideElements/StyleguideCheckboxes.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Styleguide/StyleguideElements/StyleguideInputDuration.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Styleguide/StyleguideElements/StyleguideInputText.jsx',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (267). Maximum allowed is 150.',
        line: 6,
        column: 29,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 272,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      'import React from \'react\'\n\nimport TextInput from \'components/layout/inputs/TextInput/TextInput\'\nimport TextInputWithIcon from \'components/layout/inputs/TextInputWithIcon/TextInputWithIcon\'\n\nconst StyleguideInputText = () => {\n  const inputTextEnabled = `\n    <TextInput\n      label="Intitulé"\n      longDescription="Description longue de ce champ texte"\n      name="input-text-default"\n      onChange={onChange}\n      placeholder="placeholder"\n      required\n      subLabel="Intitulé secondaire"\n      type="text"\n      value="Valeur"\n    />\n  `\n\n  const inputTextWithError = `\n    <TextInput\n      error="Ce champs comporte une erreur"\n      longDescription="Description longue de ce champ texte"\n      label="Intitulé"\n      name="input-text-default"\n      onChange={onChange}\n      placeholder="placeholder"\n      required\n      subLabel="Intitulé secondaire"\n      type="text"\n    />\n  `\n  const inputTextDisabled = `\n    <TextInput\n      disabled\n      label="Intitulé"\n      name="input-text-disabled"\n      placeholder="placeholder disabled"\n      subLabel="Intitulé secondaire"\n      type="text"\n      value="Valeur"\n    />\n  `\n\n  const inputWithIconEnabled = `\n    <TextInputWithIcon\n      icon="ico-search"\n      iconAlt="alt-for-icon"\n      label="Intitulé"\n      name="input-text-icon-default"\n      onChange={onChange}\n      onIconClick={onClick}\n      placeholder="placeholder with icon"\n      subLabel="Intitulé secondaire"\n      type="text"\n    />\n   `\n\n  const inputWithIconDisabled = `\n    <TextInputWithIcon\n      disabled\n      icon="ico-search"\n      iconAlt="alt-for-icon"\n      label="Intitulé"\n      name="input-text-icon-disabled"\n      placeholder="placeholder with icon"\n      subLabel="Intitulé secondaire"\n      type="text"\n    />\n  `\n\n  const inputWithErrorMessage = `\n    <TextInputWithIcon\n      error="La saisie du champs n\'est pas correcte"\n      icon="ico-search"\n      iconAlt="alt-for-icon"\n      label="Intitulé"\n      name="input-text-icon-disabled"\n      placeholder="placeholder with icon"\n      subLabel="Intitulé secondaire"\n      type="text"\n    />\n  `\n  const inputTextWithCaracterCount = `\n    <TextInput\n      countCharacters\n      label="Intitulé"\n      maxLength={20}\n      name="input-text-with-character-count"\n      onChange={onChange}\n      placeholder="placeholder"\n      required\n      subLabel="Intitulé secondaire"\n      type="text"\n      value="Valeur"\n    />\n  `\n\n  function onClick() {\n    console.log(\'OnClick icon input\')\n  }\n\n  function onChange() {\n    console.log(\'OnChange input text\')\n  }\n\n  return (\n    <div>\n      <h3>\n        Champs textuel\n      </h3>\n      <div className="flex-block">\n        <TextInput\n          label="Intitulé"\n          longDescription="Description longue de ce champ texte"\n          name="input-text-default"\n          onChange={onChange}\n          placeholder="placeholder"\n          required\n          subLabel="Intitulé secondaire"\n          type="text"\n        />\n        <div className="it-description">\n          <pre className="it-icon-snippet">\n            <code>\n              {inputTextEnabled}\n            </code>\n          </pre>\n        </div>\n      </div>\n      <br />\n      <div className="flex-block">\n        <TextInput\n          disabled\n          label="Intitulé"\n          longDescription="Description longue de ce champ texte"\n          name="input-text-disabled"\n          placeholder="placeholder disabled"\n          subLabel="Intitulé secondaire"\n          type="text"\n        />\n        <div className="it-description">\n          <pre className="it-icon-snippet">\n            <code>\n              {inputTextDisabled}\n            </code>\n          </pre>\n        </div>\n      </div>\n      <hr />\n      <h3>\n        Champs textuel en erreur\n      </h3>\n      <div className="flex-block">\n        <TextInput\n          error="Ce champs comporte une erreur"\n          label="Intitulé"\n          name="input-text-default"\n          onChange={onChange}\n          placeholder="placeholder"\n          required\n          subLabel="Intitulé secondaire"\n          type="text"\n        />\n        <div className="it-description">\n          <pre className="it-icon-snippet">\n            <code>\n              {inputTextWithError}\n            </code>\n          </pre>\n        </div>\n      </div>\n      <h3>\n        Champs textuel avec icône\n      </h3>\n      <div className="flex-block">\n        <div>\n          <TextInputWithIcon\n            icon="ico-search"\n            iconAlt="alt-for-icon"\n            label="Intitulé"\n            name="input-text-icon-default"\n            onChange={onChange}\n            onIconClick={onClick}\n            placeholder="placeholder with icon"\n            subLabel="Intitulé secondaire"\n            type="text"\n          />\n        </div>\n        <div className="it-description">\n          <pre className="it-icon-snippet">\n            <code>\n              {inputWithIconEnabled}\n            </code>\n          </pre>\n        </div>\n      </div>\n      <br />\n      <div className="flex-block">\n        <div>\n          <TextInputWithIcon\n            disabled\n            icon="ico-search"\n            iconAlt="alt-for-icon"\n            label="Intitulé"\n            name="input-text-icon-disabled"\n            placeholder="placeholder with icon"\n            subLabel="Intitulé secondaire"\n            type="text"\n          />\n        </div>\n        <div className="it-description">\n          <pre className="it-icon-snippet">\n            <code>\n              {inputWithIconDisabled}\n            </code>\n          </pre>\n        </div>\n      </div>\n      <hr />\n      <h3>\n        Champs avec icône en erreur\n      </h3>\n      <div className="flex-block">\n        <div>\n          <TextInputWithIcon\n            error={"La saisie n\'est pas correcte"}\n            icon="ico-search"\n            iconAlt="alt-for-icon"\n            label="Intitulé"\n            name="input-text-icon-disabled"\n            placeholder="placeholder with icon"\n            subLabel="Intitulé secondaire"\n            type="text"\n          />\n        </div>\n        <div className="it-description">\n          <pre className="it-icon-snippet">\n            <code>\n              {inputWithErrorMessage}\n            </code>\n          </pre>\n        </div>\n      </div>\n      <hr />\n      <h3>\n        Champs avec compte de caractères\n      </h3>\n      <div className="flex-block">\n        <TextInput\n          countCharacters\n          label="Intitulé"\n          maxLength={20}\n          name="input-text-with-character-count"\n          onChange={onChange}\n          placeholder="placeholder"\n          required\n          subLabel="Intitulé secondaire"\n          type="text"\n        />\n        <div className="it-description">\n          <pre className="it-icon-snippet">\n            <code>\n              {inputTextWithCaracterCount}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default StyleguideInputText\n',
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Styleguide/StyleguideElements/StyleguideInputTextarea.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Styleguide/StyleguideElements/StyleguideSelect.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Styleguide/StyleguideElements/StyleguideTitles.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/pages/Styleguide/StyleguideTitles.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/router/FeaturedRoute.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/router/__specs__/FeaturedRoute.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/router/helpers.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/svg/SVGOffers.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/components/utils/mocks/state.js',
    messages: [
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (1032). Maximum allowed is 300.',
        line: 301,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 1034,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "const state = {\n  data: {\n    bookings: [],\n    events: [],\n    mediations: [\n      {\n        id: 'H4',\n        authorId: null,\n        backText: 'Some back test',\n        credit: null,\n        dateCreated: '2019-03-07T10:39:23.560464Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:08.324689Z',\n        frontText: 'Some front text',\n        idAtProviders: null,\n        isActive: true,\n        lastProviderId: null,\n        modelName: 'Mediation',\n        offerId: 'UU',\n        tutoIndex: null,\n      },\n      {\n        id: 'HY',\n        authorId: null,\n        backText: 'Some back test',\n        credit: null,\n        dateCreated: '2019-03-07T10:39:23.560464Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:08.320914Z',\n        frontText: 'Some front text',\n        idAtProviders: null,\n        isActive: true,\n        lastProviderId: null,\n        modelName: 'Mediation',\n        offerId: 'UM',\n        tutoIndex: null,\n      },\n      {\n        id: 'HU',\n        authorId: null,\n        backText: 'Some back test',\n        credit: null,\n        dateCreated: '2019-03-07T10:39:23.560464Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:08.313034Z',\n        frontText: 'Some front text',\n        idAtProviders: null,\n        isActive: true,\n        lastProviderId: null,\n        modelName: 'Mediation',\n        offerId: 'UE',\n        tutoIndex: null,\n      },\n      {\n        id: 'HQ',\n        authorId: null,\n        backText: 'Some back test',\n        credit: null,\n        dateCreated: '2019-03-07T10:39:23.560464Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:08.306636Z',\n        frontText: 'Some front text',\n        idAtProviders: null,\n        isActive: true,\n        lastProviderId: null,\n        modelName: 'Mediation',\n        offerId: 'T4',\n        tutoIndex: null,\n      },\n      {\n        id: 'HM',\n        authorId: null,\n        backText: 'Some back test',\n        credit: null,\n        dateCreated: '2019-03-07T10:39:23.560464Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:08.299908Z',\n        frontText: 'Some front text',\n        idAtProviders: null,\n        isActive: true,\n        lastProviderId: null,\n        modelName: 'Mediation',\n        offerId: 'TU',\n        tutoIndex: null,\n      },\n    ],\n    offerers: [\n      {\n        id: 'BA',\n        address: 'RUE DES SAPOTILLES',\n        bic: 'QSDFGH8Z566',\n        city: 'Cayenne',\n        dateCreated: '2019-03-07T10:39:23.560414Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:39:57.823508Z',\n        iban: 'FR7630001007941234567890185',\n        idAtProviders: null,\n        isActive: true,\n        isValidated: true,\n        lastProviderId: null,\n        modelName: 'Offerer',\n        nOffers: 5,\n        name: 'Bar des amis',\n        postalCode: '97300',\n        siren: '222222233',\n        validationToken: null,\n      },\n      {\n        id: 'CA',\n        address: 'RUE DES POMMES ROSAS',\n        city: 'Cayenne',\n        dateCreated: '2019-03-07T10:39:23.560414Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:39:57.843884Z',\n        idAtProviders: null,\n        isActive: true,\n        isValidated: false,\n        lastProviderId: null,\n        modelName: 'Offerer',\n        nOffers: 10,\n        name: 'Cinéma du coin',\n        postalCode: '97300',\n        siren: '222222232',\n        validationToken: 'w3hDQgjYRIyYTxOYY08nwgH3BzI',\n      },\n    ],\n    providers: [],\n    stocks: [\n      {\n        id: 'MU',\n        quantity: 10,\n        bookingLimitDatetime: null,\n        bookingRecapSent: null,\n        dateModified: '2019-03-07T10:40:07.318721Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:07.318695Z',\n        eventOccurrenceId: null,\n        idAtProviders: null,\n        isSoftDeleted: false,\n        lastProviderId: null,\n        modelName: 'Stock',\n        offerId: 'UU',\n        price: 17,\n      },\n      {\n        id: 'MQ',\n        quantity: 10,\n        bookingLimitDatetime: null,\n        bookingRecapSent: null,\n        dateModified: '2019-03-07T10:40:07.315722Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:07.315702Z',\n        eventOccurrenceId: null,\n        idAtProviders: null,\n        isSoftDeleted: false,\n        lastProviderId: null,\n        modelName: 'Stock',\n        offerId: 'UM',\n        price: 16,\n      },\n      {\n        id: 'MM',\n        quantity: 10,\n        bookingLimitDatetime: null,\n        bookingRecapSent: null,\n        dateModified: '2019-03-07T10:40:07.312234Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:07.312216Z',\n        eventOccurrenceId: null,\n        idAtProviders: null,\n        isSoftDeleted: false,\n        lastProviderId: null,\n        modelName: 'Stock',\n        offerId: 'U9',\n        price: 51,\n      },\n      {\n        id: 'M9',\n        quantity: 10,\n        bookingLimitDatetime: null,\n        bookingRecapSent: null,\n        dateModified: '2019-03-07T10:40:07.309108Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:07.309075Z',\n        eventOccurrenceId: null,\n        idAtProviders: null,\n        isSoftDeleted: false,\n        lastProviderId: null,\n        modelName: 'Stock',\n        offerId: 'UA',\n        price: 50,\n      },\n      {\n        id: 'ME',\n        quantity: 10,\n        bookingLimitDatetime: null,\n        bookingRecapSent: null,\n        dateModified: '2019-03-07T10:40:07.306052Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:07.306033Z',\n        eventOccurrenceId: null,\n        idAtProviders: null,\n        isSoftDeleted: false,\n        lastProviderId: null,\n        modelName: 'Stock',\n        offerId: 'T4',\n        price: 28,\n      },\n      {\n        id: 'MA',\n        quantity: 10,\n        bookingLimitDatetime: null,\n        bookingRecapSent: null,\n        dateModified: '2019-03-07T10:40:07.303564Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:07.303546Z',\n        eventOccurrenceId: null,\n        idAtProviders: null,\n        isSoftDeleted: false,\n        lastProviderId: null,\n        modelName: 'Stock',\n        offerId: 'TU',\n        price: 15,\n      },\n      {\n        id: 'L4',\n        quantity: 10,\n        bookingLimitDatetime: null,\n        bookingRecapSent: null,\n        dateModified: '2019-03-07T10:40:07.300968Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:07.300950Z',\n        eventOccurrenceId: null,\n        idAtProviders: null,\n        isSoftDeleted: false,\n        lastProviderId: null,\n        modelName: 'Stock',\n        offerId: 'TQ',\n        price: 11,\n      },\n    ],\n    products: [\n      {\n        id: 'LY',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.865368Z',\n        description:\n          'Ainsi la personne avec qui elle avait confessé qu’elle allait goûter, avec qui elle vous avait supplié de la laisser goûter, cette personne, raison avouée par la nécessité, ce n’était pas elle, c’était une autre, c’était encore autre chose ! Autre chose, quoi ? Une autre, qui ?',\n        extraData: {\n          author: 'Eloise Jomenrency',\n        },\n        idAtProviders: '1297',\n        isNational: true,\n        lastProviderId: null,\n        mediaUrls: ['test/urls'],\n        modelName: 'Product',\n        name: 'Dormons peu soupons bien',\n        offerType: {\n          description:\n            'Résoudre l’énigme d’un jeu de piste dans votre ville ? Jouer en ligne entre amis ? Découvrir cet univers étrange avec une manette ?',\n          proLabel: 'Jeux Vidéo',\n          offlineOnly: false,\n          onlineOnly: true,\n          sublabel: 'Jouer',\n          type: 'Thing',\n          value: 'ThingType.JEUX_VIDEO',\n        },\n        url: 'https://ilestencoretemps.fr/',\n      },\n      {\n        id: 'L9',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.850903Z',\n        description: 'T’ont-ils chargé pour nous de leur salut lointain ?',\n        extraData: {\n          author: 'Max et Compagnie',\n        },\n        idAtProviders: '1293',\n        isNational: true,\n        lastProviderId: null,\n        mediaUrls: ['test/urls'],\n        modelName: 'Product',\n        name: 'Autant tu t’en vas',\n        offerType: {\n          description:\n            'S’abonner à un quotidien d’actualité ? À un hebdomadaire humoristique ? À un mensuel dédié à la nature ? Acheter une BD ou un manga ? Ou tout simplement ce livre dont tout le monde parle ?',\n          proLabel: 'Presse (Abonnements)',\n          offlineOnly: false,\n          onlineOnly: true,\n          sublabel: 'Lire',\n          type: 'Thing',\n          value: 'ThingType.PRESSE_ABO',\n        },\n        url: 'https://ilestencoretemps.fr/',\n      },\n      {\n        id: 'KQ',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.820667Z',\n        description:\n          'Combattant sans risque, vous devez agir sans précaution. En effet, pour vous autres hommes, les défaites ne sont que des succès de moins. Dans cette partie si inégale, notre fortune est de ne pas perdre, et votre malheur de ne pas gagner.',\n        extraData: {\n          author: 'Rackham le Vert',\n        },\n        idAtProviders: '1287',\n        isNational: true,\n        lastProviderId: null,\n        mediaUrls: ['test/urls'],\n        modelName: 'Product',\n        name: 'Dansons jusqu’en 2030',\n        offerType: {\n          description:\n            'Résoudre l’énigme d’un jeu de piste dans votre ville ? Jouer en ligne entre amis ? Découvrir cet univers étrange avec une manette ?',\n          proLabel: 'Jeux Vidéo',\n          offlineOnly: false,\n          onlineOnly: true,\n          sublabel: 'Jouer',\n          type: 'Thing',\n          value: 'ThingType.JEUX_VIDEO',\n        },\n        url: 'https://ilestencoretemps.fr/',\n      },\n      {\n        id: 'KA',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.793350Z',\n        description:\n          'Sur ta route, aussi loin que ton regard atteint, N’as-tu vu comme ici que douleurs et misères ? Dans ces mondes épars, dis ! avons-nous des frères ?',\n        extraData: {\n          author: 'Usule et Franck',\n        },\n        idAtProviders: '1283',\n        isNational: true,\n        lastProviderId: null,\n        mediaUrls: ['test/urls'],\n        modelName: 'Product',\n        name: 'La première paix mondiale',\n        offerType: {\n          description:\n            'S’abonner à un quotidien d’actualité ? À un hebdomadaire humoristique ? À un mensuel dédié à la nature ? Acheter une BD ou un manga ? Ou tout simplement ce livre dont tout le monde parle ?',\n          proLabel: 'Presse (Abonnements)',\n          offlineOnly: false,\n          onlineOnly: true,\n          sublabel: 'Lire',\n          type: 'Thing',\n          value: 'ThingType.PRESSE_ABO',\n        },\n        url: 'https://ilestencoretemps.fr/',\n      },\n      {\n        id: 'J9',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.757550Z',\n        description:\n          'Un baiser, mais à tout prendre, qu’est-ce ? Un serment fait d’un peu plus près, une promesse plus précise, un aveu qui veut se confirmer, Un point rose qu’on met sur l’i du verbe aimer ; C’est un secret qui prend la bouche pour oreille, Un instant d’infini qui fait un bruit d’abeille, Une communion ayant un goût de fleur, Une façon d’un peu se respirer le cœur, Et d’un peu se goûter, au bord des lèvres, l’âme !',\n        extraData: {\n          author: 'Nicolas Duplot',\n        },\n        idAtProviders: '1277',\n        isNational: true,\n        lastProviderId: null,\n        mediaUrls: ['test/urls'],\n        modelName: 'Product',\n        name: 'Ravage sous un océan',\n        offerType: {\n          description:\n            'Résoudre l’énigme d’un jeu de piste dans votre ville ? Jouer en ligne entre amis ? Découvrir cet univers étrange avec une manette ?',\n          proLabel: 'Jeux Vidéo',\n          offlineOnly: false,\n          onlineOnly: true,\n          sublabel: 'Jouer',\n          type: 'Thing',\n          value: 'ThingType.JEUX_VIDEO',\n        },\n        url: 'https://ilestencoretemps.fr/',\n      },\n      {\n        id: '9Y',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.727260Z',\n        description:\n          'Bel astre voyageur, hôte qui nous arrives, Des profondeurs du ciel et qu’on n’attendait pas, Où vas-tu ? Quel dessein pousse vers nous tes pas ? Toi qui vogues au large en cette mer sans rives',\n        extraData: {\n          author: 'Gerard Stadt',\n        },\n        idAtProviders: '1273',\n        isNational: true,\n        lastProviderId: null,\n        mediaUrls: ['test/urls'],\n        modelName: 'Product',\n        name: 'Mensch ! Où sont les Hommes ?',\n        offerType: {\n          description:\n            'S’abonner à un quotidien d’actualité ? À un hebdomadaire humoristique ? À un mensuel dédié à la nature ? Acheter une BD ou un manga ? Ou tout simplement ce livre dont tout le monde parle ?',\n          proLabel: 'Presse (Abonnements)',\n          offlineOnly: false,\n          onlineOnly: true,\n          sublabel: 'Lire',\n          type: 'Thing',\n          value: 'ThingType.PRESSE_ABO',\n        },\n        url: 'https://ilestencoretemps.fr/',\n      },\n      {\n        id: '9Q',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.713847Z',\n        description:\n          'Vous?... Au contraire! J’ignorais la douceur féminine. Ma mère Ne m’a pas trouvé beau. Je n’ai pas eu de soeur. Plus tard, j’ai redouté l’amante à l’oeil moqueur. Je vous dois d’avoir eu, tout au moins, une amie. Grâce à vous une robe a passé dans ma vie.',\n        extraData: {\n          author: 'Jeanne Plomb',\n        },\n        idAtProviders: '1271',\n        isNational: false,\n        lastProviderId: null,\n        mediaUrls: ['test/urls'],\n        modelName: 'Product',\n        name: 'Guerre et youpi matin',\n        offerType: {\n          description:\n            'Plutôt rock, rap ou classique ? Sur un smartphone avec des écouteurs ou entre amis au concert ?',\n          proLabel: 'Musique (sur supports physiques ou en ligne)',\n          offlineOnly: false,\n          onlineOnly: false,\n          sublabel: 'Écouter',\n          type: 'Thing',\n          value: 'ThingType.MUSIQUE',\n        },\n        url: null,\n      },\n      {\n        id: '99',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.702942Z',\n        description:\n          'Combattant sans risque, vous devez agir sans précaution. En effet, pour vous autres hommes, les défaites ne sont que des succès de moins. Dans cette partie si inégale, notre fortune est de ne pas perdre, et votre malheur de ne pas gagner.',\n        extraData: {\n          author: 'Rackham le Vert',\n        },\n        idAtProviders: '1269',\n        isNational: false,\n        lastProviderId: null,\n        mediaUrls: ['test/urls'],\n        modelName: 'Product',\n        name: 'Dansons jusqu’en 2030',\n        offerType: {\n          description:\n            'Action, science-fiction, documentaire ou comédie sentimentale ? En salle, en plein air ou bien au chaud chez soi ? Et si c’était plutôt cette exposition qui allait faire son cinéma ?',\n          proLabel: 'Musées — Patrimoine (Abonnements, Visites libres)',\n          offlineOnly: true,\n          onlineOnly: false,\n          sublabel: 'Regarder',\n          type: 'Thing',\n          value: 'ThingType.MUSEES_PATRIMOINE_ABO',\n        },\n        url: null,\n      },\n      {\n        id: '9A',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.682044Z',\n        description:\n          'Les tout jeunes gens, lorsqu’ils goûtent pour la première fois aux échanges d’arguments, en font un usage pervers, comme d’un jeu, s’en servant toujours pour contredire, et qu’en imitant ceux qui réfutent, eux-mêmes en réfutent d’autres, prenant plaisir, comme de jeunes chiens, à tirer et à déchiqueter par la parole quiconque se trouve près d’eux.',\n        extraData: {\n          author: 'Denis Chat',\n        },\n        idAtProviders: '1267',\n        isNational: true,\n        lastProviderId: null,\n        mediaUrls: ['test/urls'],\n        modelName: 'Product',\n        name: 'En rentrant de Palerme',\n        offerType: {\n          description:\n            'Résoudre l’énigme d’un jeu de piste dans votre ville ? Jouer en ligne entre amis ? Découvrir cet univers étrange avec une manette ?',\n          proLabel: 'Jeux Vidéo',\n          offlineOnly: false,\n          onlineOnly: true,\n          sublabel: 'Jouer',\n          type: 'Thing',\n          value: 'ThingType.JEUX_VIDEO',\n        },\n        url: 'https://ilestencoretemps.fr/',\n      },\n      {\n        id: 'HY',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.673159Z',\n        description:\n          'Mais quels seront enfin les objets de ces Spectacles ? Qu’y montrera-t-on ? Rien, si l’on veut. Avec la liberté, partout où règne l’affluence, le bien-être y règne aussi. Plantez au milieu d’une place un piquet couronnée de fleurs, rassemblez-y le Peuple, et vous aurez une fête. Faites mieux encore : donnez les spectateurs en spectacle ; rendez-les acteurs eux-mêmes ; faites que chacun se voye et s’aime dans les autres, afin que tous en soient mieux unis.',\n        extraData: {\n          author: 'Camille Forêt',\n        },\n        idAtProviders: '1265',\n        isNational: false,\n        lastProviderId: null,\n        mediaUrls: ['test/urls'],\n        modelName: 'Product',\n        name: 'Sun aux lentilles',\n        offerType: {\n          description:\n            'Action, science-fiction, documentaire ou comédie sentimentale ? En salle, en plein air ou bien au chaud chez soi ? Et si c’était plutôt cette exposition qui allait faire son cinéma ?',\n          proLabel: 'Cinéma (Abonnements)',\n          offlineOnly: true,\n          onlineOnly: false,\n          sublabel: 'Regarder',\n          type: 'Thing',\n          value: 'ThingType.CINEMA_ABO',\n        },\n        url: null,\n      },\n    ],\n    types: [\n      {\n        appLabel: 'pass Culture : activation évènementielle',\n        id: 0,\n        description: 'Activez votre pass Culture grâce à cette offre',\n        offlineOnly: true,\n        onlineOnly: false,\n        proLabel: 'pass Culture : activation évènementielle',\n        sublabel: 'Activation',\n        type: 'Event',\n        value: 'EventType.ACTIVATION',\n      },\n      {\n        appLabel: 'Cinéma (Projections, Séances, Évènements)',\n        id: 1,\n        description:\n          'Action, science-fiction, documentaire ou comédie sentimentale ? En salle, en plein air ou bien au chaud chez soi ? Et si c’était plutôt cette exposition qui allait faire son cinéma ?',\n        proLabel: 'Cinéma (Projections, Séances, Évènements)',\n        offlineOnly: true,\n        onlineOnly: false,\n        sublabel: 'Regarder',\n        type: 'Event',\n        value: 'EventType.CINEMA',\n      },\n      {\n        appLabel: 'Rencontrer',\n        id: 2,\n        description: 'Parfois une simple rencontre peut changer une vie...',\n        label: 'Conférence — Débat — Dédicace',\n        offlineOnly: true,\n        onlineOnly: false,\n        proLabel: 'Rencontrer',\n        type: 'Event',\n        value: 'EventType.CONFERENCE_DEBAT_DEDICACE',\n      },\n      {\n        appLabel: 'Jeux',\n        id: 3,\n        description:\n          'Résoudre l’énigme d’un jeu de piste dans votre ville ? Jouer en ligne entre amis ? Découvrir cet univers étrange avec une manette ?',\n        proLabel: 'Jeux',\n        offlineOnly: true,\n        onlineOnly: false,\n        sublabel: 'Jouer',\n        type: 'Event',\n        value: 'EventType.JEUX',\n      },\n      {\n        appLabel: 'Musique (Concerts, Festivals)',\n        id: 4,\n        description:\n          'Plutôt rock, rap ou classique ? Sur un smartphone avec des écouteurs ou entre amis au concert ?',\n        proLabel: 'Musique (Concerts, Festivals)',\n        offlineOnly: true,\n        onlineOnly: false,\n        sublabel: 'Écouter',\n        type: 'Event',\n        value: 'EventType.MUSIQUE',\n      },\n      {\n        appLabel: 'Musées — Patrimoine (Expositions, Visites guidées, Activités spécifiques)',\n        id: 5,\n        description:\n          'Action, science-fiction, documentaire ou comédie sentimentale ? En salle, en plein air ou bien au chaud chez soi ? Et si c’était plutôt cette exposition qui allait faire son cinéma ?',\n        proLabel: 'Musées — Patrimoine (Expositions, Visites guidées, Activités spécifiques)',\n        offlineOnly: true,\n        onlineOnly: false,\n        sublabel: 'Regarder',\n        type: 'Event',\n        value: 'EventType.MUSEES_PATRIMOINE',\n      },\n      {\n        appLabel: 'Pratique Artistique (Stages ponctuels)',\n        id: 6,\n        description:\n          'Jamais osé monter sur les planches ? Tenter d’apprendre la guitare, le piano ou la photographie ? Partir cinq jours découvrir un autre monde ? Bricoler dans un fablab, ou pourquoi pas, enregistrer votre premier titre ?',\n        proLabel: 'Pratique Artistique (Stages ponctuels)',\n        offlineOnly: true,\n        onlineOnly: false,\n        sublabel: 'Pratiquer',\n        type: 'Event',\n        value: 'EventType.PRATIQUE_ARTISTIQUE',\n      },\n      {\n        appLabel: 'Spectacle vivant',\n        id: 7,\n        description:\n          'Suivre un géant de 12 mètres dans la ville ? Rire aux éclats devant un stand up ? Rêver le temps d’un opéra ou d’un spectacle de danse ? Assister à une pièce de théâtre, ou se laisser conter une histoire ?',\n        proLabel: 'Spectacle vivant',\n        offlineOnly: true,\n        onlineOnly: false,\n        sublabel: 'Applaudir',\n        type: 'Event',\n        value: 'EventType.SPECTACLE_VIVANT',\n      },\n      {\n        appLabel: 'pass Culture : activation en ligne',\n        id: 8,\n        description: 'Activez votre pass Culture grâce à cette offre',\n        proLabel: 'pass Culture : activation en ligne',\n        offlineOnly: false,\n        onlineOnly: true,\n        sublabel: 'Activation',\n        type: 'Thing',\n        value: 'ThingType.ACTIVATION',\n      },\n      {\n        appLabel: 'Audiovisuel (Films sur supports physiques et VOD)',\n        id: 9,\n        description:\n          'Action, science-fiction, documentaire ou comédie sentimentale ? En salle, en plein air ou bien au chaud chez soi ? Et si c’était plutôt cette exposition qui allait faire son cinéma ?',\n        proLabel: 'Audiovisuel (Films sur supports physiques et VOD)',\n        offlineOnly: false,\n        onlineOnly: false,\n        sublabel: 'Regarder',\n        type: 'Thing',\n        value: 'ThingType.AUDIOVISUEL',\n      },\n      {\n        appLabel: 'Cinéma (Abonnements)',\n        id: 10,\n        description:\n          'Action, science-fiction, documentaire ou comédie sentimentale ? En salle, en plein air ou bien au chaud chez soi ? Et si c’était plutôt cette exposition qui allait faire son cinéma ?',\n        proLabel: 'Cinéma (Abonnements)',\n        offlineOnly: true,\n        onlineOnly: false,\n        sublabel: 'Regarder',\n        type: 'Thing',\n        value: 'ThingType.CINEMA_ABO',\n      },\n      {\n        appLabel: 'Jeux (Abonnements)',\n        id: 11,\n        description:\n          'Résoudre l’énigme d’un jeu de piste dans votre ville ? Jouer en ligne entre amis ? Découvrir cet univers étrange avec une manette ?',\n        proLabel: 'Jeux (Abonnements)',\n        offlineOnly: true,\n        onlineOnly: false,\n        sublabel: 'Jouer',\n        type: 'Thing',\n        value: 'ThingType.JEUX_ABO',\n      },\n      {\n        appLabel: 'Jeux Vidéo',\n        id: 12,\n        description:\n          'Résoudre l’énigme d’un jeu de piste dans votre ville ? Jouer en ligne entre amis ? Découvrir cet univers étrange avec une manette ?',\n        proLabel: 'Jeux Vidéo',\n        offlineOnly: false,\n        onlineOnly: true,\n        sublabel: 'Jouer',\n        type: 'Thing',\n        value: 'ThingType.JEUX_VIDEO',\n      },\n      {\n        appLabel: 'Livre — Édition',\n        id: 13,\n        description:\n          'S’abonner à un quotidien d’actualité ? À un hebdomadaire humoristique ? À un mensuel dédié à la nature ? Acheter une BD ou un manga ? Ou tout simplement ce livre dont tout le monde parle ?',\n        proLabel: 'Livre — Édition',\n        offlineOnly: false,\n        onlineOnly: false,\n        sublabel: 'Lire',\n        type: 'Thing',\n        value: 'ThingType.LIVRE_EDITION',\n      },\n      {\n        appLabel: 'Musées — Patrimoine (Abonnements, Visites libres)',\n        id: 14,\n        description:\n          'Action, science-fiction, documentaire ou comédie sentimentale ? En salle, en plein air ou bien au chaud chez soi ? Et si c’était plutôt cette exposition qui allait faire son cinéma ?',\n        proLabel: 'Musées — Patrimoine (Abonnements, Visites libres)',\n        offlineOnly: true,\n        onlineOnly: false,\n        sublabel: 'Regarder',\n        type: 'Thing',\n        value: 'ThingType.MUSEES_PATRIMOINE_ABO',\n      },\n      {\n        appLabel: 'Musique (Abonnements concerts)',\n        id: 15,\n        description:\n          'Plutôt rock, rap ou classique ? Sur un smartphone avec des écouteurs ou entre amis au concert ?',\n        proLabel: 'Musique (Abonnements concerts)',\n        offlineOnly: true,\n        onlineOnly: false,\n        sublabel: 'Écouter',\n        type: 'Thing',\n        value: 'ThingType.MUSIQUE_ABO',\n      },\n      {\n        appLabel: 'Musique (sur supports physiques ou en ligne)',\n        id: 16,\n        description:\n          'Plutôt rock, rap ou classique ? Sur un smartphone avec des écouteurs ou entre amis au concert ?',\n        proLabel: 'Musique (sur supports physiques ou en ligne)',\n        offlineOnly: false,\n        onlineOnly: false,\n        sublabel: 'Écouter',\n        type: 'Thing',\n        value: 'ThingType.MUSIQUE',\n      },\n      {\n        appLabel: 'Pratique Artistique (Abonnements)',\n        id: 17,\n        description:\n          'Jamais osé monter sur les planches ? Tenter d’apprendre la guitare, le piano ou la photographie ? Partir cinq jours découvrir un autre monde ? Bricoler dans un fablab, ou pourquoi pas, enregistrer votre premier titre ?',\n        proLabel: 'Pratique Artistique (Abonnements)',\n        offlineOnly: true,\n        onlineOnly: false,\n        sublabel: 'Pratiquer',\n        type: 'Thing',\n        value: 'ThingType.PRATIQUE_ARTISTIQUE_ABO',\n      },\n      {\n        appLabel: 'Presse (Abonnements)',\n        id: 18,\n        description:\n          'S’abonner à un quotidien d’actualité ? À un hebdomadaire humoristique ? À un mensuel dédié à la nature ? Acheter une BD ou un manga ? Ou tout simplement ce livre dont tout le monde parle ?',\n        proLabel: 'Presse (Abonnements)',\n        offlineOnly: false,\n        onlineOnly: true,\n        sublabel: 'Lire',\n        type: 'Thing',\n        value: 'ThingType.PRESSE_ABO',\n      },\n    ],\n    things: [\n      {\n        lastProviderId: 123,\n      },\n    ],\n    users: [\n      {\n        id: 'FE',\n        canBookFeeOffers: false,\n        dateCreated: '2019-03-07T10:39:23.560374Z',\n        dateOfBirth: '2001-01-01T00:00:00Z',\n        departementCode: '93',\n        email: 'pctest.admin93.0@example.com',\n        firstName: 'PC Test Admin',\n        isAdmin: true,\n        lastName: '93 0',\n        modelName: 'User',\n        phoneNumber: '0612345678',\n        postalCode: '93100',\n        publicName: 'PC Test Admin 93 0',\n      },\n    ],\n    userOfferers: [\n      {\n        offererId: 'FE',\n        userId: 'FE',\n        rights: 'admin',\n      },\n    ],\n    venues: [\n      {\n        id: 'DA',\n        address: null,\n        bookingEmail: 'john.doe@test.com',\n        city: null,\n        comment: null,\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.234016Z',\n        departementCode: null,\n        idAtProviders: null,\n        isValidated: true,\n        isVirtual: true,\n        lastProviderId: null,\n        latitude: 48.83638,\n        longitude: 2.40027,\n        managingOffererId: 'BA',\n        modelName: 'Venue',\n        name: 'Le Sous-sol (Offre numérique)',\n        postalCode: null,\n        siret: null,\n        validationToken: null,\n      },\n      {\n        id: 'C4',\n        address: null,\n        bookingEmail: 'john.doe@test.com',\n        city: null,\n        comment: null,\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.219473Z',\n        departementCode: null,\n        idAtProviders: null,\n        isValidated: true,\n        isVirtual: true,\n        lastProviderId: null,\n        latitude: 48.83638,\n        longitude: 2.40027,\n        managingOffererId: 'CA',\n        modelName: 'Venue',\n        name: 'Terrain vague (Offre numérique)',\n        postalCode: null,\n        siret: null,\n        validationToken: null,\n      },\n      {\n        id: 'CY',\n        address: 'RUE DES POMMES ROSAS',\n        bookingEmail: 'fake@example.com',\n        city: 'Cayenne',\n        comment: null,\n        dateModifiedAtLastProvider: '2019-03-07T10:40:03.216279Z',\n        departementCode: '97',\n        idAtProviders: null,\n        isValidated: true,\n        isVirtual: false,\n        lastProviderId: null,\n        latitude: 4.93339,\n        longitude: -52.32536,\n        managingOffererId: 'CA',\n        modelName: 'Venue',\n        name: 'Terrain vague',\n        postalCode: '97300',\n        siret: '22222223211111',\n        validationToken: null,\n      },\n    ],\n    venueProviders: [],\n  },\n  errors: {\n    user: null,\n    offer: null,\n    'mediation-H4': null,\n    stockMU: null,\n  },\n  features: {\n    list: [],\n    initialized: false,\n  },\n  form: {\n    offer: {\n      name: 'Dormons peu soupons bien',\n      type: 'ThingType.JEUX_VIDEO',\n      offererId: 'BA',\n      venueId: 'DA',\n      url: 'https://ilestencoretemps.fr/',\n      bookingEmail: 'booking.email@test.com',\n      description:\n        'Ainsi la personne avec qui elle avait confessé qu’elle allait goûter, avec qui elle vous avait supplié de la laisser goûter, cette personne, raison avouée par la nécessité, ce n’était pas elle, c’était une autre, c’était encore autre chose ! Autre chose, quoi ? Une autre, qui ?',\n      isNational: true,\n    },\n    'mediation-H4': {\n      isActive: true,\n    },\n    stockMU: {\n      eventOccurrenceId: null,\n      offerId: 'UU',\n      price: 17,\n      bookingLimitDatetime: null,\n      quantity: 10,\n    },\n  },\n  notification: null,\n  tracker: {},\n  offers: {\n    list: [\n      {\n        id: 'UU',\n        bookingEmail: 'booking.email@test.com',\n        dateCreated: '2019-03-07T10:39:23.560392Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:05.443621Z',\n        idAtProviders: null,\n        isActive: true,\n        lastProviderId: null,\n        modelName: 'Offer',\n        productId: 'LY',\n        isEvent: false,\n        isThing: true,\n        venueId: 'DA',\n        mediationsIds: ['H4'],\n        stocksIds: ['MU'],\n      },\n      {\n        id: 'UQ',\n        bookingEmail: 'booking.email@test.com',\n        dateCreated: '2019-03-07T10:39:23.560392Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:05.441307Z',\n        idAtProviders: null,\n        isActive: false,\n        isEvent: false,\n        isThing: true,\n        lastProviderId: null,\n        modelName: 'Offer',\n        productId: 'L9',\n        venueId: 'DA',\n        mediationsIds: [],\n        stocksIds: [],\n      },\n      {\n        id: 'UM',\n        bookingEmail: 'booking.email@test.com',\n        dateCreated: '2019-03-07T10:39:23.560392Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:05.438988Z',\n        idAtProviders: null,\n        isActive: true,\n        isEvent: false,\n        isThing: true,\n        lastProviderId: null,\n        modelName: 'Offer',\n        productId: 'KQ',\n        venueId: 'DA',\n        mediationsIds: ['HY'],\n        stocksIds: ['MQ'],\n      },\n      {\n        id: 'U9',\n        bookingEmail: 'booking.email@test.com',\n        dateCreated: '2019-03-07T10:39:23.560392Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:05.436390Z',\n        isEvent: false,\n        isThing: true,\n        idAtProviders: null,\n        isActive: true,\n        lastProviderId: null,\n        modelName: 'Offer',\n        productId: 'KA',\n        venueId: 'DA',\n        mediationsIds: [],\n        stocksIds: ['MM'],\n      },\n      {\n        id: 'UE',\n        bookingEmail: 'booking.email@test.com',\n        dateCreated: '2019-03-07T10:39:23.560392Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:05.433228Z',\n        isEvent: false,\n        isThing: true,\n        idAtProviders: null,\n        isActive: false,\n        lastProviderId: null,\n        modelName: 'Offer',\n        productId: 'J9',\n        venueId: 'DA',\n        mediationsIds: ['HU'],\n        stocksIds: [],\n      },\n      {\n        id: 'UA',\n        bookingEmail: 'booking.email@test.com',\n        dateCreated: '2019-03-07T10:39:23.560392Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:05.409454Z',\n        isEvent: false,\n        isThing: true,\n        idAtProviders: null,\n        isActive: true,\n        lastProviderId: null,\n        modelName: 'Offer',\n        productId: '9Y',\n        venueId: 'C4',\n        mediationsIds: [],\n        stocksIds: ['M9'],\n      },\n      {\n        id: 'T4',\n        bookingEmail: 'booking.email@test.com',\n        dateCreated: '2019-03-07T10:39:23.560392Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:05.407437Z',\n        isEvent: false,\n        isThing: true,\n        idAtProviders: null,\n        isActive: true,\n        lastProviderId: null,\n        modelName: 'Offer',\n        productId: '9Q',\n        venueId: 'CY',\n        mediationsIds: ['HQ'],\n        stocksIds: ['ME'],\n      },\n      {\n        id: 'TY',\n        bookingEmail: 'booking.email@test.com',\n        dateCreated: '2019-03-07T10:39:23.560392Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:05.405387Z',\n        isEvent: false,\n        isThing: true,\n        idAtProviders: null,\n        isActive: false,\n        lastProviderId: null,\n        modelName: 'Offer',\n        productId: '99',\n        venueId: 'CY',\n        mediationsIds: [],\n        stocksIds: [],\n      },\n      {\n        id: 'TU',\n        bookingEmail: 'booking.email@test.com',\n        dateCreated: '2019-03-07T10:39:23.560392Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:05.403138Z',\n        isEvent: false,\n        isThing: true,\n        idAtProviders: null,\n        isActive: true,\n        lastProviderId: null,\n        modelName: 'Offer',\n        productId: '9A',\n        venueId: 'C4',\n        mediationsIds: ['HM'],\n        stocksIds: ['MA'],\n      },\n      {\n        id: 'TQ',\n        bookingEmail: 'booking.email@test.com',\n        dateCreated: '2019-03-07T10:39:23.560392Z',\n        dateModifiedAtLastProvider: '2019-03-07T10:40:05.400896Z',\n        isEvent: false,\n        isThing: true,\n        idAtProviders: null,\n        isActive: true,\n        lastProviderId: null,\n        modelName: 'Offer',\n        productId: 'HY',\n        venueId: 'CY',\n        mediationsIds: [],\n        stocksIds: ['L4'],\n      },\n    ],\n    searchFilters: {},\n  },\n  user: {\n    id: 'FE',\n    canBookFeeOffers: false,\n    dateCreated: '2019-03-07T10:39:23.560374Z',\n    dateOfBirth: '2001-01-01T00:00:00Z',\n    departementCode: '93',\n    email: 'pctest.admin93.0@example.com',\n    firstName: 'PC Test Admin',\n    isAdmin: true,\n    lastName: '93 0',\n    modelName: 'User',\n    phoneNumber: '67856557574',\n    postalCode: '93100',\n    publicName: 'PC Test Admin 93 0',\n  },\n  _persist: {\n    version: -1,\n    rehydrated: true,\n  },\n}\n\nexport default state\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/config/apiPaths.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/index.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/registerServiceWorker.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/repository/__specs__/venuesService.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (142). Maximum allowed is 50.',
        line: 9,
        column: 27,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 150,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import * as pcapi from 'repository/pcapi/pcapi'\n\nimport {\n  formatAndOrderVenues,\n  fetchAllVenuesByProUser,\n  computeVenueDisplayName,\n} from '../venuesService'\n\ndescribe('venuesService', () => {\n  let mockJsonPromise\n\n  describe('fetchAllVenuesByProUser', () => {\n    beforeEach(() => {\n      mockJsonPromise = Promise.resolve([\n        {\n          id: 'AE',\n          name: 'Librairie Kléber',\n          isVirtual: false,\n        },\n      ])\n      jest.spyOn(pcapi, 'getVenuesForOfferer').mockImplementation(() => mockJsonPromise)\n    })\n\n    it('should return list of venues', async () => {\n      // When\n      const venues = await fetchAllVenuesByProUser()\n      // Then\n      expect(pcapi.getVenuesForOfferer).toHaveBeenCalledWith({ offererId: null })\n      expect(venues).toHaveLength(1)\n      expect(venues[0]).toStrictEqual({\n        id: 'AE',\n        name: 'Librairie Kléber',\n        isVirtual: false,\n      })\n    })\n\n    it('should call api with offererId in query params when given', async () => {\n      // When\n      await fetchAllVenuesByProUser('A4')\n\n      // Then\n      expect(pcapi.getVenuesForOfferer).toHaveBeenCalledWith({ offererId: 'A4' })\n    })\n\n    it('should return empty paginatedBookingsRecap when an error occurred', async () => {\n      // Given\n      mockJsonPromise = Promise.reject('An error occured')\n\n      // When\n      const venues = await fetchAllVenuesByProUser()\n\n      // Then\n      expect(venues).toHaveLength(0)\n    })\n  })\n\n  describe('formatAndOrderVenues', () => {\n    it('should sort venues alphabetically', () => {\n      // given\n      const venues = [\n        { id: 'AF', name: 'Librairie Fnac', offererName: 'gilbert Joseph', isVirtual: false },\n        { id: 'AE', name: 'Offre numérique', offererName: 'gilbert Joseph', isVirtual: true },\n      ]\n\n      // when\n      const sortingValues = formatAndOrderVenues(venues)\n\n      // then\n      expect(sortingValues).toStrictEqual([\n        {\n          displayName: 'gilbert Joseph - Offre numérique',\n          id: 'AE',\n        },\n        {\n          displayName: 'Librairie Fnac',\n          id: 'AF',\n        },\n      ])\n    })\n\n    it('should format venue option with \"offerer name - offre numérique\" when venue is virtual', () => {\n      // given\n      const venues = [\n        { id: 'AE', name: 'Offre numérique', offererName: 'gilbert Joseph', isVirtual: true },\n      ]\n\n      // when\n      const formattedValues = formatAndOrderVenues(venues)\n\n      // then\n      expect(formattedValues).toStrictEqual([\n        {\n          displayName: 'gilbert Joseph - Offre numérique',\n          id: 'AE',\n        },\n      ])\n    })\n  })\n\n  describe('computeVenueDisplayName', () => {\n    it('should give venue name when venue is not virtual and has no public name', () => {\n      // given\n      const venue = {\n        id: 'AF',\n        name: 'Librairie Fnac',\n        offererName: 'gilbert Joseph',\n        isVirtual: false,\n      }\n\n      // when\n      const computedVenueDisplayName = computeVenueDisplayName(venue)\n\n      // then\n      expect(computedVenueDisplayName).toStrictEqual('Librairie Fnac')\n    })\n\n    it('should give venue public name when venue is not virtual and has a public name', () => {\n      // given\n      const venue = {\n        id: 'AF',\n        name: 'Librairie Fnac',\n        offererName: 'gilbert Joseph',\n        publicName: 'Ma petite librairie',\n        isVirtual: false,\n      }\n\n      // when\n      const computedVenueDisplayName = computeVenueDisplayName(venue)\n\n      // then\n      expect(computedVenueDisplayName).toStrictEqual('Ma petite librairie')\n    })\n\n    it('should give the offerer name with \"- Offre numérique\" when venue is virtual', () => {\n      // given\n      const venue = {\n        id: 'AF',\n        name: 'Librairie Fnac',\n        offererName: 'gilbert Joseph',\n        isVirtual: true,\n      }\n\n      // when\n      const computedVenueDisplayName = computeVenueDisplayName(venue)\n\n      // then\n      expect(computedVenueDisplayName).toStrictEqual('gilbert Joseph - Offre numérique')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/repository/pcapi/__specs__/pcapi.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (410). Maximum allowed is 50.',
        line: 43,
        column: 19,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 452,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (70). Maximum allowed is 50.',
        line: 44,
        column: 34,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 113,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (62). Maximum allowed is 50.',
        line: 115,
        column: 40,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 176,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (51). Maximum allowed is 50.',
        line: 282,
        column: 35,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 332,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (88). Maximum allowed is 50.',
        line: 334,
        column: 41,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 421,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (380). Maximum allowed is 300.',
        line: 356,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 453,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 6,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { DEFAULT_PRE_FILTERS } from 'components/pages/Bookings/PreFilters/_constants'\nimport { ALL_OFFERERS, DEFAULT_SEARCH_FILTERS } from 'components/pages/Offers/Offers/_constants'\nimport {\n  getBooking,\n  generateOffererApiKey,\n  getVenuesForOfferer,\n  getVenueStats,\n  invalidateBooking,\n  loadFilteredBookingsRecap,\n  signout,\n  updateUserInformations,\n  validateBooking,\n} from 'repository/pcapi/pcapi'\nimport { client } from 'repository/pcapi/pcapiClient'\nimport { bookingRecapFactory } from 'utils/apiFactories'\n\nimport {\n  deleteStock,\n  loadFilteredOffers,\n  postThumbnail,\n  setHasSeenTutos,\n  updateOffersActiveStatus,\n  validateDistantImage,\n} from '../pcapi'\n\njest.mock('repository/pcapi/pcapiClient', () => ({\n  client: {\n    delete: jest.fn(),\n    get: jest.fn().mockResolvedValue({}),\n    patch: jest.fn(),\n    post: jest.fn().mockResolvedValue({}),\n    postWithFormData: jest.fn(),\n  },\n}))\n\njest.mock('utils/date', () => {\n  return {\n    ...jest.requireActual('utils/date'),\n    getToday: jest.fn().mockReturnValue(new Date(2020, 8, 12)),\n  }\n})\n\ndescribe('pcapi', () => {\n  describe('loadFilteredOffers', () => {\n    const returnedResponse = [\n      {\n        hasBookingLimitDatetimesPassed: false,\n        id: 'AAA',\n        isActive: false,\n        isEditable: true,\n        isEvent: true,\n        isThing: false,\n        name: 'Drunk - VF',\n        stocks: [],\n        thumbUrl: '',\n        type: 'EventType.CINEMA',\n        venue: {\n          id: 'BBB',\n          isVirtual: false,\n          managingOffererId: 'CCC',\n          name: 'Mon petit cinéma',\n          offererName: 'Mon groupe de cinémas',\n        },\n        venueId: 'AAA',\n      },\n    ]\n\n    beforeEach(() => {\n      client.get.mockResolvedValue(returnedResponse)\n    })\n\n    it('should return api response', async () => {\n      // When\n      const response = await loadFilteredOffers({})\n\n      // Then\n      expect(response).toBe(returnedResponse)\n    })\n\n    it('should call offers route without query params when provided filters are defaults', async () => {\n      // Given\n      const filters = {\n        name: DEFAULT_SEARCH_FILTERS.name,\n        venueId: DEFAULT_SEARCH_FILTERS.venueId,\n        status: DEFAULT_SEARCH_FILTERS.status,\n        creationMode: DEFAULT_SEARCH_FILTERS.creationMode,\n      }\n\n      // When\n      await loadFilteredOffers(filters)\n\n      // Then\n      expect(client.get).toHaveBeenCalledWith('/offers')\n    })\n\n    it('should call offers route with filters when provided', async () => {\n      // Given\n      const filters = {\n        nameOrIsbn: 'OCS',\n        venueId: 'AA',\n        status: 'expired',\n        creationMode: 'manual',\n      }\n\n      // When\n      await loadFilteredOffers(filters)\n\n      // Then\n      expect(client.get).toHaveBeenCalledWith(\n        '/offers?nameOrIsbn=OCS&venueId=AA&status=expired&creationMode=manual'\n      )\n    })\n  })\n\n  describe('updateOffersActiveStatus', () => {\n    describe('when updating all offers', () => {\n      it('should call offers/all-active-status with proper params when filters are defaults', async () => {\n        // given\n        const body = {\n          isActive: true,\n        }\n\n        // when\n        await updateOffersActiveStatus(true, body)\n\n        // then\n        expect(client.patch).toHaveBeenCalledWith('/offers/all-active-status', {\n          isActive: true,\n        })\n      })\n\n      it('should call offers/all-active-status with proper params when filters are set', async () => {\n        // given\n        const body = {\n          isActive: true,\n          offererId: 'IJ',\n          venueId: 'KL',\n          typeId: 'ThingType.AUDIOVISUEL',\n          status: 'expired',\n          creationMode: 'imported',\n        }\n\n        // when\n        await updateOffersActiveStatus(true, body)\n\n        // then\n        expect(client.patch).toHaveBeenCalledWith('/offers/all-active-status', {\n          isActive: true,\n          offererId: 'IJ',\n          venueId: 'KL',\n          typeId: 'ThingType.AUDIOVISUEL',\n          status: 'expired',\n          creationMode: 'imported',\n        })\n      })\n    })\n\n    describe('when updating some offers', () => {\n      it('should call offers/active-status with proper params', async () => {\n        // given\n        const body = {\n          isActive: true,\n          ids: ['A3', 'E9'],\n        }\n\n        // when\n        await updateOffersActiveStatus(false, body)\n\n        // then\n        expect(client.patch).toHaveBeenCalledWith('/offers/active-status', {\n          ids: ['A3', 'E9'],\n          isActive: true,\n        })\n      })\n    })\n  })\n\n  describe('getVenueStats', () => {\n    it('should get stats for given venue', () => {\n      // When\n      getVenueStats('3F')\n\n      // Then\n      expect(client.get).toHaveBeenCalledWith('/venues/3F/stats')\n    })\n  })\n\n  describe('generateOffererApiKey', () => {\n    it('should post an api key', async () => {\n      // When\n      await generateOffererApiKey('3F')\n\n      // Then\n      expect(client.post).toHaveBeenCalledWith('/offerers/3F/api_keys', {})\n    })\n  })\n\n  describe('deleteStock', () => {\n    it('should delete stock given its id', () => {\n      // When\n      deleteStock('2E')\n\n      // Then\n      expect(client.delete).toHaveBeenCalledWith('/stocks/2E')\n    })\n  })\n\n  describe('signout', () => {\n    it('should sign out the user', () => {\n      // When\n      signout()\n\n      // Then\n      expect(client.get).toHaveBeenCalledWith('/users/signout')\n    })\n  })\n\n  describe('validateDistantImage', () => {\n    it('should call the api correct POST route with url as a body param', () => {\n      // given\n      const url = 'http://ma-mauvaise-url'\n\n      // when\n      validateDistantImage(url)\n\n      // then\n      expect(client.post).toHaveBeenCalledWith(`/offers/thumbnail-url-validation`, {\n        url: url,\n      })\n    })\n  })\n\n  describe('postThumbnail', () => {\n    it('should call the api correct POST route with thumbnail info as body param', () => {\n      // given\n      const file = new File([''], 'myThumb.png')\n      const body = new FormData()\n      body.append('offerId', 'AA')\n      body.append('offererId', 'BB')\n      body.append('credit', 'Mon crédit')\n      body.append('croppingRectX', '12')\n      body.append('croppingRectY', '32')\n      body.append('croppingRectHeight', '350')\n      body.append('thumb', file)\n      body.append('thumbUrl', '')\n\n      // when\n      postThumbnail('BB', 'AA', 'Mon crédit', file, '', '12', '32', '350')\n\n      // then\n      expect(client.postWithFormData).toHaveBeenCalledWith(`/offers/thumbnails`, body)\n    })\n  })\n\n  describe('hasSeenTutos', () => {\n    it('should call api', () => {\n      // when\n      setHasSeenTutos()\n\n      // then\n      expect(client.patch).toHaveBeenCalledWith('/users/tuto-seen')\n    })\n  })\n\n  describe('update profile informations', () => {\n    it('should call api patch with user informations', () => {\n      // when\n      const body = {\n        firstName: 'Example',\n        lastName: 'User',\n        email: 'example.user@example.com',\n        phoneNumber: '0606060606',\n      }\n\n      updateUserInformations(body)\n\n      // then\n      expect(client.patch).toHaveBeenCalledWith('/users/current', body)\n    })\n  })\n\n  describe('getVenuesForOfferer', () => {\n    beforeEach(() => {\n      const returnedResponse = {\n        venues: [\n          {\n            id: 'AE',\n            name: 'Librairie Kléber',\n            isVirtual: false,\n          },\n        ],\n      }\n      client.get.mockResolvedValue(returnedResponse)\n    })\n\n    it('should return venues value', async () => {\n      // When\n      const venues = await getVenuesForOfferer()\n\n      // Then\n      expect(venues).toHaveLength(1)\n      expect(venues[0]).toStrictEqual({\n        id: 'AE',\n        name: 'Librairie Kléber',\n        isVirtual: false,\n      })\n    })\n\n    it('should call api with offererId in query params when given', async () => {\n      // When\n      await getVenuesForOfferer({ offererId: 'A4' })\n\n      // Then\n      expect(client.get).toHaveBeenCalledWith('/venues?offererId=A4')\n    })\n\n    it('should call api with validadedForUser as true when no offererId was given', async () => {\n      // When\n      await getVenuesForOfferer()\n\n      // Then\n      expect(client.get).toHaveBeenCalledWith('/venues?validatedForUser=true')\n    })\n\n    it('should not add offererId in query params when offererId value is ALL_OFFERERS', async () => {\n      // When\n      await getVenuesForOfferer({ offererId: ALL_OFFERERS })\n\n      // Then\n      expect(client.get).toHaveBeenCalledWith('/venues')\n    })\n  })\n\n  describe('loadFilteredBookingsRecap', () => {\n    const returnedResponse = {\n      page: 1,\n      pages: 1,\n      total: 1,\n      bookings_recap: [bookingRecapFactory()],\n    }\n\n    beforeEach(() => {\n      client.get.mockResolvedValue(returnedResponse)\n    })\n\n    it('should return api response', async () => {\n      // When\n      const response = await loadFilteredBookingsRecap({})\n\n      // Then\n      expect(response).toBe(returnedResponse)\n    })\n\n    it('should call offers route with \"page=1\" and default period when no other filters are provided', async () => {\n      // Given\n      const filters = {\n        page: 1,\n      }\n\n      // When\n      await loadFilteredBookingsRecap(filters)\n\n      // Then\n      expect(client.get).toHaveBeenCalledWith(\n        '/bookings/pro?page=1&bookingPeriodBeginningDate=2020-08-13&bookingPeriodEndingDate=2020-09-12'\n      )\n    })\n\n    it('should call offers route with \"page=1\" and default period when provided filters are defaults', async () => {\n      // Given\n      const filters = {\n        page: 1,\n        venueId: DEFAULT_PRE_FILTERS.offerVenueId,\n        eventDate: DEFAULT_PRE_FILTERS.offerEventDate,\n      }\n\n      // When\n      await loadFilteredBookingsRecap(filters)\n\n      // Then\n      expect(client.get).toHaveBeenCalledWith(\n        '/bookings/pro?page=1&bookingPeriodBeginningDate=2020-08-13&bookingPeriodEndingDate=2020-09-12'\n      )\n    })\n\n    it('should call offers route with filters when provided', async () => {\n      // Given\n      const filters = {\n        venueId: 'AA',\n        eventDate: new Date(2020, 8, 13),\n        page: 2,\n        bookingPeriodBeginningDate: new Date(2020, 6, 8),\n        bookingPeriodEndingDate: new Date(2020, 8, 4),\n      }\n\n      // When\n      await loadFilteredBookingsRecap(filters)\n\n      // Then\n      expect(client.get).toHaveBeenCalledWith(\n        '/bookings/pro?page=2&venueId=AA&eventDate=2020-09-13T00%3A00%3A00Z&bookingPeriodBeginningDate=2020-07-08&bookingPeriodEndingDate=2020-09-04'\n      )\n    })\n\n    it('should call bookings route with default period filter when not provided', async () => {\n      // Given\n      const filters = {\n        venueId: 'AA',\n        eventDate: new Date(2020, 8, 13),\n        page: 2,\n      }\n\n      // When\n      await loadFilteredBookingsRecap(filters)\n\n      // Then\n      expect(client.get).toHaveBeenCalledWith(\n        '/bookings/pro?page=2&venueId=AA&eventDate=2020-09-13T00%3A00%3A00Z&bookingPeriodBeginningDate=2020-08-13&bookingPeriodEndingDate=2020-09-12'\n      )\n    })\n  })\n\n  describe('getBooking', () => {\n    it('should get booking given it code', async () => {\n      // When\n      getBooking('A5DS6Q')\n\n      // Then\n      expect(client.get).toHaveBeenCalledWith('/v2/bookings/token/A5DS6Q')\n    })\n  })\n\n  describe('validateBooking', () => {\n    it('should patch booking with it code', async () => {\n      // When\n      validateBooking('A5DS6Q')\n\n      // Then\n      expect(client.patch).toHaveBeenCalledWith('/v2/bookings/use/token/A5DS6Q')\n    })\n  })\n\n  describe('invalidateBooking', () => {\n    it('should patch booking with it code', async () => {\n      // When\n      invalidateBooking('A5DS6Q')\n\n      // Then\n      expect(client.patch).toHaveBeenCalledWith('/v2/bookings/keep/token/A5DS6Q')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/repository/pcapi/__specs__/pcapiClient.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (270). Maximum allowed is 50.',
        line: 13,
        column: 25,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 282,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (76). Maximum allowed is 50.',
        line: 22,
        column: 19,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 97,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (53). Maximum allowed is 50.',
        line: 189,
        column: 21,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 241,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import fetch from 'jest-fetch-mock'\n\nimport { client } from 'repository/pcapi/pcapiClient'\nimport { API_URL, URL_FOR_MAINTENANCE } from 'utils/config'\n\ndelete window.location\nwindow.location = {}\nconst setHrefSpy = jest.fn()\nObject.defineProperty(window.location, 'href', {\n  set: setHrefSpy,\n})\n\ndescribe('pcapiClient', () => {\n  beforeEach(() => {\n    fetch.mockResponse(JSON.stringify({}), { status: 200 })\n  })\n\n  afterEach(() => {\n    fetch.resetMocks()\n  })\n\n  describe('get', () => {\n    it('should call API with given path and JSON Mime type and credentials by default and correct method', async () => {\n      // Given\n      const path = '/bookings/pro'\n\n      // When\n      await client.get(path)\n\n      // Then\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}${path}`, {\n        credentials: 'include',\n        method: 'GET',\n      })\n    })\n\n    it('should call API without credentials when not required', async () => {\n      // Given\n      const path = '/bookings/pro'\n\n      // When\n      await client.get(path, false)\n\n      // Then\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}${path}`, {\n        method: 'GET',\n      })\n    })\n\n    it('should return json if return status is ok', async () => {\n      // Given\n      const oneBooking = {\n        beneficiary: { email: 'user@example.com', firstname: 'First', lastname: 'Last' },\n        booking_date: '2020-04-12T19:31:12Z',\n        booking_is_duo: false,\n        booking_status: 'reimbursed',\n        booking_token: 'TOKEN',\n        stock: { offer_name: 'My offer name' },\n      }\n      const paginatedBookingRecapReturned = {\n        page: 1,\n        pages: 1,\n        total: 1,\n        bookings_recap: [oneBooking],\n      }\n      fetch.mockResponseOnce(JSON.stringify(paginatedBookingRecapReturned), { status: 200 })\n\n      // When\n      const response = await client.get('/bookings/pro')\n\n      // Then\n      expect(response.bookings_recap).toHaveLength(1)\n      expect(response).toStrictEqual(paginatedBookingRecapReturned)\n    })\n\n    it('should reject if return status is not ok', async () => {\n      // Given\n      fetch.mockResponse(JSON.stringify('Forbidden'), { status: 403 })\n\n      // When\n      await expect(client.get('/bookings/pro')).rejects.toStrictEqual({\n        errors: 'Forbidden',\n        status: 403,\n      })\n    })\n\n    it('should redirect to maintenance page when status is 503', async () => {\n      // Given\n      fetch.mockResponse('Service Unavailable', { status: 503 })\n\n      // When\n      await expect(client.get('/bookings/pro')).rejects.toBeNull()\n\n      // Then\n      expect(setHrefSpy).toHaveBeenCalledWith(URL_FOR_MAINTENANCE)\n    })\n  })\n\n  describe('post', () => {\n    it('should call API with given path and body and JSON Mime type and credentials by default and correct method', async () => {\n      // Given\n      const path = '/bookings/pro'\n      const body = {\n        key: 'value',\n      }\n\n      // When\n      await client.post(path, body)\n\n      // Then\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}${path}`, {\n        credentials: 'include',\n        headers: { 'Content-Type': 'application/json' },\n        method: 'POST',\n        body: '{\"key\":\"value\"}',\n      })\n    })\n\n    it('should call API without credentials when not required', async () => {\n      // Given\n      const path = '/bookings/pro'\n      const body = {\n        key: 'value',\n      }\n\n      // When\n      await client.post(path, body, false)\n\n      // Then\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}${path}`, {\n        headers: { 'Content-Type': 'application/json' },\n        method: 'POST',\n        body: '{\"key\":\"value\"}',\n      })\n    })\n  })\n\n  describe('postWithFormData', () => {\n    it('should call API with given path and formData and credentials by default and correct method', async () => {\n      // Given\n      const path = '/mediations'\n      const file = new File([''], 'myThumb.png')\n      const body = new FormData()\n      body.append('offerId', 'AA')\n      body.append('offererId', 'BB')\n      body.append('credit', 'Mon crédit')\n      body.append('croppingRect[x]', '12')\n      body.append('croppingRect[y]', '32')\n      body.append('croppingRect[height]', '350')\n      body.append('thumb', file)\n\n      // When\n      await client.postWithFormData(path, body)\n\n      // Then\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}${path}`, {\n        credentials: 'include',\n        headers: { encode: 'multipart/form-data' },\n        method: 'POST',\n        body: body,\n      })\n    })\n\n    it('should call API without credentials when not required', async () => {\n      // Given\n      const path = '/mediations'\n      const file = new File([''], 'myThumb.png')\n      const body = new FormData()\n      body.append('offerId', 'AA')\n      body.append('offererId', 'BB')\n      body.append('credit', 'Mon crédit')\n      body.append('croppingRect[x]', '12')\n      body.append('croppingRect[y]', '32')\n      body.append('croppingRect[height]', '350')\n      body.append('thumb', file)\n\n      // When\n      await client.postWithFormData(path, body, false)\n\n      // Then\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}${path}`, {\n        headers: { encode: 'multipart/form-data' },\n        method: 'POST',\n        body: body,\n      })\n    })\n  })\n\n  describe('patch', () => {\n    it('should call API with given path and body and JSON Mime type and credentials by default and correct method', async () => {\n      // Given\n      const path = '/bookings/pro'\n      const body = {\n        key: 'value',\n      }\n\n      // When\n      await client.patch(path, body)\n\n      // Then\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}${path}`, {\n        credentials: 'include',\n        headers: { 'Content-Type': 'application/json' },\n        method: 'PATCH',\n        body: '{\"key\":\"value\"}',\n      })\n    })\n\n    it('should call API without credentials when not required', async () => {\n      // Given\n      const path = '/bookings/pro'\n      const body = {\n        key: 'value',\n      }\n\n      // When\n      await client.patch(path, body, false)\n\n      // Then\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}${path}`, {\n        headers: { 'Content-Type': 'application/json' },\n        method: 'PATCH',\n        body: '{\"key\":\"value\"}',\n      })\n    })\n\n    it('should have default value for data', async () => {\n      // Given\n      const path = '/users/tuto-seen'\n\n      // When\n      await client.patch(path, undefined, false)\n\n      // Then\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}${path}`, {\n        headers: { 'Content-Type': 'application/json' },\n        method: 'PATCH',\n        body: '{}',\n      })\n    })\n  })\n\n  describe('delete', () => {\n    it('should call API with given path and JSON Mime type and credentials by default and correct method', async () => {\n      // Given\n      const path = '/stocks/123'\n\n      // When\n      await client.delete(path)\n\n      // Then\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}${path}`, {\n        credentials: 'include',\n        method: 'DELETE',\n      })\n    })\n\n    it('should call API without credentials when not required', async () => {\n      // Given\n      const path = '/stocks/123'\n\n      // When\n      await client.delete(path, false)\n\n      // Then\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}${path}`, {\n        method: 'DELETE',\n      })\n    })\n\n    it('should return json if return status is ok', async () => {\n      // Given\n      fetch.mockResponseOnce(JSON.stringify({ id: '123' }), { status: 200 })\n\n      // When\n      const response = await client.delete('/stocks/123')\n\n      // Then\n      expect(response.id).toBe('123')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/repository/pcapi/pcapi.js',
    messages: [
      {
        ruleId: 'max-params',
        severity: 1,
        message: 'Arrow function has too many parameters (8). Maximum allowed is 5.',
        line: 203,
        column: 86,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 203,
        endColumn: 88,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { DEFAULT_PRE_FILTERS } from 'components/pages/Bookings/PreFilters/_constants'\nimport { ALL_OFFERERS, DEFAULT_SEARCH_FILTERS } from 'components/pages/Offers/Offers/_constants'\nimport { client } from 'repository/pcapi/pcapiClient'\nimport { FORMAT_ISO_DATE_ONLY, formatBrowserTimezonedDateAsUTC } from 'utils/date'\nimport { stringify } from 'utils/query-string'\n\nexport const loadFeatures = async () => {\n  return client.get('/features')\n}\n\n//\n// offers\n//\nexport const loadOffer = async offerId => {\n  return client.get(`/offers/${offerId}`)\n}\n\nexport const createOffer = offer => {\n  return client.post(`/offers`, offer)\n}\n\nexport const updateOffer = (offerId, offer) => {\n  return client.patch(`/offers/${offerId}`, offer)\n}\n\nexport const loadFilteredOffers = async ({\n  nameOrIsbn = DEFAULT_SEARCH_FILTERS.nameOrIsbn,\n  offererId = DEFAULT_SEARCH_FILTERS.offererId,\n  venueId = DEFAULT_SEARCH_FILTERS.venueId,\n  typeId = DEFAULT_SEARCH_FILTERS.typeId,\n  periodBeginningDate = DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n  periodEndingDate = DEFAULT_SEARCH_FILTERS.periodEndingDate,\n  status = DEFAULT_SEARCH_FILTERS.status,\n  creationMode = DEFAULT_SEARCH_FILTERS.creationMode,\n}) => {\n  const body = createRequestBody({\n    nameOrIsbn,\n    offererId,\n    venueId,\n    typeId,\n    status,\n    creationMode,\n    periodBeginningDate,\n    periodEndingDate,\n  })\n\n  const queryParams = stringify(body)\n  return client.get(`/offers${queryParams ? `?${queryParams}` : ''}`)\n}\n\nexport const updateOffersActiveStatus = (\n  areAllOffersSelected,\n  {\n    name = DEFAULT_SEARCH_FILTERS.name,\n    offererId = DEFAULT_SEARCH_FILTERS.offererId,\n    venueId = DEFAULT_SEARCH_FILTERS.venueId,\n    typeId = DEFAULT_SEARCH_FILTERS.typeId,\n    status = DEFAULT_SEARCH_FILTERS.status,\n    creationMode = DEFAULT_SEARCH_FILTERS.creationMode,\n    ids = [],\n    isActive,\n    periodBeginningDate = DEFAULT_SEARCH_FILTERS.periodBeginningDate,\n    periodEndingDate = DEFAULT_SEARCH_FILTERS.periodEndingDate,\n  }\n) => {\n  const formattedBody = createRequestBody({\n    name,\n    offererId,\n    venueId,\n    typeId,\n    status,\n    creationMode,\n    periodBeginningDate,\n    periodEndingDate,\n  })\n\n  if (areAllOffersSelected) {\n    return client.patch('/offers/all-active-status', { ...formattedBody, isActive })\n  }\n\n  return client.patch('/offers/active-status', { ids, isActive })\n}\n\nconst createRequestBody = searchFilters => {\n  const body = {}\n  Object.keys(DEFAULT_SEARCH_FILTERS).forEach(field => {\n    if (searchFilters[field] && searchFilters[field] !== DEFAULT_SEARCH_FILTERS[field]) {\n      body[field] = searchFilters[field]\n    }\n  })\n\n  if (searchFilters.page) {\n    body.page = searchFilters.page\n  }\n\n  if (searchFilters.periodBeginningDate !== DEFAULT_SEARCH_FILTERS.periodBeginningDate) {\n    body.periodBeginningDate = searchFilters.periodBeginningDate\n  }\n\n  if (searchFilters.periodEndingDate !== DEFAULT_SEARCH_FILTERS.periodEndingDate) {\n    body.periodEndingDate = searchFilters.periodEndingDate\n  }\n\n  return body\n}\n\nexport const getAllOfferersNames = () => {\n  return client.get('/offerers/names').then(response => response.offerersNames)\n}\n\nexport const generateOffererApiKey = async offererId => {\n  return client.post(`/offerers/${offererId}/api_keys`, {}).then(response => response.apiKey)\n}\n\nexport const deleteOffererApiKey = async apiKey => {\n  return client.delete(`/offerers/api_keys/${apiKey}`)\n}\n\nexport const getUserValidatedOfferersNames = () => {\n  return client\n    .get('/offerers/names?validated_for_user=true')\n    .then(response => response.offerersNames)\n}\n\nexport const getValidatedOfferersNames = () => {\n  return client.get('/offerers/names?validated=true').then(response => response.offerersNames)\n}\n\nexport const getOfferers = () => {\n  return client.get('/offerers')\n}\n\nexport const getValidatedOfferers = () => {\n  return client.get('/offerers?validated=true')\n}\n\nexport const getOfferer = offererId => {\n  return client.get(`/offerers/${offererId}`)\n}\n\n//\n// venues\n//\nexport const getVenuesForOfferer = ({ offererId = null, activeOfferersOnly = false } = {}) => {\n  const request = {}\n  if (offererId) {\n    if (offererId !== ALL_OFFERERS) request.offererId = offererId\n  } else {\n    request.validatedForUser = true\n  }\n\n  if (activeOfferersOnly) request.activeOfferersOnly = true\n  const queryParams = stringify(request)\n  const url = queryParams !== '' ? `/venues?${queryParams}` : '/venues'\n  return client.get(url).then(response => response.venues)\n}\n\nexport const getVenue = venueId => client.get(`/venues/${venueId}`)\n\nexport const getVenueStats = venueId => client.get(`/venues/${venueId}/stats`)\n\nexport const getOffererWithVenueStats = offererId => client.get(`/offerers/${offererId}/stats`)\n\n//\n// types\n//\nexport const loadTypes = () => {\n  return client.get('/types')\n}\n\n//\n// categories\n//\nexport const loadCategories = () => {\n  return client.get('/offers/categories')\n}\n\n//\n// stocks\n//\nexport const loadStocks = offerId => {\n  return client.get(`/offers/${offerId}/stocks`)\n}\n\nexport const bulkCreateOrEditStock = (offerId, stocks) => {\n  return client.post(`/stocks/bulk`, {\n    offerId,\n    stocks,\n  })\n}\n\nexport const deleteStock = stockId => {\n  return client.delete(`/stocks/${stockId}`)\n}\n\n//\n// thumbnail\n//\nexport const validateDistantImage = url => {\n  return client.post('/offers/thumbnail-url-validation', { url: url })\n}\n\nexport const postThumbnail = (offerer, offer, credit, thumb, thumbUrl, x, y, height) => {\n  const body = new FormData()\n  body.append('offerId', offer)\n  body.append('offererId', offerer)\n  body.append('credit', credit)\n  body.append('croppingRectX', x)\n  body.append('croppingRectY', y)\n  body.append('croppingRectHeight', height)\n  body.append('thumb', thumb)\n  body.append('thumbUrl', thumbUrl)\n\n  return client.postWithFormData('/offers/thumbnails', body)\n}\n\n//\n// user\n//\nexport const signout = () => client.get('/users/signout')\n\nexport const updateUserInformations = body => {\n  return client.patch('/users/current', body)\n}\n\n//\n// set password\n//\nexport const setPassword = (token, newPassword) => {\n  return client.post('/users/new-password', { token, newPassword })\n}\n\n//\n// tutos\n//\nexport const setHasSeenTutos = () => {\n  return client.patch(`/users/tuto-seen`)\n}\n\n//\n// Providers\n//\nexport const createVenueProvider = async venueProvider => {\n  return client.post('/venueProviders', venueProvider)\n}\n\nexport const loadProviders = async venueId => {\n  return client.get(`/providers/${venueId}`)\n}\n\nexport const loadVenueProviders = async venueId => {\n  return client.get(`/venueProviders?venueId=${venueId}`).then(response => response.venue_providers)\n}\n\n//\n// BookingsRecap\n//\nexport const loadFilteredBookingsRecap = async ({\n  venueId = DEFAULT_PRE_FILTERS.offerVenueId,\n  eventDate = DEFAULT_PRE_FILTERS.offerEventDate,\n  bookingPeriodBeginningDate = DEFAULT_PRE_FILTERS.bookingBeginningDate,\n  bookingPeriodEndingDate = DEFAULT_PRE_FILTERS.bookingEndingDate,\n  page,\n}) => {\n  const params = { page }\n  if (venueId !== DEFAULT_PRE_FILTERS.offerVenueId) {\n    params.venueId = venueId\n  }\n  if (eventDate !== DEFAULT_PRE_FILTERS.offerEventDate) {\n    params.eventDate = formatBrowserTimezonedDateAsUTC(eventDate)\n  }\n  params.bookingPeriodBeginningDate = formatBrowserTimezonedDateAsUTC(\n    bookingPeriodBeginningDate,\n    FORMAT_ISO_DATE_ONLY\n  )\n  params.bookingPeriodEndingDate = formatBrowserTimezonedDateAsUTC(\n    bookingPeriodEndingDate,\n    FORMAT_ISO_DATE_ONLY\n  )\n\n  const queryParams = stringify(params)\n  return client.get(`/bookings/pro?${queryParams}`)\n}\n\n//\n// Booking\n//\n\nexport const getBooking = code => {\n  return client.get(`/v2/bookings/token/${code}`)\n}\n\nexport const validateBooking = code => {\n  return client.patch(`/v2/bookings/use/token/${code}`)\n}\n\nexport const invalidateBooking = code => {\n  return client.patch(`/v2/bookings/keep/token/${code}`)\n}\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/repository/pcapi/pcapiClient.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/repository/siren/__specs__/bindAddressAndDesignationFromSiren.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (83). Maximum allowed is 50.',
        line: 14,
        column: 48,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 96,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import bindAddressAndDesignationFromSiren from '../bindSirenFieldToDesignation'\nimport getSirenInformation from '../getSirenInformation'\n\njest.mock('../getSirenInformation', () => {\n  return jest.fn().mockImplementation(() => ({\n    address: null,\n    city: null,\n    name: null,\n    postalCode: null,\n    siren: '841166096',\n  }))\n})\n\ndescribe('bindAddressAndDesignationFromSiren', () => {\n  describe('when the SIREN is not complete', () => {\n    it('should not load SIREN information', () => {\n      // Given\n      const siren = '418'\n\n      // When\n      bindAddressAndDesignationFromSiren(siren)\n\n      // Then\n      expect(getSirenInformation).not.toHaveBeenCalled()\n    })\n\n    it('should return empty information', async () => {\n      // Given\n      const siren = '418 71'\n\n      // When\n      const result = await bindAddressAndDesignationFromSiren(siren)\n\n      // Then\n      expect(result).toStrictEqual({\n        address: '',\n        city: '',\n        name: '',\n        postalCode: '',\n        siren: '418 71',\n      })\n    })\n  })\n\n  describe('when the SIREN has the required 9 numbers', () => {\n    it('should load offerer details from API', () => {\n      // Given\n      const siren = '418166096'\n\n      // When\n      bindAddressAndDesignationFromSiren(siren)\n\n      // Then\n      expect(getSirenInformation).toHaveBeenCalledWith(siren)\n    })\n\n    it('should format the SIREN to the API standards', () => {\n      // Given\n      const siren = '418 166 096'\n\n      // When\n      bindAddressAndDesignationFromSiren(siren)\n\n      // Then\n      expect(getSirenInformation).toHaveBeenCalledWith('418166096')\n    })\n  })\n\n  it('should format the SIREN to exclude extra characters', () => {\n    // Given\n    const siren = '841 166 09616'\n\n    // When\n    bindAddressAndDesignationFromSiren(siren)\n\n    // Then\n    expect(getSirenInformation).toHaveBeenCalledWith('841166096')\n  })\n\n  it('should return the result', async () => {\n    // Given\n    const siren = '841 166 096'\n\n    // When\n    const result = await bindAddressAndDesignationFromSiren(siren)\n\n    // Then\n    expect(result).toStrictEqual({\n      address: null,\n      name: null,\n      siren: '841166096',\n      postalCode: null,\n      city: null,\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/repository/siren/__specs__/getSirenInformation.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (150). Maximum allowed is 50.',
        line: 3,
        column: 34,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 152,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (110). Maximum allowed is 50.',
        line: 42,
        column: 37,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 151,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import getSirenInformation from '../getSirenInformation'\n\ndescribe('getSirenInformations', () => {\n  beforeEach(() => {\n    fetch.resetMocks()\n  })\n\n  describe('when the SIREN does not exist', () => {\n    it('should return ’SIREN invalide’', async () => {\n      // given\n      const siren = '245474278'\n      fetch.mockResponseOnce(JSON.stringify({ message: 'no results found' }), { status: 404 })\n\n      // when\n      const errorMessage = await getSirenInformation(siren)\n\n      // then\n      expect(fetch.mock.calls).toHaveLength(1)\n      expect(fetch.mock.calls[0][0]).toStrictEqual(\n        `https://entreprise.data.gouv.fr/api/sirene/v3/unites_legales/${siren}`\n      )\n      expect(errorMessage).toStrictEqual({ error: 'SIREN invalide' })\n    })\n\n    it('should return ’Service indisponible’ when API siren does not respond', async () => {\n      // given\n      const siren = '245474278'\n      fetch.mockResponseOnce(JSON.stringify({ message: 'service unavailable' }), { status: 503 })\n\n      // when\n      const errorMessage = await getSirenInformation(siren)\n\n      // then\n      expect(fetch.mock.calls).toHaveLength(1)\n      expect(fetch.mock.calls[0][0]).toStrictEqual(\n        `https://entreprise.data.gouv.fr/api/sirene/v3/unites_legales/${siren}`\n      )\n      expect(errorMessage).toStrictEqual({ error: 'Service indisponible' })\n    })\n  })\n\n  describe('when the SIREN exists', () => {\n    it('should return location values', async () => {\n      // given\n      const siren = '418166096'\n      fetch.mockResponseOnce(\n        JSON.stringify({\n          unite_legale: {\n            denomination: 'nom du lieu',\n            siren: '418166096',\n            etablissement_siege: {\n              geo_l4: '3 rue de la gare',\n              libelle_commune: 'paris',\n              latitude: 1.1,\n              longitude: 1.1,\n              code_postal: '75000',\n            },\n          },\n        })\n      )\n\n      // when\n      const locationValues = await getSirenInformation(siren)\n\n      // then\n      expect(fetch.mock.calls).toHaveLength(1)\n      expect(fetch.mock.calls[0][0]).toStrictEqual(\n        `https://entreprise.data.gouv.fr/api/sirene/v3/unites_legales/${siren}`\n      )\n      expect(locationValues).toStrictEqual({\n        address: '3 rue de la gare',\n        city: 'paris',\n        latitude: 1.1,\n        longitude: 1.1,\n        name: 'nom du lieu',\n        postalCode: '75000',\n        siren: '418166096',\n      })\n    })\n\n    describe('when offerer name is not in normalized', () => {\n      it('should use the declared name', async () => {\n        // given\n        const siren = '418166096'\n        fetch.mockResponseOnce(\n          JSON.stringify({\n            unite_legale: {\n              siren: '418166096',\n              etablissement_siege: {\n                geo_l4: '3 rue de la gare',\n                libelle_commune: 'paris',\n                latitude: 1.1,\n                longitude: 1.1,\n                enseigne_1: 'Nom déclaré du lieu',\n                code_postal: '75000',\n                siren: '418166096',\n              },\n            },\n          })\n        )\n\n        // when\n        const locationValues = await getSirenInformation(siren)\n\n        // then\n        expect(fetch.mock.calls).toHaveLength(1)\n        expect(fetch.mock.calls[0][0]).toStrictEqual(\n          `https://entreprise.data.gouv.fr/api/sirene/v3/unites_legales/${siren}`\n        )\n        expect(locationValues).toMatchObject({\n          name: 'Nom déclaré du lieu',\n        })\n      })\n    })\n\n    describe('when offerer has no name', () => {\n      it('should have use firstname and lastname', async () => {\n        // given\n        const siren = '418166096'\n        fetch.mockResponseOnce(\n          JSON.stringify({\n            unite_legale: {\n              siren: '418166096',\n              prenom_1: 'John',\n              nom: 'Do',\n              etablissement_siege: {\n                geo_l4: '3 rue de la gare',\n                libelle_commune: 'paris',\n                latitude: 1.1,\n                longitude: 1.1,\n                code_postal: '75000',\n                siren: '418166096',\n              },\n            },\n          })\n        )\n\n        // when\n        const locationValues = await getSirenInformation(siren)\n\n        // then\n        expect(fetch.mock.calls).toHaveLength(1)\n        expect(fetch.mock.calls[0][0]).toStrictEqual(\n          `https://entreprise.data.gouv.fr/api/sirene/v3/unites_legales/${siren}`\n        )\n        expect(locationValues).toMatchObject({\n          name: 'John Do',\n        })\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/repository/siren/bindSirenFieldToDesignation.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/repository/siren/getSirenInformation.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/repository/venuesService.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/service-worker.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/features/actions.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/features/reducer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/features/selectors.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/features/thunks.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/index.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/offers/actions.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/offers/reducer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/offers/thunks.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/reducers/__specs__/maintenanceReducers.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (156). Maximum allowed is 50.',
        line: 3,
        column: 50,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 158,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (147). Maximum allowed is 50.',
        line: 11,
        column: 51,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 157,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (114). Maximum allowed is 50.',
        line: 12,
        column: 51,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 125,
        endColumn: 6,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import maintenanceReducer from '../maintenanceReducer'\n\ndescribe('src | Reducers | Maintenance Reducer', () => {\n  it('should have an initial state', () => {\n    // When\n    const newState = maintenanceReducer()\n\n    // Then\n    expect(newState).toStrictEqual({ isActivated: false })\n  })\n  describe('actions dispatched from requestData', () => {\n    describe('when receiving a FAIL_DATA_ event', () => {\n      it('should mark maintenance as activated when receiving a 503 status code from a SERVER_ERROR', () => {\n        // Given\n        const action = {\n          config: {\n            method: 'GET',\n            rootUrl: 'http://localhost',\n            timeout: 50000,\n            apiPath: '/offerers/DY',\n            normalizer: {\n              managedVenues: {\n                normalizer: {\n                  offers: 'offers',\n                },\n                stateKey: 'venues',\n              },\n            },\n          },\n          payload: {\n            headers: {\n              'content-type': 'application/json',\n            },\n            ok: false,\n            status: 503,\n            errors: {},\n            error_type: 'SERVER_ERROR',\n          },\n          type: 'FAIL_DATA_GET_/OFFERERS/DY',\n        }\n\n        // When\n        const newState = maintenanceReducer({ isActivated: false }, action)\n\n        // Then\n        expect(newState).toStrictEqual({\n          isActivated: true,\n        })\n      })\n\n      it('should leave maintenance as activated when receiving a 503 status code from a API_ERROR', () => {\n        // Given\n        const action = {\n          config: {\n            method: 'GET',\n            rootUrl: 'http://localhost',\n            timeout: 50000,\n            apiPath: '/offerers/DY',\n            normalizer: {\n              managedVenues: {\n                normalizer: {\n                  offers: 'offers',\n                },\n                stateKey: 'venues',\n              },\n            },\n          },\n          payload: {\n            headers: {\n              'content-type': 'application/json',\n            },\n            ok: false,\n            status: 503,\n            errors: {},\n            error_type: 'API_ERROR',\n          },\n          type: 'FAIL_DATA_GET_/OFFERERS/DY',\n        }\n\n        // When\n        const newState = maintenanceReducer({ isActivated: false }, action)\n\n        // Then\n        expect(newState).toStrictEqual({\n          isActivated: false,\n        })\n      })\n\n      it('should leave maintenance as activated when receiving any error different than SERVER_ERROR', () => {\n        // Given\n        const action = {\n          config: {\n            method: 'GET',\n            rootUrl: 'http://localhost',\n            timeout: 50000,\n            apiPath: '/offerers/DY',\n            normalizer: {\n              managedVenues: {\n                normalizer: {\n                  offers: 'offers',\n                },\n                stateKey: 'venues',\n              },\n            },\n          },\n          payload: {\n            headers: {\n              'content-type': 'application/json',\n            },\n            ok: false,\n            status: 404,\n            errors: {},\n          },\n          type: 'FAIL_DATA_GET_/OFFERERS/DY',\n        }\n\n        // When\n        const newState = maintenanceReducer({ isActivated: false }, action)\n\n        // Then\n        expect(newState).toStrictEqual({\n          isActivated: false,\n        })\n      })\n    })\n\n    describe('when receiving a SUCCESS_DATA_ event', () => {\n      it('should mark maintenance as deactivated when receiving a success', () => {\n        // Given\n        const action = {\n          config: {\n            method: 'GET',\n            rootUrl: 'http://localhost',\n            timeout: 50000,\n            apiPath: '/features',\n          },\n          payload: {\n            headers: {\n              'content-type': 'application/json',\n            },\n            ok: true,\n            status: 200,\n            data: [],\n          },\n          type: 'SUCCESS_DATA_GET_/FEATURES',\n        }\n\n        // When\n        const newState = maintenanceReducer({ isActivated: false }, action)\n\n        // Then\n        expect(newState).toStrictEqual({\n          isActivated: false,\n        })\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/reducers/__specs__/notification.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/reducers/bookingSummary/__specs__/bookingSummary.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (308). Maximum allowed is 50.',
        line: 3,
        column: 45,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 310,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (103). Maximum allowed is 50.',
        line: 18,
        column: 52,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 120,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (51). Maximum allowed is 50.',
        line: 122,
        column: 66,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 172,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (74). Maximum allowed is 50.',
        line: 174,
        column: 52,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 247,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 4,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import bookingSummary from '../bookingSummary'\n\ndescribe('src | reducers | bookingSummary', () => {\n  it('should return initial state', () => {\n    // when\n    const nextState = bookingSummary()\n\n    // then\n    expect(nextState).toStrictEqual({\n      bookingsFrom: '',\n      bookingsTo: '',\n      isFilteredByDigitalVenues: false,\n      offerId: '',\n      venueId: '',\n    })\n  })\n\n  describe('when BOOKING_SUMMARY_UPDATE_VENUE_ID', () => {\n    it('should change state when action BOOKING_SUMMARY_UPDATE_VENUE_ID occurred', () => {\n      // given\n      const initialState = {\n        isFilteredByDigitalVenues: false,\n        offerId: '',\n        venueId: '',\n      }\n      const action = {\n        payload: 'A8KQ',\n        type: 'BOOKING_SUMMARY_UPDATE_VENUE_ID',\n      }\n\n      // when\n      const nextState = bookingSummary(initialState, action)\n\n      // then\n      expect(nextState).toStrictEqual({\n        bookingsFrom: '',\n        bookingsTo: '',\n        isFilteredByDigitalVenues: false,\n        offerId: '',\n        venueId: 'A8KQ',\n      })\n    })\n\n    it('should reinitialize venueId when action BOOKING_SUMMARY_UPDATE_VENUE_ID occurred', () => {\n      // given\n      const initialState = {\n        isFilteredByDigitalVenues: false,\n        offerId: '',\n        venueId: 'AGAQ',\n      }\n      const action = {\n        payload: 'A8KQ',\n        type: 'BOOKING_SUMMARY_UPDATE_VENUE_ID',\n      }\n\n      // when\n      const nextState = bookingSummary(initialState, action)\n\n      // then\n      expect(nextState).toStrictEqual({\n        bookingsFrom: '',\n        bookingsTo: '',\n        isFilteredByDigitalVenues: false,\n        offerId: '',\n        venueId: 'A8KQ',\n      })\n    })\n\n    it('should reinitialize selected offer when selecting another venue', () => {\n      // given\n      const initialState = {\n        isFilteredByDigitalVenues: false,\n        offerId: 'A8KQ',\n        venueId: 'VYZU',\n      }\n      const action = {\n        payload: 'AD4',\n        type: 'BOOKING_SUMMARY_UPDATE_VENUE_ID',\n      }\n\n      // when\n      const nextState = bookingSummary(initialState, action)\n\n      // then\n      expect(nextState).toStrictEqual({\n        bookingsFrom: '',\n        bookingsTo: '',\n        isFilteredByDigitalVenues: false,\n        offerId: '',\n        venueId: 'AD4',\n      })\n    })\n\n    it('should reinitialize selected offer and dates when selecting `all venues` option', () => {\n      // given\n      const initialState = {\n        bookingsFrom: new Date(2018, 1, 1),\n        bookingsTo: new Date(2018, 1, 31),\n        isFilteredByDigitalVenues: false,\n        offerId: 'A8KQ',\n        venueId: 'VYZU',\n      }\n      const action = {\n        payload: 'all',\n        type: 'BOOKING_SUMMARY_UPDATE_VENUE_ID',\n      }\n\n      // when\n      const nextState = bookingSummary(initialState, action)\n\n      // then\n      expect(nextState).toStrictEqual({\n        bookingsFrom: '',\n        bookingsTo: '',\n        isFilteredByDigitalVenues: false,\n        offerId: '',\n        venueId: 'all',\n      })\n    })\n  })\n\n  describe('when BOOKING_SUMMARY_IS_FILTERED_BY_DIGITAL_VENUES', () => {\n    it('should reinitialize bookingFrom, bookingTo, offerId and venueId when filtering on digital venues', () => {\n      // given\n      const initialState = {\n        isFilteredByDigitalVenues: false,\n        offerId: 'A8KQ',\n        venueId: 'VYZU',\n      }\n      const action = {\n        payload: true,\n        type: 'BOOKING_SUMMARY_IS_FILTERED_BY_DIGITAL_VENUES',\n      }\n\n      // when\n      const nextState = bookingSummary(initialState, action)\n\n      // then\n      expect(nextState).toStrictEqual({\n        bookingsFrom: '',\n        bookingsTo: '',\n        isFilteredByDigitalVenues: true,\n        offerId: '',\n        venueId: '',\n      })\n    })\n\n    it('should change state when not filtering on digital venues anymore', () => {\n      // given\n      const initialState = {\n        isFilteredByDigitalVenues: true,\n        offerId: '',\n        venueId: '',\n      }\n      const action = {\n        payload: false,\n        type: 'BOOKING_SUMMARY_IS_FILTERED_BY_DIGITAL_VENUES',\n      }\n\n      // when\n      const nextState = bookingSummary(initialState, action)\n\n      // then\n      expect(nextState).toStrictEqual({\n        bookingsFrom: '',\n        bookingsTo: '',\n        isFilteredByDigitalVenues: false,\n        offerId: '',\n        venueId: '',\n      })\n    })\n  })\n\n  describe('when BOOKING_SUMMARY_UPDATE_OFFER_ID', () => {\n    it('should change state when action BOOKING_SUMMARY_UPDATE_OFFER_ID occurred', () => {\n      // given\n      const initialState = {\n        isFilteredByDigitalVenues: false,\n        offerId: '',\n        venueId: 'CY',\n      }\n      const action = {\n        payload: 'A8KQ',\n        type: 'BOOKING_SUMMARY_UPDATE_OFFER_ID',\n      }\n\n      // when\n      const nextState = bookingSummary(initialState, action)\n\n      // then\n      expect(nextState).toStrictEqual({\n        isFilteredByDigitalVenues: false,\n        offerId: 'A8KQ',\n        venueId: 'CY',\n      })\n    })\n\n    it('should reinitialize offerId when action BOOKING_SUMMARY_UPDATE_OFFER_ID occurred', () => {\n      // given\n      const initialState = {\n        isFilteredByDigitalVenues: false,\n        offerId: 'AGAQ',\n        venueId: 'CY',\n      }\n      const action = {\n        payload: 'A8KQ',\n        type: 'BOOKING_SUMMARY_UPDATE_OFFER_ID',\n      }\n\n      // when\n      const nextState = bookingSummary(initialState, action)\n\n      // then\n      expect(nextState).toStrictEqual({\n        isFilteredByDigitalVenues: false,\n        offerId: 'A8KQ',\n        venueId: 'CY',\n      })\n    })\n\n    it('should reinitialize selected dates when selecting `all offers` option', () => {\n      // given\n      const initialState = {\n        bookingsFrom: new Date(2018, 1, 1),\n        bookingsTo: new Date(2018, 1, 31),\n        isFilteredByDigitalVenues: false,\n        offerId: 'A8KQ',\n        venueId: 'VYZU',\n      }\n      const action = {\n        payload: 'all',\n        type: 'BOOKING_SUMMARY_UPDATE_OFFER_ID',\n      }\n\n      // when\n      const nextState = bookingSummary(initialState, action)\n\n      // then\n      expect(nextState).toStrictEqual({\n        bookingsFrom: '',\n        bookingsTo: '',\n        isFilteredByDigitalVenues: false,\n        offerId: 'all',\n        venueId: 'VYZU',\n      })\n    })\n  })\n\n  describe('when BOOKING_SUMMARY_UPDATE_BOOKINGS_FROM', () => {\n    it('should change state when action BOOKING_SUMMARY_UPDATE_BOOKINGS_FROM occurred', () => {\n      // given\n      const initialState = {\n        bookingsFrom: new Date(2018, 1, 1),\n        bookingsTo: new Date(2018, 1, 31),\n        isFilteredByDigitalVenues: false,\n        offerId: 'A8KQ',\n        venueId: 'CY',\n      }\n      const date = new Date(2019, 6, 1)\n      const action = {\n        payload: date,\n        type: 'BOOKING_SUMMARY_UPDATE_BOOKINGS_FROM',\n      }\n\n      // when\n      const nextState = bookingSummary(initialState, action)\n\n      // then\n      const expectedDate = new Date(2019, 6, 1)\n      expect(nextState).toStrictEqual({\n        bookingsFrom: expectedDate,\n        bookingsTo: new Date(2018, 1, 31),\n        isFilteredByDigitalVenues: false,\n        offerId: 'A8KQ',\n        venueId: 'CY',\n      })\n    })\n  })\n\n  describe('when BOOKING_SUMMARY_UPDATE_BOOKINGS_TO', () => {\n    it('should change state when action BOOKING_SUMMARY_UPDATE_BOOKINGS_TO occurred', () => {\n      // given\n      const initialState = {\n        bookingsFrom: new Date(2018, 1, 1),\n        bookingsTo: new Date(2018, 1, 31),\n        isFilteredByDigitalVenues: false,\n        offerId: 'A8KQ',\n        venueId: 'CY',\n      }\n      const date = new Date(2019, 6, 1)\n      const action = {\n        payload: date,\n        type: 'BOOKING_SUMMARY_UPDATE_BOOKINGS_TO',\n      }\n\n      // when\n      const nextState = bookingSummary(initialState, action)\n\n      // then\n      const expectedDate = new Date(2019, 6, 1)\n      expect(nextState).toStrictEqual({\n        bookingsFrom: new Date(2018, 1, 1),\n        bookingsTo: expectedDate,\n        isFilteredByDigitalVenues: false,\n        offerId: 'A8KQ',\n        venueId: 'CY',\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/reducers/bookingSummary/bookingSummary.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/reducers/data.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/reducers/errors.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/reducers/index.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/reducers/maintenanceReducer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/reducers/notificationReducer.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/reducers/tracker.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/sagas/errors.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/sagas/index.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/__specs__/notificationSelector.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/data/__specs__/offerersSelectors.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (78). Maximum allowed is 50.',
        line: 5,
        column: 56,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 82,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (63). Maximum allowed is 50.',
        line: 19,
        column: 33,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 81,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { selectOfferers, selectOffererById } from '../offerersSelectors'\n\nimport state from './mockState.json'\n\ndescribe('src | selectors | data | offerersSelectors', () => {\n  describe('selectOfferers', () => {\n    describe('when state data offerers exists', () => {\n      it('should return it', () => {\n        const state = {\n          data: {\n            offerers: [{ id: 1 }],\n          },\n        }\n        expect(selectOfferers(state)).toStrictEqual([{ id: 1 }])\n      })\n    })\n  })\n\n  describe('selectOffererById', () => {\n    describe('when offerers is empty', () => {\n      it('should return undefined', () => {\n        const state = {\n          data: {\n            offerers: [],\n          },\n        }\n        expect(selectOffererById(state, 1)).toBeUndefined()\n      })\n    })\n\n    describe('when offerer not found in data offerers array', () => {\n      it('should return undefined', () => {\n        const state = {\n          data: {\n            offerers: [{ id: 2 }],\n          },\n        }\n        expect(selectOffererById(state, 1)).toBeUndefined()\n      })\n    })\n\n    describe('when offerer found in data offerers array', () => {\n      it('should return it', () => {\n        const state = {\n          data: {\n            offerers: [{ id: 2 }],\n          },\n        }\n        expect(selectOffererById(state, 2)).toStrictEqual({ id: 2 })\n      })\n    })\n\n    it('should retrieve offerer from state when id is given', () => {\n      // given\n      const expected = {\n        address: 'RUE DES SAPOTILLES',\n        bic: 'QSDFGH8Z566',\n        city: 'Cayenne',\n        dateCreated: '2019-05-06T09:12:46.278743Z',\n        dateModifiedAtLastProvider: '2019-05-06T09:13:08.458343Z',\n        iban: 'FR7630001007941234567890185',\n        id: '4Q',\n        idAtProviders: null,\n        isActive: true,\n        isValidated: true,\n        lastProviderId: null,\n        modelName: 'Offerer',\n        nOffers: 5,\n        name: 'Bar des amis',\n        postalCode: '97300',\n        siren: '222222233',\n      }\n      const offererId = '4Q'\n\n      // when\n      const result = selectOffererById(state, offererId)\n\n      // then\n      expect(result).toStrictEqual(expected)\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/data/__specs__/productsSelectors.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/data/__specs__/usersSelectors.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (96). Maximum allowed is 50.',
        line: 3,
        column: 29,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 98,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (56). Maximum allowed is 50.',
        line: 4,
        column: 39,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 59,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { selectCurrentUser, selectIsUserAdmin } from '../usersSelectors'\n\ndescribe('users selectors', () => {\n  describe('select if user is admin', () => {\n    it('should return false when state contains no users', () => {\n      // given\n      const state = {\n        data: {\n          users: [],\n        },\n      }\n\n      // when\n      const result = selectIsUserAdmin(state)\n\n      // then\n      expect(result).toStrictEqual(false)\n    })\n\n    it('should return true when state contain an admin user', () => {\n      // given\n      const state = {\n        data: {\n          users: [\n            {\n              id: 'FA',\n              isAdmin: true,\n            },\n          ],\n        },\n      }\n\n      // when\n      const result = selectIsUserAdmin(state)\n\n      // then\n      expect(result).toStrictEqual(true)\n    })\n\n    it('should return false when state contain no admin user', () => {\n      // given\n      const state = {\n        data: {\n          users: [\n            {\n              id: 'EF',\n              isAdmin: false,\n            },\n          ],\n        },\n      }\n\n      // when\n      const result = selectIsUserAdmin(state)\n\n      // then\n      expect(result).toStrictEqual(false)\n    })\n  })\n\n  describe('select current user infos', () => {\n    describe('when nothing in the store', () => {\n      it('should return nothing', () => {\n        // given\n        const state = {\n          data: {},\n        }\n\n        // when\n        const user = selectCurrentUser(state)\n\n        // then\n        expect(user).toBeUndefined()\n      })\n    })\n\n    describe('when users in the store', () => {\n      it('should return the first user', () => {\n        // given\n        const state = {\n          data: {\n            users: [\n              {\n                id: 'EF',\n              },\n            ],\n          },\n        }\n\n        // when\n        const user = selectCurrentUser(state)\n\n        // then\n        expect(user).toStrictEqual({ id: 'EF' })\n      })\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/data/__specs__/venueLabelsSelectors.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/data/__specs__/venueTypesSelectors.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/data/__specs__/venuesSelectors.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (254). Maximum allowed is 50.',
        line: 9,
        column: 54,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 262,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (72). Maximum allowed is 50.',
        line: 120,
        column: 39,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 191,
        endColumn: 4,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (69). Maximum allowed is 50.',
        line: 193,
        column: 38,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 261,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 3,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import {\n  selectVenues,\n  selectPhysicalVenuesByOffererId,\n  selectVenueById,\n  selectVenuesByOffererId,\n  selectNonVirtualVenues,\n} from '../venuesSelectors'\n\ndescribe('src | selectors | data | venuesSelectors', () => {\n  describe('selectVenues', () => {\n    describe('when venues attribute exists', () => {\n      it('should return it', () => {\n        const store = {\n          data: {\n            venues: [{ id: 1 }, { id: 2 }],\n          },\n        }\n        expect(selectVenues(store)).toStrictEqual([{ id: 1 }, { id: 2 }])\n      })\n    })\n\n    describe('when venues attribute does not not', () => {\n      it('should return an empty array', () => {\n        const store = {\n          data: {},\n        }\n        expect(selectVenues(store)).toStrictEqual([])\n      })\n    })\n  })\n\n  describe('selectPhysicalVenuesByOffererId', () => {\n    describe('when offerer Id is given', () => {\n      it('should return non virtual venues with that offerer id', () => {\n        const store = {\n          data: {\n            venues: [\n              { id: 'AE', managingOffererId: 'ZZ', isVirtual: true },\n              { id: 'AE', managingOffererId: 'ZZ', isVirtual: false },\n              { id: 'AF', managingOffererId: 'AA', isVirtual: true },\n              { id: 'AX', managingOffererId: 'AA', isVirtual: false },\n            ],\n          },\n        }\n        const offererId = 'ZZ'\n\n        expect(selectPhysicalVenuesByOffererId(store, offererId)).toStrictEqual([\n          { id: 'AE', managingOffererId: 'ZZ', isVirtual: false },\n        ])\n      })\n    })\n\n    describe('when offerer Id is not given', () => {\n      it('should return non virtual venues without filtering by offerer Id', () => {\n        const store = {\n          data: {\n            venues: [\n              { id: 'AE', managingOffererId: 'ZZ', isVirtual: true },\n              { id: 'AE', managingOffererId: 'ZZ', isVirtual: false },\n              { id: 'AF', managingOffererId: 'AA', isVirtual: true },\n              { id: 'AX', managingOffererId: 'ZZ', isVirtual: false },\n            ],\n          },\n        }\n\n        expect(selectPhysicalVenuesByOffererId(store)).toStrictEqual([\n          { id: 'AE', managingOffererId: 'ZZ', isVirtual: false },\n          { id: 'AX', managingOffererId: 'ZZ', isVirtual: false },\n        ])\n      })\n    })\n  })\n\n  describe('selectVenueById', () => {\n    describe('when venues is empty', () => {\n      it('should return undefined', () => {\n        const store = {\n          data: {\n            venues: [],\n          },\n        }\n        expect(selectVenueById(store)).toBeUndefined()\n      })\n    })\n\n    describe('when venue id is not given', () => {\n      it('should return undefined', () => {\n        const store = {\n          data: {\n            venues: [{ id: 'AE' }],\n          },\n        }\n        expect(selectVenueById(store)).toBeUndefined()\n      })\n    })\n\n    describe('when venue id doesnt exist in venues', () => {\n      it('should return undefined', () => {\n        const store = {\n          data: {\n            venues: [{ id: 'AE' }],\n          },\n        }\n        expect(selectVenueById(store, 'B4')).toBeUndefined()\n      })\n    })\n\n    describe('when venue id matches a venue', () => {\n      it('should return it', () => {\n        const store = {\n          data: {\n            venues: [{ id: 'AE' }],\n          },\n        }\n        expect(selectVenueById(store, 'AE')).toStrictEqual({ id: 'AE' })\n      })\n    })\n  })\n\n  describe('selectVenuesByOffererId', () => {\n    describe('when venues is empty', () => {\n      it('should return an empty array', () => {\n        const store = {\n          data: {\n            venues: [],\n          },\n        }\n        expect(selectVenuesByOffererId(store)).toStrictEqual([])\n      })\n    })\n\n    describe('when offerer id is not given', () => {\n      it('should return all venues', () => {\n        const store = {\n          data: {\n            venues: [\n              { managingOffererId: 'AE' },\n              {\n                managingOfferer: {\n                  id: 'AE',\n                },\n              },\n            ],\n          },\n        }\n        expect(selectVenuesByOffererId(store)).toStrictEqual([\n          { managingOffererId: 'AE' },\n          { managingOfferer: { id: 'AE' } },\n        ])\n      })\n    })\n\n    describe('when venue id doesnt exist in venues', () => {\n      it('should return undefined', () => {\n        const store = {\n          data: {\n            venues: [\n              { managingOffererId: 'AE' },\n              {\n                managingOfferer: {\n                  id: 'AE',\n                },\n              },\n            ],\n          },\n        }\n        expect(selectVenueById(store, 'B4')).toBeUndefined()\n      })\n    })\n\n    describe('when venue id matches a venue', () => {\n      it('should return it', () => {\n        const store = {\n          data: {\n            venues: [\n              { managingOffererId: 'AE' },\n              {\n                managingOfferer: {\n                  id: 'AE',\n                },\n              },\n            ],\n          },\n        }\n        expect(selectVenuesByOffererId(store, 'AE')).toStrictEqual([\n          { managingOffererId: 'AE' },\n          { managingOfferer: { id: 'AE' } },\n        ])\n      })\n    })\n  })\n\n  describe('selectNonVirtualVenues', () => {\n    it('should return an empty list of non virtual venues when state contains no venues', () => {\n      // given\n      const state = {\n        data: {\n          venues: [],\n        },\n      }\n\n      // when\n      const nonVirtualVenuesToDisplay = selectNonVirtualVenues(state)\n\n      // then\n      expect(nonVirtualVenuesToDisplay).toStrictEqual([])\n    })\n\n    it('should return only the non virtual venues', () => {\n      // given\n      const state = {\n        data: {\n          venues: [\n            {\n              id: 'A8HQ',\n              isVirtual: true,\n            },\n            {\n              id: 'A8RQ',\n              isVirtual: false,\n            },\n            {\n              id: 'AVGQ',\n              isVirtual: false,\n            },\n          ],\n        },\n      }\n\n      // when\n      const nonVirtualVenuesToDisplay = selectNonVirtualVenues(state)\n\n      // then\n      const nonVirtualVenuesListExpected = [\n        {\n          id: 'A8RQ',\n          isVirtual: false,\n        },\n        {\n          id: 'AVGQ',\n          isVirtual: false,\n        },\n      ]\n\n      expect(nonVirtualVenuesToDisplay).toStrictEqual(nonVirtualVenuesListExpected)\n    })\n\n    it('should return an empty list of offer when state is not initialized', () => {\n      // given\n      const state = {\n        data: {},\n      }\n\n      // when\n      const nonVirtualVenuesToDisplay = selectNonVirtualVenues(state)\n\n      // then\n      const nonVirtualVenuesListExpected = []\n      expect(nonVirtualVenuesToDisplay).toStrictEqual(nonVirtualVenuesListExpected)\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/data/offerersSelectors.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/data/productsSelectors.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/data/usersSelectors.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/data/venueLabelsSelectors.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/data/venueTypesSelectors.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/data/venuesSelectors.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/maintenanceSelector.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/notificationSelector.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/selectors/search.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/store/testUtils.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/tracking/__mocks__/mediaCampaignsTracking.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/tracking/mediaCampaignsTracking.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/tracking/mediaCampaignsTracking.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/__specs__/date.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/__specs__/pluralize.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (71). Maximum allowed is 50.',
        line: 3,
        column: 23,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 73,
        endColumn: 2,
      },
    ],
    errorCount: 0,
    warningCount: 1,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import { pluralize } from '../pluralize'\n\ndescribe('pluralize', () => {\n  describe('standard words', () => {\n    it('should pluralize word if many offers', () => {\n      // given\n      const wordToPluralize = 'offre'\n\n      // when\n      const pluralizedWord = pluralize(5, wordToPluralize)\n\n      // then\n      expect(pluralizedWord).toStrictEqual('5 offres')\n    })\n\n    it('should singularize word if 0 offer', () => {\n      // given\n      const wordToSingularize = 'offres'\n\n      // when\n      const singularizedWord = pluralize(0, wordToSingularize)\n\n      // then\n      expect(singularizedWord).toStrictEqual('0 offre')\n    })\n\n    it('should singularize word if 1 offer', () => {\n      // given\n      const wordToSingularize = 'offres'\n\n      // when\n      const singularizedWord = pluralize(1, wordToSingularize)\n\n      // then\n      expect(singularizedWord).toStrictEqual('1 offre')\n    })\n  })\n\n  describe('words with \"x\" plural', () => {\n    it('should pluralize word if many bijoux with required ending', () => {\n      // given\n      const wordToPluralize = 'bijou'\n\n      // when\n      const pluralizedWord = pluralize(5, wordToPluralize, 'x')\n\n      // then\n      expect(pluralizedWord).toStrictEqual('5 bijoux')\n    })\n\n    it('should singularize word if 0 offer', () => {\n      // given\n      const wordToSingularize = 'bijoux'\n\n      // when\n      const singularizedWord = pluralize(0, wordToSingularize)\n\n      // then\n      expect(singularizedWord).toStrictEqual('0 bijou')\n    })\n\n    it('should singularize word if 1 offer', () => {\n      // given\n      const wordToSingularize = 'bijoux'\n\n      // when\n      const singularizedWord = pluralize(1, wordToSingularize)\n\n      // then\n      expect(singularizedWord).toStrictEqual('1 bijou')\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/__specs__/propTypes.spec.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (147). Maximum allowed is 50.',
        line: 5,
        column: 40,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 151,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (118). Maximum allowed is 50.',
        line: 12,
        column: 54,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 129,
        endColumn: 4,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "const { requiredIfComponentHasProp } = require('utils/propTypes')\n\nconst VALIDATING_PROP_NAME = 'hrefName'\n\ndescribe('requiredIfComponentHasProp', () => {\n  let componentName, componentProps\n  beforeEach(() => {\n    componentProps = {}\n    componentName = 'Banner'\n  })\n\n  describe('when linked prop is given to component', () => {\n    beforeEach(() => {\n      componentProps.href = 'https://example.com'\n    })\n\n    it('should consider linked prop as given with some falsy values', () => {\n      // Given\n      componentProps[VALIDATING_PROP_NAME] = null\n      const falsyLinkedPropValuesToConsiderGiven = ['', false]\n      falsyLinkedPropValuesToConsiderGiven.forEach(falsyLinkedPropValue => {\n        componentProps.href = falsyLinkedPropValue\n\n        // When\n        const error = requiredIfComponentHasProp('href', 'string')(\n          componentProps,\n          VALIDATING_PROP_NAME,\n          componentName\n        )\n\n        // Then\n        expect(error.message).toBe(\n          'The prop `hrefName` is marked as required in `Banner`, but its value is `null`.'\n        )\n      })\n    })\n\n    it('should warn user when validating prop is missing', () => {\n      // Given\n      componentProps[VALIDATING_PROP_NAME] = null\n\n      // When\n      const error = requiredIfComponentHasProp('href', 'string')(\n        componentProps,\n        VALIDATING_PROP_NAME,\n        componentName\n      )\n\n      // Then\n      expect(error).toBeInstanceOf(Error)\n      expect(error.message).toBe(\n        'The prop `hrefName` is marked as required in `Banner`, but its value is `null`.'\n      )\n    })\n\n    it('should not warn user when validating prop is given with some falsy values', () => {\n      // Given\n      const falsyPropValues = ['', false]\n      falsyPropValues.forEach(falsyPropValue => {\n        componentProps[VALIDATING_PROP_NAME] = falsyPropValue\n\n        // When\n        const error = requiredIfComponentHasProp('href', typeof falsyPropValue)(\n          componentProps,\n          VALIDATING_PROP_NAME,\n          componentName\n        )\n\n        // Then\n        expect(error).not.toBeInstanceOf(Error)\n        expect(error).toBeUndefined()\n      })\n    })\n\n    it('should warn user that dependent prop type is wrong', () => {\n      // Given\n      componentProps[VALIDATING_PROP_NAME] = 1234\n\n      // When\n      const error = requiredIfComponentHasProp('href', 'string')(\n        componentProps,\n        VALIDATING_PROP_NAME,\n        componentName\n      )\n\n      // Then\n      expect(error).toBeInstanceOf(Error)\n      expect(error.message).toBe(\n        'Invalid prop `hrefName` of type `number` supplied to `Banner`, expected `string`.'\n      )\n    })\n\n    it('should warn user that dependent prop type is wrong even with some falsy prop value', () => {\n      // Given\n      const falsyPropValues = ['', false]\n      falsyPropValues.forEach(falsyPropValue => {\n        componentProps[VALIDATING_PROP_NAME] = falsyPropValue\n\n        // When\n        const error = requiredIfComponentHasProp('href', 'number')(\n          componentProps,\n          VALIDATING_PROP_NAME,\n          componentName\n        )\n\n        // Then\n        expect(error).toBeInstanceOf(Error)\n        expect(error.message).toBe(\n          `Invalid prop \\`hrefName\\` of type \\`${typeof falsyPropValue}\\` supplied to \\`Banner\\`, expected \\`number\\`.`\n        )\n      })\n    })\n\n    it('should not warn user when correct type', () => {\n      // Given\n      componentProps[VALIDATING_PROP_NAME] = 'Go to example'\n\n      // When\n      const error = requiredIfComponentHasProp('href', 'string')(\n        componentProps,\n        VALIDATING_PROP_NAME,\n        componentName\n      )\n\n      // Then\n      expect(error).not.toBeInstanceOf(Error)\n      expect(error).toBeUndefined()\n    })\n  })\n\n  describe('when linked prop is not given to component', () => {\n    beforeEach(() => {\n      componentProps.href = null\n    })\n\n    it('should not warn user when dependant prop is not given to component', () => {\n      // When\n      componentProps[VALIDATING_PROP_NAME] = null\n\n      const error = requiredIfComponentHasProp('href', 'string')(\n        componentProps,\n        VALIDATING_PROP_NAME,\n        componentName\n      )\n\n      // Then\n      expect(error).not.toBeInstanceOf(Error)\n      expect(error).toBeUndefined()\n    })\n  })\n})\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/__specs__/query-string.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath:
      '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/__specs__/recaptcha.spec.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/__specs__/timezone.spec.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/apiFactories.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/config.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/date.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/fakeApi.js',
    messages: [
      {
        ruleId: 'max-lines-per-function',
        severity: 1,
        message: 'Arrow function has too many lines (1173). Maximum allowed is 50.',
        line: 70,
        column: 38,
        nodeType: 'ArrowFunctionExpression',
        messageId: 'exceed',
        endLine: 1242,
        endColumn: 2,
      },
      {
        ruleId: 'max-lines',
        severity: 1,
        message: 'File has too many lines (1227). Maximum allowed is 300.',
        line: 315,
        column: 1,
        nodeType: null,
        messageId: 'exceed',
        endLine: 1243,
        endColumn: 1,
      },
    ],
    errorCount: 0,
    warningCount: 2,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    source:
      "import * as pcapi from 'repository/pcapi/pcapi'\n\nexport const bulkFakeApiCreateOrEditStock = ({ ...stockIds }) =>\n  jest.spyOn(pcapi, 'bulkCreateOrEditStock').mockResolvedValue([stockIds])\n\nexport const getFakeApiUserValidatedOfferersNames = ({ ...offerers }) =>\n  jest.spyOn(pcapi, 'getUserValidatedOfferersNames').mockResolvedValue([offerers])\n\nexport const getFakeApiVenuesForOfferer = ({ ...venues }) =>\n  jest.spyOn(pcapi, 'getVenuesForOfferer').mockResolvedValue([venues])\n\nexport const loadFakeApiOffer = offer => jest.spyOn(pcapi, 'loadOffer').mockResolvedValue(offer)\n\nexport const loadFakeApiStocks = stocks =>\n  jest.spyOn(pcapi, 'loadStocks').mockResolvedValue({ stocks })\n\nexport const loadFakeApiVenueStats = venue =>\n  jest.spyOn(pcapi, 'getVenueStats').mockResolvedValue(venue)\n\nexport const generateFakeOffererApiKey = apiKey =>\n  jest.spyOn(pcapi, 'generateOffererApiKey').mockResolvedValue(apiKey)\n\nexport const failToGenerateOffererApiKey = () =>\n  jest.spyOn(pcapi, 'generateOffererApiKey').mockRejectedValue(null)\n\nexport const loadFakeApiTypes = () => {\n  const types = [\n    {\n      appLabel: 'Cinéma',\n      conditionalFields: ['author', 'visa', 'stageDirector'],\n      description:\n        \"Action, science-fiction, documentaire ou comédie sentimentale ? En salle, en plein air ou bien au chaud chez soi ? Et si c'était plutôt cette exposition qui allait faire son cinéma ?\",\n      isActive: true,\n      offlineOnly: true,\n      onlineOnly: false,\n      proLabel: 'Cinéma - projections et autres évènements',\n      sublabel: 'Regarder',\n      type: 'Event',\n      value: 'EventType.CINEMA',\n    },\n    {\n      appLabel: 'Film',\n      canExpire: true,\n      conditionalFields: [],\n      description:\n        \"Action, science-fiction, documentaire ou comédie sentimentale ? En salle, en plein air ou bien au chaud chez soi ? Et si c'était plutôt cette exposition qui allait faire son cinéma ?\",\n      isActive: true,\n      offlineOnly: false,\n      onlineOnly: false,\n      proLabel: 'Audiovisuel - films sur supports physiques et VOD',\n      sublabel: 'Regarder',\n      type: 'Thing',\n      value: 'ThingType.AUDIOVISUEL',\n    },\n  ]\n\n  jest.spyOn(pcapi, 'loadTypes').mockResolvedValue(types)\n\n  return types\n}\n\nexport const loadFakeApiVenue = venue => {\n  jest.spyOn(pcapi, 'getVenue').mockResolvedValueOnce(venue)\n\n  return {\n    resolvingVenuePromise: Promise.resolve(venue),\n  }\n}\n\nexport const loadFakeApiCategories = () => {\n  const categories = {\n    categories: [\n      {\n        id: 'FILM',\n        proLabel: 'Films, vidéos',\n        isSelectable: true,\n      },\n      {\n        id: 'CINEMA',\n        proLabel: 'Cinéma',\n        isSelectable: true,\n      },\n      {\n        id: 'CONFERENCE',\n        proLabel: 'Conférences, rencontres, découverte des métiers',\n        isSelectable: true,\n      },\n      {\n        id: 'JEU',\n        proLabel: 'Jeux',\n        isSelectable: true,\n      },\n      {\n        id: 'LIVRE',\n        proLabel: 'Livre',\n        isSelectable: true,\n      },\n      {\n        id: 'MUSEE',\n        proLabel: 'Musée, patrimoine, architecture, arts visuels',\n        isSelectable: true,\n      },\n      {\n        id: 'MUSIQUE_LIVE',\n        proLabel: 'Musique live',\n        isSelectable: true,\n      },\n      {\n        id: 'MUSIQUE_ENREGISTREE',\n        proLabel: 'Musique enregistrée',\n        isSelectable: true,\n      },\n      {\n        id: 'PRATIQUE_ART',\n        proLabel: 'Pratique artistique',\n        isSelectable: true,\n      },\n      {\n        id: 'MEDIA',\n        proLabel: 'Médias',\n        isSelectable: true,\n      },\n      {\n        id: 'SPECTACLE',\n        proLabel: 'Spectacle vivant',\n        isSelectable: true,\n      },\n      {\n        id: 'INSTRUMENT',\n        proLabel: 'Instrument de musique',\n        isSelectable: true,\n      },\n      {\n        id: 'BEAUX_ARTS',\n        proLabel: 'Beaux-arts',\n        isSelectable: true,\n      },\n    ],\n    subcategories: [\n      {\n        id: 'SUPPORT_PHYSIQUE_FILM',\n        categoryId: 'FILM',\n        matchingType: 'ThingType.AUDIOVISUEL',\n        proLabel: 'Support physique (DVD, Bluray...)',\n        appLabel: 'Support physique (DVD, Bluray...)',\n        searchGroup: 'Films, séries, podcasts',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ABO_MEDIATHEQUE',\n        categoryId: 'FILM',\n        matchingType: 'ThingType.AUDIOVISUEL',\n        proLabel: 'Abonnement médiathèque',\n        appLabel: 'Abonnement médiathèque',\n        searchGroup: 'Films, séries, podcasts',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'VOD',\n        categoryId: 'FILM',\n        matchingType: 'ThingType.AUDIOVISUEL',\n        proLabel: 'Vidéo à la demande',\n        appLabel: 'Vidéo à la demande',\n        searchGroup: 'Films, séries, podcasts',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ABO_PLATEFORME_VIDEO',\n        categoryId: 'FILM',\n        matchingType: 'ThingType.AUDIOVISUEL',\n        proLabel: 'Abonnement plateforme streaming',\n        appLabel: 'Abonnement plateforme streaming',\n        searchGroup: 'Films, séries, podcasts',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'AUTRE_SUPPORT_NUMERIQUE',\n        categoryId: 'FILM',\n        matchingType: 'ThingType.AUDIOVISUEL',\n        proLabel: 'Autre support numérique',\n        appLabel: 'Autre support numérique',\n        searchGroup: 'Films, séries, podcasts',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'CARTE_CINE_MULTISEANCES',\n        categoryId: 'CINEMA',\n        matchingType: 'ThingType.CINEMA_ABO',\n        proLabel: 'Carte cinéma multi-séances',\n        appLabel: 'Carte cinéma multi-séances',\n        searchGroup: 'Cinéma',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'CARTE_CINE_ILLIMITE',\n        categoryId: 'CINEMA',\n        matchingType: 'ThingType.CINEMA_ABO',\n        proLabel: 'Carte cinéma illimité',\n        appLabel: 'Carte cinéma illimité',\n        searchGroup: 'Cinéma',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'SEANCE_CINE',\n        categoryId: 'CINEMA',\n        matchingType: 'EventType.CINEMA',\n        proLabel: 'Séance de cinéma',\n        appLabel: 'Séance de cinéma',\n        searchGroup: 'Cinéma',\n        isEvent: true,\n        conditionalFields: ['author', 'visa', 'stageDirector'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'EVENEMENT_CINE',\n        categoryId: 'CINEMA',\n        matchingType: 'EventType.CINEMA',\n        proLabel: 'Événement cinématographique',\n        appLabel: 'Événement cinéma',\n        searchGroup: 'Cinéma',\n        isEvent: true,\n        conditionalFields: ['author', 'visa', 'stageDirector'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'FESTIVAL_CINE',\n        categoryId: 'CINEMA',\n        matchingType: 'EventType.CINEMA',\n        proLabel: 'Festival de cinéma',\n        appLabel: 'Festival de cinéma',\n        searchGroup: 'Cinéma',\n        isEvent: true,\n        conditionalFields: ['author', 'visa', 'stageDirector'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'CINE_VENTE_DISTANCE',\n        categoryId: 'CINEMA',\n        matchingType: 'ThingType.CINEMA_CARD',\n        proLabel: 'Cinéma vente à distance',\n        appLabel: 'Cinéma',\n        searchGroup: 'Cinéma',\n        isEvent: false,\n        conditionalFields: ['author', 'visa', 'stageDirector'],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'CONFERENCE',\n        categoryId: 'CONFERENCE',\n        matchingType: 'EventType.CONFERENCE_DEBAT_DEDICACE',\n        proLabel: 'Conférence',\n        appLabel: 'Conférence',\n        searchGroup: 'Conférences, rencontres',\n        isEvent: true,\n        conditionalFields: ['speaker'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'RENCONTRE',\n        categoryId: 'CONFERENCE',\n        matchingType: 'EventType.CONFERENCE_DEBAT_DEDICACE',\n        proLabel: 'Rencontre',\n        appLabel: 'Rencontre',\n        searchGroup: 'Conférences, rencontres',\n        isEvent: true,\n        conditionalFields: ['speaker'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'DECOUVERTE_METIERS',\n        categoryId: 'CONFERENCE',\n        matchingType: 'EventType.CONFERENCE_DEBAT_DEDICACE',\n        proLabel: 'Découverte des métiers',\n        appLabel: 'Découverte des métiers',\n        searchGroup: 'Conférences, rencontres',\n        isEvent: true,\n        conditionalFields: ['speaker'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'SALON',\n        categoryId: 'CONFERENCE',\n        matchingType: 'EventType.CONFERENCE_DEBAT_DEDICACE',\n        proLabel: 'Salon / Convention',\n        appLabel: 'Salon / Convention',\n        searchGroup: 'Conférences, rencontres',\n        isEvent: true,\n        conditionalFields: ['speaker'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'CONCOURS',\n        categoryId: 'JEU',\n        matchingType: 'EventType.JEUX',\n        proLabel: 'Concours - jeux',\n        appLabel: 'Concours - jeux',\n        searchGroup: 'Jeux',\n        isEvent: true,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'RENCONTRE_JEU',\n        categoryId: 'JEU',\n        matchingType: 'EventType.JEUX',\n        proLabel: 'Rencontres - jeux',\n        appLabel: 'Rencontres - jeux',\n        searchGroup: 'Jeux',\n        isEvent: true,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'ONLINE_OR_OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ESCAPE_GAME',\n        categoryId: 'JEU',\n        matchingType: 'EventType.JEUX',\n        proLabel: 'Escape game',\n        appLabel: 'Escape game',\n        searchGroup: 'Jeux',\n        isEvent: true,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'ONLINE_OR_OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'EVENEMENT_JEU',\n        categoryId: 'JEU',\n        matchingType: 'EventType.JEUX',\n        proLabel: 'Événements - jeux',\n        appLabel: 'Événements - jeux',\n        searchGroup: 'Jeux',\n        isEvent: true,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'JEU_EN_LIGNE',\n        categoryId: 'JEU',\n        matchingType: 'ThingType.JEUX_VIDEO',\n        proLabel: 'Jeux en ligne',\n        appLabel: 'Jeux en ligne',\n        searchGroup: 'Jeux',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ABO_JEU_VIDEO',\n        categoryId: 'JEU',\n        matchingType: 'ThingType.JEUX_VIDEO_ABO',\n        proLabel: 'Abonnement jeux vidéos',\n        appLabel: 'Abonnement jeux vidéos',\n        searchGroup: 'Jeux',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ABO_LUDOTHEQUE',\n        categoryId: 'JEU',\n        matchingType: 'ThingType.JEUX_VIDEO_ABO',\n        proLabel: 'Abonnement ludothèque',\n        appLabel: 'Abonnement ludothèque',\n        searchGroup: 'Jeux',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'LIVRE_PAPIER',\n        categoryId: 'LIVRE',\n        matchingType: 'ThingType.LIVRE_EDITION',\n        proLabel: 'Livre papier',\n        appLabel: 'Livre',\n        searchGroup: 'Livres',\n        isEvent: false,\n        conditionalFields: ['author', 'isbn'],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'BOOK',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'LIVRE_NUMERIQUE',\n        categoryId: 'LIVRE',\n        matchingType: 'ThingType.LIVRE_AUDIO',\n        proLabel: 'Livre numérique, e-book',\n        appLabel: 'Livre numérique, e-book',\n        searchGroup: 'Livres',\n        isEvent: false,\n        conditionalFields: ['author', 'isbn'],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'BOOK',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'TELECHARGEMENT_LIVRE_AUDIO',\n        categoryId: 'LIVRE',\n        matchingType: 'ThingType.LIVRE_AUDIO',\n        proLabel: 'Livre audio à télécharger',\n        appLabel: 'Livre audio à télécharger',\n        searchGroup: 'Livres',\n        isEvent: false,\n        conditionalFields: ['author'],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'LIVRE_AUDIO_PHYSIQUE',\n        categoryId: 'LIVRE',\n        matchingType: 'ThingType.LIVRE_AUDIO',\n        proLabel: 'Livre audio sur support physique',\n        appLabel: 'Livre audio sur support physique',\n        searchGroup: 'Livres',\n        isEvent: false,\n        conditionalFields: ['author', 'isbn'],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ABO_BIBLIOTHEQUE',\n        categoryId: 'LIVRE',\n        matchingType: 'ThingType.LIVRE_AUDIO',\n        proLabel: 'Abonnement (bibliothèques, médiathèques...)',\n        appLabel: 'Abonnement (bibliothèques, médiathèques...)',\n        searchGroup: 'Livres',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ABO_LIVRE_NUMERIQUE',\n        categoryId: 'LIVRE',\n        matchingType: 'ThingType.LIVRE_AUDIO',\n        proLabel: 'Abonnement livres numériques',\n        appLabel: 'Abonnement livres numériques',\n        searchGroup: 'Livres',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'BOOK',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'FESTIVAL_LIVRE',\n        categoryId: 'LIVRE',\n        matchingType: 'ThingType.LIVRE_AUDIO',\n        proLabel: 'Festival et salon du livre',\n        appLabel: 'Festival et salon du livre',\n        searchGroup: 'Livres',\n        isEvent: true,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'CARTE_MUSEE',\n        categoryId: 'MUSEE',\n        matchingType: 'ThingType.MUSEES_PATRIMOINE_ABO',\n        proLabel: 'Cartes musées, patrimoine, architecture, arts visuels ou contemporains',\n        appLabel: 'Cartes musées, patrimoine...',\n        searchGroup: 'Visites, expositions',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ABO_MUSEE',\n        categoryId: 'MUSEE',\n        matchingType: 'ThingType.MUSEES_PATRIMOINE_ABO',\n        proLabel: 'Abonnement musée, patrimoine...',\n        appLabel: 'Abonnement musée, patrimoine...',\n        searchGroup: 'Visites, expositions',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'VISITE',\n        categoryId: 'MUSEE',\n        matchingType: 'EventType.MUSEES_PATRIMOINE',\n        proLabel: 'Visite',\n        appLabel: 'Visite',\n        searchGroup: 'Visites, expositions',\n        isEvent: true,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'VISITE_GUIDEE',\n        categoryId: 'MUSEE',\n        matchingType: 'EventType.MUSEES_PATRIMOINE',\n        proLabel: 'Visite guidée',\n        appLabel: 'Visite guidée',\n        searchGroup: 'Visites, expositions',\n        isEvent: true,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'ONLINE_OR_OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'EVENEMENT_PATRIMOINE',\n        categoryId: 'MUSEE',\n        matchingType: 'EventType.MUSEES_PATRIMOINE',\n        proLabel: 'Événement et atelier patrimoine',\n        appLabel: 'Événement et atelier patrimoine',\n        searchGroup: 'Visites, expositions',\n        isEvent: true,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'VISITE_VIRTUELLE',\n        categoryId: 'MUSEE',\n        matchingType: 'EventType.MUSEES_PATRIMOINE',\n        proLabel: 'Visite virtuelle',\n        appLabel: 'Visite virtuelle',\n        searchGroup: 'Visites, expositions',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE_OR_OFFLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'CONCERT',\n        categoryId: 'MUSIQUE_LIVE',\n        matchingType: 'EventType.MUSIQUE',\n        proLabel: 'Concert',\n        appLabel: 'Concert',\n        searchGroup: 'Musique',\n        isEvent: true,\n        conditionalFields: ['author', 'musicType', 'performer'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'EVENEMENT_MUSIQUE',\n        categoryId: 'MUSIQUE_LIVE',\n        matchingType: 'EventType.MUSIQUE',\n        proLabel: \"Autre type d'événement musical\",\n        appLabel: \"Autre type d'événement musical\",\n        searchGroup: 'Musique',\n        isEvent: true,\n        conditionalFields: ['author', 'musicType', 'performer'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'LIVESTREAM_MUSIQUE',\n        categoryId: 'MUSIQUE_LIVE',\n        matchingType: 'EventType.MUSIQUE',\n        proLabel: 'Livestream musical',\n        appLabel: 'Livestream musical',\n        searchGroup: 'Musique',\n        isEvent: true,\n        conditionalFields: ['author', 'musicType', 'performer'],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ABO_CONCERT',\n        categoryId: 'MUSIQUE_LIVE',\n        matchingType: 'ThingType.MUSIQUE_ABO',\n        proLabel: 'Abonnement concert',\n        appLabel: 'Abonnement concert',\n        searchGroup: 'Musique',\n        isEvent: false,\n        conditionalFields: ['musicType'],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'SUPPORT_PHYSIQUE_MUSIQUE',\n        categoryId: 'MUSIQUE_ENREGISTREE',\n        matchingType: 'ThingType.MUSIQUE',\n        proLabel: 'Support physique (CD, vinyle...)',\n        appLabel: 'Support physique (CD, vinyle...)',\n        searchGroup: 'Musique',\n        isEvent: false,\n        conditionalFields: ['author', 'musicType', 'performer'],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'TELECHARGEMENT_MUSIQUE',\n        categoryId: 'MUSIQUE_ENREGISTREE',\n        matchingType: 'ThingType.MUSIQUE',\n        proLabel: 'Téléchargement de musique',\n        appLabel: 'Téléchargement de musique',\n        searchGroup: 'Musique',\n        isEvent: false,\n        conditionalFields: ['author', 'musicType', 'performer'],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ABO_PLATEFORME_MUSIQUE',\n        categoryId: 'MUSIQUE_ENREGISTREE',\n        matchingType: 'ThingType.MUSIQUE_ABO',\n        proLabel: 'Abonnement plateforme musicale',\n        appLabel: 'Abonnement plateforme musicale',\n        searchGroup: 'Musique',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'CAPTATION_MUSIQUE',\n        categoryId: 'MUSIQUE_ENREGISTREE',\n        matchingType: 'ThingType.MUSIQUE',\n        proLabel: 'Captation musicale',\n        appLabel: 'Captation musicale',\n        searchGroup: 'Musique',\n        isEvent: false,\n        conditionalFields: ['author', 'musicType', 'performer'],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'FESTIVAL_MUSIQUE',\n        categoryId: 'MUSIQUE_LIVE',\n        matchingType: 'EventType.MUSIQUE',\n        proLabel: 'Festival de musique',\n        appLabel: 'Festival de musique',\n        searchGroup: 'Musique',\n        isEvent: true,\n        conditionalFields: ['author', 'musicType', 'performer'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'ONLINE_OR_OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'SEANCE_ESSAI_PRATIQUE_ART',\n        categoryId: 'PRATIQUE_ART',\n        matchingType: 'EventType.PRATIQUE_ARTISTIQUE',\n        proLabel: \"Séance d'essai\",\n        appLabel: \"Séance d'essai\",\n        searchGroup: 'Cours, ateliers',\n        isEvent: true,\n        conditionalFields: ['speaker'],\n        canExpire: true,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ATELIER_PRATIQUE_ART',\n        categoryId: 'PRATIQUE_ART',\n        matchingType: 'EventType.PRATIQUE_ARTISTIQUE',\n        proLabel: 'Atelier, stage de pratique artistique',\n        appLabel: 'Atelier, stage de pratique artistique',\n        searchGroup: 'Cours, ateliers',\n        isEvent: true,\n        conditionalFields: ['speaker'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ABO_PRATIQUE_ART',\n        categoryId: 'PRATIQUE_ART',\n        matchingType: 'ThingType.PRATIQUE_ARTISTIQUE_ABO',\n        proLabel: 'Abonnement pratique artistique',\n        appLabel: 'Abonnement pratique artistique',\n        searchGroup: 'Cours, ateliers',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ABO_PRESSE_EN_LIGNE',\n        categoryId: 'MEDIA',\n        matchingType: 'ThingType.PRESSE_ABO',\n        proLabel: 'Abonnement presse en ligne',\n        appLabel: 'Abonnement presse en ligne',\n        searchGroup: 'Presse',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ARTICLE_PRESSE',\n        categoryId: 'MEDIA',\n        matchingType: 'ThingType.PRESSE_ABO',\n        proLabel: 'Article de presse',\n        appLabel: 'Article de presse',\n        searchGroup: 'Presse',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE_OR_OFFLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'PODCAST',\n        categoryId: 'MEDIA',\n        matchingType: 'ThingType.PRESSE_ABO',\n        proLabel: 'Podcast',\n        appLabel: 'Podcast',\n        searchGroup: 'Films, séries, podcasts',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'APP_CULTURELLE',\n        categoryId: 'MEDIA',\n        matchingType: 'ThingType.PRESSE_ABO',\n        proLabel: 'Application culturelle',\n        appLabel: 'Application culturelle',\n        searchGroup: 'Presse',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'SPECTACLE_REPRESENTATION',\n        categoryId: 'SPECTACLE',\n        matchingType: 'EventType.SPECTACLE_VIVANT',\n        proLabel: 'Spectacle, représentation',\n        appLabel: 'Spectacle, représentation',\n        searchGroup: 'Spectacles',\n        isEvent: true,\n        conditionalFields: ['author', 'showType', 'stageDirector', 'performer'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'SPECTACLE_ENREGISTRE',\n        categoryId: 'SPECTACLE',\n        matchingType: 'EventType.SPECTACLE_VIVANT',\n        proLabel: 'Spectacle enregistré',\n        appLabel: 'Spectacle enregistré',\n        searchGroup: 'Spectacles',\n        isEvent: false,\n        conditionalFields: ['author', 'showType', 'stageDirector', 'performer'],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'NOT_REIMBURSED',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'LIVESTREAM_EVENEMENT',\n        categoryId: 'SPECTACLE',\n        matchingType: 'EventType.SPECTACLE_VIVANT',\n        proLabel: \"Livestream d'événement\",\n        appLabel: \"Livestream d'événement\",\n        searchGroup: 'Spectacles',\n        isEvent: true,\n        conditionalFields: ['author', 'showType', 'stageDirector', 'performer'],\n        canExpire: false,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE',\n        isDigitalDeposit: true,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'FESTIVAL_SPECTACLE',\n        categoryId: 'SPECTACLE',\n        matchingType: 'EventType.SPECTACLE_VIVANT',\n        proLabel: 'Festival',\n        appLabel: 'Festival',\n        searchGroup: 'Spectacles',\n        isEvent: true,\n        conditionalFields: ['author', 'showType', 'stageDirector', 'performer'],\n        canExpire: false,\n        canBeDuo: true,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ABO_SPECTACLE',\n        categoryId: 'SPECTACLE',\n        matchingType: 'ThingType.SPECTACLE_VIVANT_ABO',\n        proLabel: 'Abonnement spectacle',\n        appLabel: 'Abonnement spectacle',\n        searchGroup: 'Spectacles',\n        isEvent: false,\n        conditionalFields: ['showType'],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: false,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'ACHAT_INSTRUMENT',\n        categoryId: 'INSTRUMENT',\n        matchingType: 'ThingType.INSTRUMENT',\n        proLabel: 'Achat instrument',\n        appLabel: 'Achat instrument',\n        searchGroup: 'Instruments de musique',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'BON_ACHAT_INSTRUMENT',\n        categoryId: 'INSTRUMENT',\n        matchingType: 'ThingType.INSTRUMENT',\n        proLabel: \"Bon d'achat instrument\",\n        appLabel: \"Bon d'achat instrument\",\n        searchGroup: 'Instruments de musique',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'LOCATION_INSTRUMENT',\n        categoryId: 'INSTRUMENT',\n        matchingType: 'ThingType.INSTRUMENT',\n        proLabel: 'Location instrument',\n        appLabel: 'Location instrument',\n        searchGroup: 'Instruments de musique',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'PARTITION',\n        categoryId: 'INSTRUMENT',\n        matchingType: 'ThingType.INSTRUMENT',\n        proLabel: 'Partition',\n        appLabel: 'Partition',\n        searchGroup: 'Instruments de musique',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'ONLINE_OR_OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n      {\n        id: 'MATERIEL_ART_CREATIF',\n        categoryId: 'BEAUX_ARTS',\n        matchingType: 'ThingType.MATERIEL_ART_CREA',\n        proLabel: 'Matériel arts créatifs',\n        appLabel: 'Matériel arts créatifs',\n        searchGroup: 'Matériel arts créatifs',\n        isEvent: false,\n        conditionalFields: [],\n        canExpire: true,\n        canBeDuo: false,\n        onlineOfflinePlatform: 'OFFLINE',\n        isDigitalDeposit: false,\n        isPhysicalDeposit: true,\n        reimbursementRule: 'STANDARD',\n        isSelectable: true,\n        isActive: true,\n      },\n    ],\n  }\n\n  jest.spyOn(pcapi, 'loadCategories').mockResolvedValue(categories)\n}\n",
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/normalizers.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/pluralize.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/propTypes.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/query-string.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/recaptcha.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/routes.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/routes_map.jsx',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/siren.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/styleMock.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/svgrMock.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/testHelpers.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/timezone.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/translate.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
  {
    filePath: '/Users/gael.boyenval/dev/pass-culture-main/pro/src/utils/windowMatchMedia.js',
    messages: [],
    errorCount: 0,
    warningCount: 0,
    fixableErrorCount: 0,
    fixableWarningCount: 0,
    usedDeprecatedRules: [{ ruleId: 'jsx-a11y/accessible-emoji', replacedBy: [] }],
  },
]

export default output
