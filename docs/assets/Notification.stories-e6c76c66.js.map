{"version":3,"file":"Notification.stories-e6c76c66.js","sources":["../../src/ui-kit/NotificationToaster/NotificationToaster.tsx"],"sourcesContent":["import cn from 'classnames'\nimport React from 'react'\n\nimport { NotificationTypeEnum } from 'hooks/useNotification'\nimport fullErrorIcon from 'icons/full-error.svg'\nimport fullInfoIcon from 'icons/full-info.svg'\nimport fullValidateIcon from 'icons/full-validate.svg'\nimport strokeClockIcon from 'icons/stroke-clock.svg'\nimport { SvgIcon } from 'ui-kit/SvgIcon/SvgIcon'\n\nimport styles from './Notification.module.scss'\n\ninterface Notification {\n  text: string | null\n  type: NotificationTypeEnum\n  duration?: number\n}\n\nexport interface NotificationToasterProps {\n  notification: Notification\n  isVisible: boolean\n  isStickyBarOpen: boolean\n}\n\nconst NotificationToaster = ({\n  notification,\n  isVisible,\n  isStickyBarOpen,\n}: NotificationToasterProps): JSX.Element => {\n  const { text, type } = notification\n\n  const notificationAttribute = {\n    [NotificationTypeEnum.ERROR]: 'alert',\n    [NotificationTypeEnum.SUCCESS]: 'status',\n    [NotificationTypeEnum.PENDING]: 'progressbar',\n    [NotificationTypeEnum.INFORMATION]: 'status',\n  }[type]\n\n  let icon = fullValidateIcon\n  /* istanbul ignore next: DEBT, TO FIX */\n  if (type === 'error') {\n    icon = fullErrorIcon\n  } else if (type === 'pending') {\n    icon = strokeClockIcon\n  } else if (type === 'information') {\n    icon = fullInfoIcon\n  }\n  return (\n    <div\n      data-testid={`global-notification-${type}`}\n      className={\n        /* istanbul ignore next */\n        cn(\n          styles['notification'],\n          styles[\n            //graphic variation\n            /* istanbul ignore next */ `is-${type || 'success'}`\n          ],\n          /* istanbul ignore next: DEBT, TO FIX */ isVisible\n            ? styles['show']\n            : styles['hide'],\n          /* istanbul ignore next: DEBT, TO FIX */ isStickyBarOpen &&\n            styles['with-sticky-action-bar']\n        )\n      }\n      role={notificationAttribute ?? 'status'}\n    >\n      <SvgIcon className={styles['icon']} src={icon} alt=\"\" />\n      {text}\n    </div>\n  )\n}\nexport default NotificationToaster\n"],"names":["NotificationToaster","notification","isVisible","isStickyBarOpen","text","type","notificationAttribute","NotificationTypeEnum","icon","fullValidateIcon","fullErrorIcon","strokeClockIcon","fullInfoIcon","jsxs","cn","styles","jsx","SvgIcon","NotificationToaster$1"],"mappings":"o6BAwBAA,EAAA,CAAA,CAA6B,aAAAC,EAC3B,UAAAC,EACA,gBAAAC,CAEF,IAAA,CACE,KAAA,CAAA,KAAAC,EAAA,KAAAC,CAAA,EAAAJ,EAEAK,EAAA,CAA8B,CAAAC,EAAA,KAAA,EAAA,QACE,CAAAA,EAAA,OAAA,EAAA,SACE,CAAAA,EAAA,OAAA,EAAA,cACA,CAAAA,EAAA,WAAA,EAAA,QACI,EAAAF,CAAA,EAGtC,IAAAG,EAAAC,EAEA,OAAAJ,IAAA,QACEG,EAAAE,EAAOL,IAAA,UAEPG,EAAAG,EAAON,IAAA,gBAEPG,EAAAI,GAEFC,EAAA,KACE,MAAC,CAAA,cAAA,uBAAAR,CAAA,GACyC,UACxCS,EAEEC,EAAA,aACuBA,EACrB,MAAAV,GAAA,SAAA,EAEoD,EACpDH,EAAAa,EAAA,KAAAA,EAAA,KAGiBZ,GAAAY,EAAA,wBAAA,CAEgB,EACnC,KAAAT,GAAA,SAE6B,SAAA,CAE/BU,EAAAA,IAAAC,EAAA,CAAA,UAAAF,EAAA,KAAA,IAAAP,EAAA,IAAA,GAAA,EAAsDJ,CACrD,CAAA,CAAA,CAGP,EACAc,EAAAlB"}