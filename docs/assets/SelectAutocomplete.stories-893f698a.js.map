{"version":3,"file":"SelectAutocomplete.stories-893f698a.js","sources":["../../src/utils/searchPatternInOptions.ts","../../src/ui-kit/form/SelectAutoComplete/OptionsList/OptionsList.tsx","../../src/ui-kit/form/SelectAutoComplete/Toggle/Toggle.tsx","../../src/ui-kit/form/SelectAutoComplete/SelectAutocomplete.tsx"],"sourcesContent":["import { SelectOption } from 'custom_types/form'\n\nexport type SelectOptionNormalized = SelectOption & { normalizedLabel?: string }\n\nexport const normalizeStrForSearch = (str: string): string => {\n  return (\n    str\n      .trim()\n      .toLowerCase()\n      //  normalizing to NFD Unicode normal form decomposes combined graphemes into the combination of simple ones. The è becomes e +  ̀\n      .normalize('NFD')\n      //  remove accents\n      .replace(/[\\u0300-\\u036f]/g, '')\n  )\n}\n\nexport const searchPatternInOptions = (\n  options: SelectOptionNormalized[],\n  pattern: string,\n  maxDisplayedCount?: number\n): SelectOptionNormalized[] => {\n  const matchingOptions: SelectOptionNormalized[] = []\n\n  for (let i = 0; i < options.length; i++) {\n    //  Only search for matches while there are less matches found than max expected results\n    if (maxDisplayedCount && matchingOptions.length >= maxDisplayedCount) {\n      break\n    }\n\n    const normalizedOptionLabel =\n      options[i].normalizedLabel ?? normalizeStrForSearch(options[i].label)\n\n    //  Look for options containing all of the pattern words\n    const isLabelMatchingPattern = normalizeStrForSearch(pattern || '')\n      .split(' ')\n      .every((word) => normalizedOptionLabel.includes(word))\n\n    if (isLabelMatchingPattern) {\n      matchingOptions.push(options[i])\n    }\n  }\n\n  return matchingOptions\n}\n","import cx from 'classnames'\nimport React, { Ref } from 'react'\n\nimport { SelectOption } from 'custom_types/form'\nimport BaseCheckbox from 'ui-kit/form/shared/BaseCheckbox'\nimport baseCheckboxStyles from 'ui-kit/form/shared/BaseCheckbox/BaseCheckbox.module.scss'\n\nimport styles from './OptionsList.module.scss'\n\ninterface OptionsListProps {\n  className?: string\n  fieldName: string\n  selectedValues: string | string[] | null\n  filteredOptions: SelectOption[]\n  setHoveredOptionIndex: (value: number | null) => void\n  listRef: Ref<HTMLUListElement>\n  hoveredOptionIndex: number | null\n  selectOption: (value: string) => void\n  multi: boolean\n}\n\nconst OptionsList = ({\n  className,\n  fieldName,\n  selectedValues,\n  filteredOptions,\n  setHoveredOptionIndex,\n  listRef,\n  hoveredOptionIndex,\n  selectOption,\n  multi,\n}: OptionsListProps): JSX.Element => {\n  return (\n    <div className={cx(styles['menu'], className)} role=\"listbox\">\n      {filteredOptions.length === 0 && (\n        <span\n          className={cx({\n            [styles['menu--no-results']]: filteredOptions.length === 0,\n          })}\n        >\n          Aucun résultat\n        </span>\n      )}\n      <ul\n        data-testid=\"list\"\n        id={`list-${fieldName}`}\n        ref={listRef}\n        role=\"listbox\"\n      >\n        {filteredOptions.map(\n          ({ value, label }: SelectOption, index: number) => {\n            const isSelected = (selectedValues || []).includes(String(value))\n            return (\n              <li\n                aria-selected={isSelected}\n                aria-posinset={index + 1}\n                aria-setsize={filteredOptions.length}\n                className={\n                  hoveredOptionIndex === index ? styles['option-hovered'] : ''\n                }\n                data-value={value}\n                data-selected={isSelected}\n                id={`option-display-${value}`}\n                key={`option-display-${value}`}\n                onMouseEnter={() => setHoveredOptionIndex(index)}\n                role=\"option\"\n                tabIndex={-1}\n              >\n                {multi ? (\n                  <BaseCheckbox\n                    label={label}\n                    checked={isSelected}\n                    onChange={() => {\n                      selectOption(String(value))\n                    }}\n                  />\n                ) : (\n                  <span\n                    onClick={() => {\n                      selectOption(String(value))\n                    }}\n                    className={cx(\n                      baseCheckboxStyles['base-checkbox-label'],\n                      styles['label']\n                    )}\n                  >\n                    {label}\n                  </span>\n                )}\n              </li>\n            )\n          }\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default OptionsList\n","import React from 'react'\n\nimport strokeDownIcon from 'icons/stroke-down.svg'\nimport { SvgIcon } from 'ui-kit/SvgIcon/SvgIcon'\n\nimport styles from './Toggle.module.scss'\n\ninterface ToggleProps {\n  disabled: boolean\n  isOpen: boolean\n  toggleField: () => void\n}\n\nconst Toggle = ({\n  disabled,\n  isOpen,\n  toggleField,\n}: ToggleProps): JSX.Element => {\n  return (\n    <button\n      onClick={toggleField}\n      className={styles['dropdown-indicator']}\n      type=\"button\"\n      disabled={disabled}\n    >\n      <SvgIcon\n        src={strokeDownIcon}\n        alt={`${isOpen ? 'Masquer' : 'Afficher'} les options`}\n        width=\"20\"\n      />\n    </button>\n  )\n}\n\nexport default Toggle\n","import cx from 'classnames'\nimport { useField, useFormikContext } from 'formik'\nimport React, { KeyboardEventHandler, useEffect, useRef, useState } from 'react'\n\nimport { SelectOption } from 'custom_types/form'\nimport { getLabelString } from 'utils/getLabelString'\n\nimport { BaseInput } from '../shared'\nimport FieldLayout from '../shared/FieldLayout'\nimport { FieldLayoutBaseProps } from '../shared/FieldLayout/FieldLayout'\n\nimport OptionsList from './OptionsList'\nimport styles from './SelectAutocomplete.module.scss'\nimport { SelectedValuesTags } from './SelectedValuesTags/SelectedValuesTags'\nimport Toggle from './Toggle'\n\nexport type SelectAutocompleteProps = FieldLayoutBaseProps & {\n  disabled?: boolean\n  hideArrow?: boolean\n  hideTags?: boolean\n  isOptional?: boolean\n  maxHeight?: number\n  multi?: boolean\n  options: SelectOption[]\n  placeholder?: string\n  pluralLabel?: string\n  resetOnOpen?: boolean\n  onSearch?: (pattern: string) => void\n  searchInOptions?: (options: SelectOption[], pattern: string) => SelectOption[]\n  onReset?: () => void\n  type?: 'text' | 'search'\n  leftIcon?: string\n}\n\nconst SelectAutocomplete = ({\n  className,\n  disabled = false,\n  name,\n  hideArrow,\n  hideFooter = false,\n  hideTags = false,\n  inline,\n  isOptional = false,\n  label,\n  multi = false,\n  options,\n  placeholder,\n  pluralLabel,\n  smallLabel = false,\n  resetOnOpen = true,\n  description,\n  onSearch = () => {},\n  searchInOptions = (options) => options,\n  onReset = () => {},\n  type = 'text',\n  leftIcon,\n}: SelectAutocompleteProps): JSX.Element => {\n  const { setFieldTouched, setFieldValue } = useFormikContext<any>()\n\n  const [field, meta] = useField<string | string[]>(name)\n  const [searchField, searchMeta] = useField(`search-${name}`)\n\n  const [hoveredOptionIndex, setHoveredOptionIndex] = useState<number | null>(\n    null\n  )\n  const [optionsLabelById, setOptionsLabelById] = useState<\n    Record<string, string>\n  >({})\n  const containerRef = useRef<HTMLDivElement>(null)\n  const listRef = useRef<HTMLUListElement>(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [filteredOptions, setFilteredOptions] = useState(options)\n\n  useEffect(() => {\n    const resetSearchField = async () => {\n      await setFieldValue(`search-${name}`, '', false)\n      await setFieldValue(name, '', false)\n      onReset()\n    }\n    if (isOpen && resetOnOpen && searchField.value !== '') {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      resetSearchField()\n    }\n  }, [isOpen])\n\n  /* hashtable for the options */\n  useEffect(() => {\n    setOptionsLabelById(\n      options.reduce<Record<string, string>>((optionsById, option) => {\n        optionsById[option.value] = option.label\n        return optionsById\n      }, {})\n    )\n  }, [options])\n\n  /* istanbul ignore next */\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent): void => {\n      if (!containerRef.current?.contains(e.target as Node)) {\n        setIsOpen(false)\n      }\n    }\n    if (containerRef.current) {\n      document.addEventListener('mousedown', handleClickOutside)\n    }\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [containerRef])\n\n  useEffect(() => {\n    if (onSearch) {\n      onSearch(searchField.value.trim())\n    }\n\n    setHoveredOptionIndex(null)\n  }, [searchField.value])\n\n  useEffect(() => {\n    setFilteredOptions(searchInOptions(options, searchField.value))\n  }, [searchField.value, options])\n\n  /* istanbul ignore next: DEBT TO FIX */\n  const handleKeyDown: KeyboardEventHandler<HTMLDivElement> = async (event) => {\n    /* istanbul ignore next */\n    switch (event.key) {\n      case 'ArrowUp':\n        if (hoveredOptionIndex !== null) {\n          if (hoveredOptionIndex <= 0) {\n            setHoveredOptionIndex(null)\n          } else {\n            setHoveredOptionIndex(hoveredOptionIndex - 1)\n          }\n        }\n        if (!isOpen) {\n          setIsOpen(true)\n        }\n        listRef.current?.focus()\n        break\n      case 'ArrowDown':\n        if (hoveredOptionIndex === null) {\n          setHoveredOptionIndex(0)\n        } else if (hoveredOptionIndex >= filteredOptions.length - 1) {\n          setHoveredOptionIndex(filteredOptions.length - 1)\n        } else {\n          setHoveredOptionIndex(hoveredOptionIndex + 1)\n        }\n        if (!isOpen) {\n          setIsOpen(true)\n        }\n        listRef.current?.focus()\n        break\n      case 'Space':\n        await openField()\n        listRef.current?.focus()\n        break\n      case 'Enter':\n        if (isOpen && hoveredOptionIndex !== null) {\n          event.preventDefault()\n          await selectOption(String(filteredOptions[hoveredOptionIndex].value))\n        }\n        break\n      case 'Escape':\n        setHoveredOptionIndex(null)\n        setIsOpen(false)\n        break\n      case 'Tab':\n        setHoveredOptionIndex(null)\n        setIsOpen(false)\n        break\n      default:\n        //\n        break\n    }\n  }\n\n  const selectOption = async (value: string) => {\n    let updatedSelection\n    if (multi) {\n      if (field.value.includes(value) && Array.isArray(field.value)) {\n        updatedSelection = field.value.filter((li) => li !== value)\n      } else {\n        updatedSelection = [...field.value, value]\n      }\n    } else {\n      updatedSelection = value\n      setIsOpen(false)\n      setHoveredOptionIndex(null)\n      await setFieldValue(\n        `search-${name}`,\n        optionsLabelById[updatedSelection],\n        false\n      )\n    }\n    await setFieldValue(name, updatedSelection)\n  }\n\n  const openField = async () => {\n    /* istanbul ignore next */\n    if (!isOpen) {\n      setIsOpen(true)\n    }\n    await setFieldTouched(name, true)\n  }\n\n  const toggleField = async () => {\n    if (isOpen) {\n      setIsOpen(false)\n      await setFieldValue(`search-${name}`, '', false)\n    } else {\n      setIsOpen(true)\n    }\n    await setFieldTouched(name, true)\n  }\n\n  const placeholderDisplay = Array.isArray(field.value)\n    ? placeholder ??\n      (field.value.length > 1 && pluralLabel ? pluralLabel : label)\n    : placeholder ?? optionsLabelById[field.value]\n\n  return (\n    <FieldLayout\n      className={className}\n      error={meta.error}\n      hideFooter={!hideTags && hideFooter}\n      isOptional={isOptional}\n      label={label}\n      name={`search-${name}`}\n      showError={meta.touched && !!meta.error}\n      smallLabel={smallLabel}\n      inline={inline}\n      description={description}\n    >\n      <div\n        className={cx(styles['multi-select-autocomplete-container'], className)}\n        onKeyDown={handleKeyDown}\n        ref={containerRef}\n      >\n        <BaseInput\n          {...(hoveredOptionIndex !== null && {\n            'aria-activedescendant': `option-display-${filteredOptions[hoveredOptionIndex]?.value}`,\n          })}\n          onFocus={openField}\n          placeholder={getLabelString(placeholderDisplay)}\n          style={{\n            paddingLeft:\n              (multi && field.value.length > 0) || leftIcon ? '2.2rem' : '1rem',\n          }}\n          className={styles['multi-select-autocomplete-placeholder-input']}\n          hasError={searchMeta.touched && !!meta.error}\n          type={type}\n          disabled={disabled}\n          {...searchField}\n          aria-autocomplete=\"list\"\n          aria-controls={`list-${name}`}\n          aria-describedby={`help-${name}`}\n          aria-expanded={isOpen}\n          aria-haspopup=\"listbox\"\n          role=\"combobox\"\n          leftIcon={leftIcon}\n        />\n        <div\n          aria-live=\"polite\"\n          aria-relevant=\"text\"\n          className=\"visually-hidden\"\n          id={`help-${name}`}\n        >\n          {multi && `${field.value.length} options sélectionnées`}\n          {!multi &&\n            !Array.isArray(field.value) &&\n            field.value !== '' &&\n            `Option sélectionnée : ${optionsLabelById[field.value]}`}\n          {isOpen\n            ? `${filteredOptions.length} options ${\n                searchField.value === ''\n                  ? 'disponibles'\n                  : 'correspondant au texte saisi'\n              }`\n            : 'saisissez du texte pour afficher et filtrer les options'}\n        </div>\n        <select\n          hidden\n          {...(multi && { multiple: true })}\n          {...field}\n          value={field.value || ''}\n          data-testid=\"select\"\n        >\n          {options?.map(({ label, value }) => (\n            <option key={`option-${value}`} value={value}>\n              {label}\n            </option>\n          ))}\n        </select>\n        <div className={styles['field-overlay']}>\n          {!hideArrow && (\n            <Toggle\n              disabled={disabled}\n              isOpen={isOpen}\n              toggleField={toggleField}\n            />\n          )}\n          {multi && field.value.length > 0 && (\n            <div onClick={toggleField} className={styles['pellet']}>\n              {field.value.length}\n            </div>\n          )}\n          {isOpen && (\n            <OptionsList\n              className={className}\n              fieldName={name}\n              selectedValues={field.value}\n              filteredOptions={filteredOptions}\n              setHoveredOptionIndex={setHoveredOptionIndex}\n              listRef={listRef}\n              hoveredOptionIndex={hoveredOptionIndex}\n              selectOption={selectOption}\n              multi={multi}\n            />\n          )}\n        </div>\n      </div>\n      {Array.isArray(field.value) && !hideTags && field.value.length > 0 && (\n        <SelectedValuesTags\n          disabled={disabled}\n          fieldName={name}\n          optionsLabelById={optionsLabelById}\n          selectedOptions={field.value}\n          removeOption={selectOption}\n        />\n      )}\n    </FieldLayout>\n  )\n}\n\nexport default SelectAutocomplete\n"],"names":["normalizeStrForSearch","str","searchPatternInOptions","options","pattern","maxDisplayedCount","matchingOptions","i","normalizedOptionLabel","word","OptionsList","className","fieldName","selectedValues","filteredOptions","setHoveredOptionIndex","listRef","hoveredOptionIndex","selectOption","multi","jsxs","cx","styles","jsx","value","label","index","isSelected","BaseCheckbox","baseCheckboxStyles","Toggle","disabled","isOpen","toggleField","SvgIcon","strokeDownIcon","SelectAutocomplete","name","hideArrow","hideFooter","hideTags","inline","isOptional","placeholder","pluralLabel","smallLabel","resetOnOpen","description","onSearch","searchInOptions","options2","onReset","type","leftIcon","setFieldTouched","setFieldValue","useFormikContext","field","meta","useField","searchField","searchMeta","useState","optionsLabelById","setOptionsLabelById","containerRef","useRef","setIsOpen","setFilteredOptions","useEffect","resetSearchField","optionsById","option","handleClickOutside","e","_a","handleKeyDown","event","_b","openField","_c","updatedSelection","li","placeholderDisplay","FieldLayout","BaseInput","getLabelString","label2","SelectedValuesTags"],"mappings":"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"}