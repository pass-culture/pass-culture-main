{"version":3,"file":"AutocompleteList-8264ed5d.js","sources":["../../src/ui-kit/form/shared/FieldLayout/FieldLayout.tsx","../../src/ui-kit/form/shared/FieldSetLayout/FieldSetLayout.tsx","../../src/ui-kit/form/shared/AutocompleteList/AutocompleteList.tsx"],"sourcesContent":["import cn from 'classnames'\nimport React, { useId } from 'react'\n\nimport fullClearIcon from 'icons/full-clear.svg'\nimport { SvgIcon } from 'ui-kit/SvgIcon/SvgIcon'\nimport Tooltip from 'ui-kit/Tooltip'\n\nimport FieldError from '../FieldError'\n\nimport styles from './FieldLayout.module.scss'\n\nexport type FieldLayoutBaseProps = {\n  // These props are display options that are applicable to all fields using FieldLayout\n  label: string | JSX.Element\n  name: string\n  description?: string\n  maxLength?: number\n  isLabelHidden?: boolean\n  hasLabelLineBreak?: boolean\n  isOptional?: boolean\n  className?: string\n  classNameLabel?: string\n  classNameFooter?: string\n  filterVariant?: boolean\n  smallLabel?: boolean\n  hideFooter?: boolean\n  inline?: boolean\n  clearButtonProps?: React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    tooltip: string\n  }\n  ErrorDetails?: React.ReactNode\n}\n\ntype FieldLayoutProps = FieldLayoutBaseProps & {\n  // These props are derived from the formik state and passed by the parent component\n  children: React.ReactNode\n  showError?: boolean\n  error?: string\n  count?: number\n}\n\n/* istanbul ignore next: DEBT, TO FIX */\nconst FieldLayout = ({\n  children,\n  label,\n  isLabelHidden = false,\n  hasLabelLineBreak = true,\n  className,\n  name,\n  showError = false,\n  error,\n  count = undefined,\n  maxLength = undefined,\n  isOptional = false,\n  smallLabel,\n  hideFooter = false,\n  inline = false,\n  classNameLabel,\n  classNameFooter,\n  description,\n  clearButtonProps,\n  ErrorDetails,\n}: FieldLayoutProps): JSX.Element => {\n  const hasError = showError && !!error\n  const hasCounter = count !== undefined && maxLength !== undefined\n  const tooltipId = useId()\n\n  const clearButton = (\n    <button\n      type=\"button\"\n      {...clearButtonProps}\n      aria-describedby={tooltipId}\n      className={styles['clear-button']}\n    >\n      <SvgIcon\n        src={fullClearIcon}\n        alt=\"\"\n        className={styles['clear-button-icon']}\n      />\n    </button>\n  )\n  const showFooter =\n    !hideFooter || hasError || hasCounter || Boolean(ErrorDetails)\n\n  return (\n    <div\n      className={cn(styles['field-layout'], className, {\n        [styles['field-layout-small-label']]: smallLabel,\n        [styles['field-layout-inline']]: inline,\n      })}\n      data-testid={`wrapper-${name}`}\n    >\n      <div\n        className={cn(styles['field-layout-label-container'], {\n          [styles['label-hidden']]: isLabelHidden,\n          classNameLabel,\n        })}\n      >\n        <label\n          className={cn(\n            styles['field-layout-label'],\n            hasLabelLineBreak && styles['field-layout-label-break']\n          )}\n          htmlFor={name}\n        >\n          {label}\n          {isOptional && (\n            <span className={styles['field-layout-optional']}>Optionnel</span>\n          )}\n        </label>\n        {description && (\n          <span className={styles['field-layout-input-description']}>\n            {description}\n          </span>\n        )}\n      </div>\n\n      <div className={styles['field-layout-content']}>\n        <div className={styles['input-wrapper']}>\n          {children}\n          {clearButtonProps && (\n            <div className={styles['clear-button-container']}>\n              {clearButtonProps.disabled ? (\n                clearButton\n              ) : (\n                <Tooltip content={clearButtonProps.tooltip} id={tooltipId}>\n                  {clearButton}\n                </Tooltip>\n              )}\n            </div>\n          )}\n        </div>\n\n        {showFooter && (\n          <div className={cn(classNameFooter, styles['field-layout-footer'])}>\n            {(hasError || Boolean(ErrorDetails)) && (\n              <div\n                className={styles['field-layout-error']}\n                id={`error-details-${name}`}\n                aria-live=\"polite\"\n              >\n                {hasError && <FieldError name={name}>{error}</FieldError>}\n                {ErrorDetails}\n              </div>\n            )}\n            {hasCounter && (\n              <span\n                className={styles['field-layout-counter']}\n                data-testid={`counter-${name}`}\n              >\n                {count}/{maxLength}\n              </span>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default FieldLayout\n","import cn from 'classnames'\nimport React from 'react'\n\nimport FieldError from '../FieldError'\n\nimport styles from './FieldSetLayout.module.scss'\n\ninterface FieldSetLayoutProps {\n  children: React.ReactNode\n  legend?: string\n  className?: string\n  error?: string\n  name: string\n  hideFooter?: boolean\n  dataTestId?: string\n}\n\nconst FieldSetLayout = ({\n  children,\n  legend,\n  className,\n  error,\n  name,\n  hideFooter = false,\n  dataTestId,\n}: FieldSetLayoutProps): JSX.Element => {\n  return (\n    <fieldset\n      className={cn(styles['fieldset-layout'], className)}\n      data-testid={dataTestId}\n    >\n      {legend && (\n        <legend className={styles['fieldset-layout-legend']}>{legend}</legend>\n      )}\n\n      <div> {children} </div>\n\n      {!hideFooter && (\n        <div className={styles['fieldset-layout-error']}>\n          {!!error && <FieldError name={name}>{error}</FieldError>}\n        </div>\n      )}\n    </fieldset>\n  )\n}\n\nexport default FieldSetLayout\n","import cx from 'classnames'\nimport React from 'react'\n\nimport strokeDownIcon from 'icons/stroke-down.svg'\nimport { SvgIcon } from 'ui-kit/SvgIcon/SvgIcon'\n\nimport styles from './AutocompleteList.module.scss'\nimport { AutocompleteItemProps } from './type'\n\n// FIXME (MathildeDuboille - 15-06-22): improve accessibility and refactor if needed.\n// This component is used in SelectAutocomplete and MultiselectAutocomplete\ntype AutocompleteListProps = {\n  className?: string\n  displayNumberOfSelectedValues?: boolean\n  filteredOptions: AutocompleteItemProps[]\n  isOpen: boolean\n  maxHeight?: number\n  numberOfSelectedOptions?: number\n  onButtonClick: () => void\n  renderOption: (option: AutocompleteItemProps) => React.ReactNode\n  disabled?: boolean\n  hideArrow?: boolean\n}\n\nconst AutocompleteList = ({\n  isOpen,\n  onButtonClick,\n  filteredOptions,\n  maxHeight,\n  renderOption,\n  displayNumberOfSelectedValues = false,\n  numberOfSelectedOptions,\n  className,\n  disabled,\n  hideArrow = false,\n}: AutocompleteListProps): JSX.Element => {\n  return (\n    <div className={styles['field-overlay']}>\n      {!hideArrow && (\n        <button\n          onClick={onButtonClick}\n          className={styles['dropdown-indicator']}\n          type=\"button\"\n          disabled={disabled}\n        >\n          <SvgIcon\n            src={strokeDownIcon}\n            alt={`${isOpen ? 'Masquer' : 'Afficher'} les options`}\n            width=\"20\"\n          />\n        </button>\n      )}\n      {displayNumberOfSelectedValues && (\n        <div onClick={onButtonClick} className={styles['pellet']}>\n          {numberOfSelectedOptions}\n        </div>\n      )}\n      {isOpen && (\n        <div\n          className={cx(styles['menu'], className)}\n          style={maxHeight ? { maxHeight } : {}}\n          role=\"listbox\"\n        >\n          {filteredOptions.length === 0 && (\n            <span\n              className={cx({\n                [styles['menu--no-results']]: filteredOptions.length === 0,\n              })}\n            >\n              Aucun r√©sultat\n            </span>\n          )}\n          {filteredOptions.map(option => renderOption(option))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default AutocompleteList\n"],"names":["FieldLayout","children","label","isLabelHidden","hasLabelLineBreak","className","name","showError","error","count","maxLength","isOptional","smallLabel","hideFooter","inline","classNameLabel","classNameFooter","description","clearButtonProps","ErrorDetails","hasError","hasCounter","tooltipId","useId","clearButton","jsx","styles","SvgIcon","fullClearIcon","showFooter","jsxs","cn","Tooltip","FieldError","FieldLayout$2","FieldSetLayout","legend","dataTestId","AutocompleteList","isOpen","onButtonClick","filteredOptions","maxHeight","renderOption","displayNumberOfSelectedValues","numberOfSelectedOptions","disabled","hideArrow","strokeDownIcon","cx","option"],"mappings":"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"}