{"version":3,"file":"Spinner-c810f073.js","sources":["../../src/apiClient/adage/core/BaseHttpRequest.ts","../../src/apiClient/adage/core/ApiError.ts","../../src/apiClient/adage/core/CancelablePromise.ts","../../src/apiClient/adage/core/request.ts","../../src/apiClient/adage/core/FetchHttpRequest.ts","../../src/apiClient/adage/services/DefaultService.ts","../../src/apiClient/adage/AppClientAdage.ts","../../src/apiClient/v1/core/BaseHttpRequest.ts","../../src/apiClient/v1/core/ApiError.ts","../../src/apiClient/v1/core/CancelablePromise.ts","../../src/apiClient/v1/core/request.ts","../../src/apiClient/v1/core/FetchHttpRequest.ts","../../src/apiClient/v1/services/DefaultService.ts","../../src/apiClient/v1/AppClient.ts","../../src/apiClient/v2/core/BaseHttpRequest.ts","../../src/apiClient/v2/core/ApiError.ts","../../src/apiClient/v2/core/CancelablePromise.ts","../../src/apiClient/v2/core/request.ts","../../src/apiClient/v2/core/FetchHttpRequest.ts","../../src/apiClient/v2/services/ApiContremarqueService.ts","../../src/apiClient/v2/services/ApiOffresCollectivesService.ts","../../src/apiClient/v2/AppClientV2.ts","../../src/apiClient/api.ts","../../src/apiClient/helpers.ts","../../src/ui-kit/Spinner/Spinner.tsx"],"sourcesContent":["/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport abstract class BaseHttpRequest {\n\n  constructor(public readonly config: OpenAPIConfig) {}\n\n  public abstract request<T>(options: ApiRequestOptions): CancelablePromise<T>;\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n  public readonly url: string;\n  public readonly status: number;\n  public readonly statusText: string;\n  public readonly body: any;\n  public readonly request: ApiRequestOptions;\n\n  constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n    super(message);\n\n    this.name = 'ApiError';\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.body = response.body;\n    this.request = request;\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n\n  constructor(message: string) {\n    super(message);\n    this.name = 'CancelError';\n  }\n\n  public get isCancelled(): boolean {\n    return true;\n  }\n}\n\nexport interface OnCancel {\n  readonly isResolved: boolean;\n  readonly isRejected: boolean;\n  readonly isCancelled: boolean;\n\n  (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n  #isResolved: boolean;\n  #isRejected: boolean;\n  #isCancelled: boolean;\n  readonly #cancelHandlers: (() => void)[];\n  readonly #promise: Promise<T>;\n  #resolve?: (value: T | PromiseLike<T>) => void;\n  #reject?: (reason?: any) => void;\n\n  constructor(\n    executor: (\n      resolve: (value: T | PromiseLike<T>) => void,\n      reject: (reason?: any) => void,\n      onCancel: OnCancel\n    ) => void\n  ) {\n    this.#isResolved = false;\n    this.#isRejected = false;\n    this.#isCancelled = false;\n    this.#cancelHandlers = [];\n    this.#promise = new Promise<T>((resolve, reject) => {\n      this.#resolve = resolve;\n      this.#reject = reject;\n\n      const onResolve = (value: T | PromiseLike<T>): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isResolved = true;\n        this.#resolve?.(value);\n      };\n\n      const onReject = (reason?: any): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isRejected = true;\n        this.#reject?.(reason);\n      };\n\n      const onCancel = (cancelHandler: () => void): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#cancelHandlers.push(cancelHandler);\n      };\n\n      Object.defineProperty(onCancel, 'isResolved', {\n        get: (): boolean => this.#isResolved,\n      });\n\n      Object.defineProperty(onCancel, 'isRejected', {\n        get: (): boolean => this.#isRejected,\n      });\n\n      Object.defineProperty(onCancel, 'isCancelled', {\n        get: (): boolean => this.#isCancelled,\n      });\n\n      return executor(onResolve, onReject, onCancel as OnCancel);\n    });\n  }\n\n   get [Symbol.toStringTag]() {\n            return \"Cancellable Promise\";\n     }\n\n  public then<TResult1 = T, TResult2 = never>(\n    onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n  ): Promise<TResult1 | TResult2> {\n    return this.#promise.then(onFulfilled, onRejected);\n  }\n\n  public catch<TResult = never>(\n    onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\n  ): Promise<T | TResult> {\n    return this.#promise.catch(onRejected);\n  }\n\n  public finally(onFinally?: (() => void) | null): Promise<T> {\n    return this.#promise.finally(onFinally);\n  }\n\n  public cancel(): void {\n    if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n      return;\n    }\n    this.#isCancelled = true;\n    if (this.#cancelHandlers.length) {\n      try {\n        for (const cancelHandler of this.#cancelHandlers) {\n          cancelHandler();\n        }\n      } catch (error) {\n        console.warn('Cancellation threw an error', error);\n        return;\n      }\n    }\n    this.#cancelHandlers.length = 0;\n    this.#reject?.(new CancelError('Request aborted'));\n  }\n\n  public get isCancelled(): boolean {\n    return this.#isCancelled;\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport { ApiError } from './ApiError';\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\nimport { CancelablePromise } from './CancelablePromise';\nimport type { OnCancel } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport const isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n\nexport const isString = (value: any): value is string => {\n  return typeof value === 'string';\n};\n\nexport const isStringWithValue = (value: any): value is string => {\n  return isString(value) && value !== '';\n};\n\nexport const isBlob = (value: any): value is Blob => {\n  return (\n    typeof value === 'object' &&\n    typeof value.type === 'string' &&\n    typeof value.stream === 'function' &&\n    typeof value.arrayBuffer === 'function' &&\n    typeof value.constructor === 'function' &&\n    typeof value.constructor.name === 'string' &&\n    /^(Blob|File)$/.test(value.constructor.name) &&\n    /^(Blob|File)$/.test(value[Symbol.toStringTag])\n  );\n};\n\nexport const isFormData = (value: any): value is FormData => {\n  return value instanceof FormData;\n};\n\nexport const base64 = (str: string): string => {\n  try {\n    return btoa(str);\n  } catch (err) {\n    // @ts-ignore\n    return Buffer.from(str).toString('base64');\n  }\n};\n\nexport const getQueryString = (params: Record<string, any>): string => {\n  const qs: string[] = [];\n\n  const append = (key: string, value: any) => {\n    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n  };\n\n  const process = (key: string, value: any) => {\n    if (isDefined(value)) {\n      if (Array.isArray(value)) {\n        value.forEach(v => {\n          process(key, v);\n        });\n      } else if (typeof value === 'object') {\n        Object.entries(value).forEach(([k, v]) => {\n          process(`${key}[${k}]`, v);\n        });\n      } else {\n        append(key, value);\n      }\n    }\n  };\n\n  Object.entries(params).forEach(([key, value]) => {\n    process(key, value);\n  });\n\n  if (qs.length > 0) {\n    return `?${qs.join('&')}`;\n  }\n\n  return '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n  const encoder = config.ENCODE_PATH || encodeURI;\n\n  const path = options.url\n    .replace('{api-version}', config.VERSION)\n    .replace(/{(.*?)}/g, (substring: string, group: string) => {\n      if (options.path?.hasOwnProperty(group)) {\n        return encoder(String(options.path[group]));\n      }\n      return substring;\n    });\n\n  const url = `${config.BASE}${path}`;\n  if (options.query) {\n    return `${url}${getQueryString(options.query)}`;\n  }\n  return url;\n};\n\nexport const getFormData = (options: ApiRequestOptions): FormData | undefined => {\n  if (options.formData) {\n    const formData = new FormData();\n\n    const process = (key: string, value: any) => {\n      if (isString(value) || isBlob(value)) {\n        formData.append(key, value);\n      } else {\n        formData.append(key, JSON.stringify(value));\n      }\n    };\n\n    Object.entries(options.formData)\n      .filter(([_, value]) => isDefined(value))\n      .forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          value.forEach(v => process(key, v));\n        } else {\n          process(key, value);\n        }\n      });\n\n    return formData;\n  }\n  return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nexport const resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\n  if (typeof resolver === 'function') {\n    return (resolver as Resolver<T>)(options);\n  }\n  return resolver;\n};\n\nexport const getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {\n  const token = await resolve(options, config.TOKEN);\n  const username = await resolve(options, config.USERNAME);\n  const password = await resolve(options, config.PASSWORD);\n  const additionalHeaders = await resolve(options, config.HEADERS);\n\n  const headers = Object.entries({\n    Accept: 'application/json',\n    ...additionalHeaders,\n    ...options.headers,\n  })\n    .filter(([_, value]) => isDefined(value))\n    .reduce((headers, [key, value]) => ({\n      ...headers,\n      [key]: String(value),\n    }), {} as Record<string, string>);\n\n  if (isStringWithValue(token)) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  if (isStringWithValue(username) && isStringWithValue(password)) {\n    const credentials = base64(`${username}:${password}`);\n    headers['Authorization'] = `Basic ${credentials}`;\n  }\n\n  if (options.body) {\n    if (options.mediaType) {\n      headers['Content-Type'] = options.mediaType;\n    } else if (isBlob(options.body)) {\n      headers['Content-Type'] = options.body.type || 'application/octet-stream';\n    } else if (isString(options.body)) {\n      headers['Content-Type'] = 'text/plain';\n    } else if (!isFormData(options.body)) {\n      headers['Content-Type'] = 'application/json';\n    }\n  }\n\n  return new Headers(headers);\n};\n\nexport const getRequestBody = (options: ApiRequestOptions): any => {\n  if (options.body !== undefined) {\n    if (options.mediaType?.includes('/json')) {\n      return JSON.stringify(options.body)\n    } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\n      return options.body;\n    } else {\n      return JSON.stringify(options.body);\n    }\n  }\n  return undefined;\n};\n\nexport const sendRequest = async (\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  url: string,\n  body: any,\n  formData: FormData | undefined,\n  headers: Headers,\n  onCancel: OnCancel\n): Promise<Response> => {\n  const controller = new AbortController();\n\n  const request: RequestInit = {\n    headers,\n    body: body ?? formData,\n    method: options.method,\n    signal: controller.signal,\n  };\n\n  if (config.WITH_CREDENTIALS) {\n    request.credentials = config.CREDENTIALS;\n  }\n\n  onCancel(() => controller.abort());\n\n  return await fetch(url, request);\n};\n\nexport const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {\n  if (responseHeader) {\n    const content = response.headers.get(responseHeader);\n    if (isString(content)) {\n      return content;\n    }\n  }\n  return undefined;\n};\n\nexport const getResponseBody = async (response: Response): Promise<any> => {\n  if (response.status !== 204) {\n    try {\n      const contentType = response.headers.get('Content-Type');\n      if (contentType) {\n        const jsonTypes = ['application/json', 'application/problem+json']\n        const isJSON = jsonTypes.some(type => contentType.toLowerCase().startsWith(type));\n        if (isJSON) {\n          return await response.json();\n        } else {\n          return await response.text();\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  return undefined;\n};\n\nexport const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\n  const errors: Record<number, string> = {\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    403: 'Forbidden',\n    404: 'Not Found',\n    500: 'Internal Server Error',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    ...options.errors,\n  }\n\n  const error = errors[result.status];\n  if (error) {\n    throw new ApiError(options, result, error);\n  }\n\n  if (!result.ok) {\n    const errorStatus = result.status ?? 'unknown';\n    const errorStatusText = result.statusText ?? 'unknown';\n    const errorBody = (() => {\n      try {\n        return JSON.stringify(result.body, null, 2);\n      } catch (e) {\n        return undefined;\n      }\n    })();\n\n    throw new ApiError(options, result,\n      `Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`\n    );\n  }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\n  return new CancelablePromise(async (resolve, reject, onCancel) => {\n    try {\n      const url = getUrl(config, options);\n      const formData = getFormData(options);\n      const body = getRequestBody(options);\n      const headers = await getHeaders(config, options);\n\n      if (!onCancel.isCancelled) {\n        const response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n        const responseBody = await getResponseBody(response);\n        const responseHeader = getResponseHeader(response, options.responseHeader);\n\n        const result: ApiResult = {\n          url,\n          ok: response.ok,\n          status: response.status,\n          statusText: response.statusText,\n          body: responseHeader ?? responseBody,\n        };\n\n        catchErrorCodes(options, result);\n\n        resolve(result.body);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport { BaseHttpRequest } from './BaseHttpRequest';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\nimport { request as __request } from './request';\n\nexport class FetchHttpRequest extends BaseHttpRequest {\n\n  constructor(config: OpenAPIConfig) {\n    super(config);\n  }\n\n  /**\n   * Request method\n   * @param options The request options from the service\n   * @returns CancelablePromise<T>\n   * @throws ApiError\n   */\n  public override request<T>(options: ApiRequestOptions): CancelablePromise<T> {\n    return __request(this.config, options);\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { AcademiesResponseModel } from '../models/AcademiesResponseModel';\nimport type { AdageBaseModel } from '../models/AdageBaseModel';\nimport type { AdageHeaderLogBody } from '../models/AdageHeaderLogBody';\nimport type { AuthenticatedResponse } from '../models/AuthenticatedResponse';\nimport type { BookCollectiveOfferRequest } from '../models/BookCollectiveOfferRequest';\nimport type { BookCollectiveOfferResponse } from '../models/BookCollectiveOfferResponse';\nimport type { CatalogViewBody } from '../models/CatalogViewBody';\nimport type { CategoriesResponseModel } from '../models/CategoriesResponseModel';\nimport type { CollectiveOfferResponseModel } from '../models/CollectiveOfferResponseModel';\nimport type { CollectiveOfferTemplateResponseModel } from '../models/CollectiveOfferTemplateResponseModel';\nimport type { CollectiveRequestBody } from '../models/CollectiveRequestBody';\nimport type { CollectiveRequestResponseModel } from '../models/CollectiveRequestResponseModel';\nimport type { EducationalInstitutionWithBudgetResponseModel } from '../models/EducationalInstitutionWithBudgetResponseModel';\nimport type { ListFeatureResponseModel } from '../models/ListFeatureResponseModel';\nimport type { OfferIdBody } from '../models/OfferIdBody';\nimport type { PostCollectiveRequestBodyModel } from '../models/PostCollectiveRequestBodyModel';\nimport type { RedactorPreferences } from '../models/RedactorPreferences';\nimport type { SearchBody } from '../models/SearchBody';\nimport type { StockIdBody } from '../models/StockIdBody';\nimport type { TrackingFilterBody } from '../models/TrackingFilterBody';\nimport type { VenueResponse } from '../models/VenueResponse';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class DefaultService {\n\n  constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n  /**\n   * authenticate <GET>\n   * @returns AuthenticatedResponse OK\n   * @throws ApiError\n   */\n  public authenticate(): CancelablePromise<AuthenticatedResponse> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/adage-iframe/authenticate',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_academies <GET>\n   * @returns AcademiesResponseModel OK\n   * @throws ApiError\n   */\n  public getAcademies(): CancelablePromise<AcademiesResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/adage-iframe/collective/academies',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * book_collective_offer <POST>\n   * @param requestBody\n   * @returns BookCollectiveOfferResponse OK\n   * @throws ApiError\n   */\n  public bookCollectiveOffer(\n    requestBody?: BookCollectiveOfferRequest,\n  ): CancelablePromise<BookCollectiveOfferResponse> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/collective/bookings',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Bad Request`,\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_educational_institution_with_budget <GET>\n   * @returns EducationalInstitutionWithBudgetResponseModel OK\n   * @throws ApiError\n   */\n  public getEducationalInstitutionWithBudget(): CancelablePromise<EducationalInstitutionWithBudgetResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/adage-iframe/collective/institution',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_collective_offer_template <GET>\n   * @param offerId\n   * @returns CollectiveOfferTemplateResponseModel OK\n   * @throws ApiError\n   */\n  public getCollectiveOfferTemplate(\n    offerId: number,\n  ): CancelablePromise<CollectiveOfferTemplateResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/adage-iframe/collective/offers-template/{offer_id}',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * create_collective_request <POST>\n   * @param offerId\n   * @param requestBody\n   * @returns CollectiveRequestResponseModel OK\n   * @throws ApiError\n   */\n  public createCollectiveRequest(\n    offerId: number,\n    requestBody?: PostCollectiveRequestBodyModel,\n  ): CancelablePromise<CollectiveRequestResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/collective/offers-template/{offer_id}/request',\n      path: {\n        'offer_id': offerId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_collective_offer <GET>\n   * @param offerId\n   * @returns CollectiveOfferResponseModel OK\n   * @throws ApiError\n   */\n  public getCollectiveOffer(\n    offerId: number,\n  ): CancelablePromise<CollectiveOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/adage-iframe/collective/offers/{offer_id}',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * list_features <GET>\n   * @returns ListFeatureResponseModel OK\n   * @throws ApiError\n   */\n  public listFeatures(): CancelablePromise<ListFeatureResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/adage-iframe/features',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * log_booking_modal_button_click <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public logBookingModalButtonClick(\n    requestBody?: StockIdBody,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/logs/booking-modal-button',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * log_catalog_view <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public logCatalogView(\n    requestBody?: CatalogViewBody,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/logs/catalog-view',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * log_contact_modal_button_click <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public logContactModalButtonClick(\n    requestBody?: OfferIdBody,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/logs/contact-modal-button',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * log_fav_offer_button_click <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public logFavOfferButtonClick(\n    requestBody?: OfferIdBody,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/logs/fav-offer/',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * log_header_link_click <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public logHeaderLinkClick(\n    requestBody?: AdageHeaderLogBody,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/logs/header-link-click/',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * log_offer_details_button_click <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public logOfferDetailsButtonClick(\n    requestBody?: StockIdBody,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/logs/offer-detail',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * log_offer_template_details_button_click <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public logOfferTemplateDetailsButtonClick(\n    requestBody?: OfferIdBody,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/logs/offer-template-detail',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * log_request_form_popin_dismiss <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public logRequestFormPopinDismiss(\n    requestBody?: CollectiveRequestBody,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/logs/request-popin-dismiss',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * log_open_satisfaction_survey <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public logOpenSatisfactionSurvey(\n    requestBody?: AdageBaseModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/logs/sat-survey',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * log_search_button_click <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public logSearchButtonClick(\n    requestBody?: SearchBody,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/logs/search-button',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * log_tracking_filter <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public logTrackingFilter(\n    requestBody?: TrackingFilterBody,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/logs/tracking-filter',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_educational_offers_categories <GET>\n   * @returns CategoriesResponseModel OK\n   * @throws ApiError\n   */\n  public getEducationalOffersCategories(): CancelablePromise<CategoriesResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/adage-iframe/offers/categories',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * save_redactor_preferences <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public saveRedactorPreferences(\n    requestBody?: RedactorPreferences,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/adage-iframe/redactor/preferences',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_venue_by_siret <GET>\n   * @param siret\n   * @param getRelative\n   * @returns VenueResponse OK\n   * @throws ApiError\n   */\n  public getVenueBySiret(\n    siret: string,\n    getRelative: boolean = false,\n  ): CancelablePromise<VenueResponse> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/adage-iframe/venues/siret/{siret}',\n      path: {\n        'siret': siret,\n      },\n      query: {\n        'getRelative': getRelative,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_venue_by_id <GET>\n   * @param venueId\n   * @param getRelative\n   * @returns VenueResponse OK\n   * @throws ApiError\n   */\n  public getVenueById(\n    venueId: number,\n    getRelative: boolean = false,\n  ): CancelablePromise<VenueResponse> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/adage-iframe/venues/{venue_id}',\n      path: {\n        'venue_id': venueId,\n      },\n      query: {\n        'getRelative': getRelative,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { BaseHttpRequest } from './core/BaseHttpRequest';\nimport type { OpenAPIConfig } from './core/OpenAPI';\nimport { FetchHttpRequest } from './core/FetchHttpRequest';\n\nimport { DefaultService } from './services/DefaultService';\n\ntype HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;\n\nexport class AppClientAdage {\n\n  public readonly default: DefaultService;\n\n  public readonly request: BaseHttpRequest;\n\n  constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = FetchHttpRequest) {\n    this.request = new HttpRequest({\n      BASE: config?.BASE ?? 'http://localhost:5001',\n      VERSION: config?.VERSION ?? '0.1.0',\n      WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,\n      CREDENTIALS: config?.CREDENTIALS ?? 'include',\n      TOKEN: config?.TOKEN,\n      USERNAME: config?.USERNAME,\n      PASSWORD: config?.PASSWORD,\n      HEADERS: config?.HEADERS,\n      ENCODE_PATH: config?.ENCODE_PATH,\n    });\n\n    this.default = new DefaultService(this.request);\n  }\n}\n\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport abstract class BaseHttpRequest {\n\n  constructor(public readonly config: OpenAPIConfig) {}\n\n  public abstract request<T>(options: ApiRequestOptions): CancelablePromise<T>;\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n  public readonly url: string;\n  public readonly status: number;\n  public readonly statusText: string;\n  public readonly body: any;\n  public readonly request: ApiRequestOptions;\n\n  constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n    super(message);\n\n    this.name = 'ApiError';\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.body = response.body;\n    this.request = request;\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n\n  constructor(message: string) {\n    super(message);\n    this.name = 'CancelError';\n  }\n\n  public get isCancelled(): boolean {\n    return true;\n  }\n}\n\nexport interface OnCancel {\n  readonly isResolved: boolean;\n  readonly isRejected: boolean;\n  readonly isCancelled: boolean;\n\n  (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n  #isResolved: boolean;\n  #isRejected: boolean;\n  #isCancelled: boolean;\n  readonly #cancelHandlers: (() => void)[];\n  readonly #promise: Promise<T>;\n  #resolve?: (value: T | PromiseLike<T>) => void;\n  #reject?: (reason?: any) => void;\n\n  constructor(\n    executor: (\n      resolve: (value: T | PromiseLike<T>) => void,\n      reject: (reason?: any) => void,\n      onCancel: OnCancel\n    ) => void\n  ) {\n    this.#isResolved = false;\n    this.#isRejected = false;\n    this.#isCancelled = false;\n    this.#cancelHandlers = [];\n    this.#promise = new Promise<T>((resolve, reject) => {\n      this.#resolve = resolve;\n      this.#reject = reject;\n\n      const onResolve = (value: T | PromiseLike<T>): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isResolved = true;\n        this.#resolve?.(value);\n      };\n\n      const onReject = (reason?: any): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isRejected = true;\n        this.#reject?.(reason);\n      };\n\n      const onCancel = (cancelHandler: () => void): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#cancelHandlers.push(cancelHandler);\n      };\n\n      Object.defineProperty(onCancel, 'isResolved', {\n        get: (): boolean => this.#isResolved,\n      });\n\n      Object.defineProperty(onCancel, 'isRejected', {\n        get: (): boolean => this.#isRejected,\n      });\n\n      Object.defineProperty(onCancel, 'isCancelled', {\n        get: (): boolean => this.#isCancelled,\n      });\n\n      return executor(onResolve, onReject, onCancel as OnCancel);\n    });\n  }\n\n   get [Symbol.toStringTag]() {\n            return \"Cancellable Promise\";\n     }\n\n  public then<TResult1 = T, TResult2 = never>(\n    onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n  ): Promise<TResult1 | TResult2> {\n    return this.#promise.then(onFulfilled, onRejected);\n  }\n\n  public catch<TResult = never>(\n    onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\n  ): Promise<T | TResult> {\n    return this.#promise.catch(onRejected);\n  }\n\n  public finally(onFinally?: (() => void) | null): Promise<T> {\n    return this.#promise.finally(onFinally);\n  }\n\n  public cancel(): void {\n    if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n      return;\n    }\n    this.#isCancelled = true;\n    if (this.#cancelHandlers.length) {\n      try {\n        for (const cancelHandler of this.#cancelHandlers) {\n          cancelHandler();\n        }\n      } catch (error) {\n        console.warn('Cancellation threw an error', error);\n        return;\n      }\n    }\n    this.#cancelHandlers.length = 0;\n    this.#reject?.(new CancelError('Request aborted'));\n  }\n\n  public get isCancelled(): boolean {\n    return this.#isCancelled;\n  }\n}\n","// overwrites request.ts to handle redirection to maintenance\n\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport { ApiError } from './ApiError'\nimport type { ApiRequestOptions } from './ApiRequestOptions'\nimport type { ApiResult } from './ApiResult'\nimport { CancelablePromise } from './CancelablePromise'\nimport type { OnCancel } from './CancelablePromise'\nimport type { OpenAPIConfig } from './OpenAPI'\nimport { URL_FOR_MAINTENANCE } from 'utils/config'\n\nconst isDefined = <T>(\n  value: T | null | undefined\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null\n}\n\nconst isString = (value: any): value is string => {\n  return typeof value === 'string'\n}\n\nconst isStringWithValue = (value: any): value is string => {\n  return isString(value) && value !== ''\n}\n\nconst isBlob = (value: any): value is Blob => {\n  return (\n    typeof value === 'object' &&\n    typeof value.type === 'string' &&\n    typeof value.stream === 'function' &&\n    typeof value.arrayBuffer === 'function' &&\n    typeof value.constructor === 'function' &&\n    typeof value.constructor.name === 'string' &&\n    /^(Blob|File)$/.test(value.constructor.name) &&\n    /^(Blob|File)$/.test(value[Symbol.toStringTag])\n  )\n}\n\nconst isFormData = (value: any): value is FormData => {\n  return value instanceof FormData\n}\n\nconst base64 = (str: string): string => {\n  try {\n    return btoa(str)\n  } catch (err) {\n    return Buffer.from(str).toString('base64')\n  }\n}\n\nconst getQueryString = (params: Record<string, any>): string => {\n  const qs: string[] = []\n\n  const append = (key: string, value: any) => {\n    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`)\n  }\n\n  const process = (key: string, value: any) => {\n    if (isDefined(value)) {\n      if (Array.isArray(value)) {\n        value.forEach(v => {\n          process(key, v)\n        })\n      } else if (typeof value === 'object') {\n        Object.entries(value).forEach(([k, v]) => {\n          process(`${key}[${k}]`, v)\n        })\n      } else {\n        append(key, value)\n      }\n    }\n  }\n\n  Object.entries(params).forEach(([key, value]) => {\n    process(key, value)\n  })\n\n  if (qs.length > 0) {\n    return `?${qs.join('&')}`\n  }\n\n  return ''\n}\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n  const encoder = config.ENCODE_PATH || encodeURI\n\n  const path = options.url\n    .replace('{api-version}', config.VERSION)\n    .replace(/{(.*?)}/g, (substring: string, group: string) => {\n      if (options.path?.hasOwnProperty(group)) {\n        return encoder(String(options.path[group]))\n      }\n      return substring\n    })\n\n  const url = `${config.BASE}${path}`\n  if (options.query) {\n    return `${url}${getQueryString(options.query)}`\n  }\n  return url\n}\n\nconst getFormData = (options: ApiRequestOptions): FormData | undefined => {\n  if (options.formData) {\n    const formData = new FormData()\n\n    const process = (key: string, value: any) => {\n      if (isString(value) || isBlob(value)) {\n        formData.append(key, value)\n      } else {\n        formData.append(key, JSON.stringify(value))\n      }\n    }\n\n    Object.entries(options.formData)\n      .filter(([_, value]) => isDefined(value))\n      .forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          value.forEach(v => process(key, v))\n        } else {\n          process(key, value)\n        }\n      })\n\n    return formData\n  }\n  return undefined\n}\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>\n\nconst resolve = async <T>(\n  options: ApiRequestOptions,\n  resolver?: T | Resolver<T>\n): Promise<T | undefined> => {\n  if (typeof resolver === 'function') {\n    return (resolver as Resolver<T>)(options)\n  }\n  return resolver\n}\n\nconst getHeaders = async (\n  config: OpenAPIConfig,\n  options: ApiRequestOptions\n): Promise<Headers> => {\n  const token = await resolve(options, config.TOKEN)\n  const username = await resolve(options, config.USERNAME)\n  const password = await resolve(options, config.PASSWORD)\n  const additionalHeaders = await resolve(options, config.HEADERS)\n\n  const headers = Object.entries({\n    Accept: 'application/json',\n    ...additionalHeaders,\n    ...options.headers,\n  })\n    .filter(([_, value]) => isDefined(value))\n    .reduce(\n      (headers, [key, value]) => ({\n        ...headers,\n        [key]: String(value),\n      }),\n      {} as Record<string, string>\n    )\n\n  if (isStringWithValue(token)) {\n    headers['Authorization'] = `Bearer ${token}`\n  }\n\n  if (isStringWithValue(username) && isStringWithValue(password)) {\n    const credentials = base64(`${username}:${password}`)\n    headers['Authorization'] = `Basic ${credentials}`\n  }\n\n  if (options.body) {\n    if (options.mediaType) {\n      headers['Content-Type'] = options.mediaType\n    } else if (isBlob(options.body)) {\n      headers['Content-Type'] = options.body.type || 'application/octet-stream'\n    } else if (isString(options.body)) {\n      headers['Content-Type'] = 'text/plain'\n    } else if (!isFormData(options.body)) {\n      headers['Content-Type'] = 'application/json'\n    }\n  }\n\n  return new Headers(headers)\n}\n\nconst getRequestBody = (options: ApiRequestOptions): any => {\n  if (options.body) {\n    if (options.mediaType?.includes('/json')) {\n      return JSON.stringify(options.body)\n    } else if (\n      isString(options.body) ||\n      isBlob(options.body) ||\n      isFormData(options.body)\n    ) {\n      return options.body\n    } else {\n      return JSON.stringify(options.body)\n    }\n  }\n  return undefined\n}\n\nexport const sendRequest = async (\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  url: string,\n  body: any,\n  formData: FormData | undefined,\n  headers: Headers,\n  onCancel: OnCancel\n): Promise<Response> => {\n  const controller = new AbortController()\n\n  const request: RequestInit = {\n    headers,\n    body: body ?? formData,\n    method: options.method,\n    signal: controller.signal,\n  }\n\n  if (config.WITH_CREDENTIALS) {\n    request.credentials = config.CREDENTIALS\n  }\n\n  onCancel(() => controller.abort())\n\n  return await fetch(url, request)\n}\n\nconst getResponseHeader = (\n  response: Response,\n  responseHeader?: string\n): string | undefined => {\n  if (responseHeader) {\n    const content = response.headers.get(responseHeader)\n    if (isString(content)) {\n      return content\n    }\n  }\n  return undefined\n}\n\nconst getResponseBody = async (response: Response): Promise<any> => {\n  if (response.status !== 204) {\n    try {\n      const contentType = response.headers.get('Content-Type')\n      if (contentType) {\n        const isJSON = contentType.toLowerCase().startsWith('application/json')\n        if (isJSON) {\n          return await response.json()\n        } else {\n          return await response.text()\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n  return undefined\n}\n\nconst catchErrorCodes = (\n  options: ApiRequestOptions,\n  result: ApiResult\n): void => {\n  const errors: Record<number, string> = {\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    403: 'Forbidden',\n    404: 'Not Found',\n    500: 'Internal Server Error',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    ...options.errors,\n  }\n\n  const error = errors[result.status]\n\n  // BEGIN CUSTOM SCRIPT\n  if (result.status === 503) {\n    window.location.assign(URL_FOR_MAINTENANCE)\n    return\n  }\n  // END CUSTOM SCRIPT\n\n  if (error) {\n    throw new ApiError(options, result, error)\n  }\n\n  if (!result.ok) {\n    throw new ApiError(options, result, 'Generic Error')\n  }\n}\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(\n  config: OpenAPIConfig,\n  options: ApiRequestOptions\n): CancelablePromise<T> => {\n  return new CancelablePromise(async (resolve, reject, onCancel) => {\n    try {\n      const url = getUrl(config, options)\n      const formData = getFormData(options)\n      const body = getRequestBody(options)\n      const headers = await getHeaders(config, options)\n\n      if (!onCancel.isCancelled) {\n        const response = await sendRequest(\n          config,\n          options,\n          url,\n          body,\n          formData,\n          headers,\n          onCancel\n        )\n        const responseBody = await getResponseBody(response)\n        const responseHeader = getResponseHeader(\n          response,\n          options.responseHeader\n        )\n\n        const result: ApiResult = {\n          url,\n          ok: response.ok,\n          status: response.status,\n          statusText: response.statusText,\n          body: responseHeader ?? responseBody,\n        }\n\n        catchErrorCodes(options, result)\n\n        resolve(result.body)\n      }\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport { BaseHttpRequest } from './BaseHttpRequest';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\nimport { request as __request } from './request';\n\nexport class FetchHttpRequest extends BaseHttpRequest {\n\n  constructor(config: OpenAPIConfig) {\n    super(config);\n  }\n\n  /**\n   * Request method\n   * @param options The request options from the service\n   * @returns CancelablePromise<T>\n   * @throws ApiError\n   */\n  public override request<T>(options: ApiRequestOptions): CancelablePromise<T> {\n    return __request(this.config, options);\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { AdageCulturalPartnerResponseModel } from '../models/AdageCulturalPartnerResponseModel';\nimport type { AdageCulturalPartnersResponseModel } from '../models/AdageCulturalPartnersResponseModel';\nimport type { AttachImageFormModel } from '../models/AttachImageFormModel';\nimport type { AttachImageResponseModel } from '../models/AttachImageResponseModel';\nimport type { BookingExportType } from '../models/BookingExportType';\nimport type { BookingStatusFilter } from '../models/BookingStatusFilter';\nimport type { CategoriesResponseModel } from '../models/CategoriesResponseModel';\nimport type { ChangePasswordBodyModel } from '../models/ChangePasswordBodyModel';\nimport type { ChangeProEmailBody } from '../models/ChangeProEmailBody';\nimport type { CollectiveBookingByIdResponseModel } from '../models/CollectiveBookingByIdResponseModel';\nimport type { CollectiveBookingStatusFilter } from '../models/CollectiveBookingStatusFilter';\nimport type { CollectiveOfferResponseIdModel } from '../models/CollectiveOfferResponseIdModel';\nimport type { CollectiveOfferTemplateBodyModel } from '../models/CollectiveOfferTemplateBodyModel';\nimport type { CollectiveOfferTemplateResponseIdModel } from '../models/CollectiveOfferTemplateResponseIdModel';\nimport type { CollectiveOfferType } from '../models/CollectiveOfferType';\nimport type { CollectiveStockCreationBodyModel } from '../models/CollectiveStockCreationBodyModel';\nimport type { CollectiveStockEditionBodyModel } from '../models/CollectiveStockEditionBodyModel';\nimport type { CollectiveStockResponseModel } from '../models/CollectiveStockResponseModel';\nimport type { CookieConsentRequest } from '../models/CookieConsentRequest';\nimport type { CreateOffererQueryModel } from '../models/CreateOffererQueryModel';\nimport type { CreateThumbnailBodyModel } from '../models/CreateThumbnailBodyModel';\nimport type { CreateThumbnailResponseModel } from '../models/CreateThumbnailResponseModel';\nimport type { DeleteOfferRequestBody } from '../models/DeleteOfferRequestBody';\nimport type { EditVenueBodyModel } from '../models/EditVenueBodyModel';\nimport type { EditVenueCollectiveDataBodyModel } from '../models/EditVenueCollectiveDataBodyModel';\nimport type { EducationalDomainsResponseModel } from '../models/EducationalDomainsResponseModel';\nimport type { EducationalInstitutionsResponseModel } from '../models/EducationalInstitutionsResponseModel';\nimport type { EducationalRedactors } from '../models/EducationalRedactors';\nimport type { FinanceReimbursementPointListResponseModel } from '../models/FinanceReimbursementPointListResponseModel';\nimport type { GenerateOffererApiKeyResponse } from '../models/GenerateOffererApiKeyResponse';\nimport type { GetCollectiveOfferRequestResponseModel } from '../models/GetCollectiveOfferRequestResponseModel';\nimport type { GetCollectiveOfferResponseModel } from '../models/GetCollectiveOfferResponseModel';\nimport type { GetCollectiveOfferTemplateResponseModel } from '../models/GetCollectiveOfferTemplateResponseModel';\nimport type { GetCollectiveVenueResponseModel } from '../models/GetCollectiveVenueResponseModel';\nimport type { GetEducationalOfferersResponseModel } from '../models/GetEducationalOfferersResponseModel';\nimport type { GetIndividualOfferResponseModel } from '../models/GetIndividualOfferResponseModel';\nimport type { GetOffererMembersResponseModel } from '../models/GetOffererMembersResponseModel';\nimport type { GetOffererResponseModel } from '../models/GetOffererResponseModel';\nimport type { GetOfferersNamesResponseModel } from '../models/GetOfferersNamesResponseModel';\nimport type { GetVenueListResponseModel } from '../models/GetVenueListResponseModel';\nimport type { GetVenueResponseModel } from '../models/GetVenueResponseModel';\nimport type { GetVenuesOfOffererFromSiretResponseModel } from '../models/GetVenuesOfOffererFromSiretResponseModel';\nimport type { InviteMembersQueryModel } from '../models/InviteMembersQueryModel';\nimport type { InvoiceListResponseModel } from '../models/InvoiceListResponseModel';\nimport type { LinkVenueToPricingPointBodyModel } from '../models/LinkVenueToPricingPointBodyModel';\nimport type { ListBookingsResponseModel } from '../models/ListBookingsResponseModel';\nimport type { ListCollectiveBookingsResponseModel } from '../models/ListCollectiveBookingsResponseModel';\nimport type { ListCollectiveOffersResponseModel } from '../models/ListCollectiveOffersResponseModel';\nimport type { ListFeatureResponseModel } from '../models/ListFeatureResponseModel';\nimport type { ListNationalProgramsResponseModel } from '../models/ListNationalProgramsResponseModel';\nimport type { ListOffersResponseModel } from '../models/ListOffersResponseModel';\nimport type { ListVenueProviderResponse } from '../models/ListVenueProviderResponse';\nimport type { LoginUserBodyModel } from '../models/LoginUserBodyModel';\nimport type { NewPasswordBodyModel } from '../models/NewPasswordBodyModel';\nimport type { OffererReimbursementPointListResponseModel } from '../models/OffererReimbursementPointListResponseModel';\nimport type { OffererStatsResponseModel } from '../models/OffererStatsResponseModel';\nimport type { OfferType } from '../models/OfferType';\nimport type { PatchAllCollectiveOffersActiveStatusBodyModel } from '../models/PatchAllCollectiveOffersActiveStatusBodyModel';\nimport type { PatchAllOffersActiveStatusBodyModel } from '../models/PatchAllOffersActiveStatusBodyModel';\nimport type { PatchCollectiveOfferActiveStatusBodyModel } from '../models/PatchCollectiveOfferActiveStatusBodyModel';\nimport type { PatchCollectiveOfferBodyModel } from '../models/PatchCollectiveOfferBodyModel';\nimport type { PatchCollectiveOfferEducationalInstitution } from '../models/PatchCollectiveOfferEducationalInstitution';\nimport type { PatchCollectiveOfferTemplateBodyModel } from '../models/PatchCollectiveOfferTemplateBodyModel';\nimport type { PatchOfferActiveStatusBodyModel } from '../models/PatchOfferActiveStatusBodyModel';\nimport type { PatchOfferBodyModel } from '../models/PatchOfferBodyModel';\nimport type { PatchOfferPublishBodyModel } from '../models/PatchOfferPublishBodyModel';\nimport type { PostCollectiveOfferBodyModel } from '../models/PostCollectiveOfferBodyModel';\nimport type { PostCollectiveOfferTemplateBodyModel } from '../models/PostCollectiveOfferTemplateBodyModel';\nimport type { PostOfferBodyModel } from '../models/PostOfferBodyModel';\nimport type { PostOffererResponseModel } from '../models/PostOffererResponseModel';\nimport type { PostVenueBodyModel } from '../models/PostVenueBodyModel';\nimport type { PostVenueProviderBody } from '../models/PostVenueProviderBody';\nimport type { PriceCategoryBody } from '../models/PriceCategoryBody';\nimport type { ProFlagsQueryModel } from '../models/ProFlagsQueryModel';\nimport type { ProUserCreationBodyModel } from '../models/ProUserCreationBodyModel';\nimport type { ProUserCreationBodyV2Model } from '../models/ProUserCreationBodyV2Model';\nimport type { ResetPasswordBodyModel } from '../models/ResetPasswordBodyModel';\nimport type { SaveNewOnboardingDataQueryModel } from '../models/SaveNewOnboardingDataQueryModel';\nimport type { SharedCurrentUserResponseModel } from '../models/SharedCurrentUserResponseModel';\nimport type { SharedLoginUserResponseModel } from '../models/SharedLoginUserResponseModel';\nimport type { SirenInfo } from '../models/SirenInfo';\nimport type { SiretInfo } from '../models/SiretInfo';\nimport type { StockIdResponseModel } from '../models/StockIdResponseModel';\nimport type { StocksResponseModel } from '../models/StocksResponseModel';\nimport type { StocksUpsertBodyModel } from '../models/StocksUpsertBodyModel';\nimport type { UserEmailValidationResponseModel } from '../models/UserEmailValidationResponseModel';\nimport type { UserHasBookingResponse } from '../models/UserHasBookingResponse';\nimport type { UserIdentityBodyModel } from '../models/UserIdentityBodyModel';\nimport type { UserIdentityResponseModel } from '../models/UserIdentityResponseModel';\nimport type { UserPhoneBodyModel } from '../models/UserPhoneBodyModel';\nimport type { UserPhoneResponseModel } from '../models/UserPhoneResponseModel';\nimport type { UserResetEmailBodyModel } from '../models/UserResetEmailBodyModel';\nimport type { VenueLabelListResponseModel } from '../models/VenueLabelListResponseModel';\nimport type { VenueProviderResponse } from '../models/VenueProviderResponse';\nimport type { VenueResponseModel } from '../models/VenueResponseModel';\nimport type { VenuesEducationalStatusesResponseModel } from '../models/VenuesEducationalStatusesResponseModel';\nimport type { VenueStatsResponseModel } from '../models/VenueStatsResponseModel';\nimport type { VenueTypeListResponseModel } from '../models/VenueTypeListResponseModel';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class DefaultService {\n\n  constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n  /**\n   * get_bookings_pro <GET>\n   * @param page\n   * @param venueId\n   * @param eventDate\n   * @param bookingStatusFilter\n   * @param bookingPeriodBeginningDate\n   * @param bookingPeriodEndingDate\n   * @param offerType\n   * @param exportType\n   * @param extra\n   * @returns ListBookingsResponseModel OK\n   * @throws ApiError\n   */\n  public getBookingsPro(\n    page: number = 1,\n    venueId?: number | null,\n    eventDate?: string | null,\n    bookingStatusFilter?: BookingStatusFilter | null,\n    bookingPeriodBeginningDate?: string | null,\n    bookingPeriodEndingDate?: string | null,\n    offerType?: OfferType | null,\n    exportType?: BookingExportType | null,\n    extra: string = 'forbid',\n  ): CancelablePromise<ListBookingsResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/bookings/pro',\n      query: {\n        'page': page,\n        'venueId': venueId,\n        'eventDate': eventDate,\n        'bookingStatusFilter': bookingStatusFilter,\n        'bookingPeriodBeginningDate': bookingPeriodBeginningDate,\n        'bookingPeriodEndingDate': bookingPeriodEndingDate,\n        'offerType': offerType,\n        'exportType': exportType,\n        'extra': extra,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_user_has_bookings <GET>\n   * @returns UserHasBookingResponse OK\n   * @throws ApiError\n   */\n  public getUserHasBookings(): CancelablePromise<UserHasBookingResponse> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/bookings/pro/userHasBookings',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_collective_bookings_pro <GET>\n   * @param page\n   * @param venueId\n   * @param eventDate\n   * @param bookingStatusFilter\n   * @param bookingPeriodBeginningDate\n   * @param bookingPeriodEndingDate\n   * @param extra\n   * @returns ListCollectiveBookingsResponseModel OK\n   * @throws ApiError\n   */\n  public getCollectiveBookingsPro(\n    page: number = 1,\n    venueId?: number | null,\n    eventDate?: string | null,\n    bookingStatusFilter?: CollectiveBookingStatusFilter | null,\n    bookingPeriodBeginningDate?: string | null,\n    bookingPeriodEndingDate?: string | null,\n    extra: string = 'forbid',\n  ): CancelablePromise<ListCollectiveBookingsResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/collective/bookings/pro',\n      query: {\n        'page': page,\n        'venueId': venueId,\n        'eventDate': eventDate,\n        'bookingStatusFilter': bookingStatusFilter,\n        'bookingPeriodBeginningDate': bookingPeriodBeginningDate,\n        'bookingPeriodEndingDate': bookingPeriodEndingDate,\n        'extra': extra,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_user_has_collective_bookings <GET>\n   * @returns UserHasBookingResponse OK\n   * @throws ApiError\n   */\n  public getUserHasCollectiveBookings(): CancelablePromise<UserHasBookingResponse> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/collective/bookings/pro/userHasBookings',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_collective_booking_by_id <GET>\n   * @param bookingId\n   * @returns CollectiveBookingByIdResponseModel OK\n   * @throws ApiError\n   */\n  public getCollectiveBookingById(\n    bookingId: string,\n  ): CancelablePromise<CollectiveBookingByIdResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/collective/bookings/{booking_id}',\n      path: {\n        'booking_id': bookingId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * list_educational_domains <GET>\n   * @returns EducationalDomainsResponseModel OK\n   * @throws ApiError\n   */\n  public listEducationalDomains(): CancelablePromise<EducationalDomainsResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/collective/educational-domains',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_collective_offers <GET>\n   * @param nameOrIsbn\n   * @param offererId\n   * @param status\n   * @param venueId\n   * @param categoryId\n   * @param creationMode\n   * @param periodBeginningDate\n   * @param periodEndingDate\n   * @param collectiveOfferType\n   * @returns ListCollectiveOffersResponseModel OK\n   * @throws ApiError\n   */\n  public getCollectiveOffers(\n    nameOrIsbn?: string | null,\n    offererId?: number | null,\n    status?: string | null,\n    venueId?: number | null,\n    categoryId?: string | null,\n    creationMode?: string | null,\n    periodBeginningDate?: string | null,\n    periodEndingDate?: string | null,\n    collectiveOfferType?: CollectiveOfferType | null,\n  ): CancelablePromise<ListCollectiveOffersResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/collective/offers',\n      query: {\n        'nameOrIsbn': nameOrIsbn,\n        'offererId': offererId,\n        'status': status,\n        'venueId': venueId,\n        'categoryId': categoryId,\n        'creationMode': creationMode,\n        'periodBeginningDate': periodBeginningDate,\n        'periodEndingDate': periodEndingDate,\n        'collectiveOfferType': collectiveOfferType,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * create_collective_offer <POST>\n   * @param requestBody\n   * @returns CollectiveOfferResponseIdModel Created\n   * @throws ApiError\n   */\n  public createCollectiveOffer(\n    requestBody?: PostCollectiveOfferBodyModel,\n  ): CancelablePromise<CollectiveOfferResponseIdModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/collective/offers',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * create_collective_offer_template <POST>\n   * @param requestBody\n   * @returns CollectiveOfferResponseIdModel Created\n   * @throws ApiError\n   */\n  public createCollectiveOfferTemplate(\n    requestBody?: PostCollectiveOfferTemplateBodyModel,\n  ): CancelablePromise<CollectiveOfferResponseIdModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/collective/offers-template',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_collective_offers_template_active_status <PATCH>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public patchCollectiveOffersTemplateActiveStatus(\n    requestBody?: PatchCollectiveOfferActiveStatusBodyModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/collective/offers-template/active-status',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_collective_offer_request <GET>\n   * @param requestId\n   * @returns GetCollectiveOfferRequestResponseModel OK\n   * @throws ApiError\n   */\n  public getCollectiveOfferRequest(\n    requestId: number,\n  ): CancelablePromise<GetCollectiveOfferRequestResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/collective/offers-template/request/{request_id}',\n      path: {\n        'request_id': requestId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_collective_offer_template <GET>\n   * @param offerId\n   * @returns GetCollectiveOfferTemplateResponseModel OK\n   * @throws ApiError\n   */\n  public getCollectiveOfferTemplate(\n    offerId: number,\n  ): CancelablePromise<GetCollectiveOfferTemplateResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/collective/offers-template/{offer_id}',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * edit_collective_offer_template <PATCH>\n   * @param offerId\n   * @param requestBody\n   * @returns GetCollectiveOfferTemplateResponseModel OK\n   * @throws ApiError\n   */\n  public editCollectiveOfferTemplate(\n    offerId: number,\n    requestBody?: PatchCollectiveOfferTemplateBodyModel,\n  ): CancelablePromise<GetCollectiveOfferTemplateResponseModel> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/collective/offers-template/{offer_id}',\n      path: {\n        'offer_id': offerId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * create_collective_offer_template_from_collective_offer <POST>\n   * @param offerId\n   * @param requestBody\n   * @returns CollectiveOfferTemplateResponseIdModel Created\n   * @throws ApiError\n   */\n  public createCollectiveOfferTemplateFromCollectiveOffer(\n    offerId: number,\n    requestBody?: CollectiveOfferTemplateBodyModel,\n  ): CancelablePromise<CollectiveOfferTemplateResponseIdModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/collective/offers-template/{offer_id}/',\n      path: {\n        'offer_id': offerId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Bad Request`,\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * delete_offer_template_image <DELETE>\n   * @param offerId\n   * @returns void\n   * @throws ApiError\n   */\n  public deleteOfferTemplateImage(\n    offerId: number,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'DELETE',\n      url: '/collective/offers-template/{offer_id}/image',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * attach_offer_template_image <POST>\n   * @param offerId\n   * @param formData\n   * @returns AttachImageResponseModel OK\n   * @throws ApiError\n   */\n  public attachOfferTemplateImage(\n    offerId: string,\n    formData?: AttachImageFormModel,\n  ): CancelablePromise<AttachImageResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/collective/offers-template/{offer_id}/image',\n      path: {\n        'offer_id': offerId,\n      },\n      formData: formData,\n      mediaType: 'multipart/form-data',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_collective_offer_template_publication <PATCH>\n   * @param offerId\n   * @returns GetCollectiveOfferTemplateResponseModel OK\n   * @throws ApiError\n   */\n  public patchCollectiveOfferTemplatePublication(\n    offerId: number,\n  ): CancelablePromise<GetCollectiveOfferTemplateResponseModel> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/collective/offers-template/{offer_id}/publish',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_collective_offers_active_status <PATCH>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public patchCollectiveOffersActiveStatus(\n    requestBody?: PatchCollectiveOfferActiveStatusBodyModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/collective/offers/active-status',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_all_collective_offers_active_status <PATCH>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public patchAllCollectiveOffersActiveStatus(\n    requestBody?: PatchAllCollectiveOffersActiveStatusBodyModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/collective/offers/all-active-status',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_autocomplete_educational_redactors_for_uai <GET>\n   * @param uai\n   * @param candidate\n   * @returns EducationalRedactors OK\n   * @throws ApiError\n   */\n  public getAutocompleteEducationalRedactorsForUai(\n    uai: string,\n    candidate: string,\n  ): CancelablePromise<EducationalRedactors> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/collective/offers/redactors',\n      query: {\n        'uai': uai,\n        'candidate': candidate,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_collective_offer <GET>\n   * @param offerId\n   * @returns GetCollectiveOfferResponseModel OK\n   * @throws ApiError\n   */\n  public getCollectiveOffer(\n    offerId: number,\n  ): CancelablePromise<GetCollectiveOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/collective/offers/{offer_id}',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * edit_collective_offer <PATCH>\n   * @param offerId\n   * @param requestBody\n   * @returns GetCollectiveOfferResponseModel OK\n   * @throws ApiError\n   */\n  public editCollectiveOffer(\n    offerId: number,\n    requestBody?: PatchCollectiveOfferBodyModel,\n  ): CancelablePromise<GetCollectiveOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/collective/offers/{offer_id}',\n      path: {\n        'offer_id': offerId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * cancel_collective_offer_booking <PATCH>\n   * @param offerId\n   * @returns void\n   * @throws ApiError\n   */\n  public cancelCollectiveOfferBooking(\n    offerId: number,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/collective/offers/{offer_id}/cancel_booking',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        400: `Bad Request`,\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * duplicate_collective_offer <POST>\n   * @param offerId\n   * @returns GetCollectiveOfferResponseModel Created\n   * @throws ApiError\n   */\n  public duplicateCollectiveOffer(\n    offerId: number,\n  ): CancelablePromise<GetCollectiveOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/collective/offers/{offer_id}/duplicate',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_collective_offers_educational_institution <PATCH>\n   * @param offerId\n   * @param requestBody\n   * @returns GetCollectiveOfferResponseModel OK\n   * @throws ApiError\n   */\n  public patchCollectiveOffersEducationalInstitution(\n    offerId: number,\n    requestBody?: PatchCollectiveOfferEducationalInstitution,\n  ): CancelablePromise<GetCollectiveOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/collective/offers/{offer_id}/educational_institution',\n      path: {\n        'offer_id': offerId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * delete_offer_image <DELETE>\n   * @param offerId\n   * @returns void\n   * @throws ApiError\n   */\n  public deleteOfferImage(\n    offerId: number,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'DELETE',\n      url: '/collective/offers/{offer_id}/image',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * attach_offer_image <POST>\n   * @param offerId\n   * @param formData\n   * @returns AttachImageResponseModel OK\n   * @throws ApiError\n   */\n  public attachOfferImage(\n    offerId: number,\n    formData?: AttachImageFormModel,\n  ): CancelablePromise<AttachImageResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/collective/offers/{offer_id}/image',\n      path: {\n        'offer_id': offerId,\n      },\n      formData: formData,\n      mediaType: 'multipart/form-data',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_collective_offer_publication <PATCH>\n   * @param offerId\n   * @returns GetCollectiveOfferResponseModel OK\n   * @throws ApiError\n   */\n  public patchCollectiveOfferPublication(\n    offerId: number,\n  ): CancelablePromise<GetCollectiveOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/collective/offers/{offer_id}/publish',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * create_collective_stock <POST>\n   * @param requestBody\n   * @returns CollectiveStockResponseModel Created\n   * @throws ApiError\n   */\n  public createCollectiveStock(\n    requestBody?: CollectiveStockCreationBodyModel,\n  ): CancelablePromise<CollectiveStockResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/collective/stocks',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * edit_collective_stock <PATCH>\n   * @param collectiveStockId\n   * @param requestBody\n   * @returns CollectiveStockResponseModel OK\n   * @throws ApiError\n   */\n  public editCollectiveStock(\n    collectiveStockId: number,\n    requestBody?: CollectiveStockEditionBodyModel,\n  ): CancelablePromise<CollectiveStockResponseModel> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/collective/stocks/{collective_stock_id}',\n      path: {\n        'collective_stock_id': collectiveStockId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Bad Request`,\n        401: `Unauthorized`,\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_educational_partner <GET>\n   * @param siret\n   * @returns AdageCulturalPartnerResponseModel OK\n   * @throws ApiError\n   */\n  public getEducationalPartner(\n    siret: string,\n  ): CancelablePromise<AdageCulturalPartnerResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/cultural-partner/{siret}',\n      path: {\n        'siret': siret,\n      },\n      errors: {\n        401: `Unauthorized`,\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_educational_partners <GET>\n   * @returns AdageCulturalPartnersResponseModel OK\n   * @throws ApiError\n   */\n  public getEducationalPartners(): CancelablePromise<AdageCulturalPartnersResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/cultural-partners',\n      errors: {\n        401: `Unauthorized`,\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_educational_institutions <GET>\n   * @param perPageLimit\n   * @param page\n   * @returns EducationalInstitutionsResponseModel OK\n   * @throws ApiError\n   */\n  public getEducationalInstitutions(\n    perPageLimit: number = 1000,\n    page: number = 1,\n  ): CancelablePromise<EducationalInstitutionsResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/educational_institutions',\n      query: {\n        'perPageLimit': perPageLimit,\n        'page': page,\n      },\n      errors: {\n        401: `Unauthorized`,\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * list_features <GET>\n   * @returns ListFeatureResponseModel OK\n   * @throws ApiError\n   */\n  public listFeatures(): CancelablePromise<ListFeatureResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/features',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_invoices <GET>\n   * @param periodBeginningDate\n   * @param periodEndingDate\n   * @param reimbursementPointId\n   * @returns InvoiceListResponseModel OK\n   * @throws ApiError\n   */\n  public getInvoices(\n    periodBeginningDate?: string | null,\n    periodEndingDate?: string | null,\n    reimbursementPointId?: number | null,\n  ): CancelablePromise<InvoiceListResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/finance/invoices',\n      query: {\n        'periodBeginningDate': periodBeginningDate,\n        'periodEndingDate': periodEndingDate,\n        'reimbursementPointId': reimbursementPointId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_reimbursement_points <GET>\n   * @returns FinanceReimbursementPointListResponseModel OK\n   * @throws ApiError\n   */\n  public getReimbursementPoints(): CancelablePromise<FinanceReimbursementPointListResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/finance/reimbursement-points',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_national_programs <GET>\n   * @returns ListNationalProgramsResponseModel OK\n   * @throws ApiError\n   */\n  public getNationalPrograms(): CancelablePromise<ListNationalProgramsResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/national-programs',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * create_offerer <POST>\n   * @param requestBody\n   * @returns PostOffererResponseModel Created\n   * @throws ApiError\n   */\n  public createOfferer(\n    requestBody?: CreateOffererQueryModel,\n  ): CancelablePromise<PostOffererResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/offerers',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * delete_api_key <DELETE>\n   * @param apiKeyPrefix\n   * @returns void\n   * @throws ApiError\n   */\n  public deleteApiKey(\n    apiKeyPrefix: string,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'DELETE',\n      url: '/offerers/api_keys/{api_key_prefix}',\n      path: {\n        'api_key_prefix': apiKeyPrefix,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * list_educational_offerers <GET>\n   * @param offererId\n   * @returns GetEducationalOfferersResponseModel OK\n   * @throws ApiError\n   */\n  public listEducationalOfferers(\n    offererId?: number | null,\n  ): CancelablePromise<GetEducationalOfferersResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/offerers/educational',\n      query: {\n        'offerer_id': offererId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * list_offerers_names <GET>\n   * @param validated\n   * @param validatedForUser\n   * @param offererId\n   * @returns GetOfferersNamesResponseModel OK\n   * @throws ApiError\n   */\n  public listOfferersNames(\n    validated?: boolean | null,\n    validatedForUser?: boolean | null,\n    offererId?: number | null,\n  ): CancelablePromise<GetOfferersNamesResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/offerers/names',\n      query: {\n        'validated': validated,\n        'validated_for_user': validatedForUser,\n        'offerer_id': offererId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * save_new_onboarding_data <POST>\n   * @param requestBody\n   * @returns GetOffererResponseModel Created\n   * @throws ApiError\n   */\n  public saveNewOnboardingData(\n    requestBody?: SaveNewOnboardingDataQueryModel,\n  ): CancelablePromise<GetOffererResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/offerers/new',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_offerer <GET>\n   * @param offererId\n   * @returns GetOffererResponseModel OK\n   * @throws ApiError\n   */\n  public getOfferer(\n    offererId: number,\n  ): CancelablePromise<GetOffererResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/offerers/{offerer_id}',\n      path: {\n        'offerer_id': offererId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * generate_api_key_route <POST>\n   * @param offererId\n   * @returns GenerateOffererApiKeyResponse OK\n   * @throws ApiError\n   */\n  public generateApiKeyRoute(\n    offererId: number,\n  ): CancelablePromise<GenerateOffererApiKeyResponse> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/offerers/{offerer_id}/api_keys',\n      path: {\n        'offerer_id': offererId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_offerer_stats_dashboard_url <GET>\n   * @param offererId\n   * @returns OffererStatsResponseModel OK\n   * @throws ApiError\n   */\n  public getOffererStatsDashboardUrl(\n    offererId: number,\n  ): CancelablePromise<OffererStatsResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/offerers/{offerer_id}/dashboard',\n      path: {\n        'offerer_id': offererId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * can_offerer_create_educational_offer <GET>\n   * @param offererId\n   * @returns void\n   * @throws ApiError\n   */\n  public canOffererCreateEducationalOffer(\n    offererId: number,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/offerers/{offerer_id}/eac-eligibility',\n      path: {\n        'offerer_id': offererId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * invite_members <POST>\n   * @param offererId\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public inviteMembers(\n    offererId: number,\n    requestBody?: InviteMembersQueryModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/offerers/{offerer_id}/invite',\n      path: {\n        'offerer_id': offererId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_offerer_members <GET>\n   * @param offererId\n   * @returns GetOffererMembersResponseModel OK\n   * @throws ApiError\n   */\n  public getOffererMembers(\n    offererId: number,\n  ): CancelablePromise<GetOffererMembersResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/offerers/{offerer_id}/members',\n      path: {\n        'offerer_id': offererId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_available_reimbursement_points <GET>\n   * @param offererId\n   * @returns OffererReimbursementPointListResponseModel OK\n   * @throws ApiError\n   */\n  public getAvailableReimbursementPoints(\n    offererId: number,\n  ): CancelablePromise<OffererReimbursementPointListResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/offerers/{offerer_id}/reimbursement-points',\n      path: {\n        'offerer_id': offererId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * list_offers <GET>\n   * @param nameOrIsbn\n   * @param offererId\n   * @param status\n   * @param venueId\n   * @param categoryId\n   * @param creationMode\n   * @param periodBeginningDate\n   * @param periodEndingDate\n   * @param collectiveOfferType\n   * @returns ListOffersResponseModel OK\n   * @throws ApiError\n   */\n  public listOffers(\n    nameOrIsbn?: string | null,\n    offererId?: number | null,\n    status?: string | null,\n    venueId?: number | null,\n    categoryId?: string | null,\n    creationMode?: string | null,\n    periodBeginningDate?: string | null,\n    periodEndingDate?: string | null,\n    collectiveOfferType?: CollectiveOfferType | null,\n  ): CancelablePromise<ListOffersResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/offers',\n      query: {\n        'nameOrIsbn': nameOrIsbn,\n        'offererId': offererId,\n        'status': status,\n        'venueId': venueId,\n        'categoryId': categoryId,\n        'creationMode': creationMode,\n        'periodBeginningDate': periodBeginningDate,\n        'periodEndingDate': periodEndingDate,\n        'collectiveOfferType': collectiveOfferType,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * post_offer <POST>\n   * @param requestBody\n   * @returns GetIndividualOfferResponseModel Created\n   * @throws ApiError\n   */\n  public postOffer(\n    requestBody?: PostOfferBodyModel,\n  ): CancelablePromise<GetIndividualOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/offers',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_offers_active_status <PATCH>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public patchOffersActiveStatus(\n    requestBody?: PatchOfferActiveStatusBodyModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/offers/active-status',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_all_offers_active_status <PATCH>\n   * @param requestBody\n   * @returns any Accepted\n   * @throws ApiError\n   */\n  public patchAllOffersActiveStatus(\n    requestBody?: PatchAllOffersActiveStatusBodyModel,\n  ): CancelablePromise<any> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/offers/all-active-status',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_categories <GET>\n   * @returns CategoriesResponseModel OK\n   * @throws ApiError\n   */\n  public getCategories(): CancelablePromise<CategoriesResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/offers/categories',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * delete_draft_offers <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public deleteDraftOffers(\n    requestBody?: DeleteOfferRequestBody,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/offers/delete-draft',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_publish_offer <PATCH>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public patchPublishOffer(\n    requestBody?: PatchOfferPublishBodyModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/offers/publish',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * create_thumbnail <POST>\n   * @param formData\n   * @returns CreateThumbnailResponseModel Created\n   * @throws ApiError\n   */\n  public createThumbnail(\n    formData?: CreateThumbnailBodyModel,\n  ): CancelablePromise<CreateThumbnailResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/offers/thumbnails/',\n      formData: formData,\n      mediaType: 'multipart/form-data',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * delete_thumbnail <DELETE>\n   * @param offerId\n   * @returns void\n   * @throws ApiError\n   */\n  public deleteThumbnail(\n    offerId: number,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'DELETE',\n      url: '/offers/thumbnails/{offer_id}',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_offer <GET>\n   * @param offerId\n   * @returns GetIndividualOfferResponseModel OK\n   * @throws ApiError\n   */\n  public getOffer(\n    offerId: number,\n  ): CancelablePromise<GetIndividualOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/offers/{offer_id}',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_offer <PATCH>\n   * @param offerId\n   * @param requestBody\n   * @returns GetIndividualOfferResponseModel OK\n   * @throws ApiError\n   */\n  public patchOffer(\n    offerId: number,\n    requestBody?: PatchOfferBodyModel,\n  ): CancelablePromise<GetIndividualOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/offers/{offer_id}',\n      path: {\n        'offer_id': offerId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * post_price_categories <POST>\n   * @param offerId\n   * @param requestBody\n   * @returns GetIndividualOfferResponseModel OK\n   * @throws ApiError\n   */\n  public postPriceCategories(\n    offerId: number,\n    requestBody?: PriceCategoryBody,\n  ): CancelablePromise<GetIndividualOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/offers/{offer_id}/price_categories',\n      path: {\n        'offer_id': offerId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * delete_price_category <DELETE>\n   * @param offerId\n   * @param priceCategoryId\n   * @returns void\n   * @throws ApiError\n   */\n  public deletePriceCategory(\n    offerId: number,\n    priceCategoryId: number,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'DELETE',\n      url: '/offers/{offer_id}/price_categories/{price_category_id}',\n      path: {\n        'offer_id': offerId,\n        'price_category_id': priceCategoryId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_reimbursements_csv <GET>\n   * @param venueId\n   * @param reimbursementPeriodBeginningDate\n   * @param reimbursementPeriodEndingDate\n   * @returns any OK\n   * @throws ApiError\n   */\n  public getReimbursementsCsv(\n    venueId?: number,\n    reimbursementPeriodBeginningDate?: string,\n    reimbursementPeriodEndingDate?: string,\n  ): CancelablePromise<any> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/reimbursements/csv',\n      query: {\n        'venueId': venueId,\n        'reimbursementPeriodBeginningDate': reimbursementPeriodBeginningDate,\n        'reimbursementPeriodEndingDate': reimbursementPeriodEndingDate,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_siren_info <GET>\n   * @param siren\n   * @returns SirenInfo OK\n   * @throws ApiError\n   */\n  public getSirenInfo(\n    siren: string,\n  ): CancelablePromise<SirenInfo> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/sirene/siren/{siren}',\n      path: {\n        'siren': siren,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_siret_info <GET>\n   * @param siret\n   * @returns SiretInfo OK\n   * @throws ApiError\n   */\n  public getSiretInfo(\n    siret: string,\n  ): CancelablePromise<SiretInfo> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/sirene/siret/{siret}',\n      path: {\n        'siret': siret,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * upsert_stocks <POST>\n   * @param requestBody\n   * @returns StocksResponseModel Created\n   * @throws ApiError\n   */\n  public upsertStocks(\n    requestBody?: StocksUpsertBodyModel,\n  ): CancelablePromise<StocksResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/stocks/bulk',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * delete_stock <DELETE>\n   * @param stockId\n   * @returns StockIdResponseModel OK\n   * @throws ApiError\n   */\n  public deleteStock(\n    stockId: number,\n  ): CancelablePromise<StockIdResponseModel> {\n    return this.httpRequest.request({\n      method: 'DELETE',\n      url: '/stocks/{stock_id}',\n      path: {\n        'stock_id': stockId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * cookies_consent <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public cookiesConsent(\n    requestBody?: CookieConsentRequest,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/users/cookies',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Bad Request`,\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_profile <GET>\n   * @returns SharedCurrentUserResponseModel OK\n   * @throws ApiError\n   */\n  public getProfile(): CancelablePromise<SharedCurrentUserResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/users/current',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * post_user_email <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public postUserEmail(\n    requestBody?: UserResetEmailBodyModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/users/email',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_user_email_pending_validation <GET>\n   * @returns UserEmailValidationResponseModel OK\n   * @throws ApiError\n   */\n  public getUserEmailPendingValidation(): CancelablePromise<UserEmailValidationResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/users/email_pending_validation',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_user_identity <PATCH>\n   * @param requestBody\n   * @returns UserIdentityResponseModel OK\n   * @throws ApiError\n   */\n  public patchUserIdentity(\n    requestBody?: UserIdentityBodyModel,\n  ): CancelablePromise<UserIdentityResponseModel> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/users/identity',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * post_new_password <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public postNewPassword(\n    requestBody?: NewPasswordBodyModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/users/new-password',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Bad Request`,\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * post_change_password <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public postChangePassword(\n    requestBody?: ChangePasswordBodyModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/users/password',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Bad Request`,\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_user_phone <PATCH>\n   * @param requestBody\n   * @returns UserPhoneResponseModel OK\n   * @throws ApiError\n   */\n  public patchUserPhone(\n    requestBody?: UserPhoneBodyModel,\n  ): CancelablePromise<UserPhoneResponseModel> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/users/phone',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * post_pro_flags <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public postProFlags(\n    requestBody?: ProFlagsQueryModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/users/pro_flags',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Bad Request`,\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * reset_password <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public resetPassword(\n    requestBody?: ResetPasswordBodyModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/users/reset-password',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_pro_user_rgs_seen <PATCH>\n   * @returns void\n   * @throws ApiError\n   */\n  public patchProUserRgsSeen(): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/users/rgs-seen',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * signin <POST>\n   * @param requestBody\n   * @returns SharedLoginUserResponseModel OK\n   * @throws ApiError\n   */\n  public signin(\n    requestBody?: LoginUserBodyModel,\n  ): CancelablePromise<SharedLoginUserResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/users/signin',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * signout <GET>\n   * @returns void\n   * @throws ApiError\n   */\n  public signout(): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/users/signout',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * signup_pro <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public signupPro(\n    requestBody?: ProUserCreationBodyModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/users/signup/pro',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * check_activation_token_exists <GET>\n   * @param token\n   * @returns void\n   * @throws ApiError\n   */\n  public checkActivationTokenExists(\n    token: string,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/users/token/{token}',\n      path: {\n        'token': token,\n      },\n      errors: {\n        403: `Forbidden`,\n        404: `Not Found`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_user_tuto_seen <PATCH>\n   * @returns void\n   * @throws ApiError\n   */\n  public patchUserTutoSeen(): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/users/tuto-seen',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * patch_validate_email <PATCH>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public patchValidateEmail(\n    requestBody?: ChangeProEmailBody,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/users/validate_email',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * signup_pro_V2 <POST>\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public signupProV2(\n    requestBody?: ProUserCreationBodyV2Model,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/v2/users/signup/pro',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * validate_user <PATCH>\n   * @param token\n   * @returns void\n   * @throws ApiError\n   */\n  public validateUser(\n    token: string,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/validate/user/{token}',\n      path: {\n        'token': token,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * fetch_venue_labels <GET>\n   * @returns VenueLabelListResponseModel OK\n   * @throws ApiError\n   */\n  public fetchVenueLabels(): CancelablePromise<VenueLabelListResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/venue-labels',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_venue_types <GET>\n   * @returns VenueTypeListResponseModel OK\n   * @throws ApiError\n   */\n  public getVenueTypes(): CancelablePromise<VenueTypeListResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/venue-types',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * list_venue_providers <GET>\n   * @param venueId\n   * @returns ListVenueProviderResponse OK\n   * @throws ApiError\n   */\n  public listVenueProviders(\n    venueId: number,\n  ): CancelablePromise<ListVenueProviderResponse> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/venueProviders',\n      query: {\n        'venueId': venueId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * create_venue_provider <POST>\n   * @param requestBody\n   * @returns VenueProviderResponse Created\n   * @throws ApiError\n   */\n  public createVenueProvider(\n    requestBody?: PostVenueProviderBody,\n  ): CancelablePromise<VenueProviderResponse> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/venueProviders',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * update_venue_provider <PUT>\n   * @param requestBody\n   * @returns VenueProviderResponse OK\n   * @throws ApiError\n   */\n  public updateVenueProvider(\n    requestBody?: PostVenueProviderBody,\n  ): CancelablePromise<VenueProviderResponse> {\n    return this.httpRequest.request({\n      method: 'PUT',\n      url: '/venueProviders',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * delete_venue_provider <DELETE>\n   * @param venueProviderId\n   * @returns void\n   * @throws ApiError\n   */\n  public deleteVenueProvider(\n    venueProviderId: number,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'DELETE',\n      url: '/venueProviders/{venue_provider_id}',\n      path: {\n        'venue_provider_id': venueProviderId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_venues <GET>\n   * @param validated\n   * @param activeOfferersOnly\n   * @param offererId\n   * @returns GetVenueListResponseModel OK\n   * @throws ApiError\n   */\n  public getVenues(\n    validated?: boolean | null,\n    activeOfferersOnly?: boolean | null,\n    offererId?: number | null,\n  ): CancelablePromise<GetVenueListResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/venues',\n      query: {\n        'validated': validated,\n        'activeOfferersOnly': activeOfferersOnly,\n        'offererId': offererId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * post_create_venue <POST>\n   * @param requestBody\n   * @returns VenueResponseModel Created\n   * @throws ApiError\n   */\n  public postCreateVenue(\n    requestBody?: PostVenueBodyModel,\n  ): CancelablePromise<VenueResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/venues',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_venues_educational_statuses <GET>\n   * @returns VenuesEducationalStatusesResponseModel OK\n   * @throws ApiError\n   */\n  public getVenuesEducationalStatuses(): CancelablePromise<VenuesEducationalStatusesResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/venues-educational-statuses',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_venues_of_offerer_from_siret <GET>\n   * @param siret\n   * @returns GetVenuesOfOffererFromSiretResponseModel OK\n   * @throws ApiError\n   */\n  public getVenuesOfOffererFromSiret(\n    siret: string,\n  ): CancelablePromise<GetVenuesOfOffererFromSiretResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/venues/siret/{siret}',\n      path: {\n        'siret': siret,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_venue <GET>\n   * @param venueId\n   * @returns GetVenueResponseModel OK\n   * @throws ApiError\n   */\n  public getVenue(\n    venueId: number,\n  ): CancelablePromise<GetVenueResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/venues/{venue_id}',\n      path: {\n        'venue_id': venueId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * edit_venue <PATCH>\n   * @param venueId\n   * @param requestBody\n   * @returns GetVenueResponseModel OK\n   * @throws ApiError\n   */\n  public editVenue(\n    venueId: number,\n    requestBody?: EditVenueBodyModel,\n  ): CancelablePromise<GetVenueResponseModel> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/venues/{venue_id}',\n      path: {\n        'venue_id': venueId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * delete_venue_banner <DELETE>\n   * @param venueId\n   * @returns void\n   * @throws ApiError\n   */\n  public deleteVenueBanner(\n    venueId: number,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'DELETE',\n      url: '/venues/{venue_id}/banner',\n      path: {\n        'venue_id': venueId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_venue_collective_data <GET>\n   * @param venueId\n   * @returns GetCollectiveVenueResponseModel OK\n   * @throws ApiError\n   */\n  public getVenueCollectiveData(\n    venueId: number,\n  ): CancelablePromise<GetCollectiveVenueResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/venues/{venue_id}/collective-data',\n      path: {\n        'venue_id': venueId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * edit_venue_collective_data <PATCH>\n   * @param venueId\n   * @param requestBody\n   * @returns GetVenueResponseModel OK\n   * @throws ApiError\n   */\n  public editVenueCollectiveData(\n    venueId: number,\n    requestBody?: EditVenueCollectiveDataBodyModel,\n  ): CancelablePromise<GetVenueResponseModel> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/venues/{venue_id}/collective-data',\n      path: {\n        'venue_id': venueId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_venue_stats_dashboard_url <GET>\n   * @param venueId\n   * @returns OffererStatsResponseModel OK\n   * @throws ApiError\n   */\n  public getVenueStatsDashboardUrl(\n    venueId: number,\n  ): CancelablePromise<OffererStatsResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/venues/{venue_id}/dashboard',\n      path: {\n        'venue_id': venueId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * link_venue_to_pricing_point <POST>\n   * @param venueId\n   * @param requestBody\n   * @returns void\n   * @throws ApiError\n   */\n  public linkVenueToPricingPoint(\n    venueId: number,\n    requestBody?: LinkVenueToPricingPointBodyModel,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/venues/{venue_id}/pricing-point',\n      path: {\n        'venue_id': venueId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * get_venue_stats <GET>\n   * @param venueId\n   * @returns VenueStatsResponseModel OK\n   * @throws ApiError\n   */\n  public getVenueStats(\n    venueId: number,\n  ): CancelablePromise<VenueStatsResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/venues/{venue_id}/stats',\n      path: {\n        'venue_id': venueId,\n      },\n      errors: {\n        403: `Forbidden`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { BaseHttpRequest } from './core/BaseHttpRequest';\nimport type { OpenAPIConfig } from './core/OpenAPI';\nimport { FetchHttpRequest } from './core/FetchHttpRequest';\n\nimport { DefaultService } from './services/DefaultService';\n\ntype HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;\n\nexport class AppClient {\n\n  public readonly default: DefaultService;\n\n  public readonly request: BaseHttpRequest;\n\n  constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = FetchHttpRequest) {\n    this.request = new HttpRequest({\n      BASE: config?.BASE ?? 'http://localhost:5001',\n      VERSION: config?.VERSION ?? '1',\n      WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,\n      CREDENTIALS: config?.CREDENTIALS ?? 'include',\n      TOKEN: config?.TOKEN,\n      USERNAME: config?.USERNAME,\n      PASSWORD: config?.PASSWORD,\n      HEADERS: config?.HEADERS,\n      ENCODE_PATH: config?.ENCODE_PATH,\n    });\n\n    this.default = new DefaultService(this.request);\n  }\n}\n\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport abstract class BaseHttpRequest {\n\n  constructor(public readonly config: OpenAPIConfig) {}\n\n  public abstract request<T>(options: ApiRequestOptions): CancelablePromise<T>;\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n  public readonly url: string;\n  public readonly status: number;\n  public readonly statusText: string;\n  public readonly body: any;\n  public readonly request: ApiRequestOptions;\n\n  constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n    super(message);\n\n    this.name = 'ApiError';\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.body = response.body;\n    this.request = request;\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n\n  constructor(message: string) {\n    super(message);\n    this.name = 'CancelError';\n  }\n\n  public get isCancelled(): boolean {\n    return true;\n  }\n}\n\nexport interface OnCancel {\n  readonly isResolved: boolean;\n  readonly isRejected: boolean;\n  readonly isCancelled: boolean;\n\n  (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n  #isResolved: boolean;\n  #isRejected: boolean;\n  #isCancelled: boolean;\n  readonly #cancelHandlers: (() => void)[];\n  readonly #promise: Promise<T>;\n  #resolve?: (value: T | PromiseLike<T>) => void;\n  #reject?: (reason?: any) => void;\n\n  constructor(\n    executor: (\n      resolve: (value: T | PromiseLike<T>) => void,\n      reject: (reason?: any) => void,\n      onCancel: OnCancel\n    ) => void\n  ) {\n    this.#isResolved = false;\n    this.#isRejected = false;\n    this.#isCancelled = false;\n    this.#cancelHandlers = [];\n    this.#promise = new Promise<T>((resolve, reject) => {\n      this.#resolve = resolve;\n      this.#reject = reject;\n\n      const onResolve = (value: T | PromiseLike<T>): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isResolved = true;\n        this.#resolve?.(value);\n      };\n\n      const onReject = (reason?: any): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isRejected = true;\n        this.#reject?.(reason);\n      };\n\n      const onCancel = (cancelHandler: () => void): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#cancelHandlers.push(cancelHandler);\n      };\n\n      Object.defineProperty(onCancel, 'isResolved', {\n        get: (): boolean => this.#isResolved,\n      });\n\n      Object.defineProperty(onCancel, 'isRejected', {\n        get: (): boolean => this.#isRejected,\n      });\n\n      Object.defineProperty(onCancel, 'isCancelled', {\n        get: (): boolean => this.#isCancelled,\n      });\n\n      return executor(onResolve, onReject, onCancel as OnCancel);\n    });\n  }\n\n   get [Symbol.toStringTag]() {\n            return \"Cancellable Promise\";\n     }\n\n  public then<TResult1 = T, TResult2 = never>(\n    onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n  ): Promise<TResult1 | TResult2> {\n    return this.#promise.then(onFulfilled, onRejected);\n  }\n\n  public catch<TResult = never>(\n    onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\n  ): Promise<T | TResult> {\n    return this.#promise.catch(onRejected);\n  }\n\n  public finally(onFinally?: (() => void) | null): Promise<T> {\n    return this.#promise.finally(onFinally);\n  }\n\n  public cancel(): void {\n    if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n      return;\n    }\n    this.#isCancelled = true;\n    if (this.#cancelHandlers.length) {\n      try {\n        for (const cancelHandler of this.#cancelHandlers) {\n          cancelHandler();\n        }\n      } catch (error) {\n        console.warn('Cancellation threw an error', error);\n        return;\n      }\n    }\n    this.#cancelHandlers.length = 0;\n    this.#reject?.(new CancelError('Request aborted'));\n  }\n\n  public get isCancelled(): boolean {\n    return this.#isCancelled;\n  }\n}\n","// overwrites request.ts to handle redirection to maintenance\n\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport { ApiError } from './ApiError'\nimport type { ApiRequestOptions } from './ApiRequestOptions'\nimport type { ApiResult } from './ApiResult'\nimport { CancelablePromise } from './CancelablePromise'\nimport type { OnCancel } from './CancelablePromise'\nimport type { OpenAPIConfig } from './OpenAPI'\nimport { URL_FOR_MAINTENANCE } from 'utils/config'\n\nconst isDefined = <T>(\n  value: T | null | undefined\n): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null\n}\n\nconst isString = (value: any): value is string => {\n  return typeof value === 'string'\n}\n\nconst isStringWithValue = (value: any): value is string => {\n  return isString(value) && value !== ''\n}\n\nconst isBlob = (value: any): value is Blob => {\n  return (\n    typeof value === 'object' &&\n    typeof value.type === 'string' &&\n    typeof value.stream === 'function' &&\n    typeof value.arrayBuffer === 'function' &&\n    typeof value.constructor === 'function' &&\n    typeof value.constructor.name === 'string' &&\n    /^(Blob|File)$/.test(value.constructor.name) &&\n    /^(Blob|File)$/.test(value[Symbol.toStringTag])\n  )\n}\n\nconst isFormData = (value: any): value is FormData => {\n  return value instanceof FormData\n}\n\nconst base64 = (str: string): string => {\n  try {\n    return btoa(str)\n  } catch (err) {\n    return Buffer.from(str).toString('base64')\n  }\n}\n\nconst getQueryString = (params: Record<string, any>): string => {\n  const qs: string[] = []\n\n  const append = (key: string, value: any) => {\n    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`)\n  }\n\n  const process = (key: string, value: any) => {\n    if (isDefined(value)) {\n      if (Array.isArray(value)) {\n        value.forEach(v => {\n          process(key, v)\n        })\n      } else if (typeof value === 'object') {\n        Object.entries(value).forEach(([k, v]) => {\n          process(`${key}[${k}]`, v)\n        })\n      } else {\n        append(key, value)\n      }\n    }\n  }\n\n  Object.entries(params).forEach(([key, value]) => {\n    process(key, value)\n  })\n\n  if (qs.length > 0) {\n    return `?${qs.join('&')}`\n  }\n\n  return ''\n}\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n  const encoder = config.ENCODE_PATH || encodeURI\n\n  const path = options.url\n    .replace('{api-version}', config.VERSION)\n    .replace(/{(.*?)}/g, (substring: string, group: string) => {\n      if (options.path?.hasOwnProperty(group)) {\n        return encoder(String(options.path[group]))\n      }\n      return substring\n    })\n\n  const url = `${config.BASE}${path}`\n  if (options.query) {\n    return `${url}${getQueryString(options.query)}`\n  }\n  return url\n}\n\nconst getFormData = (options: ApiRequestOptions): FormData | undefined => {\n  if (options.formData) {\n    const formData = new FormData()\n\n    const process = (key: string, value: any) => {\n      if (isString(value) || isBlob(value)) {\n        formData.append(key, value)\n      } else {\n        formData.append(key, JSON.stringify(value))\n      }\n    }\n\n    Object.entries(options.formData)\n      .filter(([_, value]) => isDefined(value))\n      .forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          value.forEach(v => process(key, v))\n        } else {\n          process(key, value)\n        }\n      })\n\n    return formData\n  }\n  return undefined\n}\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>\n\nconst resolve = async <T>(\n  options: ApiRequestOptions,\n  resolver?: T | Resolver<T>\n): Promise<T | undefined> => {\n  if (typeof resolver === 'function') {\n    return (resolver as Resolver<T>)(options)\n  }\n  return resolver\n}\n\nconst getHeaders = async (\n  config: OpenAPIConfig,\n  options: ApiRequestOptions\n): Promise<Headers> => {\n  const token = await resolve(options, config.TOKEN)\n  const username = await resolve(options, config.USERNAME)\n  const password = await resolve(options, config.PASSWORD)\n  const additionalHeaders = await resolve(options, config.HEADERS)\n\n  const headers = Object.entries({\n    Accept: 'application/json',\n    ...additionalHeaders,\n    ...options.headers,\n  })\n    .filter(([_, value]) => isDefined(value))\n    .reduce(\n      (headers, [key, value]) => ({\n        ...headers,\n        [key]: String(value),\n      }),\n      {} as Record<string, string>\n    )\n\n  if (isStringWithValue(token)) {\n    headers['Authorization'] = `Bearer ${token}`\n  }\n\n  if (isStringWithValue(username) && isStringWithValue(password)) {\n    const credentials = base64(`${username}:${password}`)\n    headers['Authorization'] = `Basic ${credentials}`\n  }\n\n  if (options.body) {\n    if (options.mediaType) {\n      headers['Content-Type'] = options.mediaType\n    } else if (isBlob(options.body)) {\n      headers['Content-Type'] = options.body.type || 'application/octet-stream'\n    } else if (isString(options.body)) {\n      headers['Content-Type'] = 'text/plain'\n    } else if (!isFormData(options.body)) {\n      headers['Content-Type'] = 'application/json'\n    }\n  }\n\n  return new Headers(headers)\n}\n\nconst getRequestBody = (options: ApiRequestOptions): any => {\n  if (options.body) {\n    if (options.mediaType?.includes('/json')) {\n      return JSON.stringify(options.body)\n    } else if (\n      isString(options.body) ||\n      isBlob(options.body) ||\n      isFormData(options.body)\n    ) {\n      return options.body\n    } else {\n      return JSON.stringify(options.body)\n    }\n  }\n  return undefined\n}\n\nexport const sendRequest = async (\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  url: string,\n  body: any,\n  formData: FormData | undefined,\n  headers: Headers,\n  onCancel: OnCancel\n): Promise<Response> => {\n  const controller = new AbortController()\n\n  const request: RequestInit = {\n    headers,\n    body: body ?? formData,\n    method: options.method,\n    signal: controller.signal,\n  }\n\n  if (config.WITH_CREDENTIALS) {\n    request.credentials = config.CREDENTIALS\n  }\n\n  onCancel(() => controller.abort())\n\n  return await fetch(url, request)\n}\n\nconst getResponseHeader = (\n  response: Response,\n  responseHeader?: string\n): string | undefined => {\n  if (responseHeader) {\n    const content = response.headers.get(responseHeader)\n    if (isString(content)) {\n      return content\n    }\n  }\n  return undefined\n}\n\nconst getResponseBody = async (response: Response): Promise<any> => {\n  if (response.status !== 204) {\n    try {\n      const contentType = response.headers.get('Content-Type')\n      if (contentType) {\n        const isJSON = contentType.toLowerCase().startsWith('application/json')\n        if (isJSON) {\n          return await response.json()\n        } else {\n          return await response.text()\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n  return undefined\n}\n\nconst catchErrorCodes = (\n  options: ApiRequestOptions,\n  result: ApiResult\n): void => {\n  const errors: Record<number, string> = {\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    403: 'Forbidden',\n    404: 'Not Found',\n    500: 'Internal Server Error',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    ...options.errors,\n  }\n\n  const error = errors[result.status]\n\n  // BEGIN CUSTOM SCRIPT\n  if (result.status === 503) {\n    window.location.assign(URL_FOR_MAINTENANCE)\n    return\n  }\n  // END CUSTOM SCRIPT\n\n  if (error) {\n    throw new ApiError(options, result, error)\n  }\n\n  if (!result.ok) {\n    throw new ApiError(options, result, 'Generic Error')\n  }\n}\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(\n  config: OpenAPIConfig,\n  options: ApiRequestOptions\n): CancelablePromise<T> => {\n  return new CancelablePromise(async (resolve, reject, onCancel) => {\n    try {\n      const url = getUrl(config, options)\n      const formData = getFormData(options)\n      const body = getRequestBody(options)\n      const headers = await getHeaders(config, options)\n\n      if (!onCancel.isCancelled) {\n        const response = await sendRequest(\n          config,\n          options,\n          url,\n          body,\n          formData,\n          headers,\n          onCancel\n        )\n        const responseBody = await getResponseBody(response)\n        const responseHeader = getResponseHeader(\n          response,\n          options.responseHeader\n        )\n\n        const result: ApiResult = {\n          url,\n          ok: response.ok,\n          status: response.status,\n          statusText: response.statusText,\n          body: responseHeader ?? responseBody,\n        }\n\n        catchErrorCodes(options, result)\n\n        resolve(result.body)\n      }\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport { BaseHttpRequest } from './BaseHttpRequest';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\nimport { request as __request } from './request';\n\nexport class FetchHttpRequest extends BaseHttpRequest {\n\n  constructor(config: OpenAPIConfig) {\n    super(config);\n  }\n\n  /**\n   * Request method\n   * @param options The request options from the service\n   * @returns CancelablePromise<T>\n   * @throws ApiError\n   */\n  public override request<T>(options: ApiRequestOptions): CancelablePromise<T> {\n    return __request(this.config, options);\n  }\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { GetBookingResponse } from '../models/GetBookingResponse';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class ApiContremarqueService {\n\n  constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n  /**\n   * Annulation d'une réservation.\n   * Bien que, dans le cas d’un évènement, l’utilisateur ne peut plus annuler sa réservation 72h avant le début de ce dernier, cette API permet d’annuler la réservation d’un utilisateur si elle n’a pas encore été validé.\n   * @param token\n   * @returns void\n   * @throws ApiError\n   */\n  public patchCancelBookingByToken(\n    token: string,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/v2/bookings/cancel/token/{token}',\n      path: {\n        'token': token,\n      },\n      errors: {\n        401: `Authentification nécessaire`,\n        403: `Vous n'avez pas les droits nécessaires pour annuler cette contremarque ou la réservation a déjà été validée`,\n        404: `La contremarque n'existe pas`,\n        410: `La contremarque a déjà été annulée`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Annulation de la validation d'une réservation.\n   * @param token\n   * @returns void\n   * @throws ApiError\n   */\n  public patchBookingKeepByToken(\n    token: string,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/v2/bookings/keep/token/{token}',\n      path: {\n        'token': token,\n      },\n      errors: {\n        401: `Authentification nécessaire`,\n        403: `Vous n'avez pas les droits nécessaires pour voir cette contremarque`,\n        404: `La contremarque n'existe pas`,\n        410: `La requête est refusée car la contremarque n'a pas encore été validée, a été annulée, ou son remboursement a été initié`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Consultation d'une réservation.\n   * Le code “contremarque” ou \"token\" est une chaîne de caractères permettant d’identifier la réservation et qui sert de preuve de réservation. Ce code unique est généré pour chaque réservation d'un utilisateur sur l'application et lui est transmis à cette occasion.\n   * @param token\n   * @returns GetBookingResponse La contremarque existe et n’est pas validée\n   * @throws ApiError\n   */\n  public getBookingByTokenV2(\n    token: string,\n  ): CancelablePromise<GetBookingResponse> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/v2/bookings/token/{token}',\n      path: {\n        'token': token,\n      },\n      errors: {\n        401: `Authentification nécessaire`,\n        403: `Vous n'avez pas les droits nécessaires pour voir cette contremarque`,\n        404: `La contremarque n'existe pas`,\n        410: `Cette contremarque a été validée.\n        En l’invalidant vous indiquez qu’elle n’a pas été utilisée et vous ne serez pas remboursé.`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Validation d'une réservation.\n   * Pour confirmer que la réservation a bien été utilisée par le jeune.\n   * @param token\n   * @returns void\n   * @throws ApiError\n   */\n  public patchBookingUseByToken(\n    token: string,\n  ): CancelablePromise<void> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/v2/bookings/use/token/{token}',\n      path: {\n        'token': token,\n      },\n      errors: {\n        401: `Authentification nécessaire`,\n        403: `Vous n'avez pas les droits nécessaires pour voir cette contremarque`,\n        404: `La contremarque n'existe pas`,\n        410: `Cette contremarque a été validée.\n        En l’invalidant vous indiquez qu’elle n’a pas été utilisée et vous ne serez pas remboursé.`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { CollectiveBookingResponseModel } from '../models/CollectiveBookingResponseModel';\nimport type { CollectiveOffersListCategoriesResponseModel } from '../models/CollectiveOffersListCategoriesResponseModel';\nimport type { CollectiveOffersListDomainsResponseModel } from '../models/CollectiveOffersListDomainsResponseModel';\nimport type { CollectiveOffersListEducationalInstitutionResponseModel } from '../models/CollectiveOffersListEducationalInstitutionResponseModel';\nimport type { CollectiveOffersListResponseModel } from '../models/CollectiveOffersListResponseModel';\nimport type { CollectiveOffersListStudentLevelsResponseModel } from '../models/CollectiveOffersListStudentLevelsResponseModel';\nimport type { CollectiveOffersListSubCategoriesResponseModel } from '../models/CollectiveOffersListSubCategoriesResponseModel';\nimport type { CollectiveOffersListVenuesResponseModel } from '../models/CollectiveOffersListVenuesResponseModel';\nimport type { GetPublicCollectiveOfferResponseModel } from '../models/GetPublicCollectiveOfferResponseModel';\nimport type { OfferStatus } from '../models/OfferStatus';\nimport type { PatchCollectiveOfferBodyModel } from '../models/PatchCollectiveOfferBodyModel';\nimport type { PostCollectiveOfferBodyModel } from '../models/PostCollectiveOfferBodyModel';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class ApiOffresCollectivesService {\n\n  constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n  /**\n   * Récupération les informations d'une réservation collective\n   * @param bookingId\n   * @returns CollectiveBookingResponseModel Les informations d'une réservation collective\n   * @throws ApiError\n   */\n  public getCollectiveBooking(\n    bookingId: number,\n  ): CancelablePromise<CollectiveBookingResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/v2/collective/bookings/{booking_id}',\n      path: {\n        'booking_id': bookingId,\n      },\n      errors: {\n        401: `Authentification nécessaire`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Récupération de la liste des catégories d'offres proposées.\n   * @returns CollectiveOffersListCategoriesResponseModel La liste des catégories éligibles existantes.\n   * @throws ApiError\n   */\n  public listCategories(): CancelablePromise<CollectiveOffersListCategoriesResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/v2/collective/categories',\n      errors: {\n        401: `Authentification nécessaire`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Récupération de la liste des domaines d'éducation pouvant être associés aux offres collectives.\n   * @returns CollectiveOffersListDomainsResponseModel La liste des domaines d'éducation.\n   * @throws ApiError\n   */\n  public listEducationalDomains(): CancelablePromise<CollectiveOffersListDomainsResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/v2/collective/educational-domains',\n      errors: {\n        401: `Authentification nécessaire`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Récupération de la liste établissements scolaires.\n   * @param id\n   * @param name\n   * @param institutionType\n   * @param city\n   * @param postalCode\n   * @param uai\n   * @param limit\n   * @returns CollectiveOffersListEducationalInstitutionResponseModel La liste des établissement scolaires éligibles.\n   * @throws ApiError\n   */\n  public listEducationalInstitutions(\n    id?: number | null,\n    name?: string | null,\n    institutionType?: string | null,\n    city?: string | null,\n    postalCode?: string | null,\n    uai?: string | null,\n    limit: number = 20,\n  ): CancelablePromise<CollectiveOffersListEducationalInstitutionResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/v2/collective/educational-institutions/',\n      query: {\n        'id': id,\n        'name': name,\n        'institutionType': institutionType,\n        'city': city,\n        'postalCode': postalCode,\n        'uai': uai,\n        'limit': limit,\n      },\n      errors: {\n        400: `Requête malformée`,\n        401: `Authentification nécessaire`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Récuperation de l'offre collective avec l'identifiant offer_id. Cette api ignore les offre vitrines et les offres commencées sur l'interface web et non finalisées.\n   * @param status\n   * @param venueId\n   * @param periodBeginningDate\n   * @param periodEndingDate\n   * @returns CollectiveOffersListResponseModel L'offre collective existe\n   * @throws ApiError\n   */\n  public getCollectiveOffersPublic(\n    status?: OfferStatus | null,\n    venueId?: number | null,\n    periodBeginningDate?: string | null,\n    periodEndingDate?: string | null,\n  ): CancelablePromise<CollectiveOffersListResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/v2/collective/offers/',\n      query: {\n        'status': status,\n        'venueId': venueId,\n        'periodBeginningDate': periodBeginningDate,\n        'periodEndingDate': periodEndingDate,\n      },\n      errors: {\n        401: `Authentification nécessaire`,\n        403: `Vous n'avez pas les droits nécessaires pour voir cette offre collective`,\n        404: `L'offre collective n'existe pas`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Création d'une offre collective.\n   * @param requestBody\n   * @returns GetPublicCollectiveOfferResponseModel L'offre collective à été créée avec succes\n   * @throws ApiError\n   */\n  public postCollectiveOfferPublic(\n    requestBody?: PostCollectiveOfferBodyModel,\n  ): CancelablePromise<GetPublicCollectiveOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/v2/collective/offers/',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Requête malformée`,\n        401: `Authentification nécessaire`,\n        403: `Non éligible pour les offres collectives`,\n        404: `L'une des resources pour la création de l'offre n'a pas été trouvée`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Récuperation de l'offre collective avec l'identifiant offer_id.\n   * @param offerId\n   * @returns GetPublicCollectiveOfferResponseModel L'offre collective existe\n   * @throws ApiError\n   */\n  public getCollectiveOfferPublic(\n    offerId: number,\n  ): CancelablePromise<GetPublicCollectiveOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/v2/collective/offers/{offer_id}',\n      path: {\n        'offer_id': offerId,\n      },\n      errors: {\n        401: `Authentification nécessaire`,\n        403: `Vous n'avez pas les droits nécessaires pour voir cette offre collective`,\n        404: `L'offre collective n'existe pas`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Édition d'une offre collective.\n   * @param offerId\n   * @param requestBody\n   * @returns GetPublicCollectiveOfferResponseModel L'offre collective à été édité avec succes\n   * @throws ApiError\n   */\n  public patchCollectiveOfferPublic(\n    offerId: number,\n    requestBody?: PatchCollectiveOfferBodyModel,\n  ): CancelablePromise<GetPublicCollectiveOfferResponseModel> {\n    return this.httpRequest.request({\n      method: 'PATCH',\n      url: '/v2/collective/offers/{offer_id}',\n      path: {\n        'offer_id': offerId,\n      },\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        400: `Requête malformée`,\n        401: `Authentification nécessaire`,\n        403: `Vous n'avez pas les droits nécessaires pour éditer cette offre collective`,\n        404: `L'une des resources pour la création de l'offre n'a pas été trouvée`,\n        422: `Cetains champs ne peuvent pas être édités selon l'état de l'offre`,\n      },\n    });\n  }\n\n  /**\n   * Récupération de la liste des publics cibles pour lesquelles des offres collectives peuvent être proposées.\n   * @returns CollectiveOffersListStudentLevelsResponseModel La liste des domaines d'éducation.\n   * @throws ApiError\n   */\n  public listStudentsLevels(): CancelablePromise<CollectiveOffersListStudentLevelsResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/v2/collective/student-levels',\n      errors: {\n        401: `Authentification nécessaire`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Récupération de la liste des sous-catégories d'offres proposées a un public collectif.\n   * @returns CollectiveOffersListSubCategoriesResponseModel La liste des sous-catégories éligibles existantes.\n   * @throws ApiError\n   */\n  public listSubcategories(): CancelablePromise<CollectiveOffersListSubCategoriesResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/v2/collective/subcategories',\n      errors: {\n        401: `Authentification nécessaire`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n  /**\n   * Récupération de la liste des lieux associés au fournisseur authentifiée par le jeton d'API.\n   * Tous les lieux enregistrés, sont listés ici avec leurs coordonnées.\n   * @returns CollectiveOffersListVenuesResponseModel La liste des lieux ou vous pouvez créer une offre.\n   * @throws ApiError\n   */\n  public listVenues(): CancelablePromise<CollectiveOffersListVenuesResponseModel> {\n    return this.httpRequest.request({\n      method: 'GET',\n      url: '/v2/collective/venues',\n      errors: {\n        401: `Authentification nécessaire`,\n        422: `Unprocessable Entity`,\n      },\n    });\n  }\n\n}\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { BaseHttpRequest } from './core/BaseHttpRequest';\nimport type { OpenAPIConfig } from './core/OpenAPI';\nimport { FetchHttpRequest } from './core/FetchHttpRequest';\n\nimport { ApiContremarqueService } from './services/ApiContremarqueService';\nimport { ApiOffresCollectivesService } from './services/ApiOffresCollectivesService';\n\ntype HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;\n\nexport class AppClientV2 {\n\n  public readonly apiContremarque: ApiContremarqueService;\n  public readonly apiOffresCollectives: ApiOffresCollectivesService;\n\n  public readonly request: BaseHttpRequest;\n\n  constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = FetchHttpRequest) {\n    this.request = new HttpRequest({\n      BASE: config?.BASE ?? 'http://localhost:5001',\n      VERSION: config?.VERSION ?? '2',\n      WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,\n      CREDENTIALS: config?.CREDENTIALS ?? 'include',\n      TOKEN: config?.TOKEN,\n      USERNAME: config?.USERNAME,\n      PASSWORD: config?.PASSWORD,\n      HEADERS: config?.HEADERS,\n      ENCODE_PATH: config?.ENCODE_PATH,\n    });\n\n    this.apiContremarque = new ApiContremarqueService(this.request);\n    this.apiOffresCollectives = new ApiOffresCollectivesService(this.request);\n  }\n}\n\n","import { API_URL } from 'utils/config'\n\nimport { AppClientAdage } from './adage/AppClientAdage'\nimport { AppClient, OpenAPIConfig } from './v1'\nimport { AppClientV2 } from './v2'\n\nconst params = new URLSearchParams(window.location.search)\nconst token = params.get('token')\n\nconst config: OpenAPIConfig = {\n  BASE: API_URL,\n  VERSION: '1',\n  WITH_CREDENTIALS: true,\n  CREDENTIALS: 'include',\n}\n\nconst configAdage: OpenAPIConfig = {\n  BASE: API_URL,\n  VERSION: '1',\n  WITH_CREDENTIALS: false,\n  CREDENTIALS: 'omit',\n  TOKEN: token ?? '',\n}\n\nexport const api = new AppClient(config).default\nexport const apiContremarque = new AppClientV2(config).apiContremarque\nexport const apiAdage = new AppClientAdage(configAdage).default\nexport { apiAdresse } from 'apiClient/adresse'\n","import { ApiError } from './v1'\n\nexport const serializeApiErrors = (\n  errors: Record<string, string>,\n  apiFieldsMap: Record<string, string> = {}\n): Record<string, string> => {\n  Object.entries(apiFieldsMap).forEach(([key, value]) => {\n    if (errors[key]) {\n      errors[value] = errors[key]\n      delete errors[key]\n    }\n  })\n  return errors\n}\n\nexport const getErrorCode = (error: ApiError): string => {\n  return error.body.code\n}\n\nexport const isErrorAPIError = (error: any): error is ApiError =>\n  'name' in error && error.name === 'ApiError'\n\nexport const getError = (error: ApiError): any => {\n  return error.body\n}\n\n// FIXME: find a way to test this by mocking ReadableStream\n// in fetch response\n/* istanbul ignore next */\nexport const getFileFromURL = async (\n  url: string,\n  name = 'image.jpg'\n): Promise<File> => {\n  const response = await fetch(url)\n  const blob = await response.blob()\n  return new File([blob], name, { type: blob.type })\n}\n\nexport const HTTP_STATUS = {\n  NO_CONTENT: 204,\n  FORBIDDEN: 403,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504,\n  TOO_MANY_REQUESTS: 429,\n  GONE: 410,\n  NOT_FOUND: 404,\n}\n","import cn from 'classnames'\nimport React, { useEffect, useState } from 'react'\n\nimport strokePass from 'icons/stroke-pass.svg'\nimport { SvgIcon } from 'ui-kit/SvgIcon/SvgIcon'\n\ninterface SpinnerProps {\n  message?: string\n  className?: string\n}\n\nconst Spinner = ({\n  message = 'Chargement en cours',\n  className,\n}: SpinnerProps): JSX.Element => {\n  const [nbDots, setNbDots] = useState(3)\n  const [timer, setTimer] = useState<number | null>(null)\n\n  useEffect(() => {\n    if (timer) {\n      window.clearInterval(timer)\n    }\n    const newTimer = window.setInterval(() => {\n      setNbDots(oldVal => (oldVal % 3) + 1)\n    }, 500)\n    setTimer(newTimer)\n    return () => {\n      window.clearInterval(newTimer)\n    }\n  }, [])\n\n  return (\n    <div className={cn('loading-spinner', className)} data-testid=\"spinner\">\n      <SvgIcon src={strokePass} alt=\"\" className=\"loading-spinner-icon\" />\n\n      <div className=\"content\" data-dots={Array(nbDots).fill('.').join('')}>\n        {message}\n      </div>\n    </div>\n  )\n}\n\nexport default Spinner\n"],"names":["BaseHttpRequest$2","config","request","response","message","CancelablePromise$2","_a","executor","__privateAdd","_isResolved","_isRejected","_isCancelled","_cancelHandlers","_promise","_resolve","_reject","__privateSet","resolve","reject","onResolve","value","__privateGet","onReject","reason","onCancel","cancelHandler","onFulfilled","onRejected","onFinally","error","CancelError","isDefined","isString","isStringWithValue","isBlob","isFormData","base64","str","getQueryString","params","qs","append","key","process","v","k","getUrl","options","encoder","path","substring","group","url","getFormData","formData","_","resolver","getHeaders","token","username","password","additionalHeaders","headers","credentials","getRequestBody","sendRequest","body","controller","getResponseHeader","responseHeader","content","getResponseBody","contentType","type","catchErrorCodes","result","ApiError","errorStatus","errorStatusText","errorBody","CancelablePromise","responseBody","BaseHttpRequest","__request","DefaultService$1","httpRequest","requestBody","offerId","siret","getRelative","venueId","AppClientAdage","HttpRequest","FetchHttpRequest","DefaultService","BaseHttpRequest$1","CancelablePromise$1","URL_FOR_MAINTENANCE","page","eventDate","bookingStatusFilter","bookingPeriodBeginningDate","bookingPeriodEndingDate","offerType","exportType","extra","bookingId","nameOrIsbn","offererId","status","categoryId","creationMode","periodBeginningDate","periodEndingDate","collectiveOfferType","requestId","uai","candidate","collectiveStockId","perPageLimit","reimbursementPointId","apiKeyPrefix","validated","validatedForUser","priceCategoryId","reimbursementPeriodBeginningDate","reimbursementPeriodEndingDate","siren","stockId","venueProviderId","activeOfferersOnly","AppClient","ApiContremarqueService","ApiOffresCollectivesService","id","name","institutionType","city","postalCode","limit","AppClientV2","API_URL","configAdage","api","isErrorAPIError","getFileFromURL","blob","Spinner","className","nbDots","setNbDots","useState","timer","setTimer","useEffect","newTimer","oldVal","jsxs","cn","jsx","SvgIcon","strokePass"],"mappings":"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"}