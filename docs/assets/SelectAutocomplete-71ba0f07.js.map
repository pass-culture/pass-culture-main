{"version":3,"file":"SelectAutocomplete-71ba0f07.js","sources":["../../src/ui-kit/form/SelectAutocomplete/utils/toLowerCaseWithoutAccents.ts","../../src/ui-kit/form/SelectAutocomplete/SelectAutocomplete.tsx"],"sourcesContent":["export const toLowerCaseWithoutAccents = (value?: string): string => {\n  if (!value) {\n    return ''\n  }\n\n  return value\n    .toLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n}\n","import cx from 'classnames'\nimport { useField, useFormikContext } from 'formik'\nimport React, { useEffect, useRef, useState } from 'react'\n\nimport { SelectOption } from 'custom_types/form'\nimport { getLabelString } from 'utils/getLabelString'\n\nimport { BaseCheckbox, BaseInput, FieldLayout } from '../shared'\nimport AutocompleteList from '../shared/AutocompleteList/AutocompleteList'\nimport { FieldLayoutBaseProps } from '../shared/FieldLayout/FieldLayout'\n\nimport styles from './SelectAutocomplete.module.scss'\nimport { toLowerCaseWithoutAccents } from './utils/toLowerCaseWithoutAccents'\n\nexport type SelectAutocompleteProps = FieldLayoutBaseProps & {\n  disabled?: boolean\n  filterLabel?: string\n  maxDisplayOptions?: number\n  maxDisplayOptionsLabel?: string\n  maxHeight?: number\n  onSearchChange?: () => void\n  options: SelectOption[]\n  placeholder?: string\n  hideArrow?: boolean\n}\n\nconst SelectAutocomplete = ({\n  className,\n  disabled = false,\n  name,\n  hideFooter = false,\n  isOptional = false,\n  label,\n  maxDisplayOptions,\n  maxHeight,\n  onSearchChange,\n  options,\n  smallLabel = false,\n  placeholder,\n  hideArrow = false,\n}: SelectAutocompleteProps): JSX.Element => {\n  const { setFieldValue, setFieldTouched } = useFormikContext<any>()\n  const [field, meta, helpers] = useField(name)\n  const [searchField] = useField(`search-${name}`)\n\n  const containerRef = useRef<HTMLDivElement>(null)\n\n  const [isOpen, setIsOpen] = useState(false)\n  const [filteredOptions, setFilteredOptions] = useState(options)\n\n  useEffect(() => {\n    setFilteredOptions(options)\n  }, [options])\n\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent): void => {\n      if (!containerRef.current?.contains(e.target as Node)) {\n        setIsOpen(false)\n      }\n    }\n    if (containerRef.current) {\n      document.addEventListener('mousedown', handleClickOutside)\n    }\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [containerRef])\n\n  useEffect(() => {\n    if (onSearchChange) {\n      onSearchChange()\n      return\n    }\n\n    const formattedValue: string = toLowerCaseWithoutAccents(searchField.value)\n\n    const formattedValues = formattedValue.split(' ')\n\n    setFilteredOptions(\n      options.filter(option => {\n        const formattedLabel = toLowerCaseWithoutAccents(option.label)\n\n        return (\n          formattedValues.length === 0 ||\n          formattedValues.every(word => formattedLabel.includes(word))\n        )\n      })\n    )\n  }, [searchField.value])\n\n  return (\n    <FieldLayout\n      label={label}\n      name={`search-${name}`}\n      error={meta.error}\n      showError={meta.touched && !!meta.error}\n      smallLabel={smallLabel}\n      isOptional={isOptional}\n      hideFooter={hideFooter}\n      className={className}\n    >\n      <div\n        className={cx(styles['select-autocomplete-container'], className)}\n        ref={containerRef}\n      >\n        <BaseInput\n          onFocus={() => {\n            if (!isOpen) {\n              setIsOpen(true)\n              setFieldValue(`search-${name}`, '', false)\n            }\n            setFieldTouched(name, true)\n          }}\n          placeholder={placeholder ?? getLabelString(label)}\n          hasError={meta.touched && !!meta.error}\n          type=\"text\"\n          disabled={disabled}\n          className={styles['select-autocomplete-input']}\n          autoComplete=\"off\"\n          {...searchField}\n        />\n        <AutocompleteList\n          className={styles['menu']}\n          onButtonClick={() => {\n            if (isOpen) {\n              setIsOpen(false)\n            } else {\n              setFieldValue(`search-${name}`, '', false)\n              setIsOpen(true)\n            }\n            setFieldTouched(name, true)\n          }}\n          maxHeight={maxHeight}\n          isOpen={isOpen}\n          filteredOptions={[\n            ...filteredOptions.slice(\n              0,\n              maxDisplayOptions ?? filteredOptions.length\n            ),\n            ...(maxDisplayOptions && maxDisplayOptions < filteredOptions.length\n              ? [\n                  {\n                    value: '',\n                    label: `${maxDisplayOptions} rÃ©sultats maximum. Veuillez affiner votre recherche`,\n                    disabled: true,\n                  },\n                ]\n              : []),\n          ]}\n          renderOption={({ value, label, disabled }) => (\n            <BaseCheckbox\n              label={label}\n              key={`${name}-${value}`}\n              className={cx(styles['option'], {\n                [styles['option-disabled']]: disabled,\n              })}\n              value={value}\n              id={`${name}-${value}`}\n              name={name}\n              role=\"option\"\n              aria-selected={field.value === value}\n              disabled={disabled}\n              defaultChecked={field.value === value}\n              onClick={() => {\n                helpers.setValue(value)\n                setIsOpen(false)\n                setFieldValue(`search-${name}`, label, false)\n              }}\n            />\n          )}\n          hideArrow={hideArrow}\n        />\n      </div>\n    </FieldLayout>\n  )\n}\n\nexport default SelectAutocomplete\n"],"names":["toLowerCaseWithoutAccents","value","SelectAutocomplete","className","disabled","name","hideFooter","isOptional","label","maxDisplayOptions","maxHeight","onSearchChange","options","smallLabel","placeholder","hideArrow","setFieldValue","setFieldTouched","useFormikContext","field","meta","helpers","useField","searchField","containerRef","useRef","isOpen","setIsOpen","useState","filteredOptions","setFilteredOptions","useEffect","handleClickOutside","e","_a","formattedValues","option","formattedLabel","word","jsx","FieldLayout","jsxs","cx","styles","BaseInput","getLabelString","AutocompleteList","label2","disabled2","BaseCheckbox","SelectAutocomplete$1"],"mappings":"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"}