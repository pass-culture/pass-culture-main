{"version":3,"file":"TextInput-032a83b6.js","sources":["../../src/ui-kit/form/TextInput/TextInput.tsx"],"sourcesContent":["import { useField } from 'formik'\nimport React, { ForwardedRef } from 'react'\n\nimport { BaseInput, FieldLayout } from '../shared'\nimport { FieldLayoutBaseProps } from '../shared/FieldLayout/FieldLayout'\n\nimport styles from './TextInput.module.scss'\n\nexport type TextInputProps = React.InputHTMLAttributes<HTMLInputElement> &\n  FieldLayoutBaseProps & {\n    readOnly?: boolean\n    type?: 'text' | 'number' | 'email' | 'url' | 'password' | 'tel' | 'search'\n    countCharacters?: boolean\n    leftIcon?: string\n    rightButton?: () => JSX.Element\n    rightIcon?: string\n    step?: number | string\n    hasDecimal?: boolean\n    refForInput?: ForwardedRef<HTMLInputElement>\n    ErrorDetails?: React.ReactNode\n  }\n\nconst TextInput = ({\n  name,\n  type = 'text',\n  className,\n  classNameFooter,\n  classNameLabel,\n  disabled,\n  readOnly,\n  hideFooter,\n  label,\n  isLabelHidden = false,\n  placeholder,\n  countCharacters,\n  maxLength,\n  smallLabel,\n  isOptional = false,\n  refForInput,\n  leftIcon,\n  rightButton,\n  rightIcon,\n  step,\n  hasDecimal = true,\n  inline = false,\n  description,\n  clearButtonProps,\n  ErrorDetails,\n  ...props\n}: TextInputProps): JSX.Element => {\n  const [field, meta] = useField({\n    name,\n    type,\n  })\n\n  // think to add step=\"0.01\" for decimal fields\n  const regexHasDecimal = /[0-9,.]|Backspace|Enter/\n  const regexHasNotDecimal = /[0-9]|Backspace|Enter/\n  const showError = meta.touched && !!meta.error\n\n  return (\n    <FieldLayout\n      className={className}\n      classNameLabel={classNameLabel}\n      classNameFooter={classNameFooter}\n      count={countCharacters ? field.value.length : undefined}\n      error={meta.error}\n      isOptional={isOptional}\n      label={label}\n      isLabelHidden={isLabelHidden}\n      maxLength={maxLength}\n      name={name}\n      showError={showError}\n      smallLabel={smallLabel}\n      inline={inline}\n      hideFooter={hideFooter}\n      description={description}\n      clearButtonProps={clearButtonProps}\n      ErrorDetails={ErrorDetails}\n    >\n      {readOnly ? (\n        <span\n          className={styles['text-input-readonly']}\n          ref={refForInput}\n          {...field}\n          {...props}\n        >\n          {props.value}\n        </span>\n      ) : (\n        <BaseInput\n          disabled={disabled}\n          hasError={meta.touched && !!meta.error}\n          maxLength={maxLength}\n          placeholder={placeholder}\n          step={step}\n          type={type}\n          rightButton={rightButton}\n          ref={refForInput}\n          rightIcon={rightIcon}\n          leftIcon={leftIcon}\n          onKeyPress={event => {\n            if (type === 'number') {\n              const testInput = hasDecimal\n                ? !regexHasDecimal.test(event.key)\n                : !regexHasNotDecimal.test(event.key)\n              testInput && event.preventDefault()\n            }\n          }}\n          // Disable changing input value on scroll over a number input\n          onWheel={event => {\n            if (type === 'number') {\n              // We blur so that the input loses focus and the scroll still happens on the page\n              // otherwise the user can't scroll the page if the cursor is over the input\n              event.currentTarget.blur()\n            }\n          }}\n          {...field}\n          {...props}\n        />\n      )}\n    </FieldLayout>\n  )\n}\n\nexport default TextInput\n"],"names":["TextInput","name","type","className","classNameFooter","classNameLabel","disabled","readOnly","hideFooter","label","isLabelHidden","placeholder","countCharacters","maxLength","smallLabel","isOptional","refForInput","leftIcon","rightButton","rightIcon","step","hasDecimal","inline","description","clearButtonProps","ErrorDetails","props","field","meta","useField","regexHasDecimal","regexHasNotDecimal","showError","jsx","FieldLayout","styles","BaseInput","event","TextInput$1"],"mappings":"saAsBAA,EAAA,CAAA,CAAmB,KAAAC,EACjB,KAAAC,EAAA,OACO,UAAAC,EACP,gBAAAC,EACA,eAAAC,EACA,SAAAC,EACA,SAAAC,EACA,WAAAC,EACA,MAAAC,EACA,cAAAC,EAAA,GACgB,YAAAC,EAChB,gBAAAC,EACA,UAAAC,EACA,WAAAC,EACA,WAAAC,EAAA,GACa,YAAAC,EACb,SAAAC,EACA,YAAAC,EACA,UAAAC,EACA,KAAAC,EACA,WAAAC,EAAA,GACa,OAAAC,EAAA,GACJ,YAAAC,EACT,iBAAAC,EACA,aAAAC,EACA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,CAA+B,KAAA5B,EAC7B,KAAAC,CACA,CAAA,EAIF4B,EAAA,0BACAC,EAAA,wBACAC,EAAAJ,EAAA,SAAA,CAAA,CAAAA,EAAA,MAEA,OAAAK,EAAA,IACEC,EAAC,CAAA,UAAA/B,EACC,eAAAE,EACA,gBAAAD,EACA,MAAAQ,EAAAe,EAAA,MAAA,OAAA,OAC8C,MAAAC,EAAA,MAClC,WAAAb,EACZ,MAAAN,EACA,cAAAC,EACA,UAAAG,EACA,KAAAZ,EACA,UAAA+B,EACA,WAAAlB,EACA,OAAAQ,EACA,WAAAd,EACA,YAAAe,EACA,iBAAAC,EACA,aAAAC,EACA,SAAAlB,EAAA0B,EAAA,IAGE,OAAC,CAAA,UAAAE,EAAA,qBAAA,EACwC,IAAAnB,EAClC,GAAAW,EACD,GAAAD,EACA,SAAAA,EAAA,KAEG,CAAA,EAAAO,EAAA,IAGTG,EAAC,CAAA,SAAA9B,EACC,SAAAsB,EAAA,SAAA,CAAA,CAAAA,EAAA,MACiC,UAAAf,EACjC,YAAAF,EACA,KAAAS,EACA,KAAAlB,EACA,YAAAgB,EACA,IAAAF,EACK,UAAAG,EACL,SAAAF,EACA,WAAAoB,GAAA,CAEEnC,IAAA,WACEmB,EAAA,CAAAS,EAAA,KAAAO,EAAA,GAAA,EAAA,CAAAN,EAAA,KAAAM,EAAA,GAAA,IAGAA,EAAA,gBACF,EACF,QAAAA,GAAA,CAGEnC,IAAA,UAGEmC,EAAA,cAAA,MACF,EACF,GAAAV,EACI,GAAAD,CACA,CAAA,CACN,CAAA,CAIR,EAEAY,EAAAtC"}