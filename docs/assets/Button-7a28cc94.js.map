{"version":3,"file":"Button-7a28cc94.js","sources":["../../src/ui-kit/Button/types.ts","../../src/ui-kit/Button/ButtonLink.tsx","../../src/ui-kit/Button/Button.tsx"],"sourcesContent":["export enum ButtonVariant {\n  PRIMARY = 'primary',\n  SECONDARY = 'secondary',\n  TERNARY = 'ternary',\n  QUATERNARY = 'quaternary',\n  BOX = 'box',\n}\n\nexport enum IconPositionEnum {\n  RIGHT = 'right',\n  LEFT = 'left',\n  CENTER = 'center',\n}\n\nexport type SharedButtonProps = {\n  icon?: string\n  variant?: ButtonVariant\n  iconPosition?: IconPositionEnum\n  testId?: string\n}\n","import cn from 'classnames'\nimport React, { MouseEventHandler, useId } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport fullRightIcon from 'icons/full-right.svg'\nimport { SvgIcon } from 'ui-kit/SvgIcon/SvgIcon'\nimport Tooltip from 'ui-kit/Tooltip'\n\nimport styles from './Button.module.scss'\nimport { ButtonVariant, IconPositionEnum, SharedButtonProps } from './types'\n\nexport type LinkProps = {\n  isExternal: boolean\n  to: string\n  rel?: string\n  target?: string\n  'aria-label'?: string\n  type?: string\n  download?: boolean\n}\n\nexport interface ButtonLinkProps extends SharedButtonProps {\n  link: LinkProps\n  children?: React.ReactNode | React.ReactNode[]\n  className?: string\n  isDisabled?: boolean\n  onClick?: MouseEventHandler<HTMLAnchorElement>\n  hasTooltip?: boolean\n}\n\nconst ButtonLink = ({\n  className,\n  children,\n  icon,\n  isDisabled = false,\n  onClick,\n  variant = ButtonVariant.TERNARY,\n  link,\n  iconPosition = IconPositionEnum.LEFT,\n  hasTooltip = false,\n}: ButtonLinkProps): JSX.Element => {\n  const classNames = cn(\n    styles['button'],\n    styles[`button-${variant}`],\n    styles[`button-${iconPosition}`],\n    { [styles[`button-disabled`]]: isDisabled },\n    className\n  )\n\n  let body = (\n    <>\n      {\n        /* istanbul ignore next: graphic variation */\n        icon && iconPosition !== IconPositionEnum.RIGHT && (\n          <SvgIcon\n            src={icon}\n            alt=\"\"\n            className={styles['button-icon']}\n            width=\"22\"\n          />\n        )\n      }\n      {hasTooltip ? (\n        <div className={styles['visually-hidden']}>{children}</div>\n      ) : /* istanbul ignore next: graphic variation */ variant ===\n        ButtonVariant.BOX ? (\n        <div className={styles['button-arrow-content']}>{children}</div>\n      ) : (\n        children\n      )}\n      {\n        /* istanbul ignore next: graphic variation */\n        icon && iconPosition === IconPositionEnum.RIGHT && (\n          <SvgIcon\n            src={icon}\n            alt=\"\"\n            className={styles['button-icon']}\n            width=\"22\"\n          />\n        )\n      }\n      {\n        /* istanbul ignore next: graphic variation */ variant ===\n          ButtonVariant.BOX && (\n          <SvgIcon\n            src={fullRightIcon}\n            alt=\"\"\n            className={cn(styles['button-icon'], styles['button-icon-arrow'])}\n            width=\"22\"\n          />\n        )\n      }\n    </>\n  )\n\n  const { to, isExternal, ...linkProps } = link\n\n  // react-router v6 accepts relative links\n  // That is, if you use \"offers\" as link, it will be relative to the current path\n  // If you want a link to be absolute you must start it with a slash\n  // As this behavior can be quite confusing, we decided to enforce absolute links\n  // for internal links so that developers can't make mistakes/forget to add the slash\n  const absoluteUrl = isExternal || to.startsWith('/') ? to : `/${to}`\n\n  const callback: MouseEventHandler<HTMLAnchorElement> = e =>\n    isDisabled ? e.preventDefault() : onClick?.(e)\n\n  const disabled = isDisabled\n    ? {\n        'aria-disabled': true,\n      }\n    : {}\n\n  const tooltipId = useId()\n  const tooltipProps = hasTooltip ? { 'aria-describedby': tooltipId } : {}\n\n  body = isExternal ? (\n    <a\n      className={classNames}\n      href={absoluteUrl}\n      onClick={callback}\n      {...disabled}\n      {...linkProps}\n      {...tooltipProps}\n    >\n      {body}\n    </a>\n  ) : (\n    /* istanbul ignore next: graphic variation */ <Link\n      className={classNames}\n      onClick={callback}\n      to={absoluteUrl}\n      {...disabled}\n      {...tooltipProps}\n      aria-label={linkProps['aria-label']}\n    >\n      {body}\n    </Link>\n  )\n\n  if (hasTooltip) {\n    body = (\n      <Tooltip id={tooltipId} content={children}>\n        {body}\n      </Tooltip>\n    )\n  }\n\n  return body\n}\n\nButtonLink.variant = ButtonVariant\n\nexport default ButtonLink\n","/* istanbul ignore file : no need to test styled html tag  */\n\nimport cn from 'classnames'\nimport React, { useId } from 'react'\n\nimport fullRightIcon from 'icons/full-right.svg'\nimport strokePassIcon from 'icons/stroke-pass.svg'\nimport { SvgIcon } from 'ui-kit/SvgIcon/SvgIcon'\nimport Tooltip from 'ui-kit/Tooltip'\n\nimport styles from './Button.module.scss'\nimport { ButtonVariant, IconPositionEnum, SharedButtonProps } from './types'\n\nexport interface ButtonProps\n  extends SharedButtonProps,\n    React.HTMLProps<HTMLButtonElement> {\n  type?: 'button' | 'submit'\n  innerRef?: React.RefObject<HTMLButtonElement>\n  className?: string\n  hasTooltip?: boolean\n  isLoading?: boolean\n}\n\nconst Button = ({\n  className,\n  children,\n  icon,\n  iconPosition = IconPositionEnum.LEFT,\n  variant = ButtonVariant.PRIMARY,\n  type = 'button',\n  innerRef,\n  hasTooltip,\n  testId,\n  isLoading = false,\n  ...buttonAttrs\n}: ButtonProps): JSX.Element => {\n  const tooltipId = useId()\n\n  const button = (\n    <button\n      className={cn(\n        styles['button'],\n        styles[`button-${variant}`],\n        styles[`button-${iconPosition}`],\n        { [styles['loading-spinner']]: isLoading },\n        className\n      )}\n      ref={innerRef}\n      type={type}\n      data-testid={testId}\n      {...(hasTooltip ? { 'aria-describedby': tooltipId } : {})}\n      {...buttonAttrs}\n    >\n      {icon && iconPosition !== IconPositionEnum.RIGHT && (\n        <SvgIcon\n          src={icon}\n          alt=\"\"\n          className={cn(styles['button-icon'], {\n            [styles['has-tooltip']]: hasTooltip,\n          })}\n          width=\"20\"\n        />\n      )}\n      {hasTooltip ? (\n        <div className={styles['visually-hidden']}>\n          {isLoading ? (\n            <div className={styles['spinner-icon']} data-testid=\"spinner\">\n              <SvgIcon src={strokePassIcon} alt=\"\" />\n            </div>\n          ) : (\n            children\n          )}\n        </div>\n      ) : variant === ButtonVariant.BOX ? (\n        <div className={styles['button-arrow-content']}>\n          {isLoading ? (\n            <div className={styles['spinner-icon']} data-testid=\"spinner\">\n              <SvgIcon src={strokePassIcon} alt=\"\" />\n            </div>\n          ) : (\n            children\n          )}\n        </div>\n      ) : isLoading ? (\n        <div className={styles['spinner-icon']} data-testid=\"spinner\">\n          <SvgIcon src={strokePassIcon} alt=\"\" />\n        </div>\n      ) : (\n        children\n      )}\n      {icon && iconPosition === IconPositionEnum.RIGHT && (\n        <SvgIcon\n          src={icon}\n          alt=\"\"\n          className={styles['button-icon']}\n          width=\"20\"\n        />\n      )}\n      {variant === ButtonVariant.BOX && (\n        <SvgIcon\n          src={fullRightIcon}\n          alt=\"\"\n          className={cn(styles['button-icon'], styles['button-icon-arrow'])}\n          width=\"20\"\n        />\n      )}\n    </button>\n  )\n\n  if (hasTooltip && !buttonAttrs?.disabled) {\n    return (\n      <Tooltip id={tooltipId} content={children}>\n        {button}\n      </Tooltip>\n    )\n  }\n\n  return button\n}\n\nexport default Button\n"],"names":["ButtonVariant","IconPositionEnum","ButtonLink","className","children","icon","isDisabled","onClick","variant","link","iconPosition","hasTooltip","classNames","cn","styles","body","jsxs","Fragment","jsx","SvgIcon","fullRightIcon","to","isExternal","linkProps","absoluteUrl","callback","e","disabled","tooltipId","useId","tooltipProps","Link","Tooltip","Button","type","innerRef","testId","isLoading","buttonAttrs","button","strokePassIcon"],"mappings":"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"}