{"version":3,"file":"AdageMultiselect.stories-14e96a7e.js","sources":["../../node_modules/compute-scroll-into-view/dist/index.js","../../node_modules/downshift/dist/downshift.esm.js","../../src/ui-kit/form/AdageMultiselect/AdageMultiselect.tsx"],"sourcesContent":["const t=t=>\"object\"==typeof t&&null!=t&&1===t.nodeType,e=(t,e)=>(!e||\"hidden\"!==t)&&(\"visible\"!==t&&\"clip\"!==t),n=(t,n)=>{if(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth){const o=getComputedStyle(t,null);return e(o.overflowY,n)||e(o.overflowX,n)||(t=>{const e=(t=>{if(!t.ownerDocument||!t.ownerDocument.defaultView)return null;try{return t.ownerDocument.defaultView.frameElement}catch(t){return null}})(t);return!!e&&(e.clientHeight<t.scrollHeight||e.clientWidth<t.scrollWidth)})(t)}return!1},o=(t,e,n,o,i,l,r,d)=>l<t&&r>e||l>t&&r<e?0:l<=t&&d<=n||r>=e&&d>=n?l-t-o:r>e&&d<n||l<t&&d>n?r-e+i:0,i=t=>{const e=t.parentElement;return null==e?t.getRootNode().host||null:e},l=(e,l)=>{var r,d,s,h;if(\"undefined\"==typeof document)return[];const{scrollMode:c,block:f,inline:u,boundary:a,skipOverflowHiddenElements:g}=l,m=\"function\"==typeof a?a:t=>t!==a;if(!t(e))throw new TypeError(\"Invalid target\");const p=document.scrollingElement||document.documentElement,w=[];let W=e;for(;t(W)&&m(W);){if(W=i(W),W===p){w.push(W);break}null!=W&&W===document.body&&n(W)&&!n(document.documentElement)||null!=W&&n(W,g)&&w.push(W)}const H=null!=(d=null==(r=window.visualViewport)?void 0:r.width)?d:innerWidth,b=null!=(h=null==(s=window.visualViewport)?void 0:s.height)?h:innerHeight,{scrollX:v,scrollY:y}=window,{height:E,width:M,top:x,right:I,bottom:C,left:R}=e.getBoundingClientRect();let T=\"start\"===f||\"nearest\"===f?x:\"end\"===f?C:x+E/2,V=\"center\"===u?R+M/2:\"end\"===u?I:R;const k=[];for(let t=0;t<w.length;t++){const e=w[t],{height:n,width:i,top:l,right:r,bottom:d,left:s}=e.getBoundingClientRect();if(\"if-needed\"===c&&x>=0&&R>=0&&C<=b&&I<=H&&x>=l&&C<=d&&R>=s&&I<=r)return k;const h=getComputedStyle(e),a=parseInt(h.borderLeftWidth,10),g=parseInt(h.borderTopWidth,10),m=parseInt(h.borderRightWidth,10),W=parseInt(h.borderBottomWidth,10);let B=0,D=0;const L=\"offsetWidth\"in e?e.offsetWidth-e.clientWidth-a-m:0,S=\"offsetHeight\"in e?e.offsetHeight-e.clientHeight-g-W:0,X=\"offsetWidth\"in e?0===e.offsetWidth?0:i/e.offsetWidth:0,Y=\"offsetHeight\"in e?0===e.offsetHeight?0:n/e.offsetHeight:0;if(p===e)B=\"start\"===f?T:\"end\"===f?T-b:\"nearest\"===f?o(y,y+b,b,g,W,y+T,y+T+E,E):T-b/2,D=\"start\"===u?V:\"center\"===u?V-H/2:\"end\"===u?V-H:o(v,v+H,H,a,m,v+V,v+V+M,M),B=Math.max(0,B+y),D=Math.max(0,D+v);else{B=\"start\"===f?T-l-g:\"end\"===f?T-d+W+S:\"nearest\"===f?o(l,d,n,g,W+S,T,T+E,E):T-(l+n/2)+S/2,D=\"start\"===u?V-s-a:\"center\"===u?V-(s+i/2)+L/2:\"end\"===u?V-r+m+L:o(s,r,i,a,m+L,V,V+M,M);const{scrollLeft:t,scrollTop:h}=e;B=Math.max(0,Math.min(h+B/Y,e.scrollHeight-n/Y+S)),D=Math.max(0,Math.min(t+D/X,e.scrollWidth-i/X+L)),T+=h-B,V+=t-D}k.push({el:e,top:B,left:D})}return k};export{l as compute};//# sourceMappingURL=index.js.map\n","import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport PropTypes from 'prop-types';\nimport React, { cloneElement, Component, useRef, useEffect, useCallback, useLayoutEffect, useReducer, useMemo } from 'react';\nimport { isForwardRef } from 'react-is';\nimport { compute } from 'compute-scroll-into-view';\nimport { __assign } from 'tslib';\n\nvar idCounter = 0;\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop;\n}\nfunction noop() {}\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} menuNode the menu element of the component\n */\nfunction scrollIntoView(node, menuNode) {\n  if (!node) {\n    return;\n  }\n  var actions = compute(node, {\n    boundary: menuNode,\n    block: 'nearest',\n    scrollMode: 'if-needed'\n  });\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n      top = _ref.top,\n      left = _ref.left;\n    el.scrollTop = top;\n    el.scrollLeft = left;\n  });\n}\n\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @param {Window} environment The window context where downshift renders.\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\nfunction isOrContainsNode(parent, child, environment) {\n  var result = parent === child || child instanceof environment.Node && parent.contains && parent.contains(child);\n  return result;\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  var timeoutId;\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n  }\n  function wrapper() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    cancel();\n    timeoutId = setTimeout(function () {\n      timeoutId = null;\n      fn.apply(void 0, args);\n    }, time);\n  }\n  wrapper.cancel = cancel;\n  return wrapper;\n}\n\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\nfunction callAllEventHandlers() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n  return function (event) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    return fns.some(function (fn) {\n      if (fn) {\n        fn.apply(void 0, [event].concat(args));\n      }\n      return event.preventDownshiftDefault || event.hasOwnProperty('nativeEvent') && event.nativeEvent.preventDownshiftDefault;\n    });\n  };\n}\nfunction handleRefs() {\n  for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    refs[_key4] = arguments[_key4];\n  }\n  return function (node) {\n    refs.forEach(function (ref) {\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref) {\n        ref.current = node;\n      }\n    });\n  };\n}\n\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\nfunction generateId() {\n  return String(idCounter++);\n}\n\n/**\n * Resets idCounter to 0. Used for SSR.\n */\nfunction resetIdCounter() {\n  // istanbul ignore next\n  if ('useId' in React) {\n    console.warn(\"It is not necessary to call resetIdCounter when using React 18+\");\n    return;\n  }\n  idCounter = 0;\n}\n\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specify if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage$1(_ref2) {\n  var isOpen = _ref2.isOpen,\n    resultCount = _ref2.resultCount,\n    previousResultCount = _ref2.previousResultCount;\n  if (!isOpen) {\n    return '';\n  }\n  if (!resultCount) {\n    return 'No results are available.';\n  }\n  if (resultCount !== previousResultCount) {\n    return resultCount + \" result\" + (resultCount === 1 ? ' is' : 's are') + \" available, use up and down arrow keys to navigate. Press Enter key to select.\";\n  }\n  return '';\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */arg[0] : arg;\n  if (!arg && defaultValue) {\n    return defaultValue;\n  } else {\n    return arg;\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n\n  // then we assume this is react\n  return typeof element.type === 'string';\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  return element.props;\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  // eslint-disable-next-line no-console\n  console.error(\"The property \\\"\" + propName + \"\\\" is required in \\\"\" + fnName + \"\\\"\");\n}\nvar stateKeys = ['highlightedIndex', 'inputValue', 'isOpen', 'selectedItem', 'type'];\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\nfunction pickState(state) {\n  if (state === void 0) {\n    state = {};\n  }\n  var result = {};\n  stateKeys.forEach(function (k) {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k];\n    }\n  });\n  return result;\n}\n\n/**\n * This will perform a shallow merge of the given state object\n * with the state coming from props\n * (for the controlled component scenario)\n * This is used in state updater functions so they're referencing\n * the right state regardless of where it comes from.\n *\n * @param {Object} state The state of the component/hook.\n * @param {Object} props The props that may contain controlled values.\n * @returns {Object} The merged controlled state.\n */\nfunction getState(state, props) {\n  return Object.keys(state).reduce(function (prevState, key) {\n    prevState[key] = isControlledProp(props, key) ? props[key] : state[key];\n    return prevState;\n  }, {});\n}\n\n/**\n * This determines whether a prop is a \"controlled prop\" meaning it is\n * state which is controlled by the outside of this component rather\n * than within this component.\n *\n * @param {Object} props The props that may contain controlled values.\n * @param {String} key the key to check\n * @return {Boolean} whether it is a controlled controlled prop\n */\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\nfunction normalizeArrowKey(event) {\n  var key = event.key,\n    keyCode = event.keyCode;\n  /* istanbul ignore next (ie) */\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return \"Arrow\" + key;\n  }\n  return key;\n}\n\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}\n\n/**\n * Returns the next non-disabled highlightedIndex value.\n *\n * @param {number} start The current highlightedIndex.\n * @param {number} offset The offset from the current highlightedIndex to start searching.\n * @param {unknown[]} items The items array.\n * @param {(item: unknown, index: number) => boolean} isItemDisabled Function that tells if an item is disabled or not.\n * @param {boolean?} circular If the search reaches the end, if it can search again starting from the other end.\n * @returns {number} The next highlightedIndex.\n */\nfunction getHighlightedIndex(start, offset, items, isItemDisabled, circular) {\n  if (circular === void 0) {\n    circular = false;\n  }\n  var count = items.length;\n  if (count === 0) {\n    return -1;\n  }\n  var itemsLastIndex = count - 1;\n  if (typeof start !== 'number' || start < 0 || start > itemsLastIndex) {\n    start = offset > 0 ? -1 : itemsLastIndex + 1;\n  }\n  var current = start + offset;\n  if (current < 0) {\n    current = circular ? itemsLastIndex : 0;\n  } else if (current > itemsLastIndex) {\n    current = circular ? 0 : itemsLastIndex;\n  }\n  var highlightedIndex = getNonDisabledIndex(current, offset < 0, items, isItemDisabled, circular);\n  if (highlightedIndex === -1) {\n    return start >= count ? -1 : start;\n  }\n  return highlightedIndex;\n}\n\n/**\n * Returns the next non-disabled highlightedIndex value.\n *\n * @param {number} start The current highlightedIndex.\n * @param {boolean} backwards If true, it will search backwards from the start.\n * @param {unknown[]} items The items array.\n * @param {(item: unknown, index: number) => boolean} isItemDisabled Function that tells if an item is disabled or not.\n * @param {boolean} circular If the search reaches the end, if it can search again starting from the other end.\n * @returns {number} The next non-disabled index.\n */\nfunction getNonDisabledIndex(start, backwards, items, isItemDisabled, circular) {\n  if (circular === void 0) {\n    circular = false;\n  }\n  var count = items.length;\n  if (backwards) {\n    for (var index = start; index >= 0; index--) {\n      if (!isItemDisabled(items[index], index)) {\n        return index;\n      }\n    }\n  } else {\n    for (var _index = start; _index < count; _index++) {\n      if (!isItemDisabled(items[_index], _index)) {\n        return _index;\n      }\n    }\n  }\n  if (circular) {\n    return getNonDisabledIndex(backwards ? count - 1 : 0, backwards, items, isItemDisabled);\n  }\n  return -1;\n}\n\n/**\n * Checks if event target is within the downshift elements.\n *\n * @param {EventTarget} target Target to check.\n * @param {HTMLElement[]} downshiftElements The elements that form downshift (list, toggle button etc).\n * @param {Window} environment The window context where downshift renders.\n * @param {boolean} checkActiveElement Whether to also check activeElement.\n *\n * @returns {boolean} Whether or not the target is within downshift elements.\n */\nfunction targetWithinDownshift(target, downshiftElements, environment, checkActiveElement) {\n  if (checkActiveElement === void 0) {\n    checkActiveElement = true;\n  }\n  return environment && downshiftElements.some(function (contextNode) {\n    return contextNode && (isOrContainsNode(contextNode, target, environment) || checkActiveElement && isOrContainsNode(contextNode, environment.document.activeElement, environment));\n  });\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nvar validateControlledUnchanged = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  validateControlledUnchanged = function validateControlledUnchanged(state, prevProps, nextProps) {\n    var warningDescription = \"This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props\";\n    Object.keys(state).forEach(function (propKey) {\n      if (prevProps[propKey] !== undefined && nextProps[propKey] === undefined) {\n        // eslint-disable-next-line no-console\n        console.error(\"downshift: A component has changed the controlled prop \\\"\" + propKey + \"\\\" to be uncontrolled. \" + warningDescription);\n      } else if (prevProps[propKey] === undefined && nextProps[propKey] !== undefined) {\n        // eslint-disable-next-line no-console\n        console.error(\"downshift: A component has changed the uncontrolled prop \\\"\" + propKey + \"\\\" to be controlled. \" + warningDescription);\n      }\n    });\n  };\n}\n\nvar cleanupStatus = debounce(function (documentProp) {\n  getStatusDiv(documentProp).textContent = '';\n}, 500);\n\n/**\n * Get the status node or create it if it does not already exist.\n * @param {Object} documentProp document passed by the user.\n * @return {HTMLElement} the status node.\n */\nfunction getStatusDiv(documentProp) {\n  var statusDiv = documentProp.getElementById('a11y-status-message');\n  if (statusDiv) {\n    return statusDiv;\n  }\n  statusDiv = documentProp.createElement('div');\n  statusDiv.setAttribute('id', 'a11y-status-message');\n  statusDiv.setAttribute('role', 'status');\n  statusDiv.setAttribute('aria-live', 'polite');\n  statusDiv.setAttribute('aria-relevant', 'additions text');\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px'\n  });\n  documentProp.body.appendChild(statusDiv);\n  return statusDiv;\n}\n\n/**\n * @param {String} status the status message\n * @param {Object} documentProp document passed by the user.\n */\nfunction setStatus(status, documentProp) {\n  if (!status || !documentProp) {\n    return;\n  }\n  var div = getStatusDiv(documentProp);\n  div.textContent = status;\n  cleanupStatus(documentProp);\n}\n\nvar unknown = process.env.NODE_ENV !== \"production\" ? '__autocomplete_unknown__' : 0;\nvar mouseUp = process.env.NODE_ENV !== \"production\" ? '__autocomplete_mouseup__' : 1;\nvar itemMouseEnter = process.env.NODE_ENV !== \"production\" ? '__autocomplete_item_mouseenter__' : 2;\nvar keyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_arrow_up__' : 3;\nvar keyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_arrow_down__' : 4;\nvar keyDownEscape = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_escape__' : 5;\nvar keyDownEnter = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_enter__' : 6;\nvar keyDownHome = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_home__' : 7;\nvar keyDownEnd = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_end__' : 8;\nvar clickItem = process.env.NODE_ENV !== \"production\" ? '__autocomplete_click_item__' : 9;\nvar blurInput = process.env.NODE_ENV !== \"production\" ? '__autocomplete_blur_input__' : 10;\nvar changeInput = process.env.NODE_ENV !== \"production\" ? '__autocomplete_change_input__' : 11;\nvar keyDownSpaceButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_space_button__' : 12;\nvar clickButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_click_button__' : 13;\nvar blurButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_blur_button__' : 14;\nvar controlledPropUpdatedSelectedItem = process.env.NODE_ENV !== \"production\" ? '__autocomplete_controlled_prop_updated_selected_item__' : 15;\nvar touchEnd = process.env.NODE_ENV !== \"production\" ? '__autocomplete_touchend__' : 16;\n\nvar stateChangeTypes$3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  unknown: unknown,\n  mouseUp: mouseUp,\n  itemMouseEnter: itemMouseEnter,\n  keyDownArrowUp: keyDownArrowUp,\n  keyDownArrowDown: keyDownArrowDown,\n  keyDownEscape: keyDownEscape,\n  keyDownEnter: keyDownEnter,\n  keyDownHome: keyDownHome,\n  keyDownEnd: keyDownEnd,\n  clickItem: clickItem,\n  blurInput: blurInput,\n  changeInput: changeInput,\n  keyDownSpaceButton: keyDownSpaceButton,\n  clickButton: clickButton,\n  blurButton: blurButton,\n  controlledPropUpdatedSelectedItem: controlledPropUpdatedSelectedItem,\n  touchEnd: touchEnd\n});\n\nvar _excluded$4 = [\"refKey\", \"ref\"],\n  _excluded2$3 = [\"onClick\", \"onPress\", \"onKeyDown\", \"onKeyUp\", \"onBlur\"],\n  _excluded3$2 = [\"onKeyDown\", \"onBlur\", \"onChange\", \"onInput\", \"onChangeText\"],\n  _excluded4$1 = [\"refKey\", \"ref\"],\n  _excluded5 = [\"onMouseMove\", \"onMouseDown\", \"onClick\", \"onPress\", \"index\", \"item\"];\nvar Downshift = /*#__PURE__*/function () {\n  var Downshift = /*#__PURE__*/function (_Component) {\n    _inheritsLoose(Downshift, _Component);\n    function Downshift(_props) {\n      var _this;\n      _this = _Component.call(this, _props) || this;\n      // fancy destructuring + defaults + aliases\n      // this basically says each value of state should either be set to\n      // the initial value or the default value if the initial value is not provided\n      _this.id = _this.props.id || \"downshift-\" + generateId();\n      _this.menuId = _this.props.menuId || _this.id + \"-menu\";\n      _this.labelId = _this.props.labelId || _this.id + \"-label\";\n      _this.inputId = _this.props.inputId || _this.id + \"-input\";\n      _this.getItemId = _this.props.getItemId || function (index) {\n        return _this.id + \"-item-\" + index;\n      };\n      _this.items = [];\n      // itemCount can be changed asynchronously\n      // from within downshift (so it can't come from a prop)\n      // this is why we store it as an instance and use\n      // getItemCount rather than just use items.length\n      // (to support windowing + async)\n      _this.itemCount = null;\n      _this.previousResultCount = 0;\n      _this.timeoutIds = [];\n      /**\n       * @param {Function} fn the function to call after the time\n       * @param {Number} time the time to wait\n       */\n      _this.internalSetTimeout = function (fn, time) {\n        var id = setTimeout(function () {\n          _this.timeoutIds = _this.timeoutIds.filter(function (i) {\n            return i !== id;\n          });\n          fn();\n        }, time);\n        _this.timeoutIds.push(id);\n      };\n      _this.setItemCount = function (count) {\n        _this.itemCount = count;\n      };\n      _this.unsetItemCount = function () {\n        _this.itemCount = null;\n      };\n      _this.isItemDisabled = function (_item, index) {\n        var currentElementNode = _this.getItemNodeFromIndex(index);\n        return currentElementNode && currentElementNode.hasAttribute('disabled');\n      };\n      _this.setHighlightedIndex = function (highlightedIndex, otherStateToSet) {\n        if (highlightedIndex === void 0) {\n          highlightedIndex = _this.props.defaultHighlightedIndex;\n        }\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n        otherStateToSet = pickState(otherStateToSet);\n        _this.internalSetState(_extends({\n          highlightedIndex: highlightedIndex\n        }, otherStateToSet));\n      };\n      _this.clearSelection = function (cb) {\n        _this.internalSetState({\n          selectedItem: null,\n          inputValue: '',\n          highlightedIndex: _this.props.defaultHighlightedIndex,\n          isOpen: _this.props.defaultIsOpen\n        }, cb);\n      };\n      _this.selectItem = function (item, otherStateToSet, cb) {\n        otherStateToSet = pickState(otherStateToSet);\n        _this.internalSetState(_extends({\n          isOpen: _this.props.defaultIsOpen,\n          highlightedIndex: _this.props.defaultHighlightedIndex,\n          selectedItem: item,\n          inputValue: _this.props.itemToString(item)\n        }, otherStateToSet), cb);\n      };\n      _this.selectItemAtIndex = function (itemIndex, otherStateToSet, cb) {\n        var item = _this.items[itemIndex];\n        if (item == null) {\n          return;\n        }\n        _this.selectItem(item, otherStateToSet, cb);\n      };\n      _this.selectHighlightedItem = function (otherStateToSet, cb) {\n        return _this.selectItemAtIndex(_this.getState().highlightedIndex, otherStateToSet, cb);\n      };\n      // any piece of our state can live in two places:\n      // 1. Uncontrolled: it's internal (this.state)\n      //    We will call this.setState to update that state\n      // 2. Controlled: it's external (this.props)\n      //    We will call this.props.onStateChange to update that state\n      //\n      // In addition, we'll call this.props.onChange if the\n      // selectedItem is changed.\n      _this.internalSetState = function (stateToSet, cb) {\n        var isItemSelected, onChangeArg;\n        var onStateChangeArg = {};\n        var isStateToSetFunction = typeof stateToSet === 'function';\n\n        // we want to call `onInputValueChange` before the `setState` call\n        // so someone controlling the `inputValue` state gets notified of\n        // the input change as soon as possible. This avoids issues with\n        // preserving the cursor position.\n        // See https://github.com/downshift-js/downshift/issues/217 for more info.\n        if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n          _this.props.onInputValueChange(stateToSet.inputValue, _extends({}, _this.getStateAndHelpers(), stateToSet));\n        }\n        return _this.setState(function (state) {\n          var _newStateToSet;\n          state = _this.getState(state);\n          var newStateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet;\n\n          // Your own function that could modify the state that will be set.\n          newStateToSet = _this.props.stateReducer(state, newStateToSet);\n\n          // checks if an item is selected, regardless of if it's different from\n          // what was selected before\n          // used to determine if onSelect and onChange callbacks should be called\n          isItemSelected = newStateToSet.hasOwnProperty('selectedItem');\n          // this keeps track of the object we want to call with setState\n          var nextState = {};\n          // we need to call on change if the outside world is controlling any of our state\n          // and we're trying to update that state. OR if the selection has changed and we're\n          // trying to update the selection\n          if (isItemSelected && newStateToSet.selectedItem !== state.selectedItem) {\n            onChangeArg = newStateToSet.selectedItem;\n          }\n          (_newStateToSet = newStateToSet).type || (_newStateToSet.type = unknown);\n          Object.keys(newStateToSet).forEach(function (key) {\n            // onStateChangeArg should only have the state that is\n            // actually changing\n            if (state[key] !== newStateToSet[key]) {\n              onStateChangeArg[key] = newStateToSet[key];\n            }\n            // the type is useful for the onStateChangeArg\n            // but we don't actually want to set it in internal state.\n            // this is an undocumented feature for now... Not all internalSetState\n            // calls support it and I'm not certain we want them to yet.\n            // But it enables users controlling the isOpen state to know when\n            // the isOpen state changes due to mouseup events which is quite handy.\n            if (key === 'type') {\n              return;\n            }\n            newStateToSet[key];\n            // if it's coming from props, then we don't care to set it internally\n            if (!isControlledProp(_this.props, key)) {\n              nextState[key] = newStateToSet[key];\n            }\n          });\n\n          // if stateToSet is a function, then we weren't able to call onInputValueChange\n          // earlier, so we'll call it now that we know what the inputValue state will be.\n          if (isStateToSetFunction && newStateToSet.hasOwnProperty('inputValue')) {\n            _this.props.onInputValueChange(newStateToSet.inputValue, _extends({}, _this.getStateAndHelpers(), newStateToSet));\n          }\n          return nextState;\n        }, function () {\n          // call the provided callback if it's a function\n          cbToCb(cb)();\n\n          // only call the onStateChange and onChange callbacks if\n          // we have relevant information to pass them.\n          var hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1;\n          if (hasMoreStateThanType) {\n            _this.props.onStateChange(onStateChangeArg, _this.getStateAndHelpers());\n          }\n          if (isItemSelected) {\n            _this.props.onSelect(stateToSet.selectedItem, _this.getStateAndHelpers());\n          }\n          if (onChangeArg !== undefined) {\n            _this.props.onChange(onChangeArg, _this.getStateAndHelpers());\n          }\n          // this is currently undocumented and therefore subject to change\n          // We'll try to not break it, but just be warned.\n          _this.props.onUserAction(onStateChangeArg, _this.getStateAndHelpers());\n        });\n      };\n      //////////////////////////// ROOT\n      _this.rootRef = function (node) {\n        return _this._rootNode = node;\n      };\n      _this.getRootProps = function (_temp, _temp2) {\n        var _extends2;\n        var _ref = _temp === void 0 ? {} : _temp,\n          _ref$refKey = _ref.refKey,\n          refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,\n          ref = _ref.ref,\n          rest = _objectWithoutPropertiesLoose(_ref, _excluded$4);\n        var _ref2 = _temp2 === void 0 ? {} : _temp2,\n          _ref2$suppressRefErro = _ref2.suppressRefError,\n          suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;\n        // this is used in the render to know whether the user has called getRootProps.\n        // It uses that to know whether to apply the props automatically\n        _this.getRootProps.called = true;\n        _this.getRootProps.refKey = refKey;\n        _this.getRootProps.suppressRefError = suppressRefError;\n        var _this$getState = _this.getState(),\n          isOpen = _this$getState.isOpen;\n        return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, _this.rootRef), _extends2.role = 'combobox', _extends2['aria-expanded'] = isOpen, _extends2['aria-haspopup'] = 'listbox', _extends2['aria-owns'] = isOpen ? _this.menuId : undefined, _extends2['aria-labelledby'] = _this.labelId, _extends2), rest);\n      };\n      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n      _this.keyDownHandlers = {\n        ArrowDown: function ArrowDown(event) {\n          var _this2 = this;\n          event.preventDefault();\n          if (this.getState().isOpen) {\n            var amount = event.shiftKey ? 5 : 1;\n            this.moveHighlightedIndex(amount, {\n              type: keyDownArrowDown\n            });\n          } else {\n            this.internalSetState({\n              isOpen: true,\n              type: keyDownArrowDown\n            }, function () {\n              var itemCount = _this2.getItemCount();\n              if (itemCount > 0) {\n                var _this2$getState = _this2.getState(),\n                  highlightedIndex = _this2$getState.highlightedIndex;\n                var nextHighlightedIndex = getHighlightedIndex(highlightedIndex, 1, {\n                  length: itemCount\n                }, _this2.isItemDisabled, true);\n                _this2.setHighlightedIndex(nextHighlightedIndex, {\n                  type: keyDownArrowDown\n                });\n              }\n            });\n          }\n        },\n        ArrowUp: function ArrowUp(event) {\n          var _this3 = this;\n          event.preventDefault();\n          if (this.getState().isOpen) {\n            var amount = event.shiftKey ? -5 : -1;\n            this.moveHighlightedIndex(amount, {\n              type: keyDownArrowUp\n            });\n          } else {\n            this.internalSetState({\n              isOpen: true,\n              type: keyDownArrowUp\n            }, function () {\n              var itemCount = _this3.getItemCount();\n              if (itemCount > 0) {\n                var _this3$getState = _this3.getState(),\n                  highlightedIndex = _this3$getState.highlightedIndex;\n                var nextHighlightedIndex = getHighlightedIndex(highlightedIndex, -1, {\n                  length: itemCount\n                }, _this3.isItemDisabled, true);\n                _this3.setHighlightedIndex(nextHighlightedIndex, {\n                  type: keyDownArrowUp\n                });\n              }\n            });\n          }\n        },\n        Enter: function Enter(event) {\n          if (event.which === 229) {\n            return;\n          }\n          var _this$getState2 = this.getState(),\n            isOpen = _this$getState2.isOpen,\n            highlightedIndex = _this$getState2.highlightedIndex;\n          if (isOpen && highlightedIndex != null) {\n            event.preventDefault();\n            var item = this.items[highlightedIndex];\n            var itemNode = this.getItemNodeFromIndex(highlightedIndex);\n            if (item == null || itemNode && itemNode.hasAttribute('disabled')) {\n              return;\n            }\n            this.selectHighlightedItem({\n              type: keyDownEnter\n            });\n          }\n        },\n        Escape: function Escape(event) {\n          event.preventDefault();\n          this.reset(_extends({\n            type: keyDownEscape\n          }, !this.state.isOpen && {\n            selectedItem: null,\n            inputValue: ''\n          }));\n        }\n      };\n      //////////////////////////// BUTTON\n      _this.buttonKeyDownHandlers = _extends({}, _this.keyDownHandlers, {\n        ' ': function _(event) {\n          event.preventDefault();\n          this.toggleMenu({\n            type: keyDownSpaceButton\n          });\n        }\n      });\n      _this.inputKeyDownHandlers = _extends({}, _this.keyDownHandlers, {\n        Home: function Home(event) {\n          var _this$getState3 = this.getState(),\n            isOpen = _this$getState3.isOpen;\n          if (!isOpen) {\n            return;\n          }\n          event.preventDefault();\n          var itemCount = this.getItemCount();\n          if (itemCount <= 0 || !isOpen) {\n            return;\n          }\n\n          // get next non-disabled starting downwards from 0 if that's disabled.\n          var newHighlightedIndex = getNonDisabledIndex(0, false, {\n            length: itemCount\n          }, this.isItemDisabled);\n          this.setHighlightedIndex(newHighlightedIndex, {\n            type: keyDownHome\n          });\n        },\n        End: function End(event) {\n          var _this$getState4 = this.getState(),\n            isOpen = _this$getState4.isOpen;\n          if (!isOpen) {\n            return;\n          }\n          event.preventDefault();\n          var itemCount = this.getItemCount();\n          if (itemCount <= 0 || !isOpen) {\n            return;\n          }\n\n          // get next non-disabled starting upwards from last index if that's disabled.\n          var newHighlightedIndex = getNonDisabledIndex(itemCount - 1, true, {\n            length: itemCount\n          }, this.isItemDisabled);\n          this.setHighlightedIndex(newHighlightedIndex, {\n            type: keyDownEnd\n          });\n        }\n      });\n      _this.getToggleButtonProps = function (_temp3) {\n        var _ref3 = _temp3 === void 0 ? {} : _temp3,\n          onClick = _ref3.onClick;\n          _ref3.onPress;\n          var onKeyDown = _ref3.onKeyDown,\n          onKeyUp = _ref3.onKeyUp,\n          onBlur = _ref3.onBlur,\n          rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$3);\n        var _this$getState5 = _this.getState(),\n          isOpen = _this$getState5.isOpen;\n        var enabledEventHandlers = {\n          onClick: callAllEventHandlers(onClick, _this.buttonHandleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, _this.buttonHandleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, _this.buttonHandleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, _this.buttonHandleBlur)\n        };\n        var eventHandlers = rest.disabled ? {} : enabledEventHandlers;\n        return _extends({\n          type: 'button',\n          role: 'button',\n          'aria-label': isOpen ? 'close menu' : 'open menu',\n          'aria-haspopup': true,\n          'data-toggle': true\n        }, eventHandlers, rest);\n      };\n      _this.buttonHandleKeyUp = function (event) {\n        // Prevent click event from emitting in Firefox\n        event.preventDefault();\n      };\n      _this.buttonHandleKeyDown = function (event) {\n        var key = normalizeArrowKey(event);\n        if (_this.buttonKeyDownHandlers[key]) {\n          _this.buttonKeyDownHandlers[key].call(_assertThisInitialized(_this), event);\n        }\n      };\n      _this.buttonHandleClick = function (event) {\n        event.preventDefault();\n        // handle odd case for Safari and Firefox which\n        // don't give the button the focus properly.\n        /* istanbul ignore if (can't reasonably test this) */\n        if (_this.props.environment) {\n          var _this$props$environme = _this.props.environment.document,\n            body = _this$props$environme.body,\n            activeElement = _this$props$environme.activeElement;\n          if (body && body === activeElement) {\n            event.target.focus();\n          }\n        }\n        // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n        // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n        // when building for production and should therefore have no impact on production code.\n        if (process.env.NODE_ENV === 'test') {\n          _this.toggleMenu({\n            type: clickButton\n          });\n        } else {\n          // Ensure that toggle of menu occurs after the potential blur event in iOS\n          _this.internalSetTimeout(function () {\n            return _this.toggleMenu({\n              type: clickButton\n            });\n          });\n        }\n      };\n      _this.buttonHandleBlur = function (event) {\n        var blurTarget = event.target; // Save blur target for comparison with activeElement later\n        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n        _this.internalSetTimeout(function () {\n          if (_this.isMouseDown || !_this.props.environment) {\n            return;\n          }\n          var activeElement = _this.props.environment.document.activeElement;\n          if ((activeElement == null || activeElement.id !== _this.inputId) && activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n          ) {\n            _this.reset({\n              type: blurButton\n            });\n          }\n        });\n      };\n      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n      /////////////////////////////// LABEL\n      _this.getLabelProps = function (props) {\n        return _extends({\n          htmlFor: _this.inputId,\n          id: _this.labelId\n        }, props);\n      };\n      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n      /////////////////////////////// INPUT\n      _this.getInputProps = function (_temp4) {\n        var _ref4 = _temp4 === void 0 ? {} : _temp4,\n          onKeyDown = _ref4.onKeyDown,\n          onBlur = _ref4.onBlur,\n          onChange = _ref4.onChange,\n          onInput = _ref4.onInput;\n          _ref4.onChangeText;\n          var rest = _objectWithoutPropertiesLoose(_ref4, _excluded3$2);\n        var onChangeKey;\n        var eventHandlers = {};\n\n        /* istanbul ignore next (preact) */\n        {\n          onChangeKey = 'onChange';\n        }\n        var _this$getState6 = _this.getState(),\n          inputValue = _this$getState6.inputValue,\n          isOpen = _this$getState6.isOpen,\n          highlightedIndex = _this$getState6.highlightedIndex;\n        if (!rest.disabled) {\n          var _eventHandlers;\n          eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, _this.inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, _this.inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, _this.inputHandleBlur), _eventHandlers);\n        }\n        return _extends({\n          'aria-autocomplete': 'list',\n          'aria-activedescendant': isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0 ? _this.getItemId(highlightedIndex) : undefined,\n          'aria-controls': isOpen ? _this.menuId : undefined,\n          'aria-labelledby': rest && rest['aria-label'] ? undefined : _this.labelId,\n          // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n          // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n          autoComplete: 'off',\n          value: inputValue,\n          id: _this.inputId\n        }, eventHandlers, rest);\n      };\n      _this.inputHandleKeyDown = function (event) {\n        var key = normalizeArrowKey(event);\n        if (key && _this.inputKeyDownHandlers[key]) {\n          _this.inputKeyDownHandlers[key].call(_assertThisInitialized(_this), event);\n        }\n      };\n      _this.inputHandleChange = function (event) {\n        _this.internalSetState({\n          type: changeInput,\n          isOpen: true,\n          inputValue: event.target.value,\n          highlightedIndex: _this.props.defaultHighlightedIndex\n        });\n      };\n      _this.inputHandleBlur = function () {\n        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n        _this.internalSetTimeout(function () {\n          var _activeElement$datase;\n          if (_this.isMouseDown || !_this.props.environment) {\n            return;\n          }\n          var activeElement = _this.props.environment.document.activeElement;\n          var downshiftButtonIsActive = (activeElement == null || (_activeElement$datase = activeElement.dataset) == null ? void 0 : _activeElement$datase.toggle) && _this._rootNode && _this._rootNode.contains(activeElement);\n          if (!downshiftButtonIsActive) {\n            _this.reset({\n              type: blurInput\n            });\n          }\n        });\n      };\n      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n      /////////////////////////////// MENU\n      _this.menuRef = function (node) {\n        _this._menuNode = node;\n      };\n      _this.getMenuProps = function (_temp5, _temp6) {\n        var _extends3;\n        var _ref5 = _temp5 === void 0 ? {} : _temp5,\n          _ref5$refKey = _ref5.refKey,\n          refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,\n          ref = _ref5.ref,\n          props = _objectWithoutPropertiesLoose(_ref5, _excluded4$1);\n        var _ref6 = _temp6 === void 0 ? {} : _temp6,\n          _ref6$suppressRefErro = _ref6.suppressRefError,\n          suppressRefError = _ref6$suppressRefErro === void 0 ? false : _ref6$suppressRefErro;\n        _this.getMenuProps.called = true;\n        _this.getMenuProps.refKey = refKey;\n        _this.getMenuProps.suppressRefError = suppressRefError;\n        return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, _this.menuRef), _extends3.role = 'listbox', _extends3['aria-labelledby'] = props && props['aria-label'] ? undefined : _this.labelId, _extends3.id = _this.menuId, _extends3), props);\n      };\n      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MENU\n      /////////////////////////////// ITEM\n      _this.getItemProps = function (_temp7) {\n        var _enabledEventHandlers;\n        var _ref7 = _temp7 === void 0 ? {} : _temp7,\n          onMouseMove = _ref7.onMouseMove,\n          onMouseDown = _ref7.onMouseDown,\n          onClick = _ref7.onClick;\n          _ref7.onPress;\n          var index = _ref7.index,\n          _ref7$item = _ref7.item,\n          item = _ref7$item === void 0 ? process.env.NODE_ENV === 'production' ? /* istanbul ignore next */undefined : requiredProp('getItemProps', 'item') : _ref7$item,\n          rest = _objectWithoutPropertiesLoose(_ref7, _excluded5);\n        if (index === undefined) {\n          _this.items.push(item);\n          index = _this.items.indexOf(item);\n        } else {\n          _this.items[index] = item;\n        }\n        var onSelectKey = 'onClick';\n        var customClickHandler = onClick;\n        var enabledEventHandlers = (_enabledEventHandlers = {\n          // onMouseMove is used over onMouseEnter here. onMouseMove\n          // is only triggered on actual mouse movement while onMouseEnter\n          // can fire on DOM changes, interrupting keyboard navigation\n          onMouseMove: callAllEventHandlers(onMouseMove, function () {\n            if (index === _this.getState().highlightedIndex) {\n              return;\n            }\n            _this.setHighlightedIndex(index, {\n              type: itemMouseEnter\n            });\n\n            // We never want to manually scroll when changing state based\n            // on `onMouseMove` because we will be moving the element out\n            // from under the user which is currently scrolling/moving the\n            // cursor\n            _this.avoidScrolling = true;\n            _this.internalSetTimeout(function () {\n              return _this.avoidScrolling = false;\n            }, 250);\n          }),\n          onMouseDown: callAllEventHandlers(onMouseDown, function (event) {\n            // This prevents the activeElement from being changed\n            // to the item so it can remain with the current activeElement\n            // which is a more common use case.\n            event.preventDefault();\n          })\n        }, _enabledEventHandlers[onSelectKey] = callAllEventHandlers(customClickHandler, function () {\n          _this.selectItemAtIndex(index, {\n            type: clickItem\n          });\n        }), _enabledEventHandlers);\n\n        // Passing down the onMouseDown handler to prevent redirect\n        // of the activeElement if clicking on disabled items\n        var eventHandlers = rest.disabled ? {\n          onMouseDown: enabledEventHandlers.onMouseDown\n        } : enabledEventHandlers;\n        return _extends({\n          id: _this.getItemId(index),\n          role: 'option',\n          'aria-selected': _this.getState().highlightedIndex === index\n        }, eventHandlers, rest);\n      };\n      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n      _this.clearItems = function () {\n        _this.items = [];\n      };\n      _this.reset = function (otherStateToSet, cb) {\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n        otherStateToSet = pickState(otherStateToSet);\n        _this.internalSetState(function (_ref8) {\n          var selectedItem = _ref8.selectedItem;\n          return _extends({\n            isOpen: _this.props.defaultIsOpen,\n            highlightedIndex: _this.props.defaultHighlightedIndex,\n            inputValue: _this.props.itemToString(selectedItem)\n          }, otherStateToSet);\n        }, cb);\n      };\n      _this.toggleMenu = function (otherStateToSet, cb) {\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n        otherStateToSet = pickState(otherStateToSet);\n        _this.internalSetState(function (_ref9) {\n          var isOpen = _ref9.isOpen;\n          return _extends({\n            isOpen: !isOpen\n          }, isOpen && {\n            highlightedIndex: _this.props.defaultHighlightedIndex\n          }, otherStateToSet);\n        }, function () {\n          var _this$getState7 = _this.getState(),\n            isOpen = _this$getState7.isOpen,\n            highlightedIndex = _this$getState7.highlightedIndex;\n          if (isOpen) {\n            if (_this.getItemCount() > 0 && typeof highlightedIndex === 'number') {\n              _this.setHighlightedIndex(highlightedIndex, otherStateToSet);\n            }\n          }\n          cbToCb(cb)();\n        });\n      };\n      _this.openMenu = function (cb) {\n        _this.internalSetState({\n          isOpen: true\n        }, cb);\n      };\n      _this.closeMenu = function (cb) {\n        _this.internalSetState({\n          isOpen: false\n        }, cb);\n      };\n      _this.updateStatus = debounce(function () {\n        var _this$props;\n        if (!((_this$props = _this.props) != null && (_this$props = _this$props.environment) != null && _this$props.document)) {\n          return;\n        }\n        var state = _this.getState();\n        var item = _this.items[state.highlightedIndex];\n        var resultCount = _this.getItemCount();\n        var status = _this.props.getA11yStatusMessage(_extends({\n          itemToString: _this.props.itemToString,\n          previousResultCount: _this.previousResultCount,\n          resultCount: resultCount,\n          highlightedItem: item\n        }, state));\n        _this.previousResultCount = resultCount;\n        setStatus(status, _this.props.environment.document);\n      }, 200);\n      var _this$props2 = _this.props,\n        defaultHighlightedIndex = _this$props2.defaultHighlightedIndex,\n        _this$props2$initialH = _this$props2.initialHighlightedIndex,\n        _highlightedIndex = _this$props2$initialH === void 0 ? defaultHighlightedIndex : _this$props2$initialH,\n        defaultIsOpen = _this$props2.defaultIsOpen,\n        _this$props2$initialI = _this$props2.initialIsOpen,\n        _isOpen = _this$props2$initialI === void 0 ? defaultIsOpen : _this$props2$initialI,\n        _this$props2$initialI2 = _this$props2.initialInputValue,\n        _inputValue = _this$props2$initialI2 === void 0 ? '' : _this$props2$initialI2,\n        _this$props2$initialS = _this$props2.initialSelectedItem,\n        _selectedItem = _this$props2$initialS === void 0 ? null : _this$props2$initialS;\n      var _state = _this.getState({\n        highlightedIndex: _highlightedIndex,\n        isOpen: _isOpen,\n        inputValue: _inputValue,\n        selectedItem: _selectedItem\n      });\n      if (_state.selectedItem != null && _this.props.initialInputValue === undefined) {\n        _state.inputValue = _this.props.itemToString(_state.selectedItem);\n      }\n      _this.state = _state;\n      return _this;\n    }\n    var _proto = Downshift.prototype;\n    /**\n     * Clear all running timeouts\n     */\n    _proto.internalClearTimeouts = function internalClearTimeouts() {\n      this.timeoutIds.forEach(function (id) {\n        clearTimeout(id);\n      });\n      this.timeoutIds = [];\n    }\n\n    /**\n     * Gets the state based on internal state or props\n     * If a state value is passed via props, then that\n     * is the value given, otherwise it's retrieved from\n     * stateToMerge\n     *\n     * @param {Object} stateToMerge defaults to this.state\n     * @return {Object} the state\n     */;\n    _proto.getState = function getState$1(stateToMerge) {\n      if (stateToMerge === void 0) {\n        stateToMerge = this.state;\n      }\n      return getState(stateToMerge, this.props);\n    };\n    _proto.getItemCount = function getItemCount() {\n      // things read better this way. They're in priority order:\n      // 1. `this.itemCount`\n      // 2. `this.props.itemCount`\n      // 3. `this.items.length`\n      var itemCount = this.items.length;\n      if (this.itemCount != null) {\n        itemCount = this.itemCount;\n      } else if (this.props.itemCount !== undefined) {\n        itemCount = this.props.itemCount;\n      }\n      return itemCount;\n    };\n    _proto.getItemNodeFromIndex = function getItemNodeFromIndex(index) {\n      return this.props.environment ? this.props.environment.document.getElementById(this.getItemId(index)) : null;\n    };\n    _proto.scrollHighlightedItemIntoView = function scrollHighlightedItemIntoView() {\n      /* istanbul ignore else (react-native) */\n      {\n        var node = this.getItemNodeFromIndex(this.getState().highlightedIndex);\n        this.props.scrollIntoView(node, this._menuNode);\n      }\n    };\n    _proto.moveHighlightedIndex = function moveHighlightedIndex(amount, otherStateToSet) {\n      var itemCount = this.getItemCount();\n      var _this$getState8 = this.getState(),\n        highlightedIndex = _this$getState8.highlightedIndex;\n      if (itemCount > 0) {\n        var nextHighlightedIndex = getHighlightedIndex(highlightedIndex, amount, {\n          length: itemCount\n        }, this.isItemDisabled, true);\n        this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet);\n      }\n    };\n    _proto.getStateAndHelpers = function getStateAndHelpers() {\n      var _this$getState9 = this.getState(),\n        highlightedIndex = _this$getState9.highlightedIndex,\n        inputValue = _this$getState9.inputValue,\n        selectedItem = _this$getState9.selectedItem,\n        isOpen = _this$getState9.isOpen;\n      var itemToString = this.props.itemToString;\n      var id = this.id;\n      var getRootProps = this.getRootProps,\n        getToggleButtonProps = this.getToggleButtonProps,\n        getLabelProps = this.getLabelProps,\n        getMenuProps = this.getMenuProps,\n        getInputProps = this.getInputProps,\n        getItemProps = this.getItemProps,\n        openMenu = this.openMenu,\n        closeMenu = this.closeMenu,\n        toggleMenu = this.toggleMenu,\n        selectItem = this.selectItem,\n        selectItemAtIndex = this.selectItemAtIndex,\n        selectHighlightedItem = this.selectHighlightedItem,\n        setHighlightedIndex = this.setHighlightedIndex,\n        clearSelection = this.clearSelection,\n        clearItems = this.clearItems,\n        reset = this.reset,\n        setItemCount = this.setItemCount,\n        unsetItemCount = this.unsetItemCount,\n        setState = this.internalSetState;\n      return {\n        // prop getters\n        getRootProps: getRootProps,\n        getToggleButtonProps: getToggleButtonProps,\n        getLabelProps: getLabelProps,\n        getMenuProps: getMenuProps,\n        getInputProps: getInputProps,\n        getItemProps: getItemProps,\n        // actions\n        reset: reset,\n        openMenu: openMenu,\n        closeMenu: closeMenu,\n        toggleMenu: toggleMenu,\n        selectItem: selectItem,\n        selectItemAtIndex: selectItemAtIndex,\n        selectHighlightedItem: selectHighlightedItem,\n        setHighlightedIndex: setHighlightedIndex,\n        clearSelection: clearSelection,\n        clearItems: clearItems,\n        setItemCount: setItemCount,\n        unsetItemCount: unsetItemCount,\n        setState: setState,\n        // props\n        itemToString: itemToString,\n        // derived\n        id: id,\n        // state\n        highlightedIndex: highlightedIndex,\n        inputValue: inputValue,\n        isOpen: isOpen,\n        selectedItem: selectedItem\n      };\n    };\n    _proto.componentDidMount = function componentDidMount() {\n      var _this4 = this;\n      /* istanbul ignore if (react-native) */\n      if (process.env.NODE_ENV !== 'production' && !false && this.getMenuProps.called && !this.getMenuProps.suppressRefError) {\n        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);\n      }\n\n      /* istanbul ignore if (react-native or SSR) */\n      if (!this.props.environment) {\n        this.cleanup = function () {\n          _this4.internalClearTimeouts();\n        };\n      } else {\n        // this.isMouseDown helps us track whether the mouse is currently held down.\n        // This is useful when the user clicks on an item in the list, but holds the mouse\n        // down long enough for the list to disappear (because the blur event fires on the input)\n        // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n        // trigger hiding the menu.\n        var onMouseDown = function onMouseDown() {\n          _this4.isMouseDown = true;\n        };\n        var onMouseUp = function onMouseUp(event) {\n          _this4.isMouseDown = false;\n          // if the target element or the activeElement is within a downshift node\n          // then we don't want to reset downshift\n          var contextWithinDownshift = targetWithinDownshift(event.target, [_this4._rootNode, _this4._menuNode], _this4.props.environment);\n          if (!contextWithinDownshift && _this4.getState().isOpen) {\n            _this4.reset({\n              type: mouseUp\n            }, function () {\n              return _this4.props.onOuterClick(_this4.getStateAndHelpers());\n            });\n          }\n        };\n        // Touching an element in iOS gives focus and hover states, but touching out of\n        // the element will remove hover, and persist the focus state, resulting in the\n        // blur event not being triggered.\n        // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.\n        // If the user taps outside of Downshift, the component should be reset,\n        // but not if the user is swiping\n        var onTouchStart = function onTouchStart() {\n          _this4.isTouchMove = false;\n        };\n        var onTouchMove = function onTouchMove() {\n          _this4.isTouchMove = true;\n        };\n        var onTouchEnd = function onTouchEnd(event) {\n          var contextWithinDownshift = targetWithinDownshift(event.target, [_this4._rootNode, _this4._menuNode], _this4.props.environment, false);\n          if (!_this4.isTouchMove && !contextWithinDownshift && _this4.getState().isOpen) {\n            _this4.reset({\n              type: touchEnd\n            }, function () {\n              return _this4.props.onOuterClick(_this4.getStateAndHelpers());\n            });\n          }\n        };\n        var environment = this.props.environment;\n        environment.addEventListener('mousedown', onMouseDown);\n        environment.addEventListener('mouseup', onMouseUp);\n        environment.addEventListener('touchstart', onTouchStart);\n        environment.addEventListener('touchmove', onTouchMove);\n        environment.addEventListener('touchend', onTouchEnd);\n        this.cleanup = function () {\n          _this4.internalClearTimeouts();\n          _this4.updateStatus.cancel();\n          environment.removeEventListener('mousedown', onMouseDown);\n          environment.removeEventListener('mouseup', onMouseUp);\n          environment.removeEventListener('touchstart', onTouchStart);\n          environment.removeEventListener('touchmove', onTouchMove);\n          environment.removeEventListener('touchend', onTouchEnd);\n        };\n      }\n    };\n    _proto.shouldScroll = function shouldScroll(prevState, prevProps) {\n      var _ref10 = this.props.highlightedIndex === undefined ? this.getState() : this.props,\n        currentHighlightedIndex = _ref10.highlightedIndex;\n      var _ref11 = prevProps.highlightedIndex === undefined ? prevState : prevProps,\n        prevHighlightedIndex = _ref11.highlightedIndex;\n      var scrollWhenOpen = currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen;\n      var scrollWhenNavigating = currentHighlightedIndex !== prevHighlightedIndex;\n      return scrollWhenOpen || scrollWhenNavigating;\n    };\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateControlledUnchanged(this.state, prevProps, this.props);\n        /* istanbul ignore if (react-native) */\n        if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {\n          validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);\n        }\n      }\n      if (isControlledProp(this.props, 'selectedItem') && this.props.selectedItemChanged(prevProps.selectedItem, this.props.selectedItem)) {\n        this.internalSetState({\n          type: controlledPropUpdatedSelectedItem,\n          inputValue: this.props.itemToString(this.props.selectedItem)\n        });\n      }\n      if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {\n        this.scrollHighlightedItemIntoView();\n      }\n\n      /* istanbul ignore else (react-native) */\n      {\n        this.updateStatus();\n      }\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this.cleanup(); // avoids memory leak\n    };\n    _proto.render = function render() {\n      var children = unwrapArray(this.props.children, noop);\n      // because the items are rerendered every time we call the children\n      // we clear this out each render and it will be populated again as\n      // getItemProps is called.\n      this.clearItems();\n      // we reset this so we know whether the user calls getRootProps during\n      // this render. If they do then we don't need to do anything,\n      // if they don't then we need to clone the element they return and\n      // apply the props for them.\n      this.getRootProps.called = false;\n      this.getRootProps.refKey = undefined;\n      this.getRootProps.suppressRefError = undefined;\n      // we do something similar for getMenuProps\n      this.getMenuProps.called = false;\n      this.getMenuProps.refKey = undefined;\n      this.getMenuProps.suppressRefError = undefined;\n      // we do something similar for getLabelProps\n      this.getLabelProps.called = false;\n      // and something similar for getInputProps\n      this.getInputProps.called = false;\n      var element = unwrapArray(children(this.getStateAndHelpers()));\n      if (!element) {\n        return null;\n      }\n      if (this.getRootProps.called || this.props.suppressRefError) {\n        if (process.env.NODE_ENV !== 'production' && !this.getRootProps.suppressRefError && !this.props.suppressRefError) {\n          validateGetRootPropsCalledCorrectly(element, this.getRootProps);\n        }\n        return element;\n      } else if (isDOMElement(element)) {\n        // they didn't apply the root props, but we can clone\n        // this and apply the props ourselves\n        return /*#__PURE__*/cloneElement(element, this.getRootProps(getElementProps(element)));\n      }\n\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        // they didn't apply the root props, but they need to\n        // otherwise we can't query around the autocomplete\n\n        throw new Error('downshift: If you return a non-DOM element, you must apply the getRootProps function');\n      }\n\n      /* istanbul ignore next */\n      return undefined;\n    };\n    return Downshift;\n  }(Component);\n  Downshift.defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultIsOpen: false,\n    getA11yStatusMessage: getA11yStatusMessage$1,\n    itemToString: function itemToString(i) {\n      if (i == null) {\n        return '';\n      }\n      if (process.env.NODE_ENV !== 'production' && isPlainObject(i) && !i.hasOwnProperty('toString')) {\n        // eslint-disable-next-line no-console\n        console.warn('downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.', 'The object that was passed:', i);\n      }\n      return String(i);\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: function selectedItemChanged(prevItem, item) {\n      return prevItem !== item;\n    },\n    environment: /* istanbul ignore next (ssr) */\n    typeof window === 'undefined' || false ? undefined : window,\n    stateReducer: function stateReducer(state, stateToSet) {\n      return stateToSet;\n    },\n    suppressRefError: false,\n    scrollIntoView: scrollIntoView\n  };\n  Downshift.stateChangeTypes = stateChangeTypes$3;\n  return Downshift;\n}();\nprocess.env.NODE_ENV !== \"production\" ? Downshift.propTypes = {\n  children: PropTypes.func,\n  defaultHighlightedIndex: PropTypes.number,\n  defaultIsOpen: PropTypes.bool,\n  initialHighlightedIndex: PropTypes.number,\n  initialSelectedItem: PropTypes.any,\n  initialInputValue: PropTypes.string,\n  initialIsOpen: PropTypes.bool,\n  getA11yStatusMessage: PropTypes.func,\n  itemToString: PropTypes.func,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  onUserAction: PropTypes.func,\n  onOuterClick: PropTypes.func,\n  selectedItemChanged: PropTypes.func,\n  stateReducer: PropTypes.func,\n  itemCount: PropTypes.number,\n  id: PropTypes.string,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func.isRequired,\n    removeEventListener: PropTypes.func.isRequired,\n    document: PropTypes.shape({\n      createElement: PropTypes.func.isRequired,\n      getElementById: PropTypes.func.isRequired,\n      activeElement: PropTypes.any.isRequired,\n      body: PropTypes.any.isRequired\n    }).isRequired,\n    Node: PropTypes.func.isRequired\n  }),\n  suppressRefError: PropTypes.bool,\n  scrollIntoView: PropTypes.func,\n  // things we keep in state for uncontrolled components\n  // but can accept as props for controlled components\n  /* eslint-disable react/no-unused-prop-types */\n  selectedItem: PropTypes.any,\n  isOpen: PropTypes.bool,\n  inputValue: PropTypes.string,\n  highlightedIndex: PropTypes.number,\n  labelId: PropTypes.string,\n  inputId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func\n  /* eslint-enable react/no-unused-prop-types */\n} : void 0;\nvar Downshift$1 = Downshift;\nfunction validateGetMenuPropsCalledCorrectly(node, _ref12) {\n  var refKey = _ref12.refKey;\n  if (!node) {\n    // eslint-disable-next-line no-console\n    console.error(\"downshift: The ref prop \\\"\" + refKey + \"\\\" from getMenuProps was not applied correctly on your menu element.\");\n  }\n}\nfunction validateGetRootPropsCalledCorrectly(element, _ref13) {\n  var refKey = _ref13.refKey;\n  var refKeySpecified = refKey !== 'ref';\n  var isComposite = !isDOMElement(element);\n  if (isComposite && !refKeySpecified && !isForwardRef(element)) {\n    // eslint-disable-next-line no-console\n    console.error('downshift: You returned a non-DOM element. You must specify a refKey in getRootProps');\n  } else if (!isComposite && refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(\"downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \\\"\" + refKey + \"\\\"\");\n  }\n  if (!isForwardRef(element) && !getElementProps(element)[refKey]) {\n    // eslint-disable-next-line no-console\n    console.error(\"downshift: You must apply the ref prop \\\"\" + refKey + \"\\\" from getRootProps onto your root element.\");\n  }\n}\n\nvar _excluded$3 = [\"isInitialMount\", \"highlightedIndex\", \"items\", \"environment\"];\nvar dropdownDefaultStateValues = {\n  highlightedIndex: -1,\n  isOpen: false,\n  selectedItem: null,\n  inputValue: ''\n};\nfunction callOnChangeProps(action, state, newState) {\n  var props = action.props,\n    type = action.type;\n  var changes = {};\n  Object.keys(state).forEach(function (key) {\n    invokeOnChangeHandler(key, action, state, newState);\n    if (newState[key] !== state[key]) {\n      changes[key] = newState[key];\n    }\n  });\n  if (props.onStateChange && Object.keys(changes).length) {\n    props.onStateChange(_extends({\n      type: type\n    }, changes));\n  }\n}\nfunction invokeOnChangeHandler(key, action, state, newState) {\n  var props = action.props,\n    type = action.type;\n  var handler = \"on\" + capitalizeString(key) + \"Change\";\n  if (props[handler] && newState[key] !== undefined && newState[key] !== state[key]) {\n    props[handler](_extends({\n      type: type\n    }, newState));\n  }\n}\n\n/**\n * Default state reducer that returns the changes.\n *\n * @param {Object} s state.\n * @param {Object} a action with changes.\n * @returns {Object} changes.\n */\nfunction stateReducer(s, a) {\n  return a.changes;\n}\n\n/**\n * Returns a message to be added to aria-live region when item is selected.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11ySelectionMessage(selectionParameters) {\n  var selectedItem = selectionParameters.selectedItem,\n    itemToStringLocal = selectionParameters.itemToString;\n  return selectedItem ? itemToStringLocal(selectedItem) + \" has been selected.\" : '';\n}\n\n/**\n * Debounced call for updating the a11y message.\n */\nvar updateA11yStatus = debounce(function (getA11yMessage, document) {\n  setStatus(getA11yMessage(), document);\n}, 200);\n\n// istanbul ignore next\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect : useEffect;\n\n// istanbul ignore next\nvar useElementIds = 'useId' in React // Avoid conditional useId call\n? function useElementIds(_ref) {\n  var id = _ref.id,\n    labelId = _ref.labelId,\n    menuId = _ref.menuId,\n    getItemId = _ref.getItemId,\n    toggleButtonId = _ref.toggleButtonId,\n    inputId = _ref.inputId;\n  // Avoid conditional useId call\n  var reactId = \"downshift-\" + React.useId();\n  if (!id) {\n    id = reactId;\n  }\n  var elementIdsRef = useRef({\n    labelId: labelId || id + \"-label\",\n    menuId: menuId || id + \"-menu\",\n    getItemId: getItemId || function (index) {\n      return id + \"-item-\" + index;\n    },\n    toggleButtonId: toggleButtonId || id + \"-toggle-button\",\n    inputId: inputId || id + \"-input\"\n  });\n  return elementIdsRef.current;\n} : function useElementIds(_ref2) {\n  var _ref2$id = _ref2.id,\n    id = _ref2$id === void 0 ? \"downshift-\" + generateId() : _ref2$id,\n    labelId = _ref2.labelId,\n    menuId = _ref2.menuId,\n    getItemId = _ref2.getItemId,\n    toggleButtonId = _ref2.toggleButtonId,\n    inputId = _ref2.inputId;\n  var elementIdsRef = useRef({\n    labelId: labelId || id + \"-label\",\n    menuId: menuId || id + \"-menu\",\n    getItemId: getItemId || function (index) {\n      return id + \"-item-\" + index;\n    },\n    toggleButtonId: toggleButtonId || id + \"-toggle-button\",\n    inputId: inputId || id + \"-input\"\n  });\n  return elementIdsRef.current;\n};\nfunction getItemAndIndex(itemProp, indexProp, items, errorMessage) {\n  var item, index;\n  if (itemProp === undefined) {\n    if (indexProp === undefined) {\n      throw new Error(errorMessage);\n    }\n    item = items[indexProp];\n    index = indexProp;\n  } else {\n    index = indexProp === undefined ? items.indexOf(itemProp) : indexProp;\n    item = itemProp;\n  }\n  return [item, index];\n}\nfunction itemToString(item) {\n  return item ? String(item) : '';\n}\nfunction isAcceptedCharacterKey(key) {\n  return /^\\S{1}$/.test(key);\n}\nfunction capitalizeString(string) {\n  return \"\" + string.slice(0, 1).toUpperCase() + string.slice(1);\n}\nfunction useLatestRef(val) {\n  var ref = useRef(val);\n  // technically this is not \"concurrent mode safe\" because we're manipulating\n  // the value during render (so it's not idempotent). However, the places this\n  // hook is used is to support memoizing callbacks which will be called\n  // *during* render, so we need the latest values *during* render.\n  // If not for this, then we'd probably want to use useLayoutEffect instead.\n  ref.current = val;\n  return ref;\n}\n\n/**\n * Computes the controlled state using a the previous state, props,\n * two reducers, one from downshift and an optional one from the user.\n * Also calls the onChange handlers for state values that have changed.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nfunction useEnhancedReducer(reducer, initialState, props) {\n  var prevStateRef = useRef();\n  var actionRef = useRef();\n  var enhancedReducer = useCallback(function (state, action) {\n    actionRef.current = action;\n    state = getState(state, action.props);\n    var changes = reducer(state, action);\n    var newState = action.props.stateReducer(state, _extends({}, action, {\n      changes: changes\n    }));\n    return newState;\n  }, [reducer]);\n  var _useReducer = useReducer(enhancedReducer, initialState),\n    state = _useReducer[0],\n    dispatch = _useReducer[1];\n  var propsRef = useLatestRef(props);\n  var dispatchWithProps = useCallback(function (action) {\n    return dispatch(_extends({\n      props: propsRef.current\n    }, action));\n  }, [propsRef]);\n  var action = actionRef.current;\n  useEffect(function () {\n    if (action && prevStateRef.current && prevStateRef.current !== state) {\n      callOnChangeProps(action, getState(prevStateRef.current, action.props), state);\n    }\n    prevStateRef.current = state;\n  }, [state, props, action]);\n  return [state, dispatchWithProps];\n}\n\n/**\n * Wraps the useEnhancedReducer and applies the controlled prop values before\n * returning the new state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nfunction useControlledReducer$1(reducer, initialState, props) {\n  var _useEnhancedReducer = useEnhancedReducer(reducer, initialState, props),\n    state = _useEnhancedReducer[0],\n    dispatch = _useEnhancedReducer[1];\n  return [getState(state, props), dispatch];\n}\nvar defaultProps$3 = {\n  itemToString: itemToString,\n  stateReducer: stateReducer,\n  getA11ySelectionMessage: getA11ySelectionMessage,\n  scrollIntoView: scrollIntoView,\n  environment: /* istanbul ignore next (ssr) */\n  typeof window === 'undefined' || false ? undefined : window\n};\nfunction getDefaultValue$1(props, propKey, defaultStateValues) {\n  if (defaultStateValues === void 0) {\n    defaultStateValues = dropdownDefaultStateValues;\n  }\n  var defaultValue = props[\"default\" + capitalizeString(propKey)];\n  if (defaultValue !== undefined) {\n    return defaultValue;\n  }\n  return defaultStateValues[propKey];\n}\nfunction getInitialValue$1(props, propKey, defaultStateValues) {\n  if (defaultStateValues === void 0) {\n    defaultStateValues = dropdownDefaultStateValues;\n  }\n  var value = props[propKey];\n  if (value !== undefined) {\n    return value;\n  }\n  var initialValue = props[\"initial\" + capitalizeString(propKey)];\n  if (initialValue !== undefined) {\n    return initialValue;\n  }\n  return getDefaultValue$1(props, propKey, defaultStateValues);\n}\nfunction getInitialState$2(props) {\n  var selectedItem = getInitialValue$1(props, 'selectedItem');\n  var isOpen = getInitialValue$1(props, 'isOpen');\n  var highlightedIndex = getInitialValue$1(props, 'highlightedIndex');\n  var inputValue = getInitialValue$1(props, 'inputValue');\n  return {\n    highlightedIndex: highlightedIndex < 0 && selectedItem && isOpen ? props.items.indexOf(selectedItem) : highlightedIndex,\n    isOpen: isOpen,\n    selectedItem: selectedItem,\n    inputValue: inputValue\n  };\n}\nfunction getHighlightedIndexOnOpen(props, state, offset) {\n  var items = props.items,\n    initialHighlightedIndex = props.initialHighlightedIndex,\n    defaultHighlightedIndex = props.defaultHighlightedIndex;\n  var selectedItem = state.selectedItem,\n    highlightedIndex = state.highlightedIndex;\n  if (items.length === 0) {\n    return -1;\n  }\n\n  // initialHighlightedIndex will give value to highlightedIndex on initial state only.\n  if (initialHighlightedIndex !== undefined && highlightedIndex === initialHighlightedIndex) {\n    return initialHighlightedIndex;\n  }\n  if (defaultHighlightedIndex !== undefined) {\n    return defaultHighlightedIndex;\n  }\n  if (selectedItem) {\n    return items.indexOf(selectedItem);\n  }\n  if (offset === 0) {\n    return -1;\n  }\n  return offset < 0 ? items.length - 1 : 0;\n}\n\n/**\n * Reuse the movement tracking of mouse and touch events.\n *\n * @param {boolean} isOpen Whether the dropdown is open or not.\n * @param {Array<Object>} downshiftElementRefs Downshift element refs to track movement (toggleButton, menu etc.)\n * @param {Object} environment Environment where component/hook exists.\n * @param {Function} handleBlur Handler on blur from mouse or touch.\n * @returns {Object} Ref containing whether mouseDown or touchMove event is happening\n */\nfunction useMouseAndTouchTracker(isOpen, downshiftElementRefs, environment, handleBlur) {\n  var mouseAndTouchTrackersRef = useRef({\n    isMouseDown: false,\n    isTouchMove: false\n  });\n  useEffect(function () {\n    if (!environment) {\n      return;\n    }\n\n    // The same strategy for checking if a click occurred inside or outside downshift\n    // as in downshift.js.\n    var onMouseDown = function onMouseDown() {\n      mouseAndTouchTrackersRef.current.isMouseDown = true;\n    };\n    var onMouseUp = function onMouseUp(event) {\n      mouseAndTouchTrackersRef.current.isMouseDown = false;\n      if (isOpen && !targetWithinDownshift(event.target, downshiftElementRefs.map(function (ref) {\n        return ref.current;\n      }), environment)) {\n        handleBlur();\n      }\n    };\n    var onTouchStart = function onTouchStart() {\n      mouseAndTouchTrackersRef.current.isTouchMove = false;\n    };\n    var onTouchMove = function onTouchMove() {\n      mouseAndTouchTrackersRef.current.isTouchMove = true;\n    };\n    var onTouchEnd = function onTouchEnd(event) {\n      if (isOpen && !mouseAndTouchTrackersRef.current.isTouchMove && !targetWithinDownshift(event.target, downshiftElementRefs.map(function (ref) {\n        return ref.current;\n      }), environment, false)) {\n        handleBlur();\n      }\n    };\n    environment.addEventListener('mousedown', onMouseDown);\n    environment.addEventListener('mouseup', onMouseUp);\n    environment.addEventListener('touchstart', onTouchStart);\n    environment.addEventListener('touchmove', onTouchMove);\n    environment.addEventListener('touchend', onTouchEnd);\n\n    // eslint-disable-next-line consistent-return\n    return function cleanup() {\n      environment.removeEventListener('mousedown', onMouseDown);\n      environment.removeEventListener('mouseup', onMouseUp);\n      environment.removeEventListener('touchstart', onTouchStart);\n      environment.removeEventListener('touchmove', onTouchMove);\n      environment.removeEventListener('touchend', onTouchEnd);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, environment]);\n  return mouseAndTouchTrackersRef;\n}\n\n/* istanbul ignore next */\n// eslint-disable-next-line import/no-mutable-exports\nvar useGetterPropsCalledChecker = function useGetterPropsCalledChecker() {\n  return noop;\n};\n/**\n * Custom hook that checks if getter props are called correctly.\n *\n * @param  {...any} propKeys Getter prop names to be handled.\n * @returns {Function} Setter function called inside getter props to set call information.\n */\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  useGetterPropsCalledChecker = function useGetterPropsCalledChecker() {\n    var isInitialMountRef = useRef(true);\n    for (var _len = arguments.length, propKeys = new Array(_len), _key = 0; _key < _len; _key++) {\n      propKeys[_key] = arguments[_key];\n    }\n    var getterPropsCalledRef = useRef(propKeys.reduce(function (acc, propKey) {\n      acc[propKey] = {};\n      return acc;\n    }, {}));\n    useEffect(function () {\n      Object.keys(getterPropsCalledRef.current).forEach(function (propKey) {\n        var propCallInfo = getterPropsCalledRef.current[propKey];\n        if (isInitialMountRef.current) {\n          if (!Object.keys(propCallInfo).length) {\n            // eslint-disable-next-line no-console\n            console.error(\"downshift: You forgot to call the \" + propKey + \" getter function on your component / element.\");\n            return;\n          }\n        }\n        var suppressRefError = propCallInfo.suppressRefError,\n          refKey = propCallInfo.refKey,\n          elementRef = propCallInfo.elementRef;\n        if ((!elementRef || !elementRef.current) && !suppressRefError) {\n          // eslint-disable-next-line no-console\n          console.error(\"downshift: The ref prop \\\"\" + refKey + \"\\\" from \" + propKey + \" was not applied correctly on your element.\");\n        }\n      });\n      isInitialMountRef.current = false;\n    });\n    var setGetterPropCallInfo = useCallback(function (propKey, suppressRefError, refKey, elementRef) {\n      getterPropsCalledRef.current[propKey] = {\n        suppressRefError: suppressRefError,\n        refKey: refKey,\n        elementRef: elementRef\n      };\n    }, []);\n    return setGetterPropCallInfo;\n  };\n}\nfunction useA11yMessageSetter(getA11yMessage, dependencyArray, _ref3) {\n  var isInitialMount = _ref3.isInitialMount,\n    highlightedIndex = _ref3.highlightedIndex,\n    items = _ref3.items,\n    environment = _ref3.environment,\n    rest = _objectWithoutPropertiesLoose(_ref3, _excluded$3);\n  // Sets a11y status message on changes in state.\n  useEffect(function () {\n    if (isInitialMount || false || !(environment != null && environment.document)) {\n      return;\n    }\n    updateA11yStatus(function () {\n      return getA11yMessage(_extends({\n        highlightedIndex: highlightedIndex,\n        highlightedItem: items[highlightedIndex],\n        resultCount: items.length\n      }, rest));\n    }, environment.document);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencyArray);\n}\nfunction useScrollIntoView(_ref4) {\n  var highlightedIndex = _ref4.highlightedIndex,\n    isOpen = _ref4.isOpen,\n    itemRefs = _ref4.itemRefs,\n    getItemNodeFromIndex = _ref4.getItemNodeFromIndex,\n    menuElement = _ref4.menuElement,\n    scrollIntoViewProp = _ref4.scrollIntoView;\n  // used not to scroll on highlight by mouse.\n  var shouldScrollRef = useRef(true);\n  // Scroll on highlighted item if change comes from keyboard.\n  useIsomorphicLayoutEffect(function () {\n    if (highlightedIndex < 0 || !isOpen || !Object.keys(itemRefs.current).length) {\n      return;\n    }\n    if (shouldScrollRef.current === false) {\n      shouldScrollRef.current = true;\n    } else {\n      scrollIntoViewProp(getItemNodeFromIndex(highlightedIndex), menuElement);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedIndex]);\n  return shouldScrollRef;\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nvar useControlPropsValidator = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  useControlPropsValidator = function useControlPropsValidator(_ref5) {\n    var isInitialMount = _ref5.isInitialMount,\n      props = _ref5.props,\n      state = _ref5.state;\n    // used for checking when props are moving from controlled to uncontrolled.\n    var prevPropsRef = useRef(props);\n    useEffect(function () {\n      if (isInitialMount) {\n        return;\n      }\n      validateControlledUnchanged(state, prevPropsRef.current, props);\n      prevPropsRef.current = props;\n    }, [state, props, isInitialMount]);\n  };\n}\n\n/**\n * Handles selection on Enter / Alt + ArrowUp. Closes the menu and resets the highlighted index, unless there is a highlighted.\n * In that case, selects the item and resets to defaults for open state and highlighted idex.\n * @param {Object} props The useCombobox props.\n * @param {number} highlightedIndex The index from the state.\n * @param {boolean} inputValue Also return the input value for state.\n * @returns The changes for the state.\n */\nfunction getChangesOnSelection(props, highlightedIndex, inputValue) {\n  var _props$items;\n  if (inputValue === void 0) {\n    inputValue = true;\n  }\n  var shouldSelect = ((_props$items = props.items) == null ? void 0 : _props$items.length) && highlightedIndex >= 0;\n  return _extends({\n    isOpen: false,\n    highlightedIndex: -1\n  }, shouldSelect && _extends({\n    selectedItem: props.items[highlightedIndex],\n    isOpen: getDefaultValue$1(props, 'isOpen'),\n    highlightedIndex: getDefaultValue$1(props, 'highlightedIndex')\n  }, inputValue && {\n    inputValue: props.itemToString(props.items[highlightedIndex])\n  }));\n}\n\n// Shared between all exports.\nvar commonPropTypes = {\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func.isRequired,\n    removeEventListener: PropTypes.func.isRequired,\n    document: PropTypes.shape({\n      createElement: PropTypes.func.isRequired,\n      getElementById: PropTypes.func.isRequired,\n      activeElement: PropTypes.any.isRequired,\n      body: PropTypes.any.isRequired\n    }).isRequired,\n    Node: PropTypes.func.isRequired\n  }),\n  itemToString: PropTypes.func,\n  stateReducer: PropTypes.func\n};\n\n// Shared between useSelect, useCombobox, Downshift.\nvar commonDropdownPropTypes = _extends({}, commonPropTypes, {\n  getA11yStatusMessage: PropTypes.func,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  toggleButtonId: PropTypes.string,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  scrollIntoView: PropTypes.func\n});\n\nfunction downshiftCommonReducer(state, action, stateChangeTypes) {\n  var type = action.type,\n    props = action.props;\n  var changes;\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.disabled ? -1 : action.index\n      };\n      break;\n    case stateChangeTypes.MenuMouseLeave:\n      changes = {\n        highlightedIndex: -1\n      };\n      break;\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex\n      };\n      break;\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        selectedItem: getDefaultValue$1(props, 'selectedItem'),\n        inputValue: getDefaultValue$1(props, 'inputValue')\n      };\n      break;\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n  return _extends({}, state, changes);\n}\n/* eslint-enable complexity */\n\nfunction getItemIndexByCharacterKey(_a) {\n    var keysSoFar = _a.keysSoFar, highlightedIndex = _a.highlightedIndex, items = _a.items, itemToString = _a.itemToString, isItemDisabled = _a.isItemDisabled;\n    var lowerCasedKeysSoFar = keysSoFar.toLowerCase();\n    for (var index = 0; index < items.length; index++) {\n        // if we already have a search query in progress, we also consider the current highlighted item.\n        var offsetIndex = (index + highlightedIndex + (keysSoFar.length < 2 ? 1 : 0)) % items.length;\n        var item = items[offsetIndex];\n        if (item !== undefined &&\n            itemToString(item).toLowerCase().startsWith(lowerCasedKeysSoFar) &&\n            !isItemDisabled(item, offsetIndex)) {\n            return offsetIndex;\n        }\n    }\n    return highlightedIndex;\n}\nvar propTypes$2 = __assign(__assign({}, commonDropdownPropTypes), { items: PropTypes.array.isRequired, isItemDisabled: PropTypes.func, getA11ySelectionMessage: PropTypes.func });\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specift if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage(_a) {\n    var isOpen = _a.isOpen, resultCount = _a.resultCount, previousResultCount = _a.previousResultCount;\n    if (!isOpen) {\n        return '';\n    }\n    if (!resultCount) {\n        return 'No results are available.';\n    }\n    if (resultCount !== previousResultCount) {\n        return \"\".concat(resultCount, \" result\").concat(resultCount === 1 ? ' is' : 's are', \" available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.\");\n    }\n    return '';\n}\nvar defaultProps$2 = __assign(__assign({}, defaultProps$3), { getA11yStatusMessage: getA11yStatusMessage, isItemDisabled: function () {\n        return false;\n    } });\n// eslint-disable-next-line import/no-mutable-exports\nvar validatePropTypes$2 = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n    validatePropTypes$2 = function (options, caller) {\n        PropTypes.checkPropTypes(propTypes$2, options, 'prop', caller.name);\n    };\n}\n\nvar ToggleButtonClick$1 = process.env.NODE_ENV !== \"production\" ? '__togglebutton_click__' : 0;\nvar ToggleButtonKeyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_arrow_down__' : 1;\nvar ToggleButtonKeyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_arrow_up__' : 2;\nvar ToggleButtonKeyDownCharacter = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_character__' : 3;\nvar ToggleButtonKeyDownEscape = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_escape__' : 4;\nvar ToggleButtonKeyDownHome = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_home__' : 5;\nvar ToggleButtonKeyDownEnd = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_end__' : 6;\nvar ToggleButtonKeyDownEnter = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_enter__' : 7;\nvar ToggleButtonKeyDownSpaceButton = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_space_button__' : 8;\nvar ToggleButtonKeyDownPageUp = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_page_up__' : 9;\nvar ToggleButtonKeyDownPageDown = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_page_down__' : 10;\nvar ToggleButtonBlur = process.env.NODE_ENV !== \"production\" ? '__togglebutton_blur__' : 11;\nvar MenuMouseLeave$1 = process.env.NODE_ENV !== \"production\" ? '__menu_mouse_leave__' : 12;\nvar ItemMouseMove$1 = process.env.NODE_ENV !== \"production\" ? '__item_mouse_move__' : 13;\nvar ItemClick$1 = process.env.NODE_ENV !== \"production\" ? '__item_click__' : 14;\nvar FunctionToggleMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_toggle_menu__' : 15;\nvar FunctionOpenMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_open_menu__' : 16;\nvar FunctionCloseMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_close_menu__' : 17;\nvar FunctionSetHighlightedIndex$1 = process.env.NODE_ENV !== \"production\" ? '__function_set_highlighted_index__' : 18;\nvar FunctionSelectItem$1 = process.env.NODE_ENV !== \"production\" ? '__function_select_item__' : 19;\nvar FunctionSetInputValue$1 = process.env.NODE_ENV !== \"production\" ? '__function_set_input_value__' : 20;\nvar FunctionReset$2 = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 21;\n\nvar stateChangeTypes$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ToggleButtonClick: ToggleButtonClick$1,\n  ToggleButtonKeyDownArrowDown: ToggleButtonKeyDownArrowDown,\n  ToggleButtonKeyDownArrowUp: ToggleButtonKeyDownArrowUp,\n  ToggleButtonKeyDownCharacter: ToggleButtonKeyDownCharacter,\n  ToggleButtonKeyDownEscape: ToggleButtonKeyDownEscape,\n  ToggleButtonKeyDownHome: ToggleButtonKeyDownHome,\n  ToggleButtonKeyDownEnd: ToggleButtonKeyDownEnd,\n  ToggleButtonKeyDownEnter: ToggleButtonKeyDownEnter,\n  ToggleButtonKeyDownSpaceButton: ToggleButtonKeyDownSpaceButton,\n  ToggleButtonKeyDownPageUp: ToggleButtonKeyDownPageUp,\n  ToggleButtonKeyDownPageDown: ToggleButtonKeyDownPageDown,\n  ToggleButtonBlur: ToggleButtonBlur,\n  MenuMouseLeave: MenuMouseLeave$1,\n  ItemMouseMove: ItemMouseMove$1,\n  ItemClick: ItemClick$1,\n  FunctionToggleMenu: FunctionToggleMenu$1,\n  FunctionOpenMenu: FunctionOpenMenu$1,\n  FunctionCloseMenu: FunctionCloseMenu$1,\n  FunctionSetHighlightedIndex: FunctionSetHighlightedIndex$1,\n  FunctionSelectItem: FunctionSelectItem$1,\n  FunctionSetInputValue: FunctionSetInputValue$1,\n  FunctionReset: FunctionReset$2\n});\n\n/* eslint-disable complexity */\nfunction downshiftSelectReducer(state, action) {\n  var _props$items;\n  var type = action.type,\n    props = action.props,\n    altKey = action.altKey;\n  var changes;\n  switch (type) {\n    case ItemClick$1:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index]\n      };\n      break;\n    case ToggleButtonKeyDownCharacter:\n      {\n        var lowercasedKey = action.key;\n        var inputValue = \"\" + state.inputValue + lowercasedKey;\n        var prevHighlightedIndex = !state.isOpen && state.selectedItem ? props.items.indexOf(state.selectedItem) : state.highlightedIndex;\n        var highlightedIndex = getItemIndexByCharacterKey({\n          keysSoFar: inputValue,\n          highlightedIndex: prevHighlightedIndex,\n          items: props.items,\n          itemToString: props.itemToString,\n          isItemDisabled: props.isItemDisabled\n        });\n        changes = {\n          inputValue: inputValue,\n          highlightedIndex: highlightedIndex,\n          isOpen: true\n        };\n      }\n      break;\n    case ToggleButtonKeyDownArrowDown:\n      {\n        var _highlightedIndex = state.isOpen ? getHighlightedIndex(state.highlightedIndex, 1, props.items, props.isItemDisabled) : altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1);\n        changes = {\n          highlightedIndex: _highlightedIndex,\n          isOpen: true\n        };\n      }\n      break;\n    case ToggleButtonKeyDownArrowUp:\n      if (state.isOpen && altKey) {\n        changes = getChangesOnSelection(props, state.highlightedIndex, false);\n      } else {\n        var _highlightedIndex2 = state.isOpen ? getHighlightedIndex(state.highlightedIndex, -1, props.items, props.isItemDisabled) : getHighlightedIndexOnOpen(props, state, -1);\n        changes = {\n          highlightedIndex: _highlightedIndex2,\n          isOpen: true\n        };\n      }\n      break;\n    // only triggered when menu is open.\n    case ToggleButtonKeyDownEnter:\n    case ToggleButtonKeyDownSpaceButton:\n      changes = getChangesOnSelection(props, state.highlightedIndex, false);\n      break;\n    case ToggleButtonKeyDownHome:\n      changes = {\n        highlightedIndex: getNonDisabledIndex(0, false, props.items, props.isItemDisabled),\n        isOpen: true\n      };\n      break;\n    case ToggleButtonKeyDownEnd:\n      changes = {\n        highlightedIndex: getNonDisabledIndex(props.items.length - 1, true, props.items, props.isItemDisabled),\n        isOpen: true\n      };\n      break;\n    case ToggleButtonKeyDownPageUp:\n      changes = {\n        highlightedIndex: getHighlightedIndex(state.highlightedIndex, -10, props.items, props.isItemDisabled)\n      };\n      break;\n    case ToggleButtonKeyDownPageDown:\n      changes = {\n        highlightedIndex: getHighlightedIndex(state.highlightedIndex, 10, props.items, props.isItemDisabled)\n      };\n      break;\n    case ToggleButtonKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1\n      };\n      break;\n    case ToggleButtonBlur:\n      changes = _extends({\n        isOpen: false,\n        highlightedIndex: -1\n      }, state.highlightedIndex >= 0 && ((_props$items = props.items) == null ? void 0 : _props$items.length) && {\n        selectedItem: props.items[state.highlightedIndex]\n      });\n      break;\n    case FunctionSelectItem$1:\n      changes = {\n        selectedItem: action.selectedItem\n      };\n      break;\n    default:\n      return downshiftCommonReducer(state, action, stateChangeTypes$2);\n  }\n  return _extends({}, state, changes);\n}\n/* eslint-enable complexity */\n\nvar _excluded$2 = [\"onMouseLeave\", \"refKey\", \"ref\"],\n  _excluded2$2 = [\"onBlur\", \"onClick\", \"onPress\", \"onKeyDown\", \"refKey\", \"ref\"],\n  _excluded3$1 = [\"item\", \"index\", \"onMouseMove\", \"onClick\", \"onMouseDown\", \"onPress\", \"refKey\", \"disabled\", \"ref\"];\nuseSelect.stateChangeTypes = stateChangeTypes$2;\nfunction useSelect(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n  validatePropTypes$2(userProps, useSelect);\n  // Props defaults and destructuring.\n  var props = _extends({}, defaultProps$2, userProps);\n  var items = props.items,\n    scrollIntoView = props.scrollIntoView,\n    environment = props.environment,\n    itemToString = props.itemToString,\n    getA11ySelectionMessage = props.getA11ySelectionMessage,\n    getA11yStatusMessage = props.getA11yStatusMessage;\n  // Initial state depending on controlled props.\n  var initialState = getInitialState$2(props);\n  var _useControlledReducer = useControlledReducer$1(downshiftSelectReducer, initialState, props),\n    state = _useControlledReducer[0],\n    dispatch = _useControlledReducer[1];\n  var isOpen = state.isOpen,\n    highlightedIndex = state.highlightedIndex,\n    selectedItem = state.selectedItem,\n    inputValue = state.inputValue;\n\n  // Element efs.\n  var toggleButtonRef = useRef(null);\n  var menuRef = useRef(null);\n  var itemRefs = useRef({});\n  // used to keep the inputValue clearTimeout object between renders.\n  var clearTimeoutRef = useRef(null);\n  // prevent id re-generation between renders.\n  var elementIds = useElementIds(props);\n  // used to keep track of how many items we had on previous cycle.\n  var previousResultCountRef = useRef();\n  var isInitialMountRef = useRef(true);\n  // utility callback to get item element.\n  var latest = useLatestRef({\n    state: state,\n    props: props\n  });\n\n  // Some utils.\n  var getItemNodeFromIndex = useCallback(function (index) {\n    return itemRefs.current[elementIds.getItemId(index)];\n  }, [elementIds]);\n\n  // Effects.\n  // Sets a11y status message on changes in state.\n  useA11yMessageSetter(getA11yStatusMessage, [isOpen, highlightedIndex, inputValue, items], _extends({\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items: items,\n    environment: environment,\n    itemToString: itemToString\n  }, state));\n  // Sets a11y status message on changes in selectedItem.\n  useA11yMessageSetter(getA11ySelectionMessage, [selectedItem], _extends({\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items: items,\n    environment: environment,\n    itemToString: itemToString\n  }, state));\n  // Scroll on highlighted item if change comes from keyboard.\n  var shouldScrollRef = useScrollIntoView({\n    menuElement: menuRef.current,\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    itemRefs: itemRefs,\n    scrollIntoView: scrollIntoView,\n    getItemNodeFromIndex: getItemNodeFromIndex\n  });\n\n  // Sets cleanup for the keysSoFar callback, debounded after 500ms.\n  useEffect(function () {\n    // init the clean function here as we need access to dispatch.\n    clearTimeoutRef.current = debounce(function (outerDispatch) {\n      outerDispatch({\n        type: FunctionSetInputValue$1,\n        inputValue: ''\n      });\n    }, 500);\n\n    // Cancel any pending debounced calls on mount\n    return function () {\n      clearTimeoutRef.current.cancel();\n    };\n  }, []);\n\n  // Invokes the keysSoFar callback set up above.\n  useEffect(function () {\n    if (!inputValue) {\n      return;\n    }\n    clearTimeoutRef.current(dispatch);\n  }, [dispatch, inputValue]);\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props: props,\n    state: state\n  });\n  useEffect(function () {\n    if (isInitialMountRef.current) {\n      return;\n    }\n    previousResultCountRef.current = items.length;\n  });\n  // Focus the toggle button on first render if required.\n  useEffect(function () {\n    var focusOnOpen = getInitialValue$1(props, 'isOpen');\n    if (focusOnOpen && toggleButtonRef.current) {\n      toggleButtonRef.current.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  // Add mouse/touch events to document.\n  var mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [menuRef, toggleButtonRef], environment, function () {\n    dispatch({\n      type: ToggleButtonBlur\n    });\n  });\n  var setGetterPropCallInfo = useGetterPropsCalledChecker('getMenuProps', 'getToggleButtonProps');\n  // Make initial ref false.\n  useEffect(function () {\n    isInitialMountRef.current = false;\n    return function () {\n      isInitialMountRef.current = true;\n    };\n  }, []);\n  // Reset itemRefs on close.\n  useEffect(function () {\n    if (!isOpen) {\n      itemRefs.current = {};\n    }\n  }, [isOpen]);\n\n  // Event handler functions.\n  var toggleButtonKeyDownHandlers = useMemo(function () {\n    return {\n      ArrowDown: function ArrowDown(event) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownArrowDown,\n          altKey: event.altKey\n        });\n      },\n      ArrowUp: function ArrowUp(event) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownArrowUp,\n          altKey: event.altKey\n        });\n      },\n      Home: function Home(event) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownHome\n        });\n      },\n      End: function End(event) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownEnd\n        });\n      },\n      Escape: function Escape() {\n        if (latest.current.state.isOpen) {\n          dispatch({\n            type: ToggleButtonKeyDownEscape\n          });\n        }\n      },\n      Enter: function Enter(event) {\n        event.preventDefault();\n        dispatch({\n          type: latest.current.state.isOpen ? ToggleButtonKeyDownEnter : ToggleButtonClick$1\n        });\n      },\n      PageUp: function PageUp(event) {\n        if (latest.current.state.isOpen) {\n          event.preventDefault();\n          dispatch({\n            type: ToggleButtonKeyDownPageUp\n          });\n        }\n      },\n      PageDown: function PageDown(event) {\n        if (latest.current.state.isOpen) {\n          event.preventDefault();\n          dispatch({\n            type: ToggleButtonKeyDownPageDown\n          });\n        }\n      },\n      ' ': function _(event) {\n        event.preventDefault();\n        var currentState = latest.current.state;\n        if (!currentState.isOpen) {\n          dispatch({\n            type: ToggleButtonClick$1\n          });\n          return;\n        }\n        if (currentState.inputValue) {\n          dispatch({\n            type: ToggleButtonKeyDownCharacter,\n            key: ' '\n          });\n        } else {\n          dispatch({\n            type: ToggleButtonKeyDownSpaceButton\n          });\n        }\n      }\n    };\n  }, [dispatch, latest]);\n\n  // Action functions.\n  var toggleMenu = useCallback(function () {\n    dispatch({\n      type: FunctionToggleMenu$1\n    });\n  }, [dispatch]);\n  var closeMenu = useCallback(function () {\n    dispatch({\n      type: FunctionCloseMenu$1\n    });\n  }, [dispatch]);\n  var openMenu = useCallback(function () {\n    dispatch({\n      type: FunctionOpenMenu$1\n    });\n  }, [dispatch]);\n  var setHighlightedIndex = useCallback(function (newHighlightedIndex) {\n    dispatch({\n      type: FunctionSetHighlightedIndex$1,\n      highlightedIndex: newHighlightedIndex\n    });\n  }, [dispatch]);\n  var selectItem = useCallback(function (newSelectedItem) {\n    dispatch({\n      type: FunctionSelectItem$1,\n      selectedItem: newSelectedItem\n    });\n  }, [dispatch]);\n  var reset = useCallback(function () {\n    dispatch({\n      type: FunctionReset$2\n    });\n  }, [dispatch]);\n  var setInputValue = useCallback(function (newInputValue) {\n    dispatch({\n      type: FunctionSetInputValue$1,\n      inputValue: newInputValue\n    });\n  }, [dispatch]);\n  // Getter functions.\n  var getLabelProps = useCallback(function (labelProps) {\n    return _extends({\n      id: elementIds.labelId,\n      htmlFor: elementIds.toggleButtonId\n    }, labelProps);\n  }, [elementIds]);\n  var getMenuProps = useCallback(function (_temp, _temp2) {\n    var _extends2;\n    var _ref = _temp === void 0 ? {} : _temp,\n      onMouseLeave = _ref.onMouseLeave,\n      _ref$refKey = _ref.refKey,\n      refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,\n      ref = _ref.ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded$2);\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      _ref2$suppressRefErro = _ref2.suppressRefError,\n      suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;\n    var menuHandleMouseLeave = function menuHandleMouseLeave() {\n      dispatch({\n        type: MenuMouseLeave$1\n      });\n    };\n    setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef);\n    return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function (menuNode) {\n      menuRef.current = menuNode;\n    }), _extends2.id = elementIds.menuId, _extends2.role = 'listbox', _extends2['aria-labelledby'] = rest && rest['aria-label'] ? undefined : \"\" + elementIds.labelId, _extends2.onMouseLeave = callAllEventHandlers(onMouseLeave, menuHandleMouseLeave), _extends2), rest);\n  }, [dispatch, setGetterPropCallInfo, elementIds]);\n  var getToggleButtonProps = useCallback(function (_temp3, _temp4) {\n    var _extends3;\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\n      onBlur = _ref3.onBlur,\n      onClick = _ref3.onClick;\n      _ref3.onPress;\n      var onKeyDown = _ref3.onKeyDown,\n      _ref3$refKey = _ref3.refKey,\n      refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,\n      ref = _ref3.ref,\n      rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$2);\n    var _ref4 = _temp4 === void 0 ? {} : _temp4,\n      _ref4$suppressRefErro = _ref4.suppressRefError,\n      suppressRefError = _ref4$suppressRefErro === void 0 ? false : _ref4$suppressRefErro;\n    var latestState = latest.current.state;\n    var toggleButtonHandleClick = function toggleButtonHandleClick() {\n      dispatch({\n        type: ToggleButtonClick$1\n      });\n    };\n    var toggleButtonHandleBlur = function toggleButtonHandleBlur() {\n      if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {\n        dispatch({\n          type: ToggleButtonBlur\n        });\n      }\n    };\n    var toggleButtonHandleKeyDown = function toggleButtonHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n      if (key && toggleButtonKeyDownHandlers[key]) {\n        toggleButtonKeyDownHandlers[key](event);\n      } else if (isAcceptedCharacterKey(key)) {\n        dispatch({\n          type: ToggleButtonKeyDownCharacter,\n          key: key\n        });\n      }\n    };\n    var toggleProps = _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function (toggleButtonNode) {\n      toggleButtonRef.current = toggleButtonNode;\n    }), _extends3['aria-activedescendant'] = latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : '', _extends3['aria-controls'] = elementIds.menuId, _extends3['aria-expanded'] = latest.current.state.isOpen, _extends3['aria-haspopup'] = 'listbox', _extends3['aria-labelledby'] = rest && rest['aria-label'] ? undefined : \"\" + elementIds.labelId, _extends3.id = elementIds.toggleButtonId, _extends3.role = 'combobox', _extends3.tabIndex = 0, _extends3.onBlur = callAllEventHandlers(onBlur, toggleButtonHandleBlur), _extends3), rest);\n    if (!rest.disabled) {\n      /* istanbul ignore if (react-native) */\n      {\n        toggleProps.onClick = callAllEventHandlers(onClick, toggleButtonHandleClick);\n        toggleProps.onKeyDown = callAllEventHandlers(onKeyDown, toggleButtonHandleKeyDown);\n      }\n    }\n    setGetterPropCallInfo('getToggleButtonProps', suppressRefError, refKey, toggleButtonRef);\n    return toggleProps;\n  }, [latest, elementIds, setGetterPropCallInfo, dispatch, mouseAndTouchTrackersRef, toggleButtonKeyDownHandlers]);\n  var getItemProps = useCallback(function (_temp5) {\n    var _extends4;\n    var _ref5 = _temp5 === void 0 ? {} : _temp5,\n      itemProp = _ref5.item,\n      indexProp = _ref5.index,\n      onMouseMove = _ref5.onMouseMove,\n      onClick = _ref5.onClick,\n      onMouseDown = _ref5.onMouseDown;\n      _ref5.onPress;\n      var _ref5$refKey = _ref5.refKey,\n      refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,\n      disabledProp = _ref5.disabled,\n      ref = _ref5.ref,\n      rest = _objectWithoutPropertiesLoose(_ref5, _excluded3$1);\n    if (disabledProp !== undefined) {\n      console.warn('Passing \"disabled\" as an argument to getItemProps is not supported anymore. Please use the isItemDisabled prop from useSelect.');\n    }\n    var _latest$current = latest.current,\n      latestState = _latest$current.state,\n      latestProps = _latest$current.props;\n    var _getItemAndIndex = getItemAndIndex(itemProp, indexProp, latestProps.items, 'Pass either item or index to getItemProps!'),\n      item = _getItemAndIndex[0],\n      index = _getItemAndIndex[1];\n    var disabled = latestProps.isItemDisabled(item, index);\n    var itemHandleMouseMove = function itemHandleMouseMove() {\n      if (index === latestState.highlightedIndex) {\n        return;\n      }\n      shouldScrollRef.current = false;\n      dispatch({\n        type: ItemMouseMove$1,\n        index: index,\n        disabled: disabled\n      });\n    };\n    var itemHandleClick = function itemHandleClick() {\n      dispatch({\n        type: ItemClick$1,\n        index: index\n      });\n    };\n    var itemHandleMouseDown = function itemHandleMouseDown(e) {\n      return e.preventDefault();\n    }; // keep focus on the toggle after item click select.\n\n    var itemProps = _extends((_extends4 = {}, _extends4[refKey] = handleRefs(ref, function (itemNode) {\n      if (itemNode) {\n        itemRefs.current[elementIds.getItemId(index)] = itemNode;\n      }\n    }), _extends4['aria-disabled'] = disabled, _extends4['aria-selected'] = \"\" + (item === latestState.selectedItem), _extends4.id = elementIds.getItemId(index), _extends4.role = 'option', _extends4), rest);\n    if (!disabled) {\n      /* istanbul ignore next (react-native) */\n      {\n        itemProps.onClick = callAllEventHandlers(onClick, itemHandleClick);\n      }\n    }\n    itemProps.onMouseMove = callAllEventHandlers(onMouseMove, itemHandleMouseMove);\n    itemProps.onMouseDown = callAllEventHandlers(onMouseDown, itemHandleMouseDown);\n    return itemProps;\n  }, [latest, elementIds, shouldScrollRef, dispatch]);\n  return {\n    // prop getters.\n    getToggleButtonProps: getToggleButtonProps,\n    getLabelProps: getLabelProps,\n    getMenuProps: getMenuProps,\n    getItemProps: getItemProps,\n    // actions.\n    toggleMenu: toggleMenu,\n    openMenu: openMenu,\n    closeMenu: closeMenu,\n    setHighlightedIndex: setHighlightedIndex,\n    selectItem: selectItem,\n    reset: reset,\n    setInputValue: setInputValue,\n    // state.\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    selectedItem: selectedItem,\n    inputValue: inputValue\n  };\n}\n\nvar InputKeyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__input_keydown_arrow_down__' : 0;\nvar InputKeyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__input_keydown_arrow_up__' : 1;\nvar InputKeyDownEscape = process.env.NODE_ENV !== \"production\" ? '__input_keydown_escape__' : 2;\nvar InputKeyDownHome = process.env.NODE_ENV !== \"production\" ? '__input_keydown_home__' : 3;\nvar InputKeyDownEnd = process.env.NODE_ENV !== \"production\" ? '__input_keydown_end__' : 4;\nvar InputKeyDownPageUp = process.env.NODE_ENV !== \"production\" ? '__input_keydown_page_up__' : 5;\nvar InputKeyDownPageDown = process.env.NODE_ENV !== \"production\" ? '__input_keydown_page_down__' : 6;\nvar InputKeyDownEnter = process.env.NODE_ENV !== \"production\" ? '__input_keydown_enter__' : 7;\nvar InputChange = process.env.NODE_ENV !== \"production\" ? '__input_change__' : 8;\nvar InputBlur = process.env.NODE_ENV !== \"production\" ? '__input_blur__' : 9;\nvar InputClick = process.env.NODE_ENV !== \"production\" ? '__input_click__' : 10;\nvar MenuMouseLeave = process.env.NODE_ENV !== \"production\" ? '__menu_mouse_leave__' : 11;\nvar ItemMouseMove = process.env.NODE_ENV !== \"production\" ? '__item_mouse_move__' : 12;\nvar ItemClick = process.env.NODE_ENV !== \"production\" ? '__item_click__' : 13;\nvar ToggleButtonClick = process.env.NODE_ENV !== \"production\" ? '__togglebutton_click__' : 14;\nvar FunctionToggleMenu = process.env.NODE_ENV !== \"production\" ? '__function_toggle_menu__' : 15;\nvar FunctionOpenMenu = process.env.NODE_ENV !== \"production\" ? '__function_open_menu__' : 16;\nvar FunctionCloseMenu = process.env.NODE_ENV !== \"production\" ? '__function_close_menu__' : 17;\nvar FunctionSetHighlightedIndex = process.env.NODE_ENV !== \"production\" ? '__function_set_highlighted_index__' : 18;\nvar FunctionSelectItem = process.env.NODE_ENV !== \"production\" ? '__function_select_item__' : 19;\nvar FunctionSetInputValue = process.env.NODE_ENV !== \"production\" ? '__function_set_input_value__' : 20;\nvar FunctionReset$1 = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 21;\nvar ControlledPropUpdatedSelectedItem = process.env.NODE_ENV !== \"production\" ? '__controlled_prop_updated_selected_item__' : 22;\n\nvar stateChangeTypes$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  InputKeyDownArrowDown: InputKeyDownArrowDown,\n  InputKeyDownArrowUp: InputKeyDownArrowUp,\n  InputKeyDownEscape: InputKeyDownEscape,\n  InputKeyDownHome: InputKeyDownHome,\n  InputKeyDownEnd: InputKeyDownEnd,\n  InputKeyDownPageUp: InputKeyDownPageUp,\n  InputKeyDownPageDown: InputKeyDownPageDown,\n  InputKeyDownEnter: InputKeyDownEnter,\n  InputChange: InputChange,\n  InputBlur: InputBlur,\n  InputClick: InputClick,\n  MenuMouseLeave: MenuMouseLeave,\n  ItemMouseMove: ItemMouseMove,\n  ItemClick: ItemClick,\n  ToggleButtonClick: ToggleButtonClick,\n  FunctionToggleMenu: FunctionToggleMenu,\n  FunctionOpenMenu: FunctionOpenMenu,\n  FunctionCloseMenu: FunctionCloseMenu,\n  FunctionSetHighlightedIndex: FunctionSetHighlightedIndex,\n  FunctionSelectItem: FunctionSelectItem,\n  FunctionSetInputValue: FunctionSetInputValue,\n  FunctionReset: FunctionReset$1,\n  ControlledPropUpdatedSelectedItem: ControlledPropUpdatedSelectedItem\n});\n\nfunction getInitialState$1(props) {\n  var initialState = getInitialState$2(props);\n  var selectedItem = initialState.selectedItem;\n  var inputValue = initialState.inputValue;\n  if (inputValue === '' && selectedItem && props.defaultInputValue === undefined && props.initialInputValue === undefined && props.inputValue === undefined) {\n    inputValue = props.itemToString(selectedItem);\n  }\n  return _extends({}, initialState, {\n    inputValue: inputValue\n  });\n}\nvar propTypes$1 = _extends({}, commonDropdownPropTypes, {\n  items: PropTypes.array.isRequired,\n  isItemDisabled: PropTypes.func,\n  selectedItemChanged: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  inputValue: PropTypes.string,\n  defaultInputValue: PropTypes.string,\n  initialInputValue: PropTypes.string,\n  inputId: PropTypes.string,\n  onInputValueChange: PropTypes.func\n});\n\n/**\n * The useCombobox version of useControlledReducer, which also\n * checks if the controlled prop selectedItem changed between\n * renders. If so, it will also update inputValue with its\n * string equivalent. It uses the common useEnhancedReducer to\n * compute the rest of the state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nfunction useControlledReducer(reducer, initialState, props) {\n  var previousSelectedItemRef = useRef();\n  var _useEnhancedReducer = useEnhancedReducer(reducer, initialState, props),\n    state = _useEnhancedReducer[0],\n    dispatch = _useEnhancedReducer[1];\n\n  // ToDo: if needed, make same approach as selectedItemChanged from Downshift.\n  useEffect(function () {\n    if (!isControlledProp(props, 'selectedItem')) {\n      return;\n    }\n    if (props.selectedItemChanged(previousSelectedItemRef.current, props.selectedItem)) {\n      dispatch({\n        type: ControlledPropUpdatedSelectedItem,\n        inputValue: props.itemToString(props.selectedItem)\n      });\n    }\n    previousSelectedItemRef.current = state.selectedItem === previousSelectedItemRef.current ? props.selectedItem : state.selectedItem;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.selectedItem, props.selectedItem]);\n  return [getState(state, props), dispatch];\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nvar validatePropTypes$1 = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes$1 = function validatePropTypes(options, caller) {\n    PropTypes.checkPropTypes(propTypes$1, options, 'prop', caller.name);\n  };\n}\nvar defaultProps$1 = _extends({}, defaultProps$3, {\n  selectedItemChanged: function selectedItemChanged(prevItem, item) {\n    return prevItem !== item;\n  },\n  getA11yStatusMessage: getA11yStatusMessage$1,\n  isItemDisabled: function isItemDisabled() {\n    return false;\n  }\n});\n\n/* eslint-disable complexity */\nfunction downshiftUseComboboxReducer(state, action) {\n  var _props$items;\n  var type = action.type,\n    props = action.props,\n    altKey = action.altKey;\n  var changes;\n  switch (type) {\n    case ItemClick:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n    case InputKeyDownArrowDown:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getHighlightedIndex(state.highlightedIndex, 1, props.items, props.isItemDisabled, true)\n        };\n      } else {\n        changes = {\n          highlightedIndex: altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1),\n          isOpen: props.items.length >= 0\n        };\n      }\n      break;\n    case InputKeyDownArrowUp:\n      if (state.isOpen) {\n        if (altKey) {\n          changes = getChangesOnSelection(props, state.highlightedIndex);\n        } else {\n          changes = {\n            highlightedIndex: getHighlightedIndex(state.highlightedIndex, -1, props.items, props.isItemDisabled, true)\n          };\n        }\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(props, state, -1),\n          isOpen: props.items.length >= 0\n        };\n      }\n      break;\n    case InputKeyDownEnter:\n      changes = getChangesOnSelection(props, state.highlightedIndex);\n      break;\n    case InputKeyDownEscape:\n      changes = _extends({\n        isOpen: false,\n        highlightedIndex: -1\n      }, !state.isOpen && {\n        selectedItem: null,\n        inputValue: ''\n      });\n      break;\n    case InputKeyDownPageUp:\n      changes = {\n        highlightedIndex: getHighlightedIndex(state.highlightedIndex, -10, props.items, props.isItemDisabled, true)\n      };\n      break;\n    case InputKeyDownPageDown:\n      changes = {\n        highlightedIndex: getHighlightedIndex(state.highlightedIndex, 10, props.items, props.isItemDisabled, true)\n      };\n      break;\n    case InputKeyDownHome:\n      changes = {\n        highlightedIndex: getNonDisabledIndex(0, false, props.items, props.isItemDisabled)\n      };\n      break;\n    case InputKeyDownEnd:\n      changes = {\n        highlightedIndex: getNonDisabledIndex(props.items.length - 1, true, props.items, props.isItemDisabled)\n      };\n      break;\n    case InputBlur:\n      changes = _extends({\n        isOpen: false,\n        highlightedIndex: -1\n      }, state.highlightedIndex >= 0 && ((_props$items = props.items) == null ? void 0 : _props$items.length) && action.selectItem && {\n        selectedItem: props.items[state.highlightedIndex],\n        inputValue: props.itemToString(props.items[state.highlightedIndex])\n      });\n      break;\n    case InputChange:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        inputValue: action.inputValue\n      };\n      break;\n    case InputClick:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n    case FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n    case ControlledPropUpdatedSelectedItem:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n    default:\n      return downshiftCommonReducer(state, action, stateChangeTypes$1);\n  }\n  return _extends({}, state, changes);\n}\n/* eslint-enable complexity */\n\nvar _excluded$1 = [\"onMouseLeave\", \"refKey\", \"ref\"],\n  _excluded2$1 = [\"item\", \"index\", \"refKey\", \"ref\", \"onMouseMove\", \"onMouseDown\", \"onClick\", \"onPress\", \"disabled\"],\n  _excluded3 = [\"onClick\", \"onPress\", \"refKey\", \"ref\"],\n  _excluded4 = [\"onKeyDown\", \"onChange\", \"onInput\", \"onBlur\", \"onChangeText\", \"onClick\", \"refKey\", \"ref\"];\nuseCombobox.stateChangeTypes = stateChangeTypes$1;\nfunction useCombobox(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n  validatePropTypes$1(userProps, useCombobox);\n  // Props defaults and destructuring.\n  var props = _extends({}, defaultProps$1, userProps);\n  var items = props.items,\n    scrollIntoView = props.scrollIntoView,\n    environment = props.environment,\n    getA11yStatusMessage = props.getA11yStatusMessage,\n    getA11ySelectionMessage = props.getA11ySelectionMessage,\n    itemToString = props.itemToString;\n  // Initial state depending on controlled props.\n  var initialState = getInitialState$1(props);\n  var _useControlledReducer = useControlledReducer(downshiftUseComboboxReducer, initialState, props),\n    state = _useControlledReducer[0],\n    dispatch = _useControlledReducer[1];\n  var isOpen = state.isOpen,\n    highlightedIndex = state.highlightedIndex,\n    selectedItem = state.selectedItem,\n    inputValue = state.inputValue;\n\n  // Element refs.\n  var menuRef = useRef(null);\n  var itemRefs = useRef({});\n  var inputRef = useRef(null);\n  var toggleButtonRef = useRef(null);\n  var isInitialMountRef = useRef(true);\n  // prevent id re-generation between renders.\n  var elementIds = useElementIds(props);\n  // used to keep track of how many items we had on previous cycle.\n  var previousResultCountRef = useRef();\n  // utility callback to get item element.\n  var latest = useLatestRef({\n    state: state,\n    props: props\n  });\n  var getItemNodeFromIndex = useCallback(function (index) {\n    return itemRefs.current[elementIds.getItemId(index)];\n  }, [elementIds]);\n\n  // Effects.\n  // Sets a11y status message on changes in state.\n  useA11yMessageSetter(getA11yStatusMessage, [isOpen, highlightedIndex, inputValue, items], _extends({\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items: items,\n    environment: environment,\n    itemToString: itemToString\n  }, state));\n  // Sets a11y status message on changes in selectedItem.\n  useA11yMessageSetter(getA11ySelectionMessage, [selectedItem], _extends({\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items: items,\n    environment: environment,\n    itemToString: itemToString\n  }, state));\n  // Scroll on highlighted item if change comes from keyboard.\n  var shouldScrollRef = useScrollIntoView({\n    menuElement: menuRef.current,\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    itemRefs: itemRefs,\n    scrollIntoView: scrollIntoView,\n    getItemNodeFromIndex: getItemNodeFromIndex\n  });\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props: props,\n    state: state\n  });\n  // Focus the input on first render if required.\n  useEffect(function () {\n    var focusOnOpen = getInitialValue$1(props, 'isOpen');\n    if (focusOnOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(function () {\n    if (isInitialMountRef.current) {\n      return;\n    }\n    previousResultCountRef.current = items.length;\n  });\n  // Add mouse/touch events to document.\n  var mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [inputRef, menuRef, toggleButtonRef], environment, function () {\n    dispatch({\n      type: InputBlur,\n      selectItem: false\n    });\n  });\n  var setGetterPropCallInfo = useGetterPropsCalledChecker('getInputProps', 'getMenuProps');\n  // Make initial ref false.\n  useEffect(function () {\n    isInitialMountRef.current = false;\n    return function () {\n      isInitialMountRef.current = true;\n    };\n  }, []);\n  // Reset itemRefs on close.\n  useEffect(function () {\n    if (!isOpen) {\n      itemRefs.current = {};\n    }\n  }, [isOpen]);\n  // Reset itemRefs on close.\n  useEffect(function () {\n    var _inputRef$current;\n    if (!isOpen || !(environment != null && environment.document) || !(inputRef != null && (_inputRef$current = inputRef.current) != null && _inputRef$current.focus)) {\n      return;\n    }\n    if (environment.document.activeElement !== inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isOpen, environment]);\n\n  /* Event handler functions */\n  var inputKeyDownHandlers = useMemo(function () {\n    return {\n      ArrowDown: function ArrowDown(event) {\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownArrowDown,\n          altKey: event.altKey\n        });\n      },\n      ArrowUp: function ArrowUp(event) {\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownArrowUp,\n          altKey: event.altKey\n        });\n      },\n      Home: function Home(event) {\n        if (!latest.current.state.isOpen) {\n          return;\n        }\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownHome\n        });\n      },\n      End: function End(event) {\n        if (!latest.current.state.isOpen) {\n          return;\n        }\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownEnd\n        });\n      },\n      Escape: function Escape(event) {\n        var latestState = latest.current.state;\n        if (latestState.isOpen || latestState.inputValue || latestState.selectedItem || latestState.highlightedIndex > -1) {\n          event.preventDefault();\n          dispatch({\n            type: InputKeyDownEscape\n          });\n        }\n      },\n      Enter: function Enter(event) {\n        var latestState = latest.current.state;\n        // if closed or no highlighted index, do nothing.\n        if (!latestState.isOpen || event.which === 229 // if IME composing, wait for next Enter keydown event.\n        ) {\n          return;\n        }\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownEnter\n        });\n      },\n      PageUp: function PageUp(event) {\n        if (latest.current.state.isOpen) {\n          event.preventDefault();\n          dispatch({\n            type: InputKeyDownPageUp\n          });\n        }\n      },\n      PageDown: function PageDown(event) {\n        if (latest.current.state.isOpen) {\n          event.preventDefault();\n          dispatch({\n            type: InputKeyDownPageDown\n          });\n        }\n      }\n    };\n  }, [dispatch, latest]);\n\n  // Getter props.\n  var getLabelProps = useCallback(function (labelProps) {\n    return _extends({\n      id: elementIds.labelId,\n      htmlFor: elementIds.inputId\n    }, labelProps);\n  }, [elementIds]);\n  var getMenuProps = useCallback(function (_temp, _temp2) {\n    var _extends2;\n    var _ref = _temp === void 0 ? {} : _temp,\n      onMouseLeave = _ref.onMouseLeave,\n      _ref$refKey = _ref.refKey,\n      refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,\n      ref = _ref.ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      _ref2$suppressRefErro = _ref2.suppressRefError,\n      suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;\n    setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef);\n    return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function (menuNode) {\n      menuRef.current = menuNode;\n    }), _extends2.id = elementIds.menuId, _extends2.role = 'listbox', _extends2['aria-labelledby'] = rest && rest['aria-label'] ? undefined : \"\" + elementIds.labelId, _extends2.onMouseLeave = callAllEventHandlers(onMouseLeave, function () {\n      dispatch({\n        type: MenuMouseLeave\n      });\n    }), _extends2), rest);\n  }, [dispatch, setGetterPropCallInfo, elementIds]);\n  var getItemProps = useCallback(function (_temp3) {\n    var _extends3, _ref4;\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\n      itemProp = _ref3.item,\n      indexProp = _ref3.index,\n      _ref3$refKey = _ref3.refKey,\n      refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,\n      ref = _ref3.ref,\n      onMouseMove = _ref3.onMouseMove,\n      onMouseDown = _ref3.onMouseDown,\n      onClick = _ref3.onClick;\n      _ref3.onPress;\n      var disabledProp = _ref3.disabled,\n      rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$1);\n    if (disabledProp !== undefined) {\n      console.warn('Passing \"disabled\" as an argument to getItemProps is not supported anymore. Please use the isItemDisabled prop from useCombobox.');\n    }\n    var _latest$current = latest.current,\n      latestProps = _latest$current.props,\n      latestState = _latest$current.state;\n    var _getItemAndIndex = getItemAndIndex(itemProp, indexProp, latestProps.items, 'Pass either item or index to getItemProps!'),\n      item = _getItemAndIndex[0],\n      index = _getItemAndIndex[1];\n    var disabled = latestProps.isItemDisabled(item, index);\n    var onSelectKey = 'onClick';\n    var customClickHandler = onClick;\n    var itemHandleMouseMove = function itemHandleMouseMove() {\n      if (index === latestState.highlightedIndex) {\n        return;\n      }\n      shouldScrollRef.current = false;\n      dispatch({\n        type: ItemMouseMove,\n        index: index,\n        disabled: disabled\n      });\n    };\n    var itemHandleClick = function itemHandleClick() {\n      dispatch({\n        type: ItemClick,\n        index: index\n      });\n    };\n    var itemHandleMouseDown = function itemHandleMouseDown(e) {\n      return e.preventDefault();\n    }; // keep focus on the input after item click select.\n\n    return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function (itemNode) {\n      if (itemNode) {\n        itemRefs.current[elementIds.getItemId(index)] = itemNode;\n      }\n    }), _extends3['aria-disabled'] = disabled, _extends3['aria-selected'] = \"\" + (index === latestState.highlightedIndex), _extends3.id = elementIds.getItemId(index), _extends3.role = 'option', _extends3), !disabled && (_ref4 = {}, _ref4[onSelectKey] = callAllEventHandlers(customClickHandler, itemHandleClick), _ref4), {\n      onMouseMove: callAllEventHandlers(onMouseMove, itemHandleMouseMove),\n      onMouseDown: callAllEventHandlers(onMouseDown, itemHandleMouseDown)\n    }, rest);\n  }, [dispatch, latest, shouldScrollRef, elementIds]);\n  var getToggleButtonProps = useCallback(function (_temp4) {\n    var _extends4;\n    var _ref5 = _temp4 === void 0 ? {} : _temp4,\n      onClick = _ref5.onClick;\n      _ref5.onPress;\n      var _ref5$refKey = _ref5.refKey,\n      refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,\n      ref = _ref5.ref,\n      rest = _objectWithoutPropertiesLoose(_ref5, _excluded3);\n    var latestState = latest.current.state;\n    var toggleButtonHandleClick = function toggleButtonHandleClick() {\n      dispatch({\n        type: ToggleButtonClick\n      });\n    };\n    return _extends((_extends4 = {}, _extends4[refKey] = handleRefs(ref, function (toggleButtonNode) {\n      toggleButtonRef.current = toggleButtonNode;\n    }), _extends4['aria-controls'] = elementIds.menuId, _extends4['aria-expanded'] = latestState.isOpen, _extends4.id = elementIds.toggleButtonId, _extends4.tabIndex = -1, _extends4), !rest.disabled && _extends({}, {\n      onClick: callAllEventHandlers(onClick, toggleButtonHandleClick)\n    }), rest);\n  }, [dispatch, latest, elementIds]);\n  var getInputProps = useCallback(function (_temp5, _temp6) {\n    var _extends5;\n    var _ref6 = _temp5 === void 0 ? {} : _temp5,\n      onKeyDown = _ref6.onKeyDown,\n      onChange = _ref6.onChange,\n      onInput = _ref6.onInput,\n      onBlur = _ref6.onBlur;\n      _ref6.onChangeText;\n      var onClick = _ref6.onClick,\n      _ref6$refKey = _ref6.refKey,\n      refKey = _ref6$refKey === void 0 ? 'ref' : _ref6$refKey,\n      ref = _ref6.ref,\n      rest = _objectWithoutPropertiesLoose(_ref6, _excluded4);\n    var _ref7 = _temp6 === void 0 ? {} : _temp6,\n      _ref7$suppressRefErro = _ref7.suppressRefError,\n      suppressRefError = _ref7$suppressRefErro === void 0 ? false : _ref7$suppressRefErro;\n    setGetterPropCallInfo('getInputProps', suppressRefError, refKey, inputRef);\n    var latestState = latest.current.state;\n    var inputHandleKeyDown = function inputHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n      if (key && inputKeyDownHandlers[key]) {\n        inputKeyDownHandlers[key](event);\n      }\n    };\n    var inputHandleChange = function inputHandleChange(event) {\n      dispatch({\n        type: InputChange,\n        inputValue: event.target.value\n      });\n    };\n    var inputHandleBlur = function inputHandleBlur(event) {\n      /* istanbul ignore else */\n      if (environment != null && environment.document && latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {\n        var isBlurByTabChange = event.relatedTarget === null && environment.document.activeElement !== environment.document.body;\n        dispatch({\n          type: InputBlur,\n          selectItem: !isBlurByTabChange\n        });\n      }\n    };\n    var inputHandleClick = function inputHandleClick() {\n      dispatch({\n        type: InputClick\n      });\n    };\n\n    /* istanbul ignore next (preact) */\n    var onChangeKey = 'onChange';\n    var eventHandlers = {};\n    if (!rest.disabled) {\n      var _eventHandlers;\n      eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, inputHandleBlur), _eventHandlers.onClick = callAllEventHandlers(onClick, inputHandleClick), _eventHandlers);\n    }\n    return _extends((_extends5 = {}, _extends5[refKey] = handleRefs(ref, function (inputNode) {\n      inputRef.current = inputNode;\n    }), _extends5['aria-activedescendant'] = latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : '', _extends5['aria-autocomplete'] = 'list', _extends5['aria-controls'] = elementIds.menuId, _extends5['aria-expanded'] = latestState.isOpen, _extends5['aria-labelledby'] = rest && rest['aria-label'] ? undefined : elementIds.labelId, _extends5.autoComplete = 'off', _extends5.id = elementIds.inputId, _extends5.role = 'combobox', _extends5.value = latestState.inputValue, _extends5), eventHandlers, rest);\n  }, [setGetterPropCallInfo, latest, elementIds, inputKeyDownHandlers, dispatch, mouseAndTouchTrackersRef, environment]);\n\n  // returns\n  var toggleMenu = useCallback(function () {\n    dispatch({\n      type: FunctionToggleMenu\n    });\n  }, [dispatch]);\n  var closeMenu = useCallback(function () {\n    dispatch({\n      type: FunctionCloseMenu\n    });\n  }, [dispatch]);\n  var openMenu = useCallback(function () {\n    dispatch({\n      type: FunctionOpenMenu\n    });\n  }, [dispatch]);\n  var setHighlightedIndex = useCallback(function (newHighlightedIndex) {\n    dispatch({\n      type: FunctionSetHighlightedIndex,\n      highlightedIndex: newHighlightedIndex\n    });\n  }, [dispatch]);\n  var selectItem = useCallback(function (newSelectedItem) {\n    dispatch({\n      type: FunctionSelectItem,\n      selectedItem: newSelectedItem\n    });\n  }, [dispatch]);\n  var setInputValue = useCallback(function (newInputValue) {\n    dispatch({\n      type: FunctionSetInputValue,\n      inputValue: newInputValue\n    });\n  }, [dispatch]);\n  var reset = useCallback(function () {\n    dispatch({\n      type: FunctionReset$1\n    });\n  }, [dispatch]);\n  return {\n    // prop getters.\n    getItemProps: getItemProps,\n    getLabelProps: getLabelProps,\n    getMenuProps: getMenuProps,\n    getInputProps: getInputProps,\n    getToggleButtonProps: getToggleButtonProps,\n    // actions.\n    toggleMenu: toggleMenu,\n    openMenu: openMenu,\n    closeMenu: closeMenu,\n    setHighlightedIndex: setHighlightedIndex,\n    setInputValue: setInputValue,\n    selectItem: selectItem,\n    reset: reset,\n    // state.\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    selectedItem: selectedItem,\n    inputValue: inputValue\n  };\n}\n\nvar defaultStateValues = {\n  activeIndex: -1,\n  selectedItems: []\n};\n\n/**\n * Returns the initial value for a state key in the following order:\n * 1. controlled prop, 2. initial prop, 3. default prop, 4. default\n * value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\nfunction getInitialValue(props, propKey) {\n  return getInitialValue$1(props, propKey, defaultStateValues);\n}\n\n/**\n * Returns the default value for a state key in the following order:\n * 1. controlled prop, 2. default prop, 3. default value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\nfunction getDefaultValue(props, propKey) {\n  return getDefaultValue$1(props, propKey, defaultStateValues);\n}\n\n/**\n * Gets the initial state based on the provided props. It uses initial, default\n * and controlled props related to state in order to compute the initial value.\n *\n * @param {Object} props Props passed to the hook.\n * @returns {Object} The initial state.\n */\nfunction getInitialState(props) {\n  var activeIndex = getInitialValue(props, 'activeIndex');\n  var selectedItems = getInitialValue(props, 'selectedItems');\n  return {\n    activeIndex: activeIndex,\n    selectedItems: selectedItems\n  };\n}\n\n/**\n * Returns true if dropdown keydown operation is permitted. Should not be\n * allowed on keydown with modifier keys (ctrl, alt, shift, meta), on\n * input element with text content that is either highlighted or selection\n * cursor is not at the starting position.\n *\n * @param {KeyboardEvent} event The event from keydown.\n * @returns {boolean} Whether the operation is allowed.\n */\nfunction isKeyDownOperationPermitted(event) {\n  if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {\n    return false;\n  }\n  var element = event.target;\n  if (element instanceof HTMLInputElement &&\n  // if element is a text input\n  element.value !== '' && (\n  // and we have text in it\n  // and cursor is either not at the start or is currently highlighting text.\n  element.selectionStart !== 0 || element.selectionEnd !== 0)) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Returns a message to be added to aria-live region when item is removed.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11yRemovalMessage(selectionParameters) {\n  var removedSelectedItem = selectionParameters.removedSelectedItem,\n    itemToStringLocal = selectionParameters.itemToString;\n  return itemToStringLocal(removedSelectedItem) + \" has been removed.\";\n}\nvar propTypes = _extends({}, commonPropTypes, {\n  selectedItems: PropTypes.array,\n  initialSelectedItems: PropTypes.array,\n  defaultSelectedItems: PropTypes.array,\n  getA11yRemovalMessage: PropTypes.func,\n  activeIndex: PropTypes.number,\n  initialActiveIndex: PropTypes.number,\n  defaultActiveIndex: PropTypes.number,\n  onActiveIndexChange: PropTypes.func,\n  onSelectedItemsChange: PropTypes.func,\n  keyNavigationNext: PropTypes.string,\n  keyNavigationPrevious: PropTypes.string\n});\nvar defaultProps = {\n  itemToString: defaultProps$3.itemToString,\n  stateReducer: defaultProps$3.stateReducer,\n  environment: defaultProps$3.environment,\n  getA11yRemovalMessage: getA11yRemovalMessage,\n  keyNavigationNext: 'ArrowRight',\n  keyNavigationPrevious: 'ArrowLeft'\n};\n\n// eslint-disable-next-line import/no-mutable-exports\nvar validatePropTypes = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes = function validatePropTypes(options, caller) {\n    PropTypes.checkPropTypes(propTypes, options, 'prop', caller.name);\n  };\n}\n\nvar SelectedItemClick = process.env.NODE_ENV !== \"production\" ? '__selected_item_click__' : 0;\nvar SelectedItemKeyDownDelete = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_delete__' : 1;\nvar SelectedItemKeyDownBackspace = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_backspace__' : 2;\nvar SelectedItemKeyDownNavigationNext = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_navigation_next__' : 3;\nvar SelectedItemKeyDownNavigationPrevious = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_navigation_previous__' : 4;\nvar DropdownKeyDownNavigationPrevious = process.env.NODE_ENV !== \"production\" ? '__dropdown_keydown_navigation_previous__' : 5;\nvar DropdownKeyDownBackspace = process.env.NODE_ENV !== \"production\" ? '__dropdown_keydown_backspace__' : 6;\nvar DropdownClick = process.env.NODE_ENV !== \"production\" ? '__dropdown_click__' : 7;\nvar FunctionAddSelectedItem = process.env.NODE_ENV !== \"production\" ? '__function_add_selected_item__' : 8;\nvar FunctionRemoveSelectedItem = process.env.NODE_ENV !== \"production\" ? '__function_remove_selected_item__' : 9;\nvar FunctionSetSelectedItems = process.env.NODE_ENV !== \"production\" ? '__function_set_selected_items__' : 10;\nvar FunctionSetActiveIndex = process.env.NODE_ENV !== \"production\" ? '__function_set_active_index__' : 11;\nvar FunctionReset = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 12;\n\nvar stateChangeTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SelectedItemClick: SelectedItemClick,\n  SelectedItemKeyDownDelete: SelectedItemKeyDownDelete,\n  SelectedItemKeyDownBackspace: SelectedItemKeyDownBackspace,\n  SelectedItemKeyDownNavigationNext: SelectedItemKeyDownNavigationNext,\n  SelectedItemKeyDownNavigationPrevious: SelectedItemKeyDownNavigationPrevious,\n  DropdownKeyDownNavigationPrevious: DropdownKeyDownNavigationPrevious,\n  DropdownKeyDownBackspace: DropdownKeyDownBackspace,\n  DropdownClick: DropdownClick,\n  FunctionAddSelectedItem: FunctionAddSelectedItem,\n  FunctionRemoveSelectedItem: FunctionRemoveSelectedItem,\n  FunctionSetSelectedItems: FunctionSetSelectedItems,\n  FunctionSetActiveIndex: FunctionSetActiveIndex,\n  FunctionReset: FunctionReset\n});\n\n/* eslint-disable complexity */\nfunction downshiftMultipleSelectionReducer(state, action) {\n  var type = action.type,\n    index = action.index,\n    props = action.props,\n    selectedItem = action.selectedItem;\n  var activeIndex = state.activeIndex,\n    selectedItems = state.selectedItems;\n  var changes;\n  switch (type) {\n    case SelectedItemClick:\n      changes = {\n        activeIndex: index\n      };\n      break;\n    case SelectedItemKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1\n      };\n      break;\n    case SelectedItemKeyDownNavigationNext:\n      changes = {\n        activeIndex: activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1\n      };\n      break;\n    case SelectedItemKeyDownBackspace:\n    case SelectedItemKeyDownDelete:\n      {\n        if (activeIndex < 0) {\n          break;\n        }\n        var newActiveIndex = activeIndex;\n        if (selectedItems.length === 1) {\n          newActiveIndex = -1;\n        } else if (activeIndex === selectedItems.length - 1) {\n          newActiveIndex = selectedItems.length - 2;\n        }\n        changes = _extends({\n          selectedItems: [].concat(selectedItems.slice(0, activeIndex), selectedItems.slice(activeIndex + 1))\n        }, {\n          activeIndex: newActiveIndex\n        });\n        break;\n      }\n    case DropdownKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: selectedItems.length - 1\n      };\n      break;\n    case DropdownKeyDownBackspace:\n      changes = {\n        selectedItems: selectedItems.slice(0, selectedItems.length - 1)\n      };\n      break;\n    case FunctionAddSelectedItem:\n      changes = {\n        selectedItems: [].concat(selectedItems, [selectedItem])\n      };\n      break;\n    case DropdownClick:\n      changes = {\n        activeIndex: -1\n      };\n      break;\n    case FunctionRemoveSelectedItem:\n      {\n        var _newActiveIndex = activeIndex;\n        var selectedItemIndex = selectedItems.indexOf(selectedItem);\n        if (selectedItemIndex < 0) {\n          break;\n        }\n        if (selectedItems.length === 1) {\n          _newActiveIndex = -1;\n        } else if (selectedItemIndex === selectedItems.length - 1) {\n          _newActiveIndex = selectedItems.length - 2;\n        }\n        changes = {\n          selectedItems: [].concat(selectedItems.slice(0, selectedItemIndex), selectedItems.slice(selectedItemIndex + 1)),\n          activeIndex: _newActiveIndex\n        };\n        break;\n      }\n    case FunctionSetSelectedItems:\n      {\n        var newSelectedItems = action.selectedItems;\n        changes = {\n          selectedItems: newSelectedItems\n        };\n        break;\n      }\n    case FunctionSetActiveIndex:\n      {\n        var _newActiveIndex2 = action.activeIndex;\n        changes = {\n          activeIndex: _newActiveIndex2\n        };\n        break;\n      }\n    case FunctionReset:\n      changes = {\n        activeIndex: getDefaultValue(props, 'activeIndex'),\n        selectedItems: getDefaultValue(props, 'selectedItems')\n      };\n      break;\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n  return _extends({}, state, changes);\n}\n\nvar _excluded = [\"refKey\", \"ref\", \"onClick\", \"onKeyDown\", \"selectedItem\", \"index\"],\n  _excluded2 = [\"refKey\", \"ref\", \"onKeyDown\", \"onClick\", \"preventKeyAction\"];\nuseMultipleSelection.stateChangeTypes = stateChangeTypes;\nfunction useMultipleSelection(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n  validatePropTypes(userProps, useMultipleSelection);\n  // Props defaults and destructuring.\n  var props = _extends({}, defaultProps, userProps);\n  var getA11yRemovalMessage = props.getA11yRemovalMessage,\n    itemToString = props.itemToString,\n    environment = props.environment,\n    keyNavigationNext = props.keyNavigationNext,\n    keyNavigationPrevious = props.keyNavigationPrevious;\n\n  // Reducer init.\n  var _useControlledReducer = useControlledReducer$1(downshiftMultipleSelectionReducer, getInitialState(props), props),\n    state = _useControlledReducer[0],\n    dispatch = _useControlledReducer[1];\n  var activeIndex = state.activeIndex,\n    selectedItems = state.selectedItems;\n\n  // Refs.\n  var isInitialMountRef = useRef(true);\n  var dropdownRef = useRef(null);\n  var previousSelectedItemsRef = useRef(selectedItems);\n  var selectedItemRefs = useRef();\n  selectedItemRefs.current = [];\n  var latest = useLatestRef({\n    state: state,\n    props: props\n  });\n\n  // Effects.\n  /* Sets a11y status message on changes in selectedItem. */\n  useEffect(function () {\n    if (isInitialMountRef.current || false || !(environment != null && environment.document)) {\n      return;\n    }\n    if (selectedItems.length < previousSelectedItemsRef.current.length) {\n      var removedSelectedItem = previousSelectedItemsRef.current.find(function (item) {\n        return selectedItems.indexOf(item) < 0;\n      });\n      setStatus(getA11yRemovalMessage({\n        itemToString: itemToString,\n        resultCount: selectedItems.length,\n        removedSelectedItem: removedSelectedItem,\n        activeIndex: activeIndex,\n        activeSelectedItem: selectedItems[activeIndex]\n      }), environment.document);\n    }\n    previousSelectedItemsRef.current = selectedItems;\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItems.length]);\n  // Sets focus on active item.\n  useEffect(function () {\n    if (isInitialMountRef.current) {\n      return;\n    }\n    if (activeIndex === -1 && dropdownRef.current) {\n      dropdownRef.current.focus();\n    } else if (selectedItemRefs.current[activeIndex]) {\n      selectedItemRefs.current[activeIndex].focus();\n    }\n  }, [activeIndex]);\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props: props,\n    state: state\n  });\n  var setGetterPropCallInfo = useGetterPropsCalledChecker('getDropdownProps');\n  // Make initial ref false.\n  useEffect(function () {\n    isInitialMountRef.current = false;\n    return function () {\n      isInitialMountRef.current = true;\n    };\n  }, []);\n\n  // Event handler functions.\n  var selectedItemKeyDownHandlers = useMemo(function () {\n    var _ref;\n    return _ref = {}, _ref[keyNavigationPrevious] = function () {\n      dispatch({\n        type: SelectedItemKeyDownNavigationPrevious\n      });\n    }, _ref[keyNavigationNext] = function () {\n      dispatch({\n        type: SelectedItemKeyDownNavigationNext\n      });\n    }, _ref.Delete = function Delete() {\n      dispatch({\n        type: SelectedItemKeyDownDelete\n      });\n    }, _ref.Backspace = function Backspace() {\n      dispatch({\n        type: SelectedItemKeyDownBackspace\n      });\n    }, _ref;\n  }, [dispatch, keyNavigationNext, keyNavigationPrevious]);\n  var dropdownKeyDownHandlers = useMemo(function () {\n    var _ref2;\n    return _ref2 = {}, _ref2[keyNavigationPrevious] = function (event) {\n      if (isKeyDownOperationPermitted(event)) {\n        dispatch({\n          type: DropdownKeyDownNavigationPrevious\n        });\n      }\n    }, _ref2.Backspace = function Backspace(event) {\n      if (isKeyDownOperationPermitted(event)) {\n        dispatch({\n          type: DropdownKeyDownBackspace\n        });\n      }\n    }, _ref2;\n  }, [dispatch, keyNavigationPrevious]);\n\n  // Getter props.\n  var getSelectedItemProps = useCallback(function (_temp) {\n    var _extends2;\n    var _ref3 = _temp === void 0 ? {} : _temp,\n      _ref3$refKey = _ref3.refKey,\n      refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,\n      ref = _ref3.ref,\n      onClick = _ref3.onClick,\n      onKeyDown = _ref3.onKeyDown,\n      selectedItemProp = _ref3.selectedItem,\n      indexProp = _ref3.index,\n      rest = _objectWithoutPropertiesLoose(_ref3, _excluded);\n    var latestState = latest.current.state;\n    var _getItemAndIndex = getItemAndIndex(selectedItemProp, indexProp, latestState.selectedItems, 'Pass either item or index to getSelectedItemProps!'),\n      index = _getItemAndIndex[1];\n    var isFocusable = index > -1 && index === latestState.activeIndex;\n    var selectedItemHandleClick = function selectedItemHandleClick() {\n      dispatch({\n        type: SelectedItemClick,\n        index: index\n      });\n    };\n    var selectedItemHandleKeyDown = function selectedItemHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n      if (key && selectedItemKeyDownHandlers[key]) {\n        selectedItemKeyDownHandlers[key](event);\n      }\n    };\n    return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function (selectedItemNode) {\n      if (selectedItemNode) {\n        selectedItemRefs.current.push(selectedItemNode);\n      }\n    }), _extends2.tabIndex = isFocusable ? 0 : -1, _extends2.onClick = callAllEventHandlers(onClick, selectedItemHandleClick), _extends2.onKeyDown = callAllEventHandlers(onKeyDown, selectedItemHandleKeyDown), _extends2), rest);\n  }, [dispatch, latest, selectedItemKeyDownHandlers]);\n  var getDropdownProps = useCallback(function (_temp2, _temp3) {\n    var _extends3;\n    var _ref4 = _temp2 === void 0 ? {} : _temp2,\n      _ref4$refKey = _ref4.refKey,\n      refKey = _ref4$refKey === void 0 ? 'ref' : _ref4$refKey,\n      ref = _ref4.ref,\n      onKeyDown = _ref4.onKeyDown,\n      onClick = _ref4.onClick,\n      _ref4$preventKeyActio = _ref4.preventKeyAction,\n      preventKeyAction = _ref4$preventKeyActio === void 0 ? false : _ref4$preventKeyActio,\n      rest = _objectWithoutPropertiesLoose(_ref4, _excluded2);\n    var _ref5 = _temp3 === void 0 ? {} : _temp3,\n      _ref5$suppressRefErro = _ref5.suppressRefError,\n      suppressRefError = _ref5$suppressRefErro === void 0 ? false : _ref5$suppressRefErro;\n    setGetterPropCallInfo('getDropdownProps', suppressRefError, refKey, dropdownRef);\n    var dropdownHandleKeyDown = function dropdownHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n      if (key && dropdownKeyDownHandlers[key]) {\n        dropdownKeyDownHandlers[key](event);\n      }\n    };\n    var dropdownHandleClick = function dropdownHandleClick() {\n      dispatch({\n        type: DropdownClick\n      });\n    };\n    return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function (dropdownNode) {\n      if (dropdownNode) {\n        dropdownRef.current = dropdownNode;\n      }\n    }), _extends3), !preventKeyAction && {\n      onKeyDown: callAllEventHandlers(onKeyDown, dropdownHandleKeyDown),\n      onClick: callAllEventHandlers(onClick, dropdownHandleClick)\n    }, rest);\n  }, [dispatch, dropdownKeyDownHandlers, setGetterPropCallInfo]);\n\n  // returns\n  var addSelectedItem = useCallback(function (selectedItem) {\n    dispatch({\n      type: FunctionAddSelectedItem,\n      selectedItem: selectedItem\n    });\n  }, [dispatch]);\n  var removeSelectedItem = useCallback(function (selectedItem) {\n    dispatch({\n      type: FunctionRemoveSelectedItem,\n      selectedItem: selectedItem\n    });\n  }, [dispatch]);\n  var setSelectedItems = useCallback(function (newSelectedItems) {\n    dispatch({\n      type: FunctionSetSelectedItems,\n      selectedItems: newSelectedItems\n    });\n  }, [dispatch]);\n  var setActiveIndex = useCallback(function (newActiveIndex) {\n    dispatch({\n      type: FunctionSetActiveIndex,\n      activeIndex: newActiveIndex\n    });\n  }, [dispatch]);\n  var reset = useCallback(function () {\n    dispatch({\n      type: FunctionReset\n    });\n  }, [dispatch]);\n  return {\n    getSelectedItemProps: getSelectedItemProps,\n    getDropdownProps: getDropdownProps,\n    addSelectedItem: addSelectedItem,\n    removeSelectedItem: removeSelectedItem,\n    setSelectedItems: setSelectedItems,\n    setActiveIndex: setActiveIndex,\n    reset: reset,\n    selectedItems: selectedItems,\n    activeIndex: activeIndex\n  };\n}\n\nexport { Downshift$1 as default, resetIdCounter, useCombobox, useMultipleSelection, useSelect };\n","import { useCombobox } from 'downshift'\nimport { useField, useFormikContext } from 'formik'\nimport React, { useEffect, useState } from 'react'\n\nimport { BaseCheckbox, BaseInput } from '../shared'\n\nimport styles from './AdageMultiselect.module.scss'\n\ninterface ItemProps {\n  label: string\n  value: number | string | string[]\n}\n\ninterface AdageMultiselectProps {\n  options: ItemProps[]\n  placeholder: string\n  name: string\n  label: string\n  isOpen: boolean\n  filterMaxLength?: number\n  sortOptions?: (\n    items: ItemProps[],\n    selectedItems: ItemProps['value'][]\n  ) => ItemProps[]\n}\n\nconst filterItems = (items: ItemProps[], inputValue: string) => {\n  const regExp = new RegExp(inputValue, 'i')\n  return items.filter((item) => item.label.match(regExp))\n}\n\nconst defaultSortOptions = (\n  items: ItemProps[],\n  selectedItems: ItemProps['value'][]\n) => {\n  return items.sort((a, b) => {\n    if (\n      isIncluded(selectedItems, b.value) &&\n      !isIncluded(selectedItems, a.value)\n    ) {\n      return 1\n    }\n    if (\n      !isIncluded(selectedItems, b.value) &&\n      isIncluded(selectedItems, a.value)\n    ) {\n      return -1\n    }\n    return a.label.localeCompare(b.label)\n  })\n}\n\nconst isIncluded = (\n  fieldValue: ItemProps['value'][],\n  value: ItemProps['value']\n): boolean => {\n  if (Array.isArray(value)) {\n    const valueSet = new Set(value)\n    return fieldValue.some(\n      (fieldValueItem) =>\n        Array.isArray(fieldValueItem) &&\n        fieldValueItem.length === value.length &&\n        fieldValueItem.every((val) => valueSet.has(val))\n    )\n  }\n\n  return fieldValue.includes(value)\n}\n\nconst AdageMultiselect = ({\n  options,\n  placeholder,\n  name,\n  label,\n  isOpen,\n  sortOptions,\n  filterMaxLength = 255,\n}: AdageMultiselectProps) => {\n  // We need to maintain the input value in state so that we can use it in itemToString\n  const [inputValue, setInputValue] = useState('')\n  const [field] = useField<ItemProps['value'][]>(name)\n  const { setFieldValue } = useFormikContext<any>()\n  const [sortedOptions, setSortedOptions] = useState<ItemProps[]>([])\n\n  const {\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getItemProps,\n    setInputValue: setDownshiftInputValue,\n  } = useCombobox({\n    items: sortedOptions,\n    defaultHighlightedIndex: 0, // after selection, highlight the first item.\n    selectedItem: null,\n    stateReducer(_state, actionAndChanges) {\n      const { changes, type } = actionAndChanges\n      /* istanbul ignore next: no need to test all case here, downshift behaviour */\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          return {\n            ...changes,\n            // We force isOpen to true because we always want to display the list of options\n            isOpen: true,\n          }\n        default:\n          return changes\n      }\n    },\n    onInputValueChange: ({ inputValue: newInputValue }) => {\n      setInputValue(newInputValue || '')\n    },\n    // By default downshift will use this callback to display the selected item, we just want to always display the input value\n    itemToString: () => inputValue,\n  })\n\n  const handleNewSelection = (selection: ItemProps) => {\n    if (isIncluded(field.value, selection.value)) {\n      if (field.value.length > 0 && Array.isArray(field.value[0])) {\n        setFieldValue(\n          name,\n          (field.value as string[][]).filter(\n            (item) =>\n              !(selection.value as string[]).some((el) => item.includes(el))\n          )\n        )\n        return\n      }\n      setFieldValue(\n        name,\n        field.value.filter((item) => !isIncluded([selection.value], item))\n      )\n    } else {\n      setFieldValue(name, [...field.value, selection.value])\n    }\n  }\n\n  // The isOpen modal state is handle outside of the component, we want to clear the input and sort items on open/close\n  useEffect(() => {\n    setInputValue('')\n    setDownshiftInputValue('')\n    setSortedOptions((sortOptions ?? defaultSortOptions)(options, field.value))\n  }, [isOpen])\n\n  return (\n    <div className={styles['container']}>\n      <label htmlFor=\"search\" className=\"visually-hidden\" {...getLabelProps()}>\n        {label}\n      </label>\n      <BaseInput\n        type=\"search\"\n        name=\"search\"\n        className={styles['search-input']}\n        placeholder={placeholder}\n        maxLength={filterMaxLength}\n        value={inputValue}\n        {...getInputProps()}\n      />\n      <ul\n        className={styles['search-list']}\n        {...getMenuProps({\n          'aria-activedescendant': getInputProps()['aria-activedescendant'],\n        })}\n      >\n        {filterItems(sortedOptions, inputValue).map((item, index) => {\n          // we cannot pass down the ref to basecheckbox as it is a function component\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { ref, ...itemProps } = getItemProps({ item, index })\n          const liValueKey = Array.isArray(item.value)\n            ? item.value.join('_')\n            : item.value\n\n          const isChecked = isIncluded(field.value, item.value)\n\n          return (\n            <li key={`${liValueKey}`}>\n              <BaseCheckbox\n                key={`${name}-${item.label}`}\n                label={item.label}\n                name={name}\n                checked={isChecked}\n                onChange={() => handleNewSelection(item)}\n                {...itemProps}\n                aria-selected={isChecked}\n              />\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default AdageMultiselect\n"],"names":["t","e","n","o","i","l","r","d","s","h","c","f","u","a","g","m","p","w","W","H","b","v","y","E","M","x","I","C","R","T","V","k","B","D","L","S","X","Y","idCounter","noop","scrollIntoView","node","menuNode","actions","compute","_ref","el","top","left","isOrContainsNode","parent","child","environment","result","debounce","fn","time","timeoutId","cancel","wrapper","_len","args","_key","callAllEventHandlers","_len2","fns","_key2","event","_len3","_key3","handleRefs","_len4","refs","_key4","ref","generateId","getA11yStatusMessage$1","_ref2","isOpen","resultCount","previousResultCount","getState","state","props","prevState","key","isControlledProp","normalizeArrowKey","keyCode","getHighlightedIndex","start","offset","items","isItemDisabled","circular","count","itemsLastIndex","current","highlightedIndex","getNonDisabledIndex","backwards","index","_index","targetWithinDownshift","target","downshiftElements","checkActiveElement","contextNode","cleanupStatus","documentProp","getStatusDiv","statusDiv","setStatus","status","div","_excluded$3","dropdownDefaultStateValues","callOnChangeProps","action","newState","type","changes","invokeOnChangeHandler","_extends","handler","capitalizeString","stateReducer","getA11ySelectionMessage","selectionParameters","selectedItem","itemToStringLocal","updateA11yStatus","getA11yMessage","document","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","useElementIds","React","id","labelId","menuId","getItemId","toggleButtonId","inputId","reactId","elementIdsRef","useRef","_ref2$id","getItemAndIndex","itemProp","indexProp","errorMessage","item","itemToString","string","useLatestRef","val","useEnhancedReducer","reducer","initialState","prevStateRef","actionRef","enhancedReducer","useCallback","_useReducer","useReducer","dispatch","propsRef","dispatchWithProps","defaultProps$3","getDefaultValue$1","propKey","defaultStateValues","defaultValue","getInitialValue$1","value","initialValue","getInitialState$2","inputValue","getHighlightedIndexOnOpen","initialHighlightedIndex","defaultHighlightedIndex","useMouseAndTouchTracker","downshiftElementRefs","handleBlur","mouseAndTouchTrackersRef","onMouseDown","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","useGetterPropsCalledChecker","useA11yMessageSetter","dependencyArray","_ref3","isInitialMount","rest","_objectWithoutPropertiesLoose","useScrollIntoView","_ref4","itemRefs","getItemNodeFromIndex","menuElement","scrollIntoViewProp","shouldScrollRef","useControlPropsValidator","getChangesOnSelection","_props$items","shouldSelect","commonPropTypes","PropTypes","commonDropdownPropTypes","downshiftCommonReducer","stateChangeTypes","__assign","getA11yStatusMessage","_a","InputKeyDownArrowDown","InputKeyDownArrowUp","InputKeyDownEscape","InputKeyDownHome","InputKeyDownEnd","InputKeyDownPageUp","InputKeyDownPageDown","InputKeyDownEnter","InputChange","InputBlur","InputClick","MenuMouseLeave","ItemMouseMove","ItemClick","ToggleButtonClick","FunctionToggleMenu","FunctionOpenMenu","FunctionCloseMenu","FunctionSetHighlightedIndex","FunctionSelectItem","FunctionSetInputValue","FunctionReset$1","ControlledPropUpdatedSelectedItem","stateChangeTypes$1","getInitialState$1","useControlledReducer","previousSelectedItemRef","_useEnhancedReducer","validatePropTypes$1","defaultProps$1","prevItem","downshiftUseComboboxReducer","altKey","_excluded$1","_excluded2$1","_excluded3","_excluded4","useCombobox","userProps","_useControlledReducer","menuRef","inputRef","toggleButtonRef","isInitialMountRef","elementIds","previousResultCountRef","latest","focusOnOpen","setGetterPropCallInfo","_inputRef$current","inputKeyDownHandlers","useMemo","latestState","getLabelProps","labelProps","getMenuProps","_temp","_temp2","_extends2","onMouseLeave","_ref$refKey","refKey","getItemProps","_temp3","_extends3","_ref3$refKey","onMouseMove","onClick","disabledProp","_latest$current","latestProps","_getItemAndIndex","disabled","onSelectKey","customClickHandler","itemHandleMouseMove","itemHandleClick","itemHandleMouseDown","itemNode","getToggleButtonProps","_temp4","_extends4","_ref5","_ref5$refKey","toggleButtonHandleClick","toggleButtonNode","getInputProps","_temp5","_temp6","_extends5","_ref6","onKeyDown","onChange","onInput","onBlur","_ref6$refKey","_ref7","inputHandleKeyDown","inputHandleChange","inputHandleBlur","isBlurByTabChange","inputHandleClick","onChangeKey","eventHandlers","_eventHandlers","inputNode","toggleMenu","closeMenu","openMenu","setHighlightedIndex","newHighlightedIndex","selectItem","newSelectedItem","setInputValue","newInputValue","reset","getA11yRemovalMessage","removedSelectedItem","filterItems","regExp","defaultSortOptions","selectedItems","isIncluded","fieldValue","valueSet","fieldValueItem","AdageMultiselect","options","placeholder","name","label","sortOptions","filterMaxLength","useState","field","useField","setFieldValue","useFormikContext","sortedOptions","setSortedOptions","setDownshiftInputValue","_state","actionAndChanges","handleNewSelection","selection","jsxs","styles","jsx","BaseInput","itemProps","liValueKey","isChecked","BaseCheckbox","AdageMultiselect$1"],"mappings":"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","x_google_ignoreList":[0,1]}