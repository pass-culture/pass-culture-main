import{j as l}from"./jsx-runtime-CfatFE5O.js";import{u as $}from"./formik.esm-DyanDbCL.js";import{B as K}from"./BaseInput-DeM_2B66.js";import{F as O}from"./FieldLayout-k08DsdoQ.js";const P={"text-input-readonly":"_text-input-readonly_1my34_1"},h=({name:a,type:t="text",className:y,classNameFooter:b,classNameLabel:g,classNameInput:V,disabled:q,readOnly:x,hideFooter:I,label:w,isLabelHidden:L=!1,placeholder:v,countCharacters:i,maxLength:s=255,smallLabel:A,isOptional:o=!1,refForInput:u,leftIcon:E,rightButton:N,rightIcon:k,step:F,hasDecimal:T=!0,inline:B=!1,description:d,clearButtonProps:_,hasLabelLineBreak:D=!0,externalError:c,ErrorDetails:H,showMandatoryAsterisk:M,...p})=>{const[f,r]=$({name:a,type:t}),j=/[0-9,.]/,U=/[0-9]/,R=/Tab|Backspace|Enter/,m=!!c||r.touched&&!!r.error,n=[];return d&&n.push(`description-${a}`),i&&n.push(`field-characters-count-description-${a}`),l.jsx(O,{className:y,classNameLabel:g,classNameFooter:b,classNameInput:V,count:i?f.value.length:void 0,error:c||r.error,isOptional:o,showMandatoryAsterisk:M,label:w,isLabelHidden:L,maxLength:s,name:a,showError:m,smallLabel:A,inline:B,hideFooter:I,description:d,clearButtonProps:_,ErrorDetails:H,hasLabelLineBreak:D,children:x?l.jsx("span",{className:P["text-input-readonly"],ref:u,children:p.value}):l.jsx(K,{disabled:q,hasError:m,maxLength:s,placeholder:v,step:F,type:t,rightButton:N,ref:u,rightIcon:k,leftIcon:E,"aria-required":!o,"aria-describedby":n.join(" ")||void 0,onKeyDown:e=>{if(t==="number"){if(R.test(e.key))return;(T?!j.test(e.key):!U.test(e.key))&&e.preventDefault()}},onWheel:e=>{t==="number"&&e.currentTarget.blur()},...f,...p})})};try{h.displayName="TextInput",h.__docgenInfo={description:"The TextInput component is a customizable input field that integrates with Formik for form state management.\nIt supports features like character counting, read-only mode, decimal number input, and accessibility enhancements.\n\n---\n** Important: Do not use the `placeholder` to indicate the format of the field.**\nUse the `label` or `description` props instead to provide instructions on the expected format.\n---",displayName:"TextInput",props:{label:{defaultValue:null,description:"",name:"label",required:!0,type:{name:"string | Element"}},name:{defaultValue:null,description:"",name:"name",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},maxLength:{defaultValue:{value:"255"},description:"",name:"maxLength",required:!1,type:{name:"number"}},isLabelHidden:{defaultValue:{value:"false"},description:`A flag to hide the label.
To be used with caution, as it can affect accessibility.
Do not use it if the label is mandatory, placeholder is not
a substitute for a label.`,name:"isLabelHidden",required:!1,type:{name:"boolean"}},hasLabelLineBreak:{defaultValue:{value:"true"},description:"",name:"hasLabelLineBreak",required:!1,type:{name:"boolean"}},isOptional:{defaultValue:{value:"false"},description:`A flag to indicate that the field is optional.
It will display an asterisk next to the label.`,name:"isOptional",required:!1,type:{name:"boolean"}},showMandatoryAsterisk:{defaultValue:null,description:"",name:"showMandatoryAsterisk",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:`A custom class for the field layout,
where label, description, input, and footer are displayed.`,name:"className",required:!1,type:{name:"string"}},classNameLabel:{defaultValue:null,description:"",name:"classNameLabel",required:!1,type:{name:"string"}},classNameFooter:{defaultValue:null,description:`A custom class for the footer,
where errors and character count are displayed.`,name:"classNameFooter",required:!1,type:{name:"string"}},classNameInput:{defaultValue:null,description:"",name:"classNameInput",required:!1,type:{name:"string"}},filterVariant:{defaultValue:null,description:"",name:"filterVariant",required:!1,type:{name:"boolean"}},smallLabel:{defaultValue:null,description:"A flag to display a smaller label.",name:"smallLabel",required:!1,type:{name:"boolean"}},hideFooter:{defaultValue:null,description:`A flag to hide the footer.
To be used with caution, as it can affect accessibility.`,name:"hideFooter",required:!1,type:{name:"boolean"}},inline:{defaultValue:{value:"false"},description:"",name:"inline",required:!1,type:{name:"boolean"}},clearButtonProps:{defaultValue:null,description:"",name:"clearButtonProps",required:!1,type:{name:'(ButtonHTMLAttributes<HTMLButtonElement> & { tooltip: string; display?: "clear" | "close"; })'}},ErrorDetails:{defaultValue:null,description:"",name:"ErrorDetails",required:!1,type:{name:"ReactNode"}},hasError:{defaultValue:null,description:"",name:"hasError",required:!1,type:{name:"boolean"}},leftIcon:{defaultValue:null,description:"",name:"leftIcon",required:!1,type:{name:"string"}},rightIcon:{defaultValue:null,description:"",name:"rightIcon",required:!1,type:{name:"string"}},rightButton:{defaultValue:null,description:"",name:"rightButton",required:!1,type:{name:"(() => Element)"}},id:{defaultValue:null,description:"",name:"id",required:!1,type:{name:"string"}},countCharacters:{defaultValue:null,description:"Allows displaying input characters count.\nMust be provided with `maxLength` to be effective.\nAdds `field-characters-count-description-${name}` to the `aria-describedby` attribute of the input.\nUsed for `FieldLayout` count prop.",name:"countCharacters",required:!1,type:{name:"boolean"}},hasDecimal:{defaultValue:{value:"true"},description:'Allows decimal numbers in the input.\nMust be provided with `type="number"` to be effective.\nUnused when `readOnly` is true.',name:"hasDecimal",required:!1,type:{name:"boolean"}},refForInput:{defaultValue:null,description:"A forward ref to the span or the input element.",name:"refForInput",required:!1,type:{name:"ForwardedRef<HTMLInputElement>"}},externalError:{defaultValue:null,description:"A custom error message to be displayed.\nIf this prop is provided, the error message will be displayed\nand the field will be marked as errored regardless of the field's Formik state.\nUsed for `error` & `showError` `FieldLayout` props.",name:"externalError",required:!1,type:{name:"string"}}}}}catch{}export{h as T};
