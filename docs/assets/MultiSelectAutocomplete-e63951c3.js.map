{"version":3,"file":"MultiSelectAutocomplete-e63951c3.js","sources":["../../src/ui-kit/form/MultiSelectAutoComplete/MultiSelectAutocomplete.tsx"],"sourcesContent":["import cx from 'classnames'\nimport { useField, useFormikContext } from 'formik'\nimport React, { useEffect, useMemo, useRef, useState } from 'react'\n\nimport { SelectOption } from 'custom_types/form'\nimport Tag from 'ui-kit/Tag'\nimport { getLabelString } from 'utils/getLabelString'\n\nimport { BaseInput } from '../shared'\nimport AutocompleteList from '../shared/AutocompleteList'\nimport BaseCheckbox from '../shared/BaseCheckbox'\nimport FieldLayout from '../shared/FieldLayout'\nimport { FieldLayoutBaseProps } from '../shared/FieldLayout/FieldLayout'\n\nimport styles from './MultiSelectAutocomplete.module.scss'\n\nexport type MultiSelectAutocompleteProps = FieldLayoutBaseProps & {\n  hideTags?: boolean\n  maxDisplayOptions?: number\n  maxDisplayOptionsLabel?: string\n  maxHeight?: number\n  options: SelectOption[]\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void\n  pluralLabel?: string\n  disabled?: boolean\n  placeholder?: string\n}\n\nconst MultiSelectAutocomplete = ({\n  className,\n  name,\n  hideFooter = false,\n  hideTags = false,\n  isOptional = false,\n  label,\n  options,\n  onChange,\n  maxDisplayOptions,\n  maxHeight,\n  pluralLabel,\n  smallLabel = false,\n  disabled = false,\n  placeholder,\n  inline,\n}: MultiSelectAutocompleteProps): JSX.Element => {\n  const { setFieldValue, handleChange, setFieldTouched } =\n    useFormikContext<any>()\n  const [field, meta] = useField(name)\n  const [searchField, searchMeta] = useField(`search-${name}`)\n\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [filteredOptions, setFilteredOptions] = useState(options)\n\n  useEffect(() => {\n    setFilteredOptions(options)\n  }, [options])\n\n  useEffect(() => {\n    if (!isOpen && searchField.value !== '') {\n      setFieldValue(`search-${name}`, '', false)\n    }\n  }, [isOpen])\n\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent): void => {\n      if (!containerRef.current?.contains(e.target as Node)) {\n        setIsOpen(false)\n      }\n    }\n    if (containerRef.current) {\n      document.addEventListener('mousedown', handleClickOutside)\n    }\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [containerRef])\n\n  useEffect(() => {\n    setFilteredOptions(\n      options.filter(\n        option =>\n          searchField.value === '' ||\n          option.label\n            .toLocaleLowerCase()\n            .includes(searchField.value.toLocaleLowerCase())\n      )\n    )\n  }, [searchField.value])\n\n  const optionsLabelById = useMemo(\n    () =>\n      options.reduce<Record<string, string>>((optionsById, option) => {\n        optionsById[option.value] = option.label\n        return optionsById\n      }, {}),\n    [options]\n  )\n\n  const toggleField = () => {\n    if (isOpen) {\n      setIsOpen(false)\n      setFieldValue(`search-${name}`, '', false)\n    } else {\n      setIsOpen(true)\n    }\n    setFieldTouched(name, true)\n  }\n\n  return (\n    <FieldLayout\n      className={className}\n      error={meta.error}\n      hideFooter={!hideTags && field.value.length > 0 ? true : hideFooter}\n      isOptional={isOptional}\n      label={label}\n      name={`search-${name}`}\n      showError={meta.touched && !!meta.error}\n      smallLabel={smallLabel}\n      inline={inline}\n    >\n      <div\n        className={cx(styles['multi-select-autocomplete-container'], className)}\n        ref={containerRef}\n      >\n        <BaseInput\n          onFocus={() => {\n            if (!isOpen) {\n              setIsOpen(true)\n            }\n            setFieldTouched(name, true)\n          }}\n          placeholder={\n            placeholder ??\n            (field.value.length > 1 && pluralLabel\n              ? pluralLabel\n              : getLabelString(label))\n          }\n          style={{ paddingLeft: field.value.length > 0 ? '2.2rem' : '1rem' }}\n          className={cx({\n            [styles['multi-select-autocomplete-placeholder-input']]:\n              field.value.length > 0,\n          })}\n          hasError={searchMeta.touched && !!searchMeta.error}\n          type=\"text\"\n          disabled={disabled}\n          {...searchField}\n        />\n        <AutocompleteList\n          disabled={disabled}\n          onButtonClick={toggleField}\n          isOpen={isOpen}\n          filteredOptions={[\n            ...filteredOptions.slice(\n              0,\n              maxDisplayOptions ?? filteredOptions.length\n            ),\n            ...(maxDisplayOptions && maxDisplayOptions < filteredOptions.length\n              ? [\n                  {\n                    value: '',\n                    label: `${maxDisplayOptions} rÃ©sultats maximum. Veuillez affiner votre recherche`,\n                    disabled: true,\n                  },\n                ]\n              : []),\n          ]}\n          maxHeight={maxHeight}\n          displayNumberOfSelectedValues={field.value.length > 0}\n          numberOfSelectedOptions={field.value.length}\n          renderOption={({ value, label }) => (\n            <BaseCheckbox\n              label={label}\n              key={`${name}-${value}`}\n              value={value}\n              name={name}\n              onChange={e => {\n                setFieldTouched(`search-${name}`, true)\n                handleChange(e)\n                onChange?.(e)\n              }}\n              checked={field.value.includes(value)}\n            />\n          )}\n        />\n      </div>\n      {!hideTags && field.value.length > 0 && (\n        <div className={styles['multi-select-autocomplete-tags']}>\n          {field.value.map((value: string) => (\n            <Tag\n              key={`tag-${name}-${value}`}\n              label={optionsLabelById[value]}\n              closeable={{\n                onClose: () => {\n                  setFieldValue(\n                    name,\n                    field.value.filter((_value: string) => _value !== value)\n                  )\n                },\n                disabled,\n              }}\n            />\n          ))}\n        </div>\n      )}\n    </FieldLayout>\n  )\n}\n\nexport default MultiSelectAutocomplete\n"],"names":["MultiSelectAutocomplete","className","name","hideFooter","hideTags","isOptional","label","options","onChange","maxDisplayOptions","maxHeight","pluralLabel","smallLabel","disabled","placeholder","inline","setFieldValue","handleChange","setFieldTouched","useFormikContext","field","meta","useField","searchField","searchMeta","containerRef","useRef","isOpen","setIsOpen","useState","filteredOptions","setFilteredOptions","useEffect","handleClickOutside","e","_a","option","optionsLabelById","useMemo","optionsById","toggleField","jsxs","FieldLayout","cx","styles","jsx","BaseInput","getLabelString","AutocompleteList","value","label2","BaseCheckbox","Tag","_value","MultiSelectAutocomplete$1"],"mappings":"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"}