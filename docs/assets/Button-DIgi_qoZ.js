import{j as e}from"./jsx-runtime-CfatFE5O.js";import{c as s}from"./index-DeARc5FM.js";import{r as B}from"./index-ClcD9ViR.js";import{s as T}from"./stroke-pass-C0Oiu4_F.js";import{S as r}from"./SvgIcon-B6esR8Vf.js";import{T as w}from"./Tooltip-BXpf0lhD.js";import{u as R}from"./useTooltipProps-C5TDwaI9.js";import{b as t}from"./Button.module-CThrc3l4.js";import{I as l,B as b}from"./types-DjX_gQD6.js";const u=B.forwardRef(({className:d,children:p,icon:n,iconClassName:c,iconAlt:m,iconPosition:i=l.LEFT,variant:f=b.PRIMARY,type:y="button",hasTooltip:o,testId:x,isLoading:a=!1,disabled:I,tooltipContentClassName:g,...h},V)=>{const{isTooltipHidden:j,...q}=R(h),N=e.jsx("div",{className:t["spinner-icon"],"data-testid":"spinner",children:e.jsx(r,{src:T,alt:""})}),v=e.jsxs(e.Fragment,{children:[n&&!a&&i!==l.RIGHT&&e.jsx(r,{src:n,alt:m,className:s(t["button-icon"],c,{[t["has-tooltip"]]:o}),width:"20"}),f===b.BOX?e.jsx("div",{className:t["button-arrow-content"]}):e.jsxs(e.Fragment,{children:[a&&N,!a&&!o&&p]}),n&&!a&&i===l.RIGHT&&e.jsx(r,{src:n,alt:m,className:s(t["button-icon"],c),width:"20"})]});return e.jsx("button",{className:s(t.button,t[`button-${f}`],t[`button-${i}`],{[t["loading-spinner"]]:a},d),type:y,"data-testid":x,disabled:I||a,...h,...o&&q,ref:V,children:o?e.jsx(w,{content:p,visuallyHidden:j,tooltipContentClassName:g,children:v}):v})});u.displayName="Button";try{u.displayName="Button",u.__docgenInfo={description:`The Button component provides a customizable button element that can include icons, tooltips, and loading states.
It supports various styles through the \`variant\` prop and can display icons on either side of the button text.

---
**Important: Ensure to use descriptive labels for buttons to improve accessibility.**
When using icons only, make sure to provide an accessible label or \`aria-label\`.
---`,displayName:"Button",props:{hasTooltip:{defaultValue:null,description:"Whether the button has a tooltip.",name:"hasTooltip",required:!1,type:{name:"boolean"}},isLoading:{defaultValue:{value:"false"},description:"Whether the button is in a loading state.",name:"isLoading",required:!1,type:{name:"boolean"}},tooltipContentClassName:{defaultValue:null,description:"Custom class name for the tooltip content.",name:"tooltipContentClassName",required:!1,type:{name:"string"}},iconClassName:{defaultValue:null,description:"Custom class name for the icon.",name:"iconClassName",required:!1,type:{name:"string"}},icon:{defaultValue:null,description:`The icon to display within the button (or button-link).
If provided, the icon will be displayed as an SVG.`,name:"icon",required:!1,type:{name:"string | null"}},iconAlt:{defaultValue:null,description:`An alternative text for the icon.
If provided and non-empty, the SVG will have a role="img" and an aria-label attribute.
If undefined or empty, the SVG will have an aria-hidden attribute instead, as a
decorative icon.`,name:"iconAlt",required:!1,type:{name:"string"}},variant:{defaultValue:{value:"ButtonVariant.PRIMARY"},description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'},{value:'"ternary"'},{value:'"ternary-pink"'},{value:'"quaternary"'},{value:'"quaternary-pink"'},{value:'"box"'}]}},iconPosition:{defaultValue:{value:"IconPositionEnum.LEFT"},description:"",name:"iconPosition",required:!1,type:{name:"enum",value:[{value:'"right"'},{value:'"left"'},{value:'"center"'}]}},testId:{defaultValue:null,description:"",name:"testId",required:!1,type:{name:"string"}}}}}catch{}export{u as B};
