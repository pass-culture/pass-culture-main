import{j as l}from"./jsx-runtime-CfatFE5O.js";import{u as E,F as v}from"./formik.esm-DyanDbCL.js";import{c as B}from"./index-DeARc5FM.js";import{r as y}from"./index-ClcD9ViR.js";import{F as H}from"./FieldLayout-kSem4G2v.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./full-clear-Q4kCtSRL.js";import"./full-close-5Oxr7nnd.js";import"./Button-0zrfiy8i.js";import"./stroke-pass-CALgybTM.js";import"./SvgIcon-B6esR8Vf.js";import"./Tooltip-CNRbx6pV.js";import"./useTooltipProps-C5TDwaI9.js";import"./Button.module-B-6rmrBu.js";import"./types-DjX_gQD6.js";import"./FieldError-C744dGHW.js";import"./stroke-error-DSZD431a.js";const g={"text-area":"_text-area_1mjja_1","has-error":"_has-error_1mjja_51"},d=({name:e,className:T,disabled:N,description:u,placeholder:w,label:j,maxLength:c=1e3,isOptional:m,smallLabel:F,rows:k=7,...r})=>{var h;const[s,a]=E({name:e}),t=y.useRef(null);function p(){if(t.current){t.current.style.height="unset";const i=t.current.scrollHeight;t.current.style.height=`${i}px`}}y.useEffect(()=>{p()},[]);const f=[`field-characters-count-description-${e}`];return u&&f.unshift(`description-${e}`),l.jsx(H,{className:T,count:(h=s.value)==null?void 0:h.length,error:a.error,isOptional:m,label:j,maxLength:c,name:e,showError:a.touched&&!!a.error,smallLabel:F,description:u,children:l.jsx("textarea",{"aria-invalid":a.touched&&!!a.error,"aria-describedby":f.join(" "),className:B(g["text-area"],{[g["has-error"]]:a.touched&&!!a.error}),disabled:N,id:e,rows:k,maxLength:c,placeholder:w,"aria-required":!m,"aria-controls":r["aria-controls"],ref:t,...s,onChange:i=>{var b;p(),s.onChange(i),(b=r.onChange)==null||b.call(r,i)}})})};try{d.displayName="TextArea",d.__docgenInfo={description:"The TextArea component is a customizable textarea field that integrates with Formik for form state management.\nIt supports features like dynamic resizing based on content, character counting, and accessibility enhancements.\n\n---\n**Important: Do not use the `placeholder` to indicate the format of the field.**\nUse the `label` or `description` props instead to provide instructions on the expected format.\n---",displayName:"TextArea",props:{label:{defaultValue:null,description:"The label text for the textarea.",name:"label",required:!1,type:{name:"(string | Element) & ReactNode"}},name:{defaultValue:null,description:"The name of the textarea field.",name:"name",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"A description providing additional information about the textarea.",name:"description",required:!1,type:{name:"string"}},maxLength:{defaultValue:{value:"1000"},description:"The maximum number of characters allowed in the textarea.",name:"maxLength",required:!1,type:{name:"number"}},isLabelHidden:{defaultValue:null,description:`A flag to hide the label.
To be used with caution, as it can affect accessibility.
Do not use it if the label is mandatory, placeholder is not
a substitute for a label.`,name:"isLabelHidden",required:!1,type:{name:"boolean"}},hasLabelLineBreak:{defaultValue:null,description:"",name:"hasLabelLineBreak",required:!1,type:{name:"boolean"}},isOptional:{defaultValue:null,description:`A flag to indicate that the field is optional.
It will display an asterisk next to the label.
Whether the field is optional.`,name:"isOptional",required:!1,type:{name:"boolean"}},showMandatoryAsterisk:{defaultValue:null,description:"",name:"showMandatoryAsterisk",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:`A custom class for the field layout,
where label, description, input, and footer are displayed.
Custom CSS class for the textarea component.`,name:"className",required:!1,type:{name:"string"}},classNameLabel:{defaultValue:null,description:"",name:"classNameLabel",required:!1,type:{name:"string"}},classNameFooter:{defaultValue:null,description:`A custom class for the footer,
where errors and character count are displayed.`,name:"classNameFooter",required:!1,type:{name:"string"}},classNameInput:{defaultValue:null,description:"",name:"classNameInput",required:!1,type:{name:"string"}},filterVariant:{defaultValue:null,description:"",name:"filterVariant",required:!1,type:{name:"boolean"}},smallLabel:{defaultValue:null,description:`A flag to display a smaller label.
Whether to display a smaller version of the label.`,name:"smallLabel",required:!1,type:{name:"boolean"}},hideFooter:{defaultValue:null,description:`A flag to hide the footer.
To be used with caution, as it can affect accessibility.`,name:"hideFooter",required:!1,type:{name:"boolean"}},inline:{defaultValue:null,description:"",name:"inline",required:!1,type:{name:"boolean"}},clearButtonProps:{defaultValue:null,description:"",name:"clearButtonProps",required:!1,type:{name:'(ButtonHTMLAttributes<HTMLButtonElement> & { tooltip: string; display?: "clear" | "close"; })'}},ErrorDetails:{defaultValue:null,description:"",name:"ErrorDetails",required:!1,type:{name:"ReactNode"}},rows:{defaultValue:{value:"7"},description:"The number of visible text lines for the control.",name:"rows",required:!1,type:{name:"number"}}}}}catch{}const Y={title:"ui-kit/forms/TextArea",component:d,decorators:[e=>l.jsx(v,{initialValues:{description:""},onSubmit:()=>{},children:l.jsx(e,{})})]},n={args:{name:"description"}},o={args:{name:"description",label:"Description"}};var x,V,q;n.parameters={...n.parameters,docs:{...(x=n.parameters)==null?void 0:x.docs,source:{originalSource:`{
  args: {
    name: 'description'
  }
}`,...(q=(V=n.parameters)==null?void 0:V.docs)==null?void 0:q.source}}};var A,L,_;o.parameters={...o.parameters,docs:{...(A=o.parameters)==null?void 0:A.docs,source:{originalSource:`{
  args: {
    name: 'description',
    label: 'Description'
  }
}`,...(_=(L=o.parameters)==null?void 0:L.docs)==null?void 0:_.source}}};const Z=["WithoutLabel","WithLabel"];export{o as WithLabel,n as WithoutLabel,Z as __namedExportsOrder,Y as default};
