{"version":3,"file":"imageConstraints-45b06aea.js","sources":["../../src/utils/image.ts","../../src/components/ConstraintCheck/ConstraintCheck.tsx","../../src/components/ConstraintCheck/imageConstraints.ts"],"sourcesContent":["export const getImageBitmap = async (\n  file: File\n): Promise<ImageBitmap | null> => {\n  // Polyfill for Safari and IE not supporting createImageBitmap\n  // https://gist.github.com/nektro/84654b5183ddd1ccb7489607239c982d\n  if (!window.createImageBitmap) {\n    window.createImageBitmap = async (\n      blob: ImageBitmapSource\n    ): Promise<ImageBitmap> =>\n      new Promise(resolve => {\n        const img = document.createElement('img')\n        img.addEventListener('load', function () {\n          resolve(this as any)\n        })\n        img.src = URL.createObjectURL(blob as Blob)\n      })\n  }\n  return await createImageBitmap(file).catch(() => null)\n}\n","import React, { FunctionComponent } from 'react'\n\nimport { FieldError } from 'ui-kit/form/shared'\n\nimport style from './ConstraintCheck.module.scss'\nimport { Constraint } from './imageConstraints'\n\nexport type ConstraintCheckProps = {\n  constraints: Constraint[]\n  failingConstraints: string[]\n  children?: never\n}\n\nexport const ConstraintCheck: FunctionComponent<ConstraintCheckProps> = ({\n  constraints,\n  failingConstraints,\n}) => {\n  const fileConstraint = () =>\n    constraints.map(constraint => (\n      <li key={constraint.id}>\n        {failingConstraints.includes(constraint.id) ? (\n          <FieldError name={constraint.id}>{constraint.description}</FieldError>\n        ) : (\n          constraint.description\n        )}\n      </li>\n    ))\n\n  return <ul className={style['constraint-check']}>{fileConstraint()}</ul>\n}\n","import { getImageBitmap } from 'utils/image'\n\ntype FileChecker = (file: File) => Promise<boolean>\n\nexport type Constraint = {\n  id: string\n  description: string\n  asyncValidator: FileChecker\n}\n\nexport const imageConstraints = {\n  formats: (supportedImageTypes: string[]): Constraint => {\n    const isNotAnImage: FileChecker = async file =>\n      supportedImageTypes.includes(file.type) &&\n      (await getImageBitmap(file)) !== null\n    return {\n      id: 'formats',\n      description: 'Formats supportés : JPG, PNG',\n      asyncValidator: isNotAnImage,\n    }\n  },\n  size: (maxSize: number): Constraint => {\n    const isTooBig: FileChecker = async file => file.size <= maxSize\n\n    return {\n      id: 'size',\n      description: 'Poids maximal du fichier : 10 Mo',\n      asyncValidator: isTooBig,\n    }\n  },\n  width: (minWidth: number): Constraint => {\n    const isOfPoorQuality: FileChecker = async file => {\n      const imageBitmap = await getImageBitmap(file)\n      return imageBitmap !== null && imageBitmap.width >= minWidth\n    }\n\n    return {\n      id: 'width',\n      description: `Largeur minimale de l’image : ${minWidth} px`,\n      asyncValidator: isOfPoorQuality,\n    }\n  },\n  height: (minHeight?: number): Constraint => {\n    const isOfPoorQuality: FileChecker = async file => {\n      if (!minHeight) {\n        return false\n      }\n      const imageBitmap = await getImageBitmap(file)\n      return imageBitmap !== null && imageBitmap.height >= minHeight\n    }\n\n    return {\n      id: 'height',\n      description: `Hauteur minimale de l’image : ${minHeight} px`,\n      asyncValidator: isOfPoorQuality,\n    }\n  },\n}\n\nexport const getValidatorErrors = async (\n  constraints: Constraint[],\n  file: File\n): Promise<string[]> => {\n  const failingConstraints = await Promise.all(\n    constraints.map(contraint =>\n      contraint\n        .asyncValidator(file)\n        .then(isValid => (isValid ? undefined : contraint.id))\n    )\n  )\n\n  return failingConstraints.filter((maybeId): maybeId is string => !!maybeId)\n}\n"],"names":["getImageBitmap","file","blob","resolve","img","ConstraintCheck","constraints","failingConstraints","fileConstraint","constraint","jsx","FieldError","style","imageConstraints","supportedImageTypes","maxSize","minWidth","isOfPoorQuality","imageBitmap","minHeight"],"mappings":"mQAAa,MAAAA,EAAiB,MAC5BC,IAIK,OAAO,oBACV,OAAO,kBAAoB,MACzBC,GAEA,IAAI,QAAmBC,GAAA,CACf,MAAAC,EAAM,SAAS,cAAc,KAAK,EACpCA,EAAA,iBAAiB,OAAQ,UAAY,CACvCD,EAAQ,IAAW,CAAA,CACpB,EACGC,EAAA,IAAM,IAAI,gBAAgBF,CAAY,CAAA,CAC3C,GAEE,MAAM,kBAAkBD,CAAI,EAAE,MAAM,IAAM,IAAI,4ICJhDI,EAAA,CAAA,CAAkE,YAAAC,EACvE,mBAAAC,CAEF,IAAA,CACE,MAAAC,EAAA,IAAAF,EAAA,IAAAG,GAAAC,EAAA,IAAA,KAAA,CAAA,SAAAH,EAAA,SAAAE,EAAA,EAAA,EAAAC,EAAAA,IAAAC,EAAA,CAAA,KAAAF,EAAA,GAAA,SAAAA,EAAA,YAAA,EAAAA,EAAA,WAAA,EAAAA,EAAA,EAAA,CAAA,EAWA,OAAAC,EAAA,IAAA,KAAA,CAAA,UAAAE,EAAA,kBAAA,EAAA,SAAAJ,EAAA,CAAA,CAAA,CACF,+UCnBO,MAAMK,EAAmB,CAC9B,QAAUC,IAID,CACL,GAAI,UACJ,YAAa,+BACb,eANgC,MAAMb,GACtCa,EAAoB,SAASb,EAAK,IAAI,GACrC,MAAMD,EAAeC,CAAI,IAAO,IAIjB,GAGpB,KAAOc,IAGE,CACL,GAAI,OACJ,YAAa,mCACb,eAL4B,MAAMd,GAAQA,EAAK,MAAQc,CAKvC,GAGpB,MAAQC,GAAiC,CACjC,MAAAC,EAA+B,MAAMhB,GAAQ,CAC3C,MAAAiB,EAAc,MAAMlB,EAAeC,CAAI,EACtC,OAAAiB,IAAgB,MAAQA,EAAY,OAASF,CAAA,EAG/C,MAAA,CACL,GAAI,QACJ,YAAa,iCAAiCA,CAAQ,MACtD,eAAgBC,CAAA,CAEpB,EACA,OAASE,GAAmC,CACpC,MAAAF,EAA+B,MAAMhB,GAAQ,CACjD,GAAI,CAACkB,EACI,MAAA,GAEH,MAAAD,EAAc,MAAMlB,EAAeC,CAAI,EACtC,OAAAiB,IAAgB,MAAQA,EAAY,QAAUC,CAAA,EAGhD,MAAA,CACL,GAAI,SACJ,YAAa,iCAAiCA,CAAS,MACvD,eAAgBF,CAAA,CAEpB,CACF"}