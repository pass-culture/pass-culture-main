version: 2.1

##################
#  ORBS
##################
# Waiting for third party orbs to be enabled
# orbs:
#   skip: theodo/skip@0.1.2

orbs:
  slack: circleci/slack@4.2

##################
#  PARAMETERS
##################

parameters:
  venv_cache_key:
    type: string
    default: 'deps1-{{ checksum "/home/circleci/.pyenv/version" }}-{{ checksum "api/requirements.txt" }}'
  pro_cache_key:
    type: string
    default: 'yarn-packages-{{ checksum "pro/yarn.lock" }}'
  adage-front_cache_key:
    type: string
    default: 'yarn-packages-{{ checksum "adage-front/yarn.lock" }}'

###################
#  EXECUTORS
###################

executors:
  gcp-sdk:
    docker:
      - image: google/cloud-sdk:316.0.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD

  helm:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/helm-gcp:3.4.1
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

  node-gcp-12:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/node-gcp:12
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

  node-gcp-14:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/node-gcp:14
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

###################
#  COMMANDS
###################

commands:
  notify-slack:
    description: Send notification to Slack
    parameters:
      channel:
        type: string
      template:
        type: string
        default: FAIL_TEMPLATE_2
    steps:
      - slack/notify:
          event: fail
          channel: << parameters.channel >>
          template: << parameters.template >>
  skip_unchanged:
    parameters:
      except_branches:
        default: master
        description: Comma-separated list of git branches where we should never skip tests.
        type: string
      git_base_branch:
        default: origin/master
        description: The branch to compare against when looking for changing.
        type: string
      paths:
        description: The paths to look for changes in.
        type: string
    description: Skip if no changes to "<< parameters.paths >>"
    steps:
      - run:
          name: Skip job when not modifying this folder
          command: |
            echo "Skip debugging"
            echo "--------------"
            GIT_BASE_BRANCH=<<parameters.git_base_branch>>
            PATHS=<<parameters.paths>>
            EXCEPT_BRANCHES=<<parameters.except_branches>>
            echo "GIT_BASE_BRANCH=$GIT_BASE_BRANCH"
            echo "PATHS=$PATHS"
            echo "EXCEPT_BRANCHES=$EXCEPT_BRANCHES"

            BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
            echo "BRANCH_NAME=$BRANCH_NAME"

            IFS=' ' read -ra paths_arr \<<< "$PATHS"
            echo "paths_arr=" "${paths_arr[@]}"

            CHANGED_FILES="$(git diff "$GIT_BASE_BRANCH"..."$(git symbolic-ref --short -q HEAD)" --name-only --diff-filter=ACMRT "${paths_arr[@]}")";
            echo "CHANGED_FILES=$CHANGED_FILES"

            if [[ "$EXCEPT_BRANCHES" == *"${BRANCH_NAME}"* ]] || [ -n "${CHANGED_FILES}" ];
            then
                exit 0;
            fi
            circleci step halt;
  authenticate_gcp:
    description: Authenticate to a GCP project
    parameters:
      gcp-key-name:
        type: env_var_name
    steps:
      - run: echo ${<< parameters.gcp-key-name >>} > ${HOME}/gcp-key.json
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${GCP_PROJECT}

  export_app_version:
    description: Export APP version number as environment variable
    parameters:
      version_file:
        type: string
        default: ./api/version.txt
    steps:
      - run: echo "export APP_VERSION=$(cat << parameters.version_file >> | tr -d '[:space:]')" >> $BASH_ENV

  export_chart_version:
    description: Export Helm chart version number as environment variable
    parameters:
      version_file:
        type: string
    steps:
      - run: echo "export CHART_VERSION=$(cat << parameters.version_file >> | tr -d '[:space:]')" >> $BASH_ENV

  deploy-helm-chart:
    description: Deploy Crons and worker via helm to Kubernetes Cluster
    parameters:
      helm_release_name:
        type: string
      helm_chart_name:
        type: string
      kubernetes_namespace:
        type: string
      helm_values_file:
        type: string
      helm_private_values_file:
        type: string
      app_version:
        type: string
    steps:
      - run: |
          source ${BASH_ENV}
          helm upgrade << parameters.helm_release_name >> tmp/<< parameters.helm_chart_name >> \
            --install --wait \
            --namespace << parameters.kubernetes_namespace >> \
            --values << parameters.helm_values_file >> \
            --values << parameters.helm_private_values_file >> \
            --set-string image.tag=<< parameters.app_version >>

  build-frontend-app:
    description: Build a frontend app with yarn
    parameters:
      node_env:
        type: string
      build_dir:
        type: string
      yarn_build_subcommand:
        type: string
    steps:
      - run:
          name: Install dependencies
          command: yarn install
          working_directory: << parameters.build_dir >>
      - run:
          name: Build frontend app
          command: |
            set -a; source ../config/run_envs/<< parameters.node_env >>;
            yarn << parameters.yarn_build_subcommand >>
          working_directory: << parameters.build_dir >>

  push-to-bucket:
    description: Push directory to a cloudstorage bucket
    parameters:
      bucket_name:
        type: string
      build_path:
        type: string
    steps:
      - run:
          name: push directory to bucket
          command: |
            set +eo pipefail
            gsutil rsync -r << parameters.build_path >> gs://<< parameters.bucket_name >>

  invalidate-cache:
    description: Invalidate Cache asynchronously
    parameters:
      url_map_name:
        type: string
    steps:
      - run:
          name: Invalidate cache
          command: |
            gcloud compute url-maps invalidate-cdn-cache << parameters.url_map_name >> --path "/*"  --async
            echo "An invalidateCache operation has been requested. You can follow its progress on https://console.cloud.google.com/compute/operations"

  clone-pass-culture-deployment-repo:
    steps:
      - run:
          name: Clone pass-culture-deployment-repo
          command: git clone git@github.com:pass-culture/pass-culture-deployment.git ~/pass-culture-deployment

  clone-pass-culture-db-operations-repo:
    steps:
      - run:
          name: Clone pass-culture-db-operations-repo
          command: git clone git@github.com:pass-culture/pass-culture-db-operations.git ~/pass-culture-db-operations

###################
#  JOBS
###################

jobs:
  quality-api:
    parameters:
      is_nightly_build:
        type: boolean
        default: false
    working_directory: ~/pass-culture
    docker:
      - image: cimg/python:3.9.7
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - skip_unchanged:
          paths: api
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                key: << pipeline.parameters.venv_cache_key >>
      - run:
          name: Install requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt --progress-bar off
          working_directory: api
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                key: << pipeline.parameters.venv_cache_key >>
                paths:
                  - "api/venv"
      - run:
          name: Install pcapi Python package
          command: |
            venv/bin/pip install -e .
            venv/bin/pip freeze
          working_directory: api
      - run:
          name: Check imports are well organized with isort
          when: always
          command: venv/bin/isort . --check-only
          working_directory: api
      - run:
          name: Check code is well formatted with black
          when: always
          command: venv/bin/black . --check
          working_directory: api
      - run:
          name: Run pylint
          when: always
          command: venv/bin/pylint src tests --jobs=8
          working_directory: api
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: sh√©rif

  tests-script-pc:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Install requirements
          command: |
            sudo apt-get update
            sudo ./pc symlink
      - run:
          name: Run PC tests
          command: |
            cd tests
            ./run_tests.sh

  tests-api:
    parameters:
      is_nightly_build:
        type: boolean
        default: false
      pytest_extra_args:
        description: "directories to include and ignore"
        default: "tests"
        type: string
    working_directory: ~/pass-culture
    docker:
      - image: cimg/python:3.9.7
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          DATABASE_URL_TEST: postgresql://pytest:pytest@localhost:5432/pass_culture
          REDIS_URL: redis://localhost:6379
      - image: circleci/postgres:12.3-postgis
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_USER: pytest
          POSTGRES_PASSWORD: pytest
          POSTGRES_DB: pass_culture
      - image: redis
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - skip_unchanged:
          paths: api
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                key: << pipeline.parameters.venv_cache_key >>
      - run:
          name: Install requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt --progress-bar off
          working_directory: api
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                key: << pipeline.parameters.venv_cache_key >>
                paths:
                  - "api/venv"
      - run:
          name: Install pcapi Python package
          command: |
            venv/bin/pip install -e .
            venv/bin/pip freeze
          working_directory: api
      - run:
          name: Install xmlsec1
          command: sudo apt-get update && sudo apt-get install xmlsec1
      - run:
          name: Install weasyprint dependencies
          command: sudo apt-get install libpango-1.0-0 libpangoft2-1.0-0
      - run:
          name: Check for alembic multiple heads
          command: |
            python3 -m venv venv
            . venv/bin/activate
            if [ ! -z "$(alembic branches)" ]; then echo "Multiple alembic heads found"; exit 1; fi
          working_directory: api
      - run:
          name: Check database and model are aligned
          command: |
            RUN_ENV=tests venv/bin/flask install_postgres_extensions
            RUN_ENV=tests venv/bin/alembic upgrade head
            RUN_ENV=tests venv/bin/flask install_data
            RUN_ENV=tests venv/bin/python tests/alembic/check_db_schema.py
          working_directory: api
      - run:
          name: Running tests
          command: >
            RUN_ENV=tests venv/bin/pytest << parameters.pytest_extra_args >> --durations=10
            --junitxml=test-results/junit.xml
          working_directory: api
      - store_test_results:
          path: api/test-results
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: sh√©rif

  quality-adage-front:
    docker:
      - image: cimg/node:14.17
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: adage-front
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                name: Restore Yarn Package Cache
                key: << pipeline.parameters.adage-front_cache_key >>
      - run:
          name: Install dependencies
          working_directory: adage-front
          command: |
            yarn install
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                name: Save Yarn Package Cache
                key: << pipeline.parameters.adage-front_cache_key >>
                paths:
                  - ~/.cache/yarn
      - run:
          name: Running linter
          working_directory: adage-front
          command: |
            yarn lint:js
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: sh√©rif

  tests-adage-front:
    docker:
      - image: cimg/node:14.17
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: adage-front
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                name: Restore Yarn Package Cache
                key: << pipeline.parameters.adage-front_cache_key >>
      - run:
          name: Install dependencies
          working_directory: adage-front
          command: |
            yarn install
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                name: Save Yarn Package Cache
                key: << pipeline.parameters.adage-front_cache_key >>
                paths:
                  - ~/.cache/yarn
      - run:
          name: Run Unit Test Adage-front
          working_directory: adage-front
          command: |
            yarn test:unit
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: sh√©rif

  type-checking-pro:
    docker:
      - image: cimg/node:14.17
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: pro
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                name: Restore Yarn Package Cache
                key: << pipeline.parameters.pro_cache_key >>
      - run:
          name: Install dependencies
          working_directory: pro
          command: yarn install
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                name: Save Yarn Package Cache
                key: << pipeline.parameters.pro_cache_key >>
                paths:
                  - ~/.cache/yarn
      - run:
          name: Running type checking
          working_directory: pro
          command: yarn tsc -b
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: sh√©rif

  quality-pro:
    docker:
      - image: cimg/node:14.17
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: pro
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                name: Restore Yarn Package Cache
                key: << pipeline.parameters.pro_cache_key >>
      - run:
          name: Install dependencies
          working_directory: pro
          command: yarn install
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                name: Save Yarn Package Cache
                key: << pipeline.parameters.pro_cache_key >>
                paths:
                  - ~/.cache/yarn
      - run:
          name: Running linter
          working_directory: pro
          command: yarn lint:js
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: sh√©rif

  tests-pro-unit-tests:
    docker:
      - image: cimg/node:14.17
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: pro
      - run:
          name: Run Unit Test PRO
          command: |
            cd pro
            yarn install
            yarn test:unit
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: sh√©rif

  tests-pro-e2e-tests:
    docker:
      - image: cimg/node:14.17
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: pro
      - run: ./install_lib_ci_with_chrome.sh
      - run: sudo ./pc symlink
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Running API server
          command: |
            cd api
            pc start-backend
          background: true
      - run:
          name: Run Frontend PRO
          command: |
            cd pro
            yarn install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            pc sandbox --name=testcafe
      - run:
          name: Running functional tests PRO
          command: |
            cd pro
            dockerize -wait http://localhost:3001 -timeout 5m -wait-retry-interval 5s
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture/pro/testcafe_screenshots
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: sh√©rif

  tests-perf:
    working_directory: ~
    docker:
      - image: passcultureapp/artillery:0.6
    steps:
      - checkout
      - run: sed -i 's/$/'$USER_PASSWORD_PERF_ENV'/' /root/project/infra/artillery/user_list
      - run: artillery run /root/project/infra/artillery/scenario.yml -o /tmp/artillery-report.json
      - run: python3 scripts/analyze_report.py /tmp/artillery-report.json
      - store_artifacts:
          path: /tmp/artillery-report.json

  build-and-push-image:
    executor: gcp-sdk
    parameters:
      app_version:
        type: string
        default: ${APP_VERSION}
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - authenticate_gcp:
          gcp-key-name: GCP_INFRA_KEY
      - export_app_version
      - run: |
          source ${BASH_ENV}
          gcloud beta auth configure-docker ${GCP_REGION}-docker.pkg.dev
          docker build ./api \
            -f ./api/Dockerfile \
            -t ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi:<<parameters.app_version>>
          docker push ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi:<<parameters.app_version>>
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains | sed 's/..$//')
            BOT_MESSAGE="'*"$CIRCLE_BRANCH"* : *Build or Push image "$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
          when: on_fail

  build-and-push-image-db-ops:
    executor: gcp-sdk
    steps:
      - checkout
      - clone-pass-culture-db-operations-repo
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - authenticate_gcp:
          gcp-key-name: GCP_INFRA_KEY
      - export_app_version
      - run: gcloud beta auth configure-docker ${GCP_REGION}-docker.pkg.dev
      - run: |
          source ${BASH_ENV}
          docker build ~/pass-culture-db-operations \
            -f ~/pass-culture-db-operations/Dockerfile \
            --build-arg BASE_PCAPI_TAG=${APP_VERSION} \
            -t ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/db-ops:${APP_VERSION} \
            -t ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/db-ops:latest
          docker push ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/db-ops:${APP_VERSION}
          docker push ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/db-ops:latest

  deploy-dbops:
    executor: helm
    environment:
      HELM_EXPERIMENTAL_OCI: 1
      CHART_NAME: dbops-chart
      CHART_RELEASE: passculture-db-operations
      NAMESPACE: operations
    steps:
      - checkout
      - clone-pass-culture-deployment-repo
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - export_chart_version:
          version_file: ~/pass-culture-deployment/helm/db-ops/chart_version.txt
      - run:
          name: Get GKE cluster credentials
          command: gcloud container clusters get-credentials --region ${GCP_REGION} ${GKE_CLUSTER_NAME}
      - run:
          name: Login to GCP Artifact Registry with helm
          command: echo ${GCP_INFRA_KEY} | helm registry login  -u _json_key --password-stdin ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}
      - run:
          name: Pull chart from registry
          command: |
            source ${BASH_ENV}
            helm chart pull ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:${CHART_VERSION}
      - run:
          name: Export chart in local filesystem
          command: |
            source ${BASH_ENV}
            helm chart export ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:${CHART_VERSION} -d tmp/
      - deploy-helm-chart:
          helm_chart_name: passculture-db-operations
          helm_release_name: ${CHART_RELEASE}
          kubernetes_namespace: ${NAMESPACE}
          helm_values_file: ./api/helm/db-ops/values.${DBOPS_ENV}.yaml
          helm_private_values_file: ~/pass-culture-deployment/helm/db-ops/values.${DBOPS_ENV}.yaml
          app_version: latest

  deploy-pcapi:
    executor: helm
    environment:
      HELM_EXPERIMENTAL_OCI: 1
      CHART_NAME: pcapi-chart
    parameters:
      helm_environment:
        type: string
        default: ${CIRCLE_BRANCH}
      app_version:
        type: string
        default: ${APP_VERSION}
    steps:
      - checkout
      - clone-pass-culture-deployment-repo
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - export_app_version
      - export_chart_version:
          version_file: ~/pass-culture-deployment/helm/pcapi/chart_version.txt
      - run:
          name: Get GKE cluster credentials
          command: gcloud container clusters get-credentials --region ${GCP_REGION} ${GKE_CLUSTER_NAME}
      - run:
          name: Login to GCP Artifact Registry with helm
          command: echo ${GCP_INFRA_KEY} | helm registry login  -u _json_key --password-stdin ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}
      - run:
          name: Pull chart from registry
          command: |
            source ${BASH_ENV}
            helm chart pull ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:${CHART_VERSION}
      - run:
          name: Export chart in local filesystem
          command: |
            source ${BASH_ENV}
            helm chart export ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:${CHART_VERSION} -d tmp/
      - deploy-helm-chart:
          helm_chart_name: pcapi
          helm_release_name: <<parameters.helm_environment>>
          kubernetes_namespace: <<parameters.helm_environment>>
          helm_values_file: ./api/helm/pcapi/values.<<parameters.helm_environment>>.yaml
          helm_private_values_file: ~/pass-culture-deployment/helm/pcapi/values.<<parameters.helm_environment>>.yaml
          app_version: <<parameters.app_version>>
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=<<parameters.app_version>>
            BOT_MESSAGE="'*"<<parameters.helm_environment>>"* : *API* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
          when: on_fail

  deploy-pro:
    executor: node-gcp-14
    parameters:
      app_environment:
        type: string
        default: ${CIRCLE_BRANCH}
    steps:
      - checkout
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - build-frontend-app:
          node_env: <<parameters.app_environment>>
          build_dir: ./pro
          yarn_build_subcommand: "build:<<parameters.app_environment>>"
      - push-to-bucket:
          build_path: ./pro/build/
          bucket_name: ${GCP_PROJECT}-<<parameters.app_environment>>-pro
      - invalidate-cache:
          url_map_name: <<parameters.app_environment>>-pro-url-map
      - unless:
          condition:
            equal: ["testing", <<parameters.app_environment>>]
          steps:
            - run:
                name: Check deployed version
                command: |
                  COMPONENT_URL="https://$(./scripts/compute_pro_url.sh <<parameters.app_environment>>)"
                  ./scripts/check_current_tag_is_deployed.sh "$COMPONENT_URL"
            - run:
                name: Send failure notification
                command: |
                  VERSION_TO_DEPLOY=$(git describe --contains | sed 's/..$//')
                  BOT_MESSAGE="'*"$CIRCLE_BRANCH"* : *Pro* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
                  curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
                when: on_fail

  deploy-adage-front:
    executor: node-gcp-14
    parameters:
      app_environment:
        type: string
        default: ${CIRCLE_BRANCH}
    steps:
      - checkout
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - build-frontend-app:
          node_env: <<parameters.app_environment>>
          build_dir: ./adage-front
          yarn_build_subcommand: "build:<<parameters.app_environment>>"
      - push-to-bucket:
          build_path: ./adage-front/build/
          bucket_name: ${GCP_PROJECT}-<<parameters.app_environment>>-adage
      - invalidate-cache:
          url_map_name: <<parameters.app_environment>>-adage-url-map
      - unless:
          condition:
            equal: ["testing", <<parameters.app_environment>>]
          steps:
            - run:
                name: Send failure notification
                command: |
                  if [[ "<<parameters.app_environment>>" == "testing" ]]; then
                    exit 0
                    circleci step halt;
                  fi
                  VERSION_TO_DEPLOY=$(git describe --contains | sed 's/..$//')
                  BOT_MESSAGE="'*"<<parameters.app_environment>>"* : *Adage-front* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
                  curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
                when: on_fail

  release-synthesis:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run:
          name: Check deployed version
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains | sed 's/..$//')
            BOT_MESSAGE="'Version *"$VERSION_TO_DEPLOY"* has been successfully deployed to *"$CIRCLE_BRANCH"* :muscle:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
            curl -i -k -XPOST "$GRAFANA_INFLUXDB_URL/write?db=$GRAFANA_DB" --data-binary 'deployments,application=All,environment='"$CIRCLE_BRANCH"',deployed=true version="'"$VERSION_TO_DEPLOY"'"'

  restart-pcapi:
    executor: gcp-sdk
    parameters:
      helm_environment:
        type: string
        default: ${CIRCLE_BRANCH}
    steps:
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - run:
          name: Get GKE cluster credentials
          command: gcloud container clusters get-credentials --region ${GCP_REGION} ${GKE_CLUSTER_NAME}
      - run: kubectl get deploy -n <<parameters.helm_environment>> -o name | xargs  -L 1 kubectl rollout restart -n <<parameters.helm_environment>>

  build-container:
    machine:
      image: ubuntu-2004:202101-01
    steps:
      - checkout
      - restore_cache:
          name: Restore requirements and Dockerfile checksum
          keys:
            # By using only cache prefix, we load the most recent checksum
            - pass-culture-api-checksums-
      - run:
          name: Build and push docker image if requirements and/or Dockerfile have changed
          command: |
            md5sum --status -c requirements.md5  &&  md5sum --status -c dockerfile-print.md5|| (
            docker build ./api -f ./api/Dockerfile --target api-flask -t passcultureapp/api-flask:latest;
            docker login -u passcultureapp -p $DOCKERHUB_PASSWORD;
            docker push passcultureapp/api-flask:latest
            )
      - run:
          name: Generate requirements print
          command: md5sum ./api/requirements.txt > requirements.md5
      - run:
          name: Generate Dockerfile print
          command: md5sum ./api/Dockerfile > dockerfile-print.md5
      - save_cache:
          key: pass-culture-api-checksums-{{ .Revision }}
          paths:
            - requirements.md5
            - dockerfile-print.md5

###################
#  WORKFLOWS
###################

workflows:
  version: 2
  commit:
    jobs:
      - tests-script-pc
      - type-checking-pro:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
          context: Slack
      - quality-pro:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
          context: Slack
      - quality-adage-front:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
          context: Slack
      - quality-api:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
          context: Slack
      - tests-api:
          name: "Run core tests after commit"
          pytest_extra_args: "tests/core"
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
          context: Slack
      - tests-api:
          name: "Run routes tests after commit"
          pytest_extra_args: "tests/routes"
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
          context: Slack
      - tests-api:
          name: "Run other tests after commit"
          pytest_extra_args: "tests --ignore=tests/core --ignore=tests/routes"
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
          context: Slack
      - tests-adage-front:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
          context: Slack
      - tests-pro-unit-tests:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
          context: Slack
          requires:
            - type-checking-pro
      - tests-pro-e2e-tests:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
          context: Slack
          requires:
            - type-checking-pro
      - build-and-push-image:
          filters:
            branches:
              only:
                - master
          requires:
            - "Run core tests after commit"
            - "Run routes tests after commit"
            - "Run other tests after commit"
            - quality-api
          context:
            - GCP
            - GCP_EHP
          app_version: ${CIRCLE_SHA1}
      - build-container:
          filters:
            branches:
              only:
                - master
          requires:
            - build-and-push-image
      - deploy-pcapi:
          filters:
            branches:
              only:
                - master
          requires:
            - build-and-push-image
          context:
            - GCP
            - GCP_EHP
          helm_environment: testing
          app_version: ${CIRCLE_SHA1}
      - restart-pcapi:
          filters:
            branches:
              only:
                - master
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_EHP
          helm_environment: testing
      - deploy-pro:
          filters:
            branches:
              only:
                - master
          requires:
            - quality-pro
            - tests-pro-unit-tests
            - tests-pro-e2e-tests
            - restart-pcapi
          context:
            - GCP
            - GCP_EHP
          app_environment: testing
      - deploy-adage-front:
          filters:
            branches:
              only:
                - master
          requires:
            - quality-adage-front
            - tests-adage-front
            - restart-pcapi
          context:
            - GCP
            - GCP_EHP
          app_environment: testing
  gcp-ehp:
    jobs:
      - build-and-push-image:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          context:
            - GCP
            - GCP_EHP
      - build-and-push-image-db-ops:
          requires:
            - build-and-push-image
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          context:
            - GCP
            - GCP_EHP
      - deploy-pcapi:
          filters:
            branches:
              only:
                - staging
                - integration
          context:
            - GCP
            - GCP_EHP
      - deploy-pro:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_EHP
      - deploy-adage-front:
          filters:
            branches:
              ignore: integration
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_EHP
      - release-synthesis:
          requires:
            - restart-pcapi
            - deploy-pro
      - restart-pcapi:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_EHP

  gcp-prod:
    jobs:
      - deploy-dbops:
          filters:
            branches:
              only:
                - production
          context:
            - GCP
            - GCP_EHP
      - deploy-pcapi:
          filters:
            branches:
              only:
                - production
          context:
            - GCP
            - GCP_PROD
      - deploy-pro:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_PROD
      - deploy-adage-front:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_PROD
      - release-synthesis:
          requires:
            - restart-pcapi
            - deploy-pro
      - restart-pcapi:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_PROD
