version: 2.1
jobs:

  tests-script-pc:
    machine:
      image: circleci/classic:latest
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Install requirements
          command: |
            sudo apt-get update
            sudo apt-get install -y realpath
            sudo ./pc symlink
      - run:
          name: Run PC tests
          command: |
            cd tests
            ./run_tests.sh

  tests-api:
    machine:
      image: circleci/classic:latest
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run: sudo ./pc symlink
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Running API server
          command: |
            cd api
            gpg --passphrase $PASS_PRIVATE --batch --output private.tar.gz -d private.tar.gz.gpg
            tar xf private.tar.gz
            pc start-backend
          background: true
      - run:
          name: Running API tests
          command: |
            dockerize -wait http://localhost/health -timeout 4m -wait-retry-interval 2s
            echo 'y' | pc test-backend

  tests-webapp:
    machine:
      image: circleci/classic:latest
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run: sudo ./pc symlink
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Run Unit Test WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use "$NODE_VERSION"
            cd webapp
            yarn install
            yarn test:unit
      - run:
          name: Running API server
          command: |
            cd api
            gpg --passphrase $PASS_PRIVATE --batch --output private.tar.gz -d private.tar.gz.gpg
            tar xf private.tar.gz
            pc start-backend
          background: true
      - run:
          name: Run Frontend WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use "$NODE_VERSION"
            cd webapp
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            dockerize -wait http://localhost/health -timeout 5m -wait-retry-interval 5s
            pc sandbox --name=industrial
      - run:
          name: Running functional tests WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use "$NODE_VERSION"
            cd webapp
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture/webapp/testcafe_screenshots
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL"
            curl -d text="$BOT_MESSAGE" "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&parse_mode=Markdown"


  tests-pro:
    machine:
      image: circleci/classic:latest
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run: sudo ./pc symlink
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Run Unit Test PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use "$NODE_VERSION"
            cd pro
            yarn install
            yarn test:unit
      - run:
          name: Running API server
          command: |
            cd api
            gpg --passphrase $PASS_PRIVATE --batch --output private.tar.gz -d private.tar.gz.gpg
            tar xf private.tar.gz
            pc start-backend
          background: true
      - run:
          name: Run Frontend PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use "$NODE_VERSION"
            cd pro
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            dockerize -wait http://localhost/health -timeout 5m -wait-retry-interval 5s
            pc sandbox --name=industrial
      - run:
          name: Running functional tests PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use "$NODE_VERSION"
            cd pro
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture/pro/testcafe_screenshots
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL"
            curl -d text="$BOT_MESSAGE" "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&parse_mode=Markdown"

  tests-perf:
    working_directory: ~
    docker:
      - image: passcultureapp/artillery:0.2
    steps:
      - checkout
      - run: sed -i 's/$/'$USER_PASSWORD_PERF_ENV'/' /root/project/infra/artillery/user_list
      - run: artillery run /root/project/infra/artillery/scenario.yml

  deploy-api:
    machine:
      image: circleci/classic:latest
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: pyenv global 3.5.2
      - run: pip install requests
      - run: python scripts/check_ci_status.py $CIRCLE_SHA1 $(git describe --contains)
      - run: git submodule sync
      - run: git submodule update --init
      - run:
          name: Deploy API
          command: |
            SCALINGO_APP_NAME=$(./scripts/compute_app_name.sh ${CIRCLE_BRANCH})
            cd api
#            git remote add scalingo git@scalingo.com:${SCALINGO_APP_NAME}.git
            git remote add scalingo_outscale git@ssh.agora-fr1.scalingo.com:${SCALINGO_APP_NAME}.git
#            git push -f scalingo HEAD:master
            git push -f scalingo_outscale HEAD:master
      - run:
          name: Check deployed version
          command: |
#            COMPONENT_URL="https://backend.$(./scripts/compute_component_partial_url.sh ${CIRCLE_BRANCH})"
            COMPONENT_URL="https://pass-culture-api-staging.osc-fr1.scalingo.io"
            ./scripts/check_current_tag_is_deployed.sh "$COMPONENT_URL"
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="*"$CIRCLE_BRANCH"* : *API* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED* "$'\U00026C5'""
            curl -d text="$BOT_MESSAGE" "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&parse_mode=Markdown"
            curl --request POST "http://$LOGSTASH_USER:$LOGSTASH_PASSWORD@pc-logstash.scalingo.io?Application=Api&Environment=$CIRCLE_BRANCH&deployed=false&version=$VERSION_TO_DEPLOY"
          when: on_fail

  deploy-api-datalake:
    machine:
      image: circleci/classic:latest
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: pyenv global 3.5.2
      - run: pip install requests
      - run: python scripts/check_ci_status.py $CIRCLE_SHA1 $(git describe --contains)
      - run: git submodule sync
      - run: git submodule update --init api
      - run:
          name: Deploy API
          command: |
            SCALINGO_APP_NAME=$(./scripts/compute_app_name.sh ${CIRCLE_BRANCH})
            cd api
            git remote add scalingo git@scalingo.com:${SCALINGO_APP_NAME}.git
            git push -f scalingo HEAD:master

  deploy-pro:
    machine:
      image: circleci/classic:latest
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run:
          name: Install netlify CLI
          command: npm install -g netlify-cli@1.2.3
      - run:
          name: Install libraries
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use "$NODE_VERSION"
            cd pro
            yarn install
            set -a; source ~/pass-culture/config/run_envs/"${CIRCLE_BRANCH}" && yarn build
      - run:
          name: Deploy Pro
          command: |
            cd pro
            netlify deploy -e "${CIRCLE_BRANCH}" -t ${NETLIFY_TOKEN}
      - run:
          name: Check deployed version
          command: |
            COMPONENT_URL="https://pro.$(./scripts/compute_component_partial_url.sh ${CIRCLE_BRANCH})"
            ./scripts/check_current_tag_is_deployed.sh "$COMPONENT_URL"
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="*"$CIRCLE_BRANCH"* : *Pro* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED*"$'\U00026C5'""
            curl -d text="$BOT_MESSAGE" "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&parse_mode=Markdown"
            curl --request POST "http://$LOGSTASH_USER:$LOGSTASH_PASSWORD@pc-logstash.scalingo.io?Application=Pro&Environment=$CIRCLE_BRANCH&deployed=false&version=$VERSION_TO_DEPLOY"
          when: on_fail

  deploy-webapp:
    machine:
      image: circleci/classic:latest
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run:
          name: Install netlify CLI
          command: npm install -g netlify-cli@1.2.3
      - run:
          name: Build WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use "$NODE_VERSION"
            cd webapp
            yarn install
            ./scripts/build_with_fontello.sh "${CIRCLE_BRANCH}"
      - run:
          name: Deploy WEBAPP
          command: |
            cd webapp
            netlify deploy -e "${CIRCLE_BRANCH}" -t ${NETLIFY_TOKEN}
      - run:
          name: Check deployed version
          command: |
            COMPONENT_URL="https://app.$(./scripts/compute_component_partial_url.sh ${CIRCLE_BRANCH})"
            ./scripts/check_current_tag_is_deployed.sh "$COMPONENT_URL"
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="*"$CIRCLE_BRANCH"* : *Webapp* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED* "$'\U00026C5'""
            curl -d text="$BOT_MESSAGE" "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&parse_mode=Markdown"
            curl --request POST "http://$LOGSTASH_USER:$LOGSTASH_PASSWORD@pc-logstash.scalingo.io?Application=Webapp&Environment=$CIRCLE_BRANCH&deployed=false&version=$VERSION_TO_DEPLOY"
          when: on_fail

  release-synthesis:
    machine:
      image: circleci/classic:latest
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run:
          name: Check deployed version
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="Version *"$VERSION_TO_DEPLOY"* has been successfully deployed to *"$CIRCLE_BRANCH"* "$'\U0001F44C'""
            curl -d text="$BOT_MESSAGE" "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&parse_mode=Markdown"
            curl --request POST "http://$LOGSTASH_USER:$LOGSTASH_PASSWORD@pc-logstash.scalingo.io?Application=All&Environment=$CIRCLE_BRANCH&deployed=true&version=$VERSION_TO_DEPLOY"

workflows:
  version: 2
  commit:
    jobs:
      - tests-script-pc
      - tests-api:
          filters:
            branches:
              only:
                - master
                - /hotfix-v.*/
      - tests-webapp:
          filters:
            branches:
              only:
                - master
                - /hotfix-v.*/
      - tests-pro:
          filters:
            branches:
              only:
                - master
                - /hotfix-v.*/
      - tests-perf:
          filters:
            branches:
              only:
                - staging
      - deploy-api:
          filters:
            branches:
              only:
              - production
              - staging
              - integration
              - demo
      - deploy-api-datalake:
          filters:
            branches:
              only:
              - datalake
      - deploy-pro:
          requires:
            - deploy-api
      - deploy-webapp:
          requires:
            - deploy-api
      - release-synthesis:
          requires:
            - deploy-pro
            - deploy-webapp