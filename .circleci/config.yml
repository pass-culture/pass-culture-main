version: 2.1

###################
#  EXECUTORS
###################

executors:
  gcp-sdk:
    docker:
      - image: google/cloud-sdk:316.0.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD

  helm:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/helm-gcp:3.4.1
        auth:
          username: _json_key  # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

  node-gcp:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/node-gcp:12
        auth:
          username: _json_key  # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

###################
#  COMMANDS
###################

commands:

  authenticate_gcp:
    description: Authenticate to a GCP project
    parameters:
      gcp-key-name:
        type: env_var_name
    steps:
      - run: echo ${<< parameters.gcp-key-name >>} > ${HOME}/gcp-key.json
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${GCP_PROJECT}

  deploy-pcapi-gke:
    description: Deploy Crons and worker via helm to Kubernetes Cluster
    parameters:
      helm_release_name:
        type: string
      helm_chart_name:
        type: string
      kubernetes_namespace:
        type: string
      helm_values_file:
        type: string
    steps:
      - run: |
          helm upgrade << parameters.helm_release_name >> tmp/<< parameters.helm_chart_name >> \
            --install --wait \
            --namespace << parameters.kubernetes_namespace >> \
            --values tmp/<< parameters.helm_chart_name >>/<< parameters.helm_values_file >> \
            --set-string image.tag=$(cat ./api/version.txt)

  build-frontend-app:
    description: Build a frontend app with yarn
    parameters:
      node_env:
        type: string
      build_dir:
        type: string
      yarn_build_subcommand:
        type: string
    steps:
      - run:
          name: Install dependencies
          command: yarn install
          working_directory: << parameters.build_dir >>
      - run:
          name: Build frontend app
          command: |
            set -a; source ../config/run_envs/<< parameters.node_env >>;
            yarn << parameters.yarn_build_subcommand >>
          working_directory: << parameters.build_dir >>

  push-to-bucket:
    description: Push directory to a cloudstorage bucket
    parameters:
      bucket_name:
        type: string
      build_path:
        type: string
    steps:
      - run:
          name: push directory to bucket
          command: |
            set +eo pipefail
            gsutil rsync -r << parameters.build_path >> gs://<< parameters.bucket_name >>
            true

###################
#  JOBS
###################

jobs:
  tests-script-pc:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Install requirements
          command: |
            sudo apt-get update
            sudo apt-get install -y realpath
            sudo ./pc symlink
      - run:
          name: Run PC tests
          command: |
            cd tests
            ./run_tests.sh

  tests-api:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run: sudo ./pc symlink
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Running API server
          command: |
            cd api
            pc start-backend
          background: true
      - run:
          name: Running API tests
          command: |
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            echo 'y' | pc test-backend

  tests-webapp:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run: sudo ./pc symlink
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Run Unit Test WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd webapp
            nvm install
            yarn install
            yarn test:unit
      - run:
          name: Running API server
          command: |
            cd api
            pc start-backend
          background: true
      - run:
          name: Run Frontend WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd webapp
            nvm install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            pc sandbox --name=industrial
      - run:
          name: Running functional tests WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd webapp
            nvm install
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture/webapp/testcafe_screenshots
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="'Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  tests-pro:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run: sudo ./pc symlink
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Run Unit Test PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd pro
            nvm install
            yarn install
            yarn test:unit
      - run:
          name: Running API server
          command: |
            cd api
            pc start-backend
          background: true
      - run:
          name: Run Frontend PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd pro
            nvm install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            pc sandbox --name=industrial
      - run:
          name: Running functional tests PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd pro
            nvm install
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture/pro/testcafe_screenshots
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="'Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  tests-perf:
    working_directory: ~
    docker:
      - image: passcultureapp/artillery:0.6
    steps:
      - checkout
      - run: sed -i 's/$/'$USER_PASSWORD_PERF_ENV'/' /root/project/infra/artillery/user_list
      - run: artillery run /root/project/infra/artillery/scenario.yml -o /tmp/artillery-report.json
      - run: python3 scripts/analyze_report.py /tmp/artillery-report.json
      - store_artifacts:
          path: /tmp/artillery-report.json

  build-and-push-image:
    executor: gcp-sdk
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - authenticate_gcp:
          gcp-key-name: GCP_INFRA_KEY
      - run: |
          if [[ ${CIRCLE_BRANCH} == "staging" ]];then
            gcloud beta auth configure-docker ${GCP_REGION}-docker.pkg.dev
            docker build ./api \
              -f ./api/Dockerfile.gcp \
              -t ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi:$(cat ./api/version.txt)
            docker push ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi:$(cat ./api/version.txt)
          fi
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="'*"$CIRCLE_BRANCH"* : *Build or Push image "$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
          when: on_fail

  build-and-push-image-db-ops:
    executor: gcp-sdk
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - authenticate_gcp:
          gcp-key-name: GCP_INFRA_KEY
      - run: gcloud beta auth configure-docker ${GCP_REGION}-docker.pkg.dev
      - run: |
          docker build ./infra/docker-images/db-ops \
            -f ./infra/docker-images/db-ops/Dockerfile \
            --build-arg "BASE_PCAPI_TAG=$(cat ./api/version.txt)" \
            -t ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/db-ops:latest
      - run: docker push ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/db-ops:latest

  deploy-dbops:
    executor: helm
    environment:
      HELM_EXPERIMENTAL_OCI: 1
      CHART_NAME: dbops-chart
      CHART_RELEASE: passculture-db-operations
      NAMESPACE: operations
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - run:
          name: Get GKE cluster credentials
          command: gcloud container clusters get-credentials --region ${GCP_REGION} ${GKE_CLUSTER_NAME}
      - run:
          name: Login to GCP Artifact Registry with helm
          command: echo ${GCP_INFRA_KEY} | helm registry login  -u _json_key --password-stdin ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}
      - run:
          name: Pull chart from registry
          command: helm chart pull ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:$(cat infra/docker-images/db-ops/version.txt)
      - run:
          name: Export chart in local filesystem
          command: helm chart export ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:$(cat infra/docker-images/db-ops/version.txt) -d tmp/
      - run: |
          helm upgrade ${CHART_RELEASE} tmp/${CHART_RELEASE} \
            --install --wait \
            --namespace ${NAMESPACE} \
            --values tmp/${CHART_RELEASE}/values.${CIRCLE_BRANCH}.yaml \
            --version "$(cat infra/docker-images/db-ops/version.txt)"

  deploy-pcapi:
    executor: helm
    environment:
      HELM_EXPERIMENTAL_OCI: 1
      CHART_NAME: pcapi-chart
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - run:
          name: Get GKE cluster credentials
          command: gcloud container clusters get-credentials --region ${GCP_REGION} ${GKE_CLUSTER_NAME}
      - run:
          name: Login to GCP Artifact Registry with helm
          command: echo ${GCP_INFRA_KEY} | helm registry login  -u _json_key --password-stdin ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}
      - run:
          name: Pull chart from registry
          command: helm chart pull ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:$(cat api/version_chart.txt)
      - run:
          name: Export chart in local filesystem
          command: helm chart export ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:$(cat api/version_chart.txt) -d tmp/
      - deploy-pcapi-gke:
          helm_chart_name: pcapi
          helm_release_name: ${CIRCLE_BRANCH}
          kubernetes_namespace: ${CIRCLE_BRANCH}
          helm_values_file: values.${CIRCLE_BRANCH}.yaml
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="'*"$CIRCLE_BRANCH"* : *API* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
          when: on_fail

  deploy-pro:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run:
          name: Build and Deploy Pro
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
            cd pro
            nvm install
            yarn install

            set -a; source ~/pass-culture/config/run_envs/"${CIRCLE_BRANCH}"

            yarn build:${CIRCLE_BRANCH}

            npm install -g netlify-cli@2.46.0
            netlify deploy -s "${NETLIFY_SITE_ID_PRO}" -a "${NETLIFY_TOKEN}" -d build/ --prod
      - run:
          name: Check deployed version
          command: |
            COMPONENT_URL="https://pro.$(./scripts/compute_component_partial_url.sh ${CIRCLE_BRANCH})"
            ./scripts/check_current_tag_is_deployed.sh "$COMPONENT_URL"
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="'*"$CIRCLE_BRANCH"* : *Pro* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
            curl -i -k -XPOST "$GRAFANA_INFLUXDB_URL/write?db=$GRAFANA_DB" --data-binary 'deployments,application=Pro,environment='"$CIRCLE_BRANCH"',deployed=false version="'"$VERSION_TO_DEPLOY"'"'
          when: on_fail

  deploy-pro-cloudstorage:
    executor: node-gcp
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - build-frontend-app:
          node_env: ${CIRCLE_BRANCH}
          build_dir: ./pro
          yarn_build_subcommand: "build:${CIRCLE_BRANCH}"
      - push-to-bucket:
          build_path: ./pro/build/
          bucket_name: ${GCP_PROJECT}-${CIRCLE_BRANCH}-pro

  deploy-webapp:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run:
          name: Build and Deploy WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
            cd webapp
            nvm install
            yarn install

            set -a; source ~/pass-culture/config/run_envs/"${CIRCLE_BRANCH}";

            yarn build

            npm install -g netlify-cli@2.46.0
            netlify deploy -s "${NETLIFY_SITE_ID_WEBAPP}" -a "${NETLIFY_TOKEN}" -d build/ --prod
      - run:
          name: Check deployed version
          command: |
            COMPONENT_URL="https://app.$(./scripts/compute_component_partial_url.sh ${CIRCLE_BRANCH})"
            ./scripts/check_current_tag_is_deployed.sh "$COMPONENT_URL"
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="'*"$CIRCLE_BRANCH"* : *Webapp* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
            curl -i -k -XPOST "$GRAFANA_INFLUXDB_URL/write?db=$GRAFANA_DB" --data-binary 'deployments,application=Webapp,environment='"$CIRCLE_BRANCH"',deployed=false version="'"$VERSION_TO_DEPLOY"'"'
          when: on_fail

  deploy-webapp-cloudstorage:
    executor: node-gcp
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - build-frontend-app:
          node_env: ${CIRCLE_BRANCH}
          build_dir: ./webapp
          yarn_build_subcommand: "build"
      - push-to-bucket:
          build_path: ./webapp/build/
          bucket_name: ${GCP_PROJECT}-${CIRCLE_BRANCH}-webapp

  release-synthesis:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run:
          name: Check deployed version
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="'Version *"$VERSION_TO_DEPLOY"* has been successfully deployed to *"$CIRCLE_BRANCH"* :muscle:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
            curl -i -k -XPOST "$GRAFANA_INFLUXDB_URL/write?db=$GRAFANA_DB" --data-binary 'deployments,application=All,environment='"$CIRCLE_BRANCH"',deployed=true version="'"$VERSION_TO_DEPLOY"'"'

###################
#  WORKFLOWS
###################

workflows:
  version: 2
  commit:
    jobs:
      - tests-script-pc
      - tests-api:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
      - tests-webapp:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
      - tests-pro:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration

  gcp-ehp:
    jobs:
      - build-and-push-image:
          filters:
            branches:
              only:
                - staging
                - integration
          context:
            - GCP
            - GCP_EHP
      - build-and-push-image-db-ops:
          requires:
            - build-and-push-image
          filters:
            branches:
              only:
                - staging
          context:
            - GCP
            - GCP_EHP
      - deploy-pcapi:
          requires:
            - build-and-push-image
          context:
            - GCP
            - GCP_EHP
      - deploy-webapp-cloudstorage:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_EHP
      - deploy-pro-cloudstorage:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_EHP
      - deploy-pro:
          requires:
            - deploy-pcapi
      - deploy-webapp:
          requires:
            - deploy-pcapi
      - release-synthesis:
          requires:
            - deploy-pro
            - deploy-webapp

  gcp-prod:
    jobs:
      - build-and-push-image:
          filters:
            branches:
              only:
                - production
          context:
            - GCP
            - GCP_PROD
      - deploy-dbops:
          filters:
            branches:
              only:
                - production
          context:
            - GCP
            - GCP_PROD
      - deploy-pcapi:
          requires:
            - build-and-push-image
          context:
            - GCP
            - GCP_PROD
      - deploy-pro:
          requires:
            - deploy-pcapi
      - deploy-webapp:
          requires:
            - deploy-pcapi
      - deploy-webapp-cloudstorage:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_PROD
      - deploy-pro-cloudstorage:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_PROD
      - release-synthesis:
          requires:
            - deploy-pro
            - deploy-webapp
