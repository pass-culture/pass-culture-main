version: 2.1

##################
#  ORBS
##################
# Waiting for third party orbs to be enabled
# orbs:
#   skip: theodo/skip@0.1.2

orbs:
  slack: circleci/slack@4.2

##################
#  PARAMETERS
##################

parameters:
  venv_cache_key:
    type: string
    default: 'python-deps-v1-{{ checksum "/home/circleci/.pyenv/version" }}-{{ checksum "api/requirements.txt" }}'
  pro_cache_key:
    type: string
    default: 'node_modules-16.17-{{ checksum "pro/yarn.lock" }}'
  pro_jest_cache_key:
    type: string
    default: 'node-16.17-jest-cache-{{ epoch }}' # epoch is to ensure we store jest cache at each run (cf https://circleci.com/docs/2.0/caching/#using-keys-and-templates)
  adage-front_cache_key:
    type: string
    default: 'node_modules-16.17-{{ checksum "adage-front/yarn.lock" }}'
  backoffice-front_cache_key:
    type: string
    default: 'node_modules-14.13-{{ checksum "backoffice/yarn.lock" }}'
  run_measurement_workflow:
    type: boolean
    default: false
  measure_workflow_id:
    type: string
    default: ''
  has_run_e2e_test:
    type: string
    default: ''

###################
#  EXECUTORS
###################

executors:
  gcp-sdk:
    docker:
      - image: google/cloud-sdk:316.0.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD

  gcp-sdk-alpine:
    docker:
      - image: google/cloud-sdk:316.0.0-alpine
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD

  helm:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/helm-gcp:3.9.4
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

  node-gcp-12:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/node-gcp:12
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

  node-gcp-14:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/node-gcp:14
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

  node-gcp-16:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/node-gcp:16
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

  pcapi:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi:${CIRCLE_SHA1}
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

###################
#  COMMANDS
###################

commands:

  notify-slack:
    description: Send notification to Slack
    parameters:
      channel:
        type: string
      template:
        type: string
        default: FAIL_TEMPLATE_2
    steps:
      - slack/notify:
          event: fail
          channel: << parameters.channel >>
          template: << parameters.template >>

  skip_unchanged:
    parameters:
      except_branches:
        default: master
        description: Comma-separated list of git branches where we should never skip tests.
        type: string
      git_base_branch:
        default: origin/master
        description: The branch to compare against when looking for changing.
        type: string
      paths:
        description: The paths to look for changes in.
        type: string
    description: Skip if no changes to "<< parameters.paths >>"
    steps:
      - run:
          name: Skip job when not modifying this folder
          command: |
            echo "Skip debugging"
            echo "--------------"
            GIT_BASE_BRANCH=<<parameters.git_base_branch>>
            PATHS=<<parameters.paths>>
            EXCEPT_BRANCHES=<<parameters.except_branches>>
            echo "GIT_BASE_BRANCH=$GIT_BASE_BRANCH"
            echo "PATHS=$PATHS"
            echo "EXCEPT_BRANCHES=$EXCEPT_BRANCHES"

            BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
            echo "BRANCH_NAME=$BRANCH_NAME"

            IFS=' ' read -ra paths_arr \<<< "$PATHS"
            echo "paths_arr=" "${paths_arr[@]}"

            CHANGED_FILES="$(git diff "$GIT_BASE_BRANCH"..."$(git symbolic-ref --short -q HEAD)" --name-only --diff-filter=ACMRT "${paths_arr[@]}")";
            echo "CHANGED_FILES=$CHANGED_FILES"

            if [[ "$EXCEPT_BRANCHES" == *"${BRANCH_NAME}"* ]] || [ -n "${CHANGED_FILES}" ];
            then
                exit 0;
            fi
            circleci step halt;

  authenticate-gcp:
    description: Authenticate to a GCP project
    parameters:
      gcp-key-name:
        type: env_var_name
    steps:
      - run:
          name: Authenticate to GCP
          command: |
            echo ${<< parameters.gcp-key-name >>} | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GCP_PROJECT}

  authenticate_gcp_docker_registry:
    description: Authenticate to docker registry
    parameters:
      registry-region:
        type: string
    steps:
      - run: gcloud auth configure-docker ${<< parameters.registry-region >>}-docker.pkg.dev

  export_app_version:
    description: Export APP version number as environment variable
    parameters:
      version_file:
        type: string
        default: ./api/version.txt
    steps:
      - run: echo "export APP_VERSION=$(cat << parameters.version_file >> | tr -d '[:space:]')" >> $BASH_ENV

  export_chart_version:
    description: Export Helm chart version number as environment variable
    parameters:
      version_file:
        type: string
    steps:
      - run:
          name: Export Chart Version
          command: echo "export CHART_VERSION=$(cat <<parameters.version_file>> | grep "chartVersion" | awk -F':' '{print $2}' | tr -d '[:space:]')" >> $BASH_ENV

  deploy-helm-chart:
    description: Deploy Crons and worker via helm to Kubernetes Cluster
    parameters:
      helm_release_name:
        type: string
      helm_chart_name:
        type: string
      kubernetes_namespace:
        type: string
      helm_values_file:
        type: string
      helm_private_values_file:
        type: string
      app_version:
        type: string
    steps:
      - run: |
          source ${BASH_ENV}
          helm upgrade << parameters.helm_release_name >> tmp/<< parameters.helm_chart_name >> \
            --install --wait \
            --namespace << parameters.kubernetes_namespace >> \
            --values << parameters.helm_values_file >> \
            --values << parameters.helm_private_values_file >> \
            --set-string image.tag=<< parameters.app_version >>

  build-frontend-app:
    description: Build a frontend app with yarn
    parameters:
      node_env:
        type: string
      build_dir:
        type: string
      yarn_build_subcommand:
        type: string
    steps:
      - run:
          name: Install dependencies
          command: yarn install
          working_directory: << parameters.build_dir >>
      - run:
          name: Build frontend app
          command: |
            set -a; source ../config/run_envs/<< parameters.node_env >>;
            yarn << parameters.yarn_build_subcommand >>
          working_directory: << parameters.build_dir >>

  push-to-bucket:
    description: Push directory to a cloudstorage bucket
    parameters:
      bucket_name:
        type: string
      build_path:
        type: string
    steps:
      - run:
          name: push directory to bucket
          command: |
            set +eo pipefail
            gsutil rsync -r << parameters.build_path >> gs://<< parameters.bucket_name >>

  invalidate-cache:
    description: Invalidate Cache asynchronously
    parameters:
      url_map_name:
        type: string
    steps:
      - run:
          name: Invalidate cache
          command: |
            gcloud compute url-maps invalidate-cdn-cache << parameters.url_map_name >> --path "/*"  --async
            echo "An invalidateCache operation has been requested. You can follow its progress on https://console.cloud.google.com/compute/operations"

  clone-pass-culture-deployment-repo:
    steps:
      - run:
          name: Clone pass-culture-deployment-repo
          command: git clone git@github.com:pass-culture/pass-culture-deployment.git ~/pass-culture-deployment

  setup_sentry:
    description: Setup sentry credentials for Backoffice
    steps:
      - run:
          name: Setup sentry credentials for Backoffice
          command: |
            echo "[defaults]" >> ~/.sentryclirc
            echo "url=https://sentry.passculture.team/" >> ~/.sentryclirc
            echo "org=sentry" >> ~/.sentryclirc
            echo "project=backoffice" >> ~/.sentryclirc
            echo "" >> ~/.sentryclirc
            echo "[auth]" >> ~/.sentryclirc
            echo "token=$SENTRY_AUTH_TOKEN" >> ~/.sentryclirc

###################
#  JOBS
###################

jobs:
  quality-api:
    parameters:
      is_nightly_build:
        type: boolean
        default: false
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi-tests:${CIRCLE_SHA1}
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: api
      - run:
          name: Show installed Python packages
          command: pip freeze
      - run:
          name: Check imports are well organized with isort
          when: always
          command: isort . --check-only
          working_directory: /usr/src/app
      - run:
          name: Check code is well formatted with black
          when: always
          command: black . --check
          working_directory: /usr/src/app
      - run:
          name: Run pylint
          when: always
          command: pylint src tests --jobs=2
          working_directory: /usr/src/app
      - run:
          name: Run mypy
          when: always
          command: mypy src
          working_directory: /usr/src/app
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: shérif

  tests-api:
    parameters:
      is_nightly_build:
        type: boolean
        default: false
      pytest_extra_args:
        description: "directories to include and ignore"
        default: "tests"
        type: string
    working_directory: ~/pass-culture
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi-tests:${CIRCLE_SHA1}
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY
        environment:
          RUN_ENV: tests
          DATABASE_URL_TEST: postgresql://pytest:pytest@localhost:5432/pass_culture
          REDIS_URL: redis://localhost:6379
      - image: cimg/postgres:12.9-postgis
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_USER: pytest
          POSTGRES_PASSWORD: pytest
          POSTGRES_DB: pass_culture
      - image: redis
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    parallelism: 4
    steps:
      - checkout
      - skip_unchanged:
          paths: api
      - run:
          name: Show installed Python packages
          command: pip freeze
      - run:
          name: Check for alembic multiple heads
          command: |
            LINE_COUNT=$(wc -l \<<< "$(alembic heads)")
            if [${LINE_COUNT} -ne 2 ]; then echo "There must be two heads";exit 1;fi
          working_directory: /usr/src/app
      - run:
          name: Check database and model are aligned
          command: |
            flask install_postgres_extensions
            alembic upgrade pre@head
            alembic upgrade post@head
            flask install_data
            python tests/alembic/check_db_schema.py
          working_directory: /usr/src/app
      # This step will fail ("Walked too far") if there are less than 10 migrations on each branch, for example after a squash
      - run:
          name: Check that downgrade scripts are correctly written
          command: |
            alembic downgrade post@head-10
            alembic downgrade pre@head-10
            alembic upgrade pre@head
            alembic upgrade post@head
          working_directory: /usr/src/app
      - run:
          name: Running tests
          command: |
            # Synchronize these globs with `python_files` in `pytest.ini`
            TEST_FILES=$(circleci tests glob "tests/**/*test.py" "tests/**/test*.py" | circleci tests split)
            mkdir -p test-results
            pytest $TEST_FILES --durations=10 --junitxml=test-results/junit.xml
          working_directory: /usr/src/app
      - store_test_results:
          path: /usr/src/app/test-results
      - store_artifacts:
          path: /usr/src/app/test-results
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: shérif

  test-rebuild-staging:
    working_directory: ~/pass-culture
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi-tests:${CIRCLE_SHA1}
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY
        environment:
          RUN_ENV: tests
          DATABASE_URL: postgresql://pytest:pytest@localhost:5432/pass_culture
          DATABASE_URL_TEST: postgresql://pytest:pytest@localhost:5432/pass_culture
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_infra_key.json
      - image: cimg/postgres:12.9-postgis
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_USER: pytest
          POSTGRES_PASSWORD: pytest
          POSTGRES_DB: pass_culture
    steps:
      - checkout
      - skip_unchanged:
          paths: api
      - run:
          name: Write Google Cloud service account private key to file
          command: echo ${GCP_INFRA_KEY} > ${GOOGLE_APPLICATION_CREDENTIALS}
      - run:
          name: Setup database
          command: |
            flask install_postgres_extensions
            alembic upgrade pre@head
            alembic upgrade post@head
            flask install_data
          working_directory: /usr/src/app
      - run:
          name: Test rebuild_staging script
          command: ./rebuild_staging.sh
          working_directory: /usr/src/app

  type-checking-adage-front:
    docker:
      - image: cimg/node:16.17
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: adage-front
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                name: Restore Yarn Package Cache
                key: << pipeline.parameters.adage-front_cache_key >>
      - run:
          name: Install dependencies
          working_directory: adage-front
          command: yarn install
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                name: Save Yarn Package Cache
                key: << pipeline.parameters.adage-front_cache_key >>
                paths:
                  - ~/pass-culture/adage-front/node_modules
      - run:
          name: Running type checking
          working_directory: adage-front
          command: yarn tsc -b
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: shérif

  quality-adage-front:
    docker:
      - image: cimg/node:16.17
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: adage-front
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                name: Restore Yarn Package Cache
                key: << pipeline.parameters.adage-front_cache_key >>
      - run:
          name: Install dependencies
          working_directory: adage-front
          command: |
            yarn install
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                name: Save Yarn Package Cache
                key: << pipeline.parameters.adage-front_cache_key >>
                paths:
                  - ~/pass-culture/adage-front/node_modules
      - run:
          name: Running linter
          working_directory: adage-front
          command: |
            yarn lint:js
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: shérif

  tests-adage-front:
    docker:
      - image: cimg/node:16.17
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: adage-front
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                name: Restore Yarn Package Cache
                key: << pipeline.parameters.adage-front_cache_key >>
      - run:
          name: Install dependencies
          working_directory: adage-front
          command: yarn install
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                name: Save Yarn Package Cache
                key: << pipeline.parameters.adage-front_cache_key >>
                paths:
                  - ~/pass-culture/adage-front/node_modules
      - run:
          name: Run Unit Test Adage-front
          working_directory: adage-front
          command: yarn test:unit
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: shérif

  type-checking-pro:
    docker:
      - image: cimg/node:16.17
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: pro
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                name: Restore Yarn Package Cache
                key: << pipeline.parameters.pro_cache_key >>
      - run:
          name: Install dependencies
          working_directory: pro
          command: yarn install
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                name: Save Yarn Package Cache
                key: << pipeline.parameters.pro_cache_key >>
                paths:
                  - ~/pass-culture/pro/node_modules
      - run:
          name: Running type checking
          working_directory: pro
          command: yarn tsc -b
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: shérif

  quality-pro:
    docker:
      - image: cimg/node:16.17
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: pro
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                name: Restore Yarn Package Cache
                key: << pipeline.parameters.pro_cache_key >>
      - run:
          name: Install dependencies
          working_directory: pro
          command: yarn install
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                name: Save Yarn Package Cache
                key: << pipeline.parameters.pro_cache_key >>
                paths:
                  - ~/pass-culture/pro/node_modules
      - run:
          name: Running linter
          working_directory: pro
          command: yarn lint:js --max-warnings 0
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: shérif

  tests-pro-unit-tests:
    docker:
      - image: cimg/node:16.17
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: pro
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                name: Restore Yarn Package Cache
                key: << pipeline.parameters.pro_cache_key >>
      - run:
          name: Install packages
          command: yarn install
          working_directory: pro
      - restore_cache:
          name: Restore Jest Cache
          key: node-14.18-jest-cache-
      - when:
          condition:
            or:
              - equal: ["master", << pipeline.git.branch >>]
              - matches:
                  pattern: "^maint/.+$"
                  value: << pipeline.git.branch >>
          steps:
            - run:
                name: Run Unit Test PRO
                command: yarn test:unit:ci
                working_directory: pro
      - unless:
          condition:
            matches:
              pattern: "^maint/.+$"
              value: << pipeline.git.branch >>
          steps:
            - run:
                name: Coverage Unit Test PRO
                command: yarn test:unit:ci --coverage --changedSince=master --coverageThreshold='{"global":{"statements":"100","branches":"100","functions":"100","lines":"100"}}'
                working_directory: pro
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                name: Save Yarn Package Cache
                key: << pipeline.parameters.pro_cache_key >>
                paths:
                  - ~/pass-culture/pro/node_modules
      - save_cache:
          name: Save Jest Package Cache
          key: node-14.18-jest-cache-{{ epoch }}
          paths:
            - ~/pass-culture/pro/.jest_cache
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: shérif
  tests-pro-e2e-tests:
    machine:
      image: ubuntu-2004:202101-01
      docker_layer_caching: true
    resource_class: large
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: pro
      - run: sudo chown -R 1000:1000 .
      - run: ./install_lib_ci_with_chrome.sh
      - run: sudo ./pc symlink
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Running API server
          command: |
            cd api
            pc start-backend
          background: true
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                name: Restore Yarn Package Cache
                key: << pipeline.parameters.pro_cache_key >>
      - run:
          name: Run Frontend PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd pro
            nvm install
            yarn install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            dockerize -wait http://localhost/health/api -timeout 10m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 10m -wait-retry-interval 5s
            pc sandbox --name=testcafe
      - run:
          name: Running functional tests PRO
          command: |
            cd pro
            nvm use
            dockerize -wait http://localhost:3001 -timeout 5m -wait-retry-interval 5s
            yarn test:cafe
      - run:
          name: Step for measure to know if e2e tests have been run
          command: |
            mkdir -p /tmp/workspace
            echo "Has run e2e test" > /tmp/workspace/e2e-test-launched.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - e2e-test-launched.txt
      - store_artifacts:
          path: ~/pass-culture/pro/testcafe_screenshots
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: shérif

  tests-backoffice-front-unit-tests:
    docker:
      - image: cimg/node:14.18
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_unchanged:
          paths: backoffice
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - restore_cache:
                name: Restore Yarn Package Cache
                key: << pipeline.parameters.backoffice-front_cache_key >>
      - run:
          name: Install packages
          command: yarn install
          working_directory: backoffice
      - restore_cache:
          name: Restore Jest Cache
          key: node-14.18-jest-cache-
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - run:
                name: Run Unit Test BACKOFFICE
                command: yarn test:unit:ci
                working_directory: backoffice
      - run:
          name: Unit Test FRONT BACKOFFICE
          command: yarn test:unit:ci --changedSince=master
          working_directory: backoffice
      - unless:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - save_cache:
                name: Save Yarn Package Cache
                key: << pipeline.parameters.backoffice-front_cache_key >>
                paths:
                  - ~/pass-culture/backoffice/node_modules
      - save_cache:
          name: Save Jest Package Cache
          key: node-14.18-jest-cache-{{ epoch }}
          paths:
            - ~/pass-culture/backoffice/.jest_cache
      - when:
          condition:
            equal: ["master", << pipeline.git.branch >>]
          steps:
            - notify-slack:
                channel: shérif

  build-and-push-image:
    executor: gcp-sdk-alpine
    environment:
      DOCKER_BUILDKIT: 1
    parameters:
      console:
        type: boolean
        default: true
      tests:
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - authenticate-gcp:
          gcp-key-name: GCP_INFRA_KEY
      - authenticate_gcp_docker_registry:
          registry-region: GCP_REGION
      - export_app_version
      - run:
            name: Build & push pcapi image
            command: |
              source ${BASH_ENV}
              docker build ./api \
                -f ./api/Dockerfile \
                --target pcapi \
                -t ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi:${CIRCLE_SHA1}
              docker push ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi:${CIRCLE_SHA1}
      - when:
          condition:
            equal: [ true , << parameters.console >> ]
          steps:
            - run:
                name: Build & push pcapi-console image
                command: |
                  source ${BASH_ENV}
                  docker build ./api \
                    -f ./api/Dockerfile \
                    --target pcapi-console \
                    -t ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi-console:${CIRCLE_SHA1}
                  docker push ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi-console:${CIRCLE_SHA1}
      - when:
          condition:
            equal: [ true , << parameters.tests >> ]
          steps:
            - run:
                name: Build & push pcapi-tests image
                command: |
                  source ${BASH_ENV}
                  docker build ./api \
                    -f ./api/Dockerfile \
                    --target pcapi-tests \
                    -t ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi-tests:${CIRCLE_SHA1}
                  docker push ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_REGISTRY_NAME}/pcapi-tests:${CIRCLE_SHA1}
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains | sed 's/..$//')
            BOT_MESSAGE="'*"$CIRCLE_BRANCH"* : *Build or Push image "$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
          when: on_fail

  generate-pcapi-helm-values-files:
    executor: pcapi
    working_directory: /usr/src/app
    steps:
      - run:
          name: Generate pcapi helm secret values files
          command: |
            mkdir -p /tmp/workspace
            flask print_secret_keys > /tmp/workspace/pcapi-secrets.yaml
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - pcapi-secrets.yaml

  deploy-pcapi:
    executor: helm
    parameters:
      helm_environment:
        type: string
        default: ${CIRCLE_BRANCH}
      app_version:
        type: string
        default: ${APP_VERSION}
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - clone-pass-culture-deployment-repo
      - authenticate-gcp:
          gcp-key-name: GCP_METIER_KEY
      - export_app_version
      - run:
          name: Get GKE cluster credentials
          command: gcloud container clusters get-credentials --region ${GCP_REGION} ${GKE_CLUSTER_NAME}
      - run:
          name: Deploy new ExternalSecret only if needed
          command: |
            PASSCULTURE_PASSWORD=${GCP_INFRA_KEY} \
            PCAPI_VALUES_FILE=<(helm -n <<parameters.helm_environment>> get values <<parameters.helm_environment>>) \
            PCAPI_SECRETS_FILE=/tmp/workspace/pcapi-secrets.yaml \
            helmfile -e <<parameters.helm_environment>> apply --detailed-exitcode || HELMFILE_EXIT_CODE=$?
            if [[ $HELMFILE_EXIT_CODE -eq 2 ]]; then
              STATUS=$(kubectl -n <<parameters.helm_environment>> get externalsecret.external-secrets.io pcapi-<<parameters.helm_environment>> -o jsonpath={..status..status})
              if [[ $STATUS == "False" ]]; then
                kubectl -n <<parameters.helm_environment>> get events --field-selector involvedObject.name=pcapi-<<parameters.helm_environment>>,involvedObject.kind=ExternalSecret
                helm -n <<parameters.helm_environment>> rollback <<parameters.helm_environment>>
                exit 1
              fi
            fi
      - run:
          name: Deploy pcapi
          command: |
            PASSCULTURE_PASSWORD=${GCP_INFRA_KEY} \
            PCAPI_VALUES_FILE=~/pass-culture-deployment/helm/pcapi/values.<<parameters.helm_environment>>.yaml \
            PCAPI_SECRETS_FILE=/tmp/workspace/pcapi-secrets.yaml \
            helmfile -e <<parameters.helm_environment>> sync --set image.tag=<<parameters.app_version>>
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=<<parameters.app_version>>
            BOT_MESSAGE="'*"<<parameters.helm_environment>>"* : *API* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
          when: on_fail

  deploy-pro:
    executor: node-gcp-16
    parameters:
      app_environment:
        type: string
        default: ${CIRCLE_BRANCH}
    steps:
      - checkout
      - authenticate-gcp:
          gcp-key-name: GCP_METIER_KEY
      - build-frontend-app:
          node_env: <<parameters.app_environment>>
          build_dir: ./pro
          yarn_build_subcommand: "build:<<parameters.app_environment>>"
      - unless:
          condition:
            equal: ["testing", <<parameters.app_environment>>]
          steps:
            - run:
                name: Update version.txt file
                command: >
                  cat pro/package.json | grep -E '"version": "[0-9]+.[0-9]+.[0-9]+"' | grep -Eo '[0-9]+.[0-9]+.[0-9]+' > pro/build/version.txt
      - push-to-bucket:
          build_path: ./pro/build/
          bucket_name: ${GCP_PROJECT}-<<parameters.app_environment>>-pro
      - when:
          condition:
            equal: ["production", <<parameters.app_environment>>]
          steps:
            - invalidate-cache:
                url_map_name: <<parameters.app_environment>>-pro-url-map
      - unless:
          condition:
            equal: ["testing", <<parameters.app_environment>>]
          steps:
            - run:
                name: Check deployed version
                command: |
                  COMPONENT_URL="https://$(./scripts/compute_pro_url.sh <<parameters.app_environment>>)"
                  ./scripts/check_current_tag_is_deployed.sh "$COMPONENT_URL"
            - run:
                name: Send failure notification
                command: |
                  VERSION_TO_DEPLOY=$(git describe --contains | sed 's/..$//')
                  BOT_MESSAGE="'*"$CIRCLE_BRANCH"* : *Pro* deployment *"$VERSION_TO_DEPLOY"* may have *FAILED* (an 
                  old cache could still be valid) :collision:'"
                  curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
                when: on_fail

  deploy-adage-front:
    executor: node-gcp-16
    parameters:
      app_environment:
        type: string
        default: ${CIRCLE_BRANCH}
    steps:
      - checkout
      - authenticate-gcp:
          gcp-key-name: GCP_METIER_KEY
      - build-frontend-app:
          node_env: <<parameters.app_environment>>
          build_dir: ./adage-front
          yarn_build_subcommand: "build:<<parameters.app_environment>>"
      - unless:
          condition:
            equal: ["testing", <<parameters.app_environment>>]
          steps:
            - run:
                name: Update version.txt file
                command: >
                  cat adage-front/package.json | grep -E '"version": "[0-9]+.[0-9]+.[0-9]+"' | grep -Eo '[0-9]+.[0-9]+.[0-9]+' > adage-front/build/version.txt
      - push-to-bucket:
          build_path: ./adage-front/build/
          bucket_name: ${GCP_PROJECT}-<<parameters.app_environment>>-adage
      - when:
          condition:
            equal: ["production", <<parameters.app_environment>>]
          steps:
            - invalidate-cache:
                url_map_name: <<parameters.app_environment>>-pro-url-map
      - unless:
          condition:
            equal: ["testing", <<parameters.app_environment>>]
          steps:
            - run:
                name: Send failure notification
                command: |
                  if [[ "<<parameters.app_environment>>" == "testing" ]]; then
                    exit 0
                    circleci step halt;
                  fi
                  VERSION_TO_DEPLOY=$(git describe --contains | sed 's/..$//')
                  BOT_MESSAGE="'*"<<parameters.app_environment>>"* : *Adage-front* deployment *"$VERSION_TO_DEPLOY"* may
                  have *FAILED* (an old cache could still be valid) :collision:'"
                  curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
                when: on_fail

  deploy-backoffice-front:
    executor: node-gcp-16
    parameters:
      app_environment:
        type: string
        default: ${CIRCLE_BRANCH}
      build_dir:
        type: string
        default: backoffice
      service_account_backoffice_key:
        type: string
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          key: << pipeline.parameters.backoffice-front_cache_key >>
      - setup_sentry
      - build-frontend-app:
          node_env: <<parameters.app_environment>>
          build_dir: <<parameters.build_dir>>
          yarn_build_subcommand: "build:<<parameters.app_environment>>"
      - save_cache:
          name: Save Yarn Package Cache
          key: << pipeline.parameters.backoffice-front_cache_key >>
          paths:
            - backoffice/node_modules
      - run:
          name: Deploy backoffice front <<parameters.app_environment>>
          command: |
            echo "$<<parameters.service_account_backoffice_key>>" > ~/gcp_backoffice_testing.json
            export GOOGLE_APPLICATION_CREDENTIALS=~/gcp_backoffice_testing.json
            yarn --cwd <<parameters.build_dir>> deploy:<<parameters.app_environment>>

  release-synthesis:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run:
          name: Check deployed version
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains | sed 's/..$//')
            BOT_MESSAGE="'Version *"$VERSION_TO_DEPLOY"* has been successfully deployed to *"$CIRCLE_BRANCH"* :muscle:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  restart-pcapi:
    executor: gcp-sdk
    parameters:
      helm_environment:
        type: string
        default: ${CIRCLE_BRANCH}
    steps:
      - authenticate-gcp:
          gcp-key-name: GCP_METIER_KEY
      - run:
          name: Get GKE cluster credentials
          command: gcloud container clusters get-credentials --region ${GCP_REGION} ${GKE_CLUSTER_NAME}
      - run: kubectl -n <<parameters.helm_environment>> rollout restart deploy

  measure_workflow_execution_time:
    docker:
      - image: cimg/python:3.10
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Measure circle CI workflow execution time from workflow_id
          command: |
            pip install -U datetime tzlocal
            python3 scripts/measure_workflow_execution_time.py $CIRCLE_CI_TOKEN $METRICS_ENDPOINT << pipeline.parameters.measure_workflow_id >> << pipeline.parameters.has_run_e2e_test >>

  trigger_measure_workflow_execution_time:
    docker:
      - image: cimg/base:2021.04
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Trigger measure workflow execution time
          command: |
            HAS_RUN_E2E=$([[ -f "/tmp/workspace/e2e-test-launched.txt" ]] && echo "True" || echo "False")
            curl --request POST --url https://circleci.com/api/v2/project/github/pass-culture/pass-culture-main/pipeline --header "Circle-Token: $CIRCLE_CI_TOKEN" --header 'content-type: application/json' --data "{\"parameters\":{\"run_measurement_workflow\":true, \"measure_workflow_id\":\"$CIRCLE_WORKFLOW_ID\", \"has_run_e2e_test\":\"$HAS_RUN_E2E\"}}"

###################
#  WORKFLOWS
###################

workflows:
  version: 2
  commit:
    unless: << pipeline.parameters.run_measurement_workflow >>
    jobs:
      - build-and-push-image:
          context:
            - GCP
            - GCP_EHP
          tests: true
          filters:
            branches:
              ignore:
                - docs
      - type-checking-pro:
         filters:
           branches:
             ignore:
               - production
               - staging
               - integration
               - docs
         context: Slack
      - quality-pro:
         filters:
           branches:
             ignore:
               - production
               - staging
               - integration
               - docs
         context: Slack
      - type-checking-adage-front:
         filters:
           branches:
             ignore:
               - production
               - staging
               - integration
               - docs
         context: Slack
      - quality-adage-front:
         filters:
           branches:
             ignore:
               - production
               - staging
               - integration
               - docs
         context: Slack
      - quality-api:
         filters:
           branches:
             ignore:
               - production
               - staging
               - integration
               - docs
         context:
          - Slack
          - GCP
          - GCP_EHP
         requires:
           - build-and-push-image
      - tests-api:
         filters:
           branches:
             ignore:
               - production
               - staging
               - integration
               - docs
         context:
          - Slack
          - GCP
          - GCP_EHP
         requires:
           - build-and-push-image
      - test-rebuild-staging:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
          context:
            - GCP
            - GCP_EHP
          requires:
            - build-and-push-image
      - tests-adage-front:
         filters:
           branches:
             ignore:
               - production
               - staging
               - integration
               - docs
         context: Slack
         requires:
           - type-checking-adage-front
      - tests-pro-unit-tests:
         filters:
           branches:
             ignore:
               - production
               - staging
               - integration
               - docs
         context: Slack
         requires:
           - type-checking-pro
      - tests-pro-e2e-tests:
         filters:
           branches:
             ignore:
               - production
               - staging
               - integration
               - docs
         context: Slack
         requires:
           - type-checking-pro
      - tests-backoffice-front-unit-tests:
         filters:
           branches:
             ignore:
               - production
               - staging
               - integration
               - docs
         context: Slack
      - generate-pcapi-helm-values-files:
          filters:
            branches:
              only:
                - master
          requires:
            - build-and-push-image
          context:
            - GCP
            - GCP_EHP
      - deploy-pcapi:
         filters:
           branches:
             only:
               - master
         requires:
           - generate-pcapi-helm-values-files
         context:
           - GCP
           - GCP_EHP
         helm_environment: testing
         app_version: ${CIRCLE_SHA1}
      - restart-pcapi:
         filters:
           branches:
             only:
               - master
         requires:
           - deploy-pcapi
         context:
           - GCP
           - GCP_EHP
         helm_environment: testing
      - deploy-pro:
         filters:
           branches:
             only:
               - master
         requires:
           - quality-pro
           - tests-pro-unit-tests
           - tests-pro-e2e-tests
           - restart-pcapi
         context:
           - GCP
           - GCP_EHP
         app_environment: testing
      - deploy-adage-front:
         filters:
           branches:
             only:
               - master
         requires:
           - quality-adage-front
           - tests-adage-front
           - restart-pcapi
         context:
           - GCP
           - GCP_EHP
         app_environment: testing
      - deploy-backoffice-front:
         filters:
           branches:
             only:
               - master
         requires:
           - tests-backoffice-front-unit-tests
           - restart-pcapi
         context:
           - GCP
           - GCP_EHP
         app_environment: testing
         service_account_backoffice_key: GCP_BACKOFFICE_TESTING_KEY
      - trigger_measure_workflow_execution_time:
         filters:
           branches:
             ignore:
               - production
               - staging
               - integration
               - master
               - docs
         requires:
           - type-checking-pro
           - quality-pro
           - type-checking-adage-front
           - quality-adage-front
           - quality-api
           - tests-api
           - tests-adage-front
           - tests-pro-unit-tests
           - tests-pro-e2e-tests
           - tests-backoffice-front-unit-tests
         context:
           - CI_MEASURE
  gcp-ehp:
    jobs:
      - generate-pcapi-helm-values-files:
          filters:
            branches:
              only:
                - staging
                - integration
          context:
            - GCP
            - GCP_EHP
      - deploy-pcapi:
          requires:
            - generate-pcapi-helm-values-files
          context:
            - GCP
            - GCP_EHP
      - deploy-pro:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_EHP
      - deploy-adage-front:
          filters:
            branches:
              ignore: integration
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_EHP
      - deploy-backoffice-front:
          filters:
            branches:
              ignore: integration
          requires:
            - restart-pcapi
          context:
            - GCP
            - GCP_EHP
          service_account_backoffice_key: GCP_BACKOFFICE_STAGING_KEY
      - release-synthesis:
          requires:
            - restart-pcapi
            - deploy-pro
            - deploy-adage-front
            - deploy-backoffice-front
      - restart-pcapi:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_EHP

  gcp-prod:
    jobs:
      - generate-pcapi-helm-values-files:
          filters:
            branches:
              only:
                - production
          context:
            - GCP
            - GCP_PROD
      - deploy-pcapi:
          requires:
            - generate-pcapi-helm-values-files
          context:
            - GCP
            - GCP_PROD
      - deploy-pro:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_PROD
      - deploy-adage-front:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_PROD
      - deploy-backoffice-front:
          requires:
            - restart-pcapi
          context:
            - GCP
            - GCP_PROD
          service_account_backoffice_key: GCP_BACKOFFICE_PRODUCTION_KEY
      - release-synthesis:
          requires:
            - restart-pcapi
            - deploy-pro
            - deploy-adage-front
            - deploy-backoffice-front
      - restart-pcapi:
          requires:
            - deploy-pcapi
          context:
            - GCP
            - GCP_PROD
  measure_execution_time:
    when: << pipeline.parameters.run_measurement_workflow >>
    jobs:
      - measure_workflow_execution_time:
          context:
            - CI_MEASURE
