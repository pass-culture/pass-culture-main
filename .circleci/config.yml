version: 2.1

###################
#  EXECUTORS
###################

executors:
  gcp-sdk:
    docker:
      - image: google/cloud-sdk:316.0.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD

  helm:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/helm-gcp:3.4.1
        auth:
          username: _json_key  # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

###################
#  COMMANDS
###################

commands:

  export_version:
    description: Export API version number as environment variable
    steps:
      - run: echo "export API_VERSION=$(cat ./api/version.txt)" >> $BASH_ENV

  authenticate_gcp:
    description: Authenticate to a GCP project
    parameters:
      gcp-key-name:
        type: env_var_name
    steps:
      - run: echo ${<< parameters.gcp-key-name >>} > ${HOME}/gcp-key.json
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${GCP_PROJECT}

  deploy-api-cloudrun:
    description: Deploy the Pass Culture API to Cloud Run
    parameters:
      app_name:
        type: string
      app_env:
        type: string
      app_image_tag:
        type: string
      docker_image_name:
        type: string
      app_service_account_email:
        type: string
      vpc_connector_name:
        type: string
    steps:
      - run: |
          set +eo pipefail # While GCP deployment is not stable make it always return success status
          gcloud beta run deploy << parameters.app_name >> \
            --platform=managed \
            --allow-unauthenticated \
            --vpc-connector=<< parameters.vpc_connector_name >> \
            --project ${GCP_PROJECT} \
            --region ${GCP_REGION} \
            --port=80 \
            --memory=1Gi \
            --service-account << parameters.app_service_account_email >> \
            --min-instances=1 \
            --set-env-vars "\
                ACTIVATION_USER_RECIPIENTS=sm://${GCP_PROJECT}/<< parameters.app_name >>_activation_user_recipients, \
                ADMINISTRATION_EMAIL_ADDRESS=sm://${GCP_PROJECT}/<< parameters.app_name >>_administration_email_address, \
                ALGOLIA_API_KEY=sm://${GCP_PROJECT}/<< parameters.app_name >>_algolia_api_key, \
                ALGOLIA_APPLICATION_ID=sm://${GCP_PROJECT}/<< parameters.app_name >>_algolia_application_id, \
                ALLOCINE_API_KEY=sm://${GCP_PROJECT}/<< parameters.app_name >>_allocine_api_key, \
                DATABASE_URL=sm://${GCP_PROJECT}/<< parameters.app_name >>_database_url, \
                DEMARCHES_SIMPLIFIEES_TOKEN=sm://${GCP_PROJECT}/<< parameters.app_name >>_demarches_simplifiees_token, \
                DEMARCHES_SIMPLIFIEES_WEBHOOK_TOKEN=sm://${GCP_PROJECT}/<< parameters.app_name >>_demarches_simplifiees_webhook_token, \
                DEV_EMAIL_ADDRESS=sm://${GCP_PROJECT}/<< parameters.app_name >>_dev_email_address, \
                ENV=<< parameters.app_env >>, \
                EXPORT_TOKEN=sm://${GCP_PROJECT}/<< parameters.app_name >>_export_token, \
                FLASK_SECRET=sm://${GCP_PROJECT}/<< parameters.app_name >>_flask_secret, \
                FTP_TITELIVE_PWD=sm://${GCP_PROJECT}/<< parameters.app_name >>_ftp_titelive_pwd, \
                FTP_TITELIVE_URI=sm://${GCP_PROJECT}/<< parameters.app_name >>_ftp_titelive_uri, \
                FTP_TITELIVE_USER=sm://${GCP_PROJECT}/<< parameters.app_name >>_ftp_titelive_user, \
                JOUVE_API_DOMAIN=sm://${GCP_PROJECT}/<< parameters.app_name >>_jouve_api_domain, \
                JOUVE_PASSWORD=sm://${GCP_PROJECT}/<< parameters.app_name >>_jouve_password, \
                JOUVE_USERNAME=sm://${GCP_PROJECT}/<< parameters.app_name >>_jouve_username, \
                JOUVE_VAULT_GUID=sm://${GCP_PROJECT}/<< parameters.app_name >>_jouve_vault_guid, \
                JWT_SECRET_KEY=sm://${GCP_PROJECT}/<< parameters.app_name >>_jwt_secret_key, \
                MAILJET_API_KEY=sm://${GCP_PROJECT}/<< parameters.app_name >>_mailjet_api_key, \
                MAILJET_API_SECRET=sm://${GCP_PROJECT}/<< parameters.app_name >>_mailjet_api_secret, \
                NLTK_DATA=/root/nltk_data, \
                OBJECT_STORAGE_URL=sm://${GCP_PROJECT}/<< parameters.app_name >>_object_storage_url, \
                OVH_BUCKET_NAME=sm://${GCP_PROJECT}/<< parameters.app_name >>_ovh_bucket_name, \
                OVH_PASSWORD=sm://${GCP_PROJECT}/<< parameters.app_name >>_ovh_password, \
                OVH_REGION_NAME=sm://${GCP_PROJECT}/<< parameters.app_name >>_ovh_region_name, \
                OVH_TENANT_NAME=sm://${GCP_PROJECT}/<< parameters.app_name >>_ovh_tenant_name, \
                OVH_USER=sm://${GCP_PROJECT}/<< parameters.app_name >>_ovh_user, \
                PASS_CULTURE_BIC=sm://${GCP_PROJECT}/<< parameters.app_name >>_pass_culture_bic, \
                PASS_CULTURE_IBAN=sm://${GCP_PROJECT}/<< parameters.app_name >>_pass_culture_iban, \
                PASS_CULTURE_REMITTANCE_CODE=sm://${GCP_PROJECT}/<< parameters.app_name >>_pass_culture_remittance_code, \
                PAYMENTS_DETAILS_RECIPIENTS=sm://${GCP_PROJECT}/<< parameters.app_name >>_payments_details_recipients, \
                PAYMENTS_REPORT_RECIPIENTS=sm://${GCP_PROJECT}/<< parameters.app_name >>_payments_report_recipients, \
                PC_GOOGLE_KEY=sm://${GCP_PROJECT}/<< parameters.app_name >>_pc_google_key, \
                PROVIDER_FNAC_BASIC_AUTHENTICATION_TOKEN=sm://${GCP_PROJECT}/<< parameters.app_name >>_provider_fnac_basic_authentication_token, \
                RECAPTCHA_SECRET=sm://${GCP_PROJECT}/<< parameters.app_name >>_recaptcha_secret, \
                REDIS_URL=sm://${GCP_PROJECT}/<< parameters.app_name >>_redis_url, \
                SUPPORT_EMAIL_ADDRESS=sm://${GCP_PROJECT}/<< parameters.app_name >>_support_email_address, \
                TRANSACTIONS_RECIPIENTS=sm://${GCP_PROJECT}/<< parameters.app_name >>_transactions_recipients, \
                WALLET_BALANCES_RECIPIENTS=sm://${GCP_PROJECT}/<< parameters.app_name >>_wallet_balances_recipients" \
            --image=${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCP_REGISTRY_NAME}/<< parameters.docker_image_name >>:<< parameters.app_image_tag >>
            true # While GCP deployment is not stable make it always return success status

  deploy-cron-gke:
    description: Deploy Crons and worker via helm to Kubernetes Cluster
    parameters:
      helm_release_name:
        type: string
      helm_chart_name:
        type: string
      kubernetes_namespace:
        type: string
      helm_values_file:
        type: string
    steps:
      - run: |
          set +eo pipefail # While GCP deployment is not stable make it always return success status
          helm upgrade << parameters.helm_release_name >> tmp/<< parameters.helm_chart_name >> \
            --install --wait \
            --namespace << parameters.kubernetes_namespace >> \
            --values tmp/<< parameters.helm_chart_name >>/<< parameters.helm_values_file >> \
            --set-string image.tag=${API_VERSION}
          true # While GCP deployment is not stable make it always return success status

###################
#  JOBS
###################

jobs:
  tests-script-pc:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Install requirements
          command: |
            sudo apt-get update
            sudo apt-get install -y realpath
            sudo ./pc symlink
      - run:
          name: Run PC tests
          command: |
            cd tests
            ./run_tests.sh

  tests-api:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run: sudo ./pc symlink
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Running API server
          command: |
            cd api
            pc start-backend
          background: true
      - run:
          name: Running API tests
          command: |
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            echo 'y' | pc test-backend

  tests-webapp:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run: sudo ./pc symlink
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Run Unit Test WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd webapp
            nvm install
            yarn install
            yarn test:unit
      - run:
          name: Running API server
          command: |
            cd api
            pc start-backend
          background: true
      - run:
          name: Run Frontend WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd webapp
            nvm install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            pc sandbox --name=industrial
      - run:
          name: Running functional tests WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd webapp
            nvm install
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture/webapp/testcafe_screenshots
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="'Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  tests-pro:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run: sudo ./pc symlink
      - run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - run:
          name: Run Unit Test PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd pro
            nvm install
            yarn install
            yarn test:unit
      - run:
          name: Running API server
          command: |
            cd api
            pc start-backend
          background: true
      - run:
          name: Run Frontend PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd pro
            nvm install
            yarn start
          background: true
      - run:
          name: Running Sandbox
          command: |
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            pc sandbox --name=industrial
      - run:
          name: Running functional tests PRO
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd pro
            nvm install
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture/pro/testcafe_screenshots
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="'Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  tests-perf:
    working_directory: ~
    docker:
      - image: passcultureapp/artillery:0.6
    steps:
      - checkout
      - run: sed -i 's/$/'$USER_PASSWORD_PERF_ENV'/' /root/project/infra/artillery/user_list
      - run: artillery run /root/project/infra/artillery/scenario.yml -o /tmp/artillery-report.json
      - run: python3 scripts/analyze_report.py /tmp/artillery-report.json
      - store_artifacts:
          path: /tmp/artillery-report.json

  build-and-push-image:
    executor: gcp-sdk
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - export_version
      - authenticate_gcp:
          gcp-key-name: GCP_INFRA_KEY
      - run: gcloud beta auth configure-docker ${GCP_REGION}-docker.pkg.dev
      - run: |
          docker build ./api \
            -f ./api/Dockerfile.gcp \
            -t ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCP_REGISTRY_NAME}/pcapi:${API_VERSION}
      - run: docker push ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCP_REGISTRY_NAME}/pcapi:${API_VERSION}

  deploy-api:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: pyenv global 3.5.2
      - run: pip install requests
      - run: python scripts/check_ci_status.py $CIRCLE_SHA1 $(git describe --contains)
      - run: git submodule sync
      - run: git submodule update --init
      - run:
          name: Deploy API
          no_output_timeout: 30m
          command: |
            env_remote_origin="$CIRCLE_BRANCH"_remote_origin
            SCALINGO_APP_NAME=$(./scripts/compute_app_name.sh ${CIRCLE_BRANCH})
            cd api
            git remote add scalingo_agora git@ssh.agora-fr1.scalingo.com:${SCALINGO_APP_NAME}.git
            git remote add scalingo_outscale git@ssh.osc-fr1.scalingo.com:${SCALINGO_APP_NAME}.git
            git push -f ${!env_remote_origin:-scalingo_agora} HEAD:master
      - run:
          name: Check deployed version
          command: |
            COMPONENT_URL="https://backend.$(./scripts/compute_component_partial_url.sh ${CIRCLE_BRANCH})"
            ./scripts/check_current_tag_is_deployed.sh "$COMPONENT_URL"
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="'*"$CIRCLE_BRANCH"* : *API* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
            curl -i -k -XPOST "$GRAFANA_INFLUXDB_URL/write?db=$GRAFANA_DB" --data-binary 'deployments,application=Api,environment='"$CIRCLE_BRANCH"',deployed=false version="'"$VERSION_TO_DEPLOY"'"'
          when: on_fail

  deploy-api-cloudrun:
    executor: gcp-sdk
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - export_version
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - deploy-api-cloudrun:
          app_name: pcapi-${CIRCLE_BRANCH}
          app_env: ${CIRCLE_BRANCH}
          app_image_tag: ${API_VERSION}
          docker_image_name: pcapi
          app_service_account_email: pcapi-${CIRCLE_BRANCH}@pass-culture-app-projet-test.iam.gserviceaccount.com
          vpc_connector_name: metier-development

  deploy-cron-and-worker:
    executor: helm
    environment:
      GKE_CLUSTER_NAME: cluster-metier-ehp
      HELM_EXPERIMENTAL_OCI: 1
      CHART_NAME: passculture-chart
      TAG: stable
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - export_version
      - authenticate_gcp:
          gcp-key-name: GCP_METIER_KEY
      - run:
          name: Get GKE cluster credentials
          command: gcloud container clusters get-credentials --region ${GCP_REGION} ${GKE_CLUSTER_NAME}
      - run:
          name: Login to GCP Artifact Registry with helm
          command: echo ${GCP_INFRA_KEY} | helm registry login  -u _json_key --password-stdin ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}
      - run:
          name: Pull chart from registry
          command: helm chart pull ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:${TAG}
      - run:
          name: Export chart in local filesystem
          command: helm chart export ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${GCP_REGISTRY_NAME}/${CHART_NAME}:${TAG} -d tmp/
      - deploy-cron-gke:
          helm_chart_name: passculture
          helm_release_name: ${CIRCLE_BRANCH}
          kubernetes_namespace: ${CIRCLE_BRANCH}
          helm_values_file: values.${CIRCLE_BRANCH}.yaml

  deploy-pro:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run:
          name: Build and Deploy Pro
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
            cd pro
            nvm install
            yarn install

            set -a; source ~/pass-culture/config/run_envs/"${CIRCLE_BRANCH}"

            yarn build:${CIRCLE_BRANCH}

            npm install -g netlify-cli@2.46.0
            netlify deploy -s "${NETLIFY_SITE_ID_PRO}" -a "${NETLIFY_TOKEN}" -d build/ --prod
      - run:
          name: Check deployed version
          command: |
            COMPONENT_URL="https://pro.$(./scripts/compute_component_partial_url.sh ${CIRCLE_BRANCH})"
            ./scripts/check_current_tag_is_deployed.sh "$COMPONENT_URL"
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="'*"$CIRCLE_BRANCH"* : *Pro* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
            curl -i -k -XPOST "$GRAFANA_INFLUXDB_URL/write?db=$GRAFANA_DB" --data-binary 'deployments,application=Pro,environment='"$CIRCLE_BRANCH"',deployed=false version="'"$VERSION_TO_DEPLOY"'"'
          when: on_fail

  deploy-webapp:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: ./install_lib_ci.sh
      - run:
          name: Build and Deploy WEBAPP
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
            cd webapp
            nvm install
            yarn install

            set -a; source ~/pass-culture/config/run_envs/"${CIRCLE_BRANCH}";

            yarn build

            npm install -g netlify-cli@2.46.0
            netlify deploy -s "${NETLIFY_SITE_ID_WEBAPP}" -a "${NETLIFY_TOKEN}" -d build/ --prod
      - run:
          name: Check deployed version
          command: |
            COMPONENT_URL="https://app.$(./scripts/compute_component_partial_url.sh ${CIRCLE_BRANCH})"
            ./scripts/check_current_tag_is_deployed.sh "$COMPONENT_URL"
      - run:
          name: Send failure notification
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="'*"$CIRCLE_BRANCH"* : *Webapp* deployment *"$VERSION_TO_DEPLOY"* seems to have *FAILED* :collision:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
            curl -i -k -XPOST "$GRAFANA_INFLUXDB_URL/write?db=$GRAFANA_DB" --data-binary 'deployments,application=Webapp,environment='"$CIRCLE_BRANCH"',deployed=false version="'"$VERSION_TO_DEPLOY"'"'
          when: on_fail

  deploy-sandbox-in-testing:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run:
          name: Deploy Sandbox in Testing
          command: |
            sudo apt-get update
            sudo apt-get install -y realpath
            curl -O https://cli-dl.scalingo.io/install && bash install
            scalingo login --api-token $SCALINGO_API_TOKEN
            ./pc -e testing sandbox --name=industrial
      - run:
          name: Notify PC Ops Bot
          when: on_fail
          command: |
            export BOT_MESSAGE="'Build *$CIRCLE_JOB* fail : $CIRCLE_BUILD_URL'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  release-synthesis:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run:
          name: Check deployed version
          command: |
            VERSION_TO_DEPLOY=$(git describe --contains)
            BOT_MESSAGE="'Version *"$VERSION_TO_DEPLOY"* has been successfully deployed to *"$CIRCLE_BRANCH"* :muscle:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL
            curl -i -k -XPOST "$GRAFANA_INFLUXDB_URL/write?db=$GRAFANA_DB" --data-binary 'deployments,application=All,environment='"$CIRCLE_BRANCH"',deployed=true version="'"$VERSION_TO_DEPLOY"'"'

###################
#  WORKFLOWS
###################

workflows:
  version: 2
  commit:
    jobs:
      - tests-script-pc
      - tests-api:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
      - tests-webapp:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
      - tests-pro:
          filters:
            branches:
              ignore:
                - production
                - staging
                - integration
      - deploy-api:
          filters:
            branches:
              only:
                - production
                - staging
                - integration
      - deploy-pro:
          requires:
            - deploy-api
      - deploy-webapp:
          requires:
            - deploy-api
      - release-synthesis:
          requires:
            - deploy-pro
            - deploy-webapp

  gcp:
    jobs:
      - build-and-push-image:
          filters:
            branches:
              only:
                - staging
          context:
            - GCP
      - deploy-api-cloudrun:
          requires:
            - build-and-push-image
          context:
            - GCP
      - deploy-cron-and-worker:
          requires:
            - build-and-push-image
          context:
            - GCP

  every-mondays-nights:
    triggers:
      - schedule:
          cron: "0 23 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      - deploy-sandbox-in-testing
