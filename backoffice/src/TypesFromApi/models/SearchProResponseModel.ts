/* tslint:disable */
/* eslint-disable */
/**
 * pass Culture backoffice API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
  ProResult,
  ProResultFromJSON,
  ProResultFromJSONTyped,
  ProResultToJSON,
} from './index'

/**
 *
 * @export
 * @interface SearchProResponseModel
 */
export interface SearchProResponseModel {
  /**
   *
   * @type {Array<ProResult>}
   * @memberof SearchProResponseModel
   */
  data: Array<ProResult>
  /**
   *
   * @type {number}
   * @memberof SearchProResponseModel
   */
  page: number
  /**
   *
   * @type {number}
   * @memberof SearchProResponseModel
   */
  pages: number
  /**
   *
   * @type {number}
   * @memberof SearchProResponseModel
   */
  size: number
  /**
   *
   * @type {string}
   * @memberof SearchProResponseModel
   */
  sort?: string | null
  /**
   *
   * @type {number}
   * @memberof SearchProResponseModel
   */
  total: number
}

export function SearchProResponseModelFromJSON(
  json: any
): SearchProResponseModel {
  return SearchProResponseModelFromJSONTyped(json, false)
}

export function SearchProResponseModelFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): SearchProResponseModel {
  if (json === undefined || json === null) {
    return json
  }
  return {
    data: (json['data'] as Array<any>).map(ProResultFromJSON),
    page: json['page'],
    pages: json['pages'],
    size: json['size'],
    sort: !exists(json, 'sort') ? undefined : json['sort'],
    total: json['total'],
  }
}

export function SearchProResponseModelToJSON(
  value?: SearchProResponseModel | null
): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    data: (value.data as Array<any>).map(ProResultToJSON),
    page: value.page,
    pages: value.pages,
    size: value.size,
    sort: value.sort,
    total: value.total,
  }
}
