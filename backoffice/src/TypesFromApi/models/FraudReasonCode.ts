/* tslint:disable */
/* eslint-disable */
/**
 * pass Culture backoffice API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum FraudReasonCode {
  AgeIsNotValid = 'age_is_not_valid',
  AgeTooOld = 'age_too_old',
  AgeTooYoung = 'age_too_young',
  AlreadyBeneficiary = 'already_beneficiary',
  AlreadyHasActiveDeposit = 'already_has_active_deposit',
  BlacklistedPhoneNumber = 'blacklisted_phone_number',
  DuplicateIdPieceNumber = 'duplicate_id_piece_number',
  DuplicateIne = 'duplicate_ine',
  DuplicateUser = 'duplicate_user',
  EligibilityChanged = 'eligibility_changed',
  EmailNotValidated = 'email_not_validated',
  EmptyIdPieceNumber = 'empty_id_piece_number',
  ErrorInData = 'error_in_data',
  IdCheckBockedOther = 'id_check_bocked_other',
  IdCheckDataMatch = 'id_check_data_match',
  IdCheckExpired = 'id_check_expired',
  IdCheckInvalid = 'id_check_invalid',
  IdCheckNotAuthentic = 'id_check_not_authentic',
  IdCheckNotSupported = 'id_check_not_supported',
  IdCheckUnprocessable = 'id_check_unprocessable',
  IneNotWhitelisted = 'ine_not_whitelisted',
  InvalidIdPieceNumber = 'invalid_id_piece_number',
  InvalidPhoneCountryCode = 'invalid_phone_country_code',
  MissingRequiredData = 'missing_required_data',
  NameIncorrect = 'name_incorrect',
  NotEligible = 'not_eligible',
  PhoneAlreadyExists = 'phone_already_exists',
  PhoneNotValidated = 'phone_not_validated',
  PhoneUnvalidatedByPeer = 'phone_unvalidated_by_peer',
  PhoneUnvalidationForPeer = 'phone_unvalidation_for_peer',
  PhoneValidationAttemptsLimitReached = 'phone_validation_attempts_limit_reached',
  RefusedByOperator = 'refused_by_operator',
  SmsSendingLimitReached = 'sms_sending_limit_reached',
}

export function FraudReasonCodeFromJSON(json: any): FraudReasonCode {
  return FraudReasonCodeFromJSONTyped(json, false)
}

export function FraudReasonCodeFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): FraudReasonCode {
  return json as FraudReasonCode
}

export function FraudReasonCodeToJSON(value?: FraudReasonCode | null): any {
  return value as any
}
