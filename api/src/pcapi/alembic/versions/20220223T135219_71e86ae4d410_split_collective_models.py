"""split_collective_models
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = "71e86ae4d410"
down_revision = "851568296541"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "collective_offer",
        sa.Column("audioDisabilityCompliant", sa.Boolean(), nullable=True),
        sa.Column("mentalDisabilityCompliant", sa.Boolean(), nullable=True),
        sa.Column("motorDisabilityCompliant", sa.Boolean(), nullable=True),
        sa.Column("visualDisabilityCompliant", sa.Boolean(), nullable=True),
        sa.Column("lastValidationDate", sa.DateTime(), nullable=True),
        sa.Column(
            "validation",
            postgresql.ENUM("APPROVED", "DRAFT", "PENDING", "REJECTED", name="validation_status", create_type=False),
            server_default="APPROVED",
            nullable=False,
        ),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("offerId", sa.BigInteger(), nullable=True),
        sa.Column("isActive", sa.Boolean(), server_default=sa.text("true"), nullable=False),
        sa.Column("venueId", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(length=140), nullable=False),
        sa.Column("bookingEmail", sa.String(length=120), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("durationMinutes", sa.Integer(), nullable=True),
        sa.Column("dateCreated", sa.DateTime(), nullable=False),
        sa.Column("subcategoryId", sa.Text(), nullable=False),
        sa.Column("dateUpdated", sa.DateTime(), nullable=True),
        sa.Column(
            "students",
            postgresql.ARRAY(
                sa.Enum(
                    "COLLEGE4", "COLLEGE3", "CAP1", "CAP2", "GENERAL2", "GENERAL1", "GENERAL0", name="studentlevels"
                )
            ),
            server_default="{}",
            nullable=False,
        ),
        sa.Column("contactEmail", sa.String(length=120), nullable=False),
        sa.Column("contactPhone", sa.String(length=20), nullable=False),
        sa.Column("jsonData", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["venueId"],
            ["venue.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_collective_offer_lastValidationDate"), "collective_offer", ["lastValidationDate"], unique=False
    )
    op.create_index(op.f("ix_collective_offer_subcategoryId"), "collective_offer", ["subcategoryId"], unique=False)
    op.create_index(op.f("ix_collective_offer_validation"), "collective_offer", ["validation"], unique=False)
    op.create_index(op.f("ix_collective_offer_venueId"), "collective_offer", ["venueId"], unique=False)
    op.create_table(
        "collective_stock",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("stockId", sa.BigInteger(), nullable=True),
        sa.Column("dateCreated", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("dateModified", sa.DateTime(), nullable=False),
        sa.Column("beginningDatetime", sa.DateTime(), nullable=False),
        sa.Column("collectiveOfferId", sa.BigInteger(), nullable=False),
        sa.Column("price", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("bookingLimitDatetime", sa.DateTime(), nullable=False),
        sa.Column("numberOfTickets", sa.Integer(), nullable=True),
        sa.Column("priceDetail", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["collectiveOfferId"],
            ["collective_offer.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_collective_stock_beginningDatetime"), "collective_stock", ["beginningDatetime"], unique=False
    )
    op.create_index(
        op.f("ix_collective_stock_collectiveOfferId"), "collective_stock", ["collectiveOfferId"], unique=False
    )
    op.create_table(
        "collective_booking",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("bookingId", sa.BigInteger(), nullable=True),
        sa.Column("dateCreated", sa.DateTime(), nullable=False),
        sa.Column("dateUsed", sa.DateTime(), nullable=True),
        sa.Column("collectiveStockId", sa.BigInteger(), nullable=False),
        sa.Column("venueId", sa.BigInteger(), nullable=False),
        sa.Column("offererId", sa.BigInteger(), nullable=False),
        sa.Column("cancellationDate", sa.DateTime(), nullable=True),
        sa.Column("cancellationLimitDate", sa.DateTime(), nullable=True),
        sa.Column(
            "cancellationReason",
            sa.Enum(
                "OFFERER", "BENEFICIARY", "EXPIRED", "FRAUD", "REFUSED_BY_INSTITUTE", name="bookingcancellationreasons"
            ),
            nullable=True,
        ),
        sa.Column(
            "status",
            sa.Enum("PENDING", "CONFIRMED", "USED", "CANCELLED", "REIMBURSED", name="bookingstatus"),
            nullable=False,
        ),
        sa.Column("reimbursementDate", sa.DateTime(), nullable=True),
        sa.Column("educationalInstitutionId", sa.BigInteger(), nullable=False),
        sa.Column("educationalYearId", sa.String(length=30), nullable=False),
        sa.Column("confirmationDate", sa.DateTime(), nullable=True),
        sa.Column("confirmationLimitDate", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["collectiveStockId"],
            ["collective_stock.id"],
        ),
        sa.ForeignKeyConstraint(
            ["educationalInstitutionId"],
            ["educational_institution.id"],
        ),
        sa.ForeignKeyConstraint(
            ["educationalYearId"],
            ["educational_year.adageId"],
        ),
        sa.ForeignKeyConstraint(
            ["offererId"],
            ["offerer.id"],
        ),
        sa.ForeignKeyConstraint(
            ["venueId"],
            ["venue.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_collective_booking_collectiveStockId"), "collective_booking", ["collectiveStockId"], unique=False
    )
    op.create_index(op.f("ix_collective_booking_dateUsed"), "collective_booking", ["dateUsed"], unique=False)
    op.create_index("ix_collective_booking_date_created", "collective_booking", ["dateCreated"], unique=False)
    op.create_index(
        "ix_collective_booking_educationalYear_and_institution",
        "collective_booking",
        ["educationalYearId", "educationalInstitutionId"],
        unique=False,
    )
    op.create_index(op.f("ix_collective_booking_offererId"), "collective_booking", ["offererId"], unique=False)
    op.create_index("ix_collective_booking_status", "collective_booking", ["status"], unique=False)
    op.create_index(op.f("ix_collective_booking_venueId"), "collective_booking", ["venueId"], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("collective_booking")
    op.drop_table("collective_stock")
    op.drop_table("collective_offer")
    # ### end Alembic commands ###
    sa.Enum(name="studentlevels").drop(op.get_bind(), checkfirst=False)
    sa.Enum(name="bookingcancellationreasons").drop(op.get_bind(), checkfirst=False)
    sa.Enum(name="bookingstatus").drop(op.get_bind(), checkfirst=False)
