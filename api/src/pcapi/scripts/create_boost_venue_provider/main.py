"""
Job console documentation here: https://www.notion.so/passcultureapp/Documentation-Job-Console-769beeacd5a146de9c97b6f8ee544276
Assumed path to the script (copy-paste in github actions):

https://github.com/pass-culture/pass-culture-main/blob/tcoudray-pass/PC-37059-boostons-les-CMs/api/src/pcapi/scripts/create_boost_venue_provider/main.py

"""

import argparse
import logging

from pcapi.app import app
from pcapi.core.offerers import models as offerers_models
from pcapi.core.providers import api as providers_api
from pcapi.core.providers import models as providers_models
from pcapi.core.users import models as users_models
from pcapi.models import db


logger = logging.getLogger(__name__)

CINE_GROUP_VENUE_PROVIDER_PAIRS = [
    (16787, 2150),
    (17306, 2150),
    (4679, 2150),
    (29684, 2150),
    (1395, 2150),
    (43142, 2150),
    (52381, 2150),
    (9022, 2150),
    (28115, 2150),
    (16286, 2150),
    (107125, 2150),
    (28202, 2150),
    (21584, 2150),
    (19765, 2150),
    (28606, 2150),
    (16998, 2150),
    (2301, 2150),
    (16660, 2150),
    (16353, 2150),
    (39347, 2150),
    (35375, 2150),
    (35377, 2150),
    (3437, 2150),
    (98654, 2150),
    (45283, 2150),
    (18727, 2150),
    (18726, 2150),
    (15121, 2150),
    (9030, 2150),
    (14325, 2150),
    (126607, 2150),
    (14235, 2150),
    (15486, 2150),
    (15044, 2150),
    (19717, 2150),
    (19657, 2150),
    (10828, 2150),
    (5936, 2150),
    (96073, 2150),
    (23159, 2150),
    (35942, 2150),
    (78296, 2150),
    (13822, 2150),
    (15940, 2150),
    (66370, 2150),
    (65912, 2150),
    (7780, 2150),
    (22120, 2150),
    (39168, 2150),
    (39847, 2150),
    (17273, 2150),
    (23624, 2150),
    (14093, 2150),
    (19477, 2150),
    (35781, 2150),
    (1362, 2150),
    (23538, 2150),
    (13819, 2150),
    (13816, 2150),
    (52007, 2150),
    (19483, 2150),
    (19716, 2150),
    (18894, 2150),
    (14238, 2150),
    (42423, 2150),
    (33130, 2150),
    (11811, 2150),
    (23186, 2150),
    (11810, 2150),
    (30383, 2150),
    (53280, 2150),
    (51694, 2150),
    (64637, 2150),
    (13837, 2150),
    (13841, 2150),
    (30184, 2150),
    (9296, 2150),
    (2434, 2150),
    (8723, 2150),
    (29886, 2150),
    (21589, 2150),
    (11812, 2150),
    (21590, 2150),
    (56588, 2150),
    (22335, 2150),
    (13235, 2150),
    (18002, 2150),
    (16686, 2150),
    (30166, 2150),
    (18217, 2150),
    (14057, 2150),
    (13826, 2150),
    (10168, 2150),
    (36398, 2150),
    (150527, 2150),
    (23908, 2150),
    (13829, 2150),
    (100204, 2150),
    (19474, 2150),
    (19424, 2150),
    (15688, 2150),
    (21753, 2150),
    (131298, 2150),
    (19727, 2150),
    (19650, 2150),
    (40509, 2150),
    (34255, 2150),
    (13824, 2150),
    (95795, 2150),
    (44062, 2150),
    (16164, 2150),
    (78674, 2150),
    (148683, 2150),
    (44602, 2150),
    (43350, 2150),
    (9131, 2150),
    (13820, 2150),
    (25666, 2150),
    (18017, 2150),
    (50790, 2150),
    (83978, 2150),
    (108974, 2150),
    (110010, 2150),
    (31576, 2150),
    (13231, 2150),
    (8782, 2150),
    (21547, 2150),
    (132279, 2150),
    (51713, 2150),
    (30570, 2150),
    (13818, 2150),
    (13833, 2150),
    (105394, 2150),
    (1534, 2150),
    (1366, 2150),
    (15903, 2150),
    (25875, 2150),
    (53125, 2150),
    (149657, 2150),
    (30395, 2150),
    (22319, 2150),
    (44061, 2150),
    (21280, 2150),
    (23466, 2150),
    (1665, 2150),
    (25293, 2150),
    (33319, 2150),
    (53272, 2150),
    (50903, 2150),
    (64240, 2150),
    (40923, 2150),
    (28833, 2150),
    (45015, 2150),
    (17250, 2150),
    (19528, 2150),
    (19532, 2150),
    (19135, 2150),
    (37215, 2150),
    (10166, 2150),
    (10829, 2150),
    (23641, 2150),
    (99138, 2150),
    (18560, 2150),
    (64990, 2150),
    (40310, 2150),
    (16061, 2150),
    (66032, 2150),
    (71008, 2150),
    (11639, 2150),
    (150526, 2150),
    (22075, 2150),
    (13838, 2150),
    (7745, 2150),
    (73677, 2150),
    (13331, 2150),
    (23040, 2150),
    (19993, 2150),
    (21588, 2150),
    (94996, 2150),
    (66727, 2150),
    (42994, 2150),
    (18888, 2150),
    (18389, 2150),
    (4837, 2150),
    (107268, 2150),
    (13584, 2150),
    (18607, 2150),
    (19888, 2150),
    (5539, 2150),
    (26946, 2150),
    (30823, 2150),
    (19792, 2150),
    (27301, 2150),
    (55737, 2150),
    (70394, 2150),
    (69036, 2150),
    (30579, 2150),
    (8927, 2150),
    (52087, 2150),
    (21674, 2150),
    (120194, 2150),
    (21543, 2150),
    (20272, 2150),
    (23883, 2150),
    (21545, 2150),
    (1307, 2150),
    (29446, 2150),
    (16270, 2150),
    (1805, 2150),
    (14360, 2150),
    (1360, 2150),
    (20515, 2150),
    (36888, 2150),
    (14332, 2150),
    (24878, 2150),
    (21710, 2150),
    (21022, 2150),
    (17403, 2150),
    (36439, 2150),
    (19945, 2150),
    (9133, 2150),
    (108612, 2150),
    (8971, 2150),
    (9230, 2150),
    (22114, 2150),
    (8973, 2150),
    (8976, 2150),
    (9289, 2150),
    (9176, 2150),
    (9290, 2150),
    (3563, 2150),
    (9080, 2150),
    (9171, 2150),
    (8937, 2150),
    (8356, 2150),
    (8836, 2150),
    (22771, 2150),
    (5214, 2150),
    (9025, 2150),
    (11984, 2150),
    (28976, 2150),
    (109162, 2150),
    (21309, 2150),
    (18556, 2150),
    (30174, 2150),
    (60885, 2150),
    (8987, 2150),
    (18405, 2150),
    (29264, 2150),
    (32216, 2150),
    (18588, 2150),
    (21586, 2150),
    (18559, 2150),
    (6431, 2150),
    (13268, 2150),
    (13827, 2150),
    (20961, 2150),
    (17327, 2150),
    (20603, 2150),
    (20020, 2150),
    (8520, 2150),
    (39269, 2150),
    (22520, 2150),
    (20991, 2150),
    (19903, 2150),
    (19904, 2150),
    (7567, 2150),
    (20023, 2150),
    (150191, 2150),
    (16246, 2150),
    (9716, 2150),
    (37818, 2150),
    (19623, 2150),
    (86021, 2150),
    (31420, 2150),
    (1387, 2150),
    (20947, 2150),
    (17236, 2150),
    (33192, 2150),
    (20070, 2150),
    (16783, 2150),
    (19755, 2150),
    (15880, 2150),
    (19480, 2150),
    (19494, 2150),
    (19495, 2150),
    (109859, 2150),
    (23811, 2150),
    (33203, 2150),
    (73039, 2150),
    (107848, 2150),
    (51818, 2150),
    (16583, 2150),
    (22699, 2150),
    (9335, 2150),
    (21678, 2150),
    (30515, 2150),
    (21676, 2150),
    (21675, 2150),
    (19793, 2150),
    (18778, 2150),
    (6103, 2150),
    (95238, 2150),
    (114407, 2150),
    (48829, 2150),
    (140980, 2150),
    (102204, 2150),
    (145411, 2150),
    (21941, 2150),
    (151869, 2150),
    (144322, 2150),
    (144321, 2150),
    (110302, 2150),
    (105297, 2150),
    (62395, 2150),
    (62217, 2150),
    (59778, 2150),
    (23751, 2150),
    (20876, 2150),
    (23650, 2150),
    (105746, 2150),
    (143246, 2150),
    (38387, 2150),
    (17771, 2150),
    (18840, 2150),
    (17768, 2150),
    (17763, 2150),
    (18728, 2150),
    (17773, 2150),
    (17776, 2150),
    (21992, 2150),
    (80621, 2150),
    (49922, 2150),
    (19894, 2150),
    (144453, 2150),
    (52013, 2150),
    (16500, 2150),
    (16498, 2150),
    (57828, 2150),
    (47907, 2150),
    (16503, 2150),
    (19367, 2150),
    (80071, 2150),
    (21024, 2150),
    (17779, 2150),
    (19629, 2150),
    (17957, 2150),
    (17928, 2150),
    (21011, 2150),
    (15425, 2150),
    (34524, 2150),
    (11993, 2150),
    (31508, 2150),
    (108737, 2150),
    (36252, 2150),
    (115344, 2150),
    (120327, 2150),
    (120545, 2150),
    (29381, 2150),
    (36109, 2150),
    (137983, 2150),
    (141995, 2150),
    (48465, 2150),
    (23202, 2150),
    (151360, 2150),
]


def main() -> None:
    user = db.session.query(users_models.User).filter_by(id=2568200).one()
    for pair in CINE_GROUP_VENUE_PROVIDER_PAIRS:
        venue_id, provider_id = pair
        existing_venue_provider = (
            db.session.query(providers_models.VenueProvider)
            .filter_by(venueId=venue_id, providerId=provider_id)
            .one_or_none()
        )

        if existing_venue_provider:
            logger.info(
                "VenueProvider already exists. Skipping...",
                extra={"venueId": venue_id, "providerId": provider_id},
            )
            continue

        venue = db.session.query(offerers_models.Venue).filter_by(id=venue_id).one_or_none()
        if not venue:
            logger.warning(
                "Venue does not exist. Skipping...",
                extra={"venueId": venue_id},
            )
            continue
        provider = db.session.query(providers_models.Provider).filter_by(id=provider_id).one()

        providers_api.create_venue_provider(provider=provider, venue=venue, current_user=user)
        logger.info("VenueProvider created !", extra={"venueId": venue_id, "providerId": provider_id})


if __name__ == "__main__":
    app.app_context().push()

    parser = argparse.ArgumentParser()
    parser.add_argument("--not-dry", action="store_true")
    args = parser.parse_args()

    main()

    if args.not_dry:
        logger.info("Finished")
        db.session.commit()
    else:
        logger.info("Finished dry run, rollback")
        db.session.rollback()
