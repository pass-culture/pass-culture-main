"""
Job console documentation here: https://www.notion.so/passcultureapp/Documentation-Job-Console-769beeacd5a146de9c97b6f8ee544276
Assumed path to the script (copy-paste in github actions):

https://github.com/pass-culture/pass-culture-main/blob/PC-36275-script-top-acteur-batch-tagging/api/src/pcapi/scripts/batch_top_acteur_tag/main.py

"""

import argparse
import logging

from pcapi.app import app
from pcapi.core.offerers.api import update_offerer
from pcapi.core.offerers.models import Offerer
from pcapi.core.offerers.models import OffererTag
from pcapi.core.offerers.models import OffererTagMapping
from pcapi.core.users.models import User
from pcapi.models import db


logger = logging.getLogger(__name__)

TOP_ACTEUR_TAG_ID = 8
OFFERER_ID_LIST = [
    10045,
    10059,
    10091,
    10184,
    10228,
    10250,
    10252,
    1026,
    10266,
    1030,
    10333,
    10352,
    10356,
    10388,
    10404,
    10455,
    10500,
    10518,
    10529,
    10571,
    10574,
    10585,
    10624,
    10646,
    10665,
    10699,
    10702,
    10719,
    10724,
    10727,
    10734,
    10744,
    10782,
    10825,
    10832,
    10834,
    10840,
    10907,
    10917,
    10948,
    10955,
    1098,
    10981,
    10998,
    110,
    11001,
    11036,
    11081,
    11091,
    1111,
    11146,
    11154,
    11158,
    11304,
    11336,
    11342,
    1169,
    11878,
    11879,
    11970,
    11995,
    1200,
    12059,
    1206,
    12146,
    1230,
    12343,
    12402,
    12405,
    1245,
    12453,
    12463,
    12503,
    12534,
    12539,
    1254,
    12580,
    12721,
    12722,
    12723,
    12725,
    12745,
    12766,
    12773,
    12808,
    12836,
    12839,
    12841,
    1286,
    12871,
    12886,
    12888,
    12895,
    12899,
    12909,
    13001,
    13017,
    1302,
    13038,
    13054,
    13113,
    13116,
    13143,
    13177,
    13203,
    13255,
    13398,
    13407,
    13557,
    13574,
    13585,
    13590,
    13694,
    13738,
    13755,
    13757,
    13849,
    13851,
    13864,
    13871,
    13922,
    13975,
    140,
    1420,
    14448,
    14505,
    14508,
    14614,
    14657,
    14665,
    14879,
    1492,
    15166,
    15211,
    15284,
    15305,
    15468,
    15629,
    1576,
    15797,
    1596,
    1607,
    16078,
    1611,
    16165,
    16224,
    1623,
    1624,
    16311,
    1648,
    16559,
    1672,
    1677,
    1684,
    16968,
    1697,
    1715,
    17380,
    1770,
    1787,
    18346,
    18497,
    1856,
    1871,
    188,
    1896,
    1955,
    1965,
    19655,
    19759,
    20166,
    2048,
    2059,
    2073,
    2083,
    2087,
    2089,
    2099,
    2120,
    2138,
    2163,
    2167,
    2181,
    2184,
    223,
    2232,
    2281,
    2294,
    2345,
    23584,
    23657,
    2366,
    2408,
    2418,
    2424,
    2429,
    2430,
    24311,
    2434,
    24448,
    24534,
    2469,
    2507,
    25286,
    2559,
    2571,
    2722,
    2727,
    2734,
    2762,
    2842,
    2895,
    29188,
    2933,
    2952,
    3013,
    30189,
    3029,
    3051,
    3057,
    3065,
    3083,
    310,
    3103,
    3112,
    3118,
    3157,
    3178,
    3193,
    3209,
    32550,
    33,
    335,
    347,
    35,
    35398,
    358,
    3602,
    365,
    3654,
    367,
    3679,
    369,
    374,
    3758,
    377,
    3770,
    3785,
    379,
    384,
    3855,
    3858,
    386,
    388,
    398,
    399,
    3999,
    4021,
    403,
    405,
    4066,
    4075,
    4082,
    4099,
    4100,
    4101,
    4104,
    4105,
    4108,
    4110,
    4115,
    4134,
    4135,
    414,
    4155,
    4158,
    4165,
    4166,
    4179,
    418,
    4189,
    4195,
    4196,
    4202,
    42078,
    4209,
    421,
    4219,
    4220,
    4237,
    4255,
    4257,
    426,
    4265,
    4266,
    4268,
    4270,
    4272,
    4273,
    4275,
    4276,
    4278,
    4281,
    4283,
    434,
    4424,
    4430,
    4442,
    4453,
    4503,
    456,
    4739,
    4847,
    5125,
    5133,
    5134,
    5184,
    5198,
    5207,
    5219,
    5283,
    5306,
    5327,
    536,
    5474,
    553,
    5561,
    5627,
    5669,
    56692,
    57,
    5736,
    5770,
    5829,
    5843,
    5883,
    5923,
    594,
    601,
    602,
    6036,
    610,
    6115,
    613,
    6146,
    6147,
    6148,
    6239,
    6296,
    6321,
    6332,
    6348,
    6349,
    635,
    6371,
    6400,
    6412,
    6418,
    6469,
    651,
    6535,
    6633,
    6635,
    6639,
    6647,
    666,
    6665,
    669,
    6741,
    6786,
    6827,
    683,
    6832,
    6846,
    6850,
    6878,
    6892,
    6896,
    6954,
    6955,
    6963,
    6974,
    6976,
    6986,
    6994,
    7054,
    7077,
    7082,
    7085,
    7086,
    7117,
    7122,
    7124,
    7154,
    717,
    7174,
    7189,
    7199,
    7204,
    7220,
    7228,
    728,
    730,
    7539,
    7543,
    7557,
    7560,
    7574,
    7578,
    7581,
    7591,
    7597,
    7638,
    7657,
    7664,
    7666,
    7670,
    7682,
    7690,
    770,
    7705,
    7712,
    7731,
    7732,
    7742,
    7746,
    7756,
    7821,
    7832,
    7839,
    7845,
    7848,
    7951,
    8276,
    831,
    8324,
    8381,
    8407,
    8411,
    8438,
    8445,
    845,
    8455,
    8496,
    8502,
    8554,
    8566,
    8593,
    8682,
    8686,
    8699,
    873,
    8808,
    8813,
    8846,
    888,
    892,
    8944,
    8996,
    9073,
    9105,
    9132,
    9274,
    9282,
    9284,
    9294,
    9314,
    9331,
    9366,
    9382,
    9461,
    9471,
    9489,
    9596,
    9643,
    9646,
    9713,
    9717,
    9720,
    973,
    9760,
    9769,
    9876,
    9907,
    9922,
    9949,
    33,
    192,
    193,
    229,
    2138,
    2181,
    2676,
    3049,
    4089,
    4114,
    4273,
    7177,
    7746,
    10706,
    13242,
    14441,
    16169,
    16607,
    16815,
    17114,
    17903,
    18263,
    18502,
    18621,
    18914,
    19257,
    19345,
    19387,
    19619,
    19949,
    20006,
    20924,
    21185,
    21189,
    21332,
    22211,
    22448,
    22687,
    22808,
    22844,
    23114,
    23212,
    23307,
    23435,
    23453,
    23483,
    23490,
    23505,
    23625,
    23669,
    23746,
    23758,
    23845,
    23852,
    23895,
    23948,
    23960,
    24090,
    24132,
    24213,
    24256,
    24262,
    24263,
    24330,
    24599,
    24639,
    24668,
    24774,
    24942,
    25105,
    25172,
    25249,
    25286,
    25331,
    25394,
    25436,
    25449,
    25657,
    25776,
    26034,
    26099,
    26106,
    26170,
    26248,
    26280,
    26308,
    26680,
    27040,
    27053,
    27110,
    27139,
    27274,
    27288,
    27360,
    27403,
    27430,
    27438,
    19083,
    27490,
    27569,
    27634,
    28920,
    28921,
    28928,
    28935,
    28965,
    29052,
    29081,
    29244,
    29335,
    29448,
    29634,
    29805,
    29875,
    29908,
    30085,
    30238,
    30261,
    30297,
    30362,
    30449,
    30933,
    31007,
    31090,
    31253,
    31370,
    31482,
    31512,
    31642,
    31777,
    31827,
    31852,
    31891,
    31937,
    32073,
    32415,
    32436,
    32464,
    32847,
    33179,
    33193,
    33224,
    33236,
    33260,
    33493,
    33572,
    33646,
    33702,
    34065,
    34311,
    34423,
    34480,
    34530,
    35216,
    36109,
    36597,
    36837,
    37437,
    14333,
    38449,
    38648,
    39467,
    39526,
    39543,
    39725,
    39870,
    39885,
    39905,
    39991,
    40004,
    40805,
    40897,
    41299,
    41684,
    41828,
    41879,
    42831,
    42982,
    43006,
    43050,
    43364,
    43365,
    43429,
    43644,
    44539,
    44629,
    45277,
    45291,
    45472,
    46832,
    47066,
    47673,
    51055,
    31403,
    56692,
    27021,
    58032,
]


def delete_all_top_acteur_uses(author: User, top_acteur_tag: OffererTag) -> None:
    offerers = (
        db.session.query(Offerer)
        .join(OffererTagMapping, Offerer.id == OffererTagMapping.offererId)
        .filter(OffererTagMapping.tagId == TOP_ACTEUR_TAG_ID, Offerer.id.not_in(OFFERER_ID_LIST))
    ).all()
    logger.info(f"Deleting {len(offerers)} mappings")
    for offerer in offerers:
        new_tags = offerer.tags
        new_tags.remove(top_acteur_tag)
        update_offerer(offerer, author=author, tags=new_tags)


def batch_add_offerer_tag(author: User, top_acteur_tag: OffererTag) -> None:
    offerers = db.session.query(Offerer).filter(Offerer.id.in_(OFFERER_ID_LIST)).all()
    for offerer in offerers:
        if top_acteur_tag not in offerer.tags:
            update_offerer(offerer, author=author, tags=offerer.tags + [top_acteur_tag])


if __name__ == "__main__":
    app.app_context().push()

    parser = argparse.ArgumentParser()
    parser.add_argument("--not-dry", action="store_true")
    parser.add_argument("--author-id", type=int, required=True, help="author user id (in action history)")
    args = parser.parse_args()

    author = db.session.query(User).filter_by(id=args.author_id).one()
    top_acteur_tag = db.session.query(OffererTag).get(TOP_ACTEUR_TAG_ID)

    delete_all_top_acteur_uses(author, top_acteur_tag)
    batch_add_offerer_tag(author, top_acteur_tag)

    if args.not_dry:
        logger.info("Finished")
        db.session.commit()
    else:
        logger.info("Finished dry run, rollback")
        db.session.rollback()
