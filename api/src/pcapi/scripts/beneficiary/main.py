import logging

from pcapi.app import app
from pcapi.core.subscription.api import activate_beneficiary_if_no_missing_step
from pcapi.core.users.models import User


logger = logging.getLogger(__name__)

BENEFICIARY_IDS = [
    2003793,
    2523147,
    2638136,
    2718164,
    2982895,
    2986526,
    3028590,
    3267784,
    3313117,
    3331856,
    3411420,
    3415357,
    3470106,
    3503829,
    3558379,
    3565730,
    3570397,
    3578017,
    3659303,
    3717105,
    3746783,
    3799481,
    3842641,
    3844180,
    3853355,
    3857104,
    3880695,
    3891011,
    3892259,
    3900884,
    3938116,
    4006210,
    4035204,
    4068309,
    4070538,
    4106329,
    4109782,
    4119774,
    4138940,
    4169880,
    4217799,
    4312302,
    4330740,
    4446791,
    4479403,
    4527622,
    4651522,
    4673151,
    4707097,
    4710200,
    4746535,
    4756139,
    4765968,
    4793765,
    4828854,
    4890248,
    4910176,
    4921488,
    4934022,
    4936963,
    4946228,
    4947768,
    4959108,
    4972374,
    4998453,
    5015098,
    5030318,
    5034784,
    5045227,
    5049543,
    5061807,
    5088533,
    5105788,
    5105857,
    5107780,
    5110889,
    5129059,
    5132867,
    5133800,
    5628747,
    5649575,
    5661699,
    5673897,
    5712760,
    5714001,
    5715589,
    5718786,
    5786859,
    5800719,
    5810581,
    5829877,
    5869513,
    5896269,
    5949466,
    5987377,
    5993755,
    6015865,
    6029393,
    6030447,
    6031115,
    6044476,
    6051764,
    6066472,
    6086387,
    6107279,
    6114002,
    6114927,
    6147135,
    6160930,
    6167845,
    6177864,
    6213560,
    6234023,
    6284674,
    6303613,
    6313591,
    6341657,
    6346152,
    6362144,
    6377646,
    6378163,
    6404574,
    6413189,
    6420147,
    6448308,
    6472938,
    6482313,
    6501076,
    6506890,
    6507289,
    6535291,
    6547246,
    6613374,
    6702727,
    6717004,
    6737022,
    6753267,
    6788892,
    6841270,
]

app.app_context().push()


def activate_beneficiaries(user_ids: list[str]) -> None:
    users = User.query.filter(User.id.in_(user_ids)).all()
    for user in users:
        try:
            is_activated = activate_beneficiary_if_no_missing_step(user)
        except Exception as e:  # pylint: disable=broad-except
            logger.exception("Exception while activating beneficiary %s : %s", user.id, e)
            is_activated = False
        finally:
            if is_activated:
                logger.info("Success while activating beneficiary %s", user.id)
            else:
                logger.exception("Failure while activating beneficiary %s", user.id)


if __name__ == "__main__":
    activate_beneficiaries(BENEFICIARY_IDS)
