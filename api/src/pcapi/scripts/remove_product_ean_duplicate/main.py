import argparse
from itertools import groupby
import logging

from sqlalchemy.orm import joinedload

from pcapi import settings
from pcapi.core.offers import models as offers_models
from pcapi.models import db


logger = logging.getLogger(__name__)


# Request to retrieve products ids with duplicate EAN
#
# select "jsonData"->>'ean', count(*), array_agg(id)
# from product
# where "jsonData"->>'ean' is not null and "jsonData"->>'ean' != ''
# group by "jsonData"->>'ean'
# having count(*) > 1
# order by count(*) desc;
PRODUCT_WITH_DUPLICATE_EAN = [
    "38030",
    "38019",
    "38022",
    "38024",
    "38033",
    "38034",
    "38040",
    "38043",
    "38029",
    "38014",
    "38016",
    "38018",
    "38020",
    "38023",
    "38025",
    "38027",
    "38032",
    "38037",
    "38038",
    "38041",
    "38050",
    "38056",
    "38053",
    "38055",
    "38063",
    "38015",
    "38021",
    "38026",
    "38028",
    "38031",
    "38035",
    "38036",
    "38039",
    "38042",
    "38044",
    "38045",
    "38046",
    "38047",
    "38048",
    "38059",
    "38061",
    "38078",
    "38084",
    "38088",
    "38049",
    "38051",
    "38052",
    "38054",
    "38057",
    "38058",
    "38060",
    "38062",
    "38065",
    "38067",
    "38069",
    "38073",
    "38074",
    "38077",
    "38079",
    "38080",
    "38082",
    "38085",
    "38089",
    "38064",
    "38068",
    "38071",
    "38072",
    "38075",
    "38076",
    "38081",
    "38083",
    "38086",
    "38093",
    "38094",
    "38097",
    "38098",
    "38100",
    "38101",
    "38104",
    "38107",
    "38108",
    "38087",
    "38090",
    "38091",
    "38092",
    "38095",
    "38096",
    "38099",
    "38102",
    "38103",
    "38105",
    "38106",
    "38070",
    "38017",
    "38012",
    "38013",
    "38066",
    "38619",
    "38629",
    "38622",
    "38686",
    "38684",
    "38652",
    "38678",
    "38793",
    "38611",
    "38604",
    "38642",
    "38613",
    "38691",
    "38614",
    "38610",
    "38692",
    "38609",
    "38607",
    "38606",
    "38671",
    "38660",
    "38658",
    "38603",
    "38656",
    "38654",
    "38643",
    "38644",
    "38640",
    "38625",
    "38624",
    "38695",
    "38690",
    "38638",
    "38637",
    "38634",
    "38633",
    "38680",
    "38602",
    "38627",
    "38628",
    "38673",
    "38667",
    "38665",
    "38666",
    "38632",
    "38663",
    "38661",
    "38657",
    "38653",
    "38650",
    "38605",
    "38672",
    "38641",
    "38675",
    "38687",
    "38685",
    "38688",
    "38681",
    "38676",
    "38623",
    "38630",
    "38674",
    "38645",
    "38693",
    "38694",
    "38669",
    "38664",
    "38626",
    "38636",
    "38635",
    "38651",
    "38655",
    "38621",
    "38648",
    "38662",
    "38608",
    "38601",
    "38612",
    "38616",
    "38689",
    "38696",
    "38618",
    "38615",
    "38617",
    "38659",
    "38649",
    "38679",
    "38639",
    "38647",
    "38677",
    "38668",
    "38620",
    "38670",
    "38682",
    "38683",
    "38761",
    "38781",
    "38762",
    "38737",
    "38766",
    "38772",
    "38769",
    "38703",
    "38734",
    "38770",
    "38768",
    "38751",
    "38706",
    "38710",
    "38774",
    "38789",
    "38738",
    "38780",
    "38713",
    "38777",
    "38721",
    "38711",
    "38747",
    "38787",
    "38754",
    "38728",
    "38722",
    "38778",
    "38732",
    "38783",
    "38755",
    "38784",
    "38731",
    "38740",
    "38791",
    "38746",
    "38697",
    "38749",
    "38786",
    "38724",
    "38714",
    "38748",
    "38720",
    "38752",
    "38702",
    "38700",
    "38733",
    "38758",
    "38753",
    "38735",
    "38744",
    "38707",
    "38701",
    "38736",
    "38739",
    "38726",
    "38767",
    "38699",
    "38775",
    "38718",
    "38717",
    "38725",
    "38773",
    "38708",
    "38704",
    "38776",
    "38792",
    "38760",
    "38712",
    "38782",
    "38785",
    "38719",
    "38730",
    "38729",
    "38741",
    "38757",
    "38790",
    "38765",
    "38763",
    "38698",
    "38705",
    "38709",
    "38750",
    "38756",
    "38764",
    "38779",
    "38788",
    "38716",
    "38723",
    "38743",
    "38715",
    "38745",
    "38771",
    "38759",
    "37653",
    "37615",
    "37609",
    "37608",
    "37604",
    "37605",
    "37635",
    "37642",
    "37614",
    "37610",
    "37601",
    "37648",
    "37624",
    "37619",
    "37600",
    "37625",
    "37613",
    "37603",
    "37594",
    "37606",
    "37602",
    "37607",
    "37596",
    "37585",
    "37581",
    "37577",
    "37598",
    "37593",
    "37590",
    "37571",
    "37586",
    "37580",
    "37578",
    "37597",
    "37582",
    "37595",
    "37584",
    "37579",
    "37572",
    "37576",
    "37574",
    "37623",
    "37622",
    "37589",
    "37621",
    "37627",
    "37630",
    "37631",
    "37612",
    "37618",
    "37620",
    "37628",
    "37632",
    "37634",
    "37638",
    "37639",
    "37647",
    "37650",
    "37637",
    "37644",
    "37640",
    "37636",
    "37643",
    "37646",
    "37652",
    "37658",
    "37645",
    "37651",
    "37654",
    "37659",
    "37655",
    "37656",
    "37660",
    "37657",
    "37611",
    "37583",
    "37587",
    "37575",
    "37599",
    "37629",
    "37626",
    "37573",
    "37617",
    "37588",
    "37591",
    "37616",
    "37649",
    "37592",
    "37633",
    "37641",
    "37716",
    "37718",
    "37728",
    "37704",
    "37668",
    "37740",
    "37705",
    "37672",
    "37710",
    "37682",
    "37708",
    "37727",
    "37687",
    "37666",
    "37685",
    "37661",
    "37680",
    "37662",
    "37669",
    "37673",
    "37675",
    "37677",
    "37671",
    "37681",
    "37688",
    "37663",
    "37664",
    "37684",
    "37686",
    "37678",
    "37667",
    "37670",
    "37674",
    "37676",
    "37693",
    "37679",
    "37690",
    "37699",
    "37683",
    "37702",
    "37709",
    "37714",
    "37689",
    "37691",
    "37694",
    "37695",
    "37692",
    "37697",
    "37700",
    "37707",
    "37706",
    "37720",
    "37696",
    "37703",
    "37698",
    "37701",
    "37711",
    "37713",
    "37712",
    "37665",
    "37719",
    "37723",
    "37717",
    "37722",
    "37721",
    "37729",
    "37725",
    "37735",
    "37738",
    "37715",
    "37724",
    "37730",
    "37732",
    "37736",
    "37737",
    "37726",
    "37733",
    "37742",
    "37739",
    "37743",
    "37746",
    "37731",
    "37734",
    "37744",
    "37741",
    "37748",
    "37747",
    "37750",
    "37745",
    "37749",
    "38230",
    "38339",
    "38257",
    "38308",
    "38316",
    "38290",
    "38291",
    "38346",
    "38305",
    "38317",
    "38306",
    "38304",
    "38303",
    "38337",
    "38255",
    "38340",
    "38262",
    "38344",
    "38178",
    "38341",
    "38241",
    "38242",
    "38243",
    "38245",
    "38246",
    "38126",
    "38252",
    "38254",
    "38127",
    "38345",
    "38179",
    "38318",
    "38180",
    "38261",
    "38302",
    "38300",
    "38299",
    "38125",
    "38334",
    "38124",
    "38297",
    "38335",
    "38265",
    "38268",
    "38266",
    "38267",
    "38191",
    "38338",
    "38189",
    "38307",
    "38342",
    "38111",
    "38286",
    "38343",
    "38293",
    "38296",
    "38294",
    "38309",
    "38278",
    "38292",
    "38279",
    "38347",
    "38281",
    "38351",
    "38311",
    "38310",
    "38287",
    "38280",
    "38283",
    "38312",
    "38313",
    "38348",
    "38295",
    "38314",
    "38301",
    "38350",
    "38285",
    "38289",
    "38250",
    "38236",
    "38247",
    "38263",
    "38249",
    "38112",
    "38258",
    "38256",
    "38253",
    "38248",
    "38244",
    "38260",
    "37783",
    "37782",
    "37785",
    "37789",
    "37790",
    "38288",
    "38259",
    "38284",
    "38282",
    "38163",
    "38164",
    "38165",
    "38166",
    "37788",
    "37787",
    "37786",
    "38547",
    "38546",
    "39329",
    "37802",
    "37803",
    "38896",
    "38545",
    "38227",
    "38228",
    "38168",
    "38169",
    "38315",
    "38223",
    "38118",
    "37959",
    "38550",
    "38549",
    "38251",
    "38239",
]


def remove_product_ean_duplicate(do_update: bool) -> None:
    logger.info("[START]")
    products = (
        offers_models.Product.query.options(joinedload(offers_models.Product.offers))
        .filter(offers_models.Product.id.in_(PRODUCT_WITH_DUPLICATE_EAN))
        .order_by(offers_models.Product.extraData["ean"].astext, offers_models.Product.id)
        .all()
    )
    logger.info("[NB] number of products with duplicate EAN found %d", len(products))

    products_group_by_ean = [list(g) for k, g in groupby(products, key=lambda p: p.extraData["ean"])]
    products_group_by_ean = [list_of_product for list_of_product in products_group_by_ean if len(list_of_product) > 1]
    logger.info("Found %d group of products with duplicate ean", len(products_group_by_ean))

    for products in products_group_by_ean:
        product_to_keep = products[0]
        products_to_remove = products[1:]
        logger.info(
            "[PREVIEW] For ean %s keep product id %d and delete %d products (id: %s)",
            product_to_keep.extraData["ean"],
            product_to_keep.id,
            len(products_to_remove),
            [p.id for p in products_to_remove],
        )
        for product in products_to_remove:
            logger.info(
                "[JOIN INFO] Product %d is linked to %d offers (id: %s)",
                product.id,
                len(product.offers),
                [o.id for o in product.offers],
            )
            for idx, offer in enumerate(product.offers):
                logger.info(
                    "[TRANSFER][%d/%d] offer: %d product %d to product %d",
                    idx + 1,
                    len(product.offers),
                    offer.id,
                    product.id,
                    product_to_keep.id,
                )
                offer.productId = product_to_keep.id

        do_commit(do_update)

        for product in products_to_remove:
            logger.info("[DELETE] product %d", product.id)
            db.session.delete(product)

        do_commit(do_update)

    logger.info("[END]")


def do_commit(do_update: bool) -> None:
    if do_update:
        db.session.commit()
        print("Committed.")
    else:
        db.session.rollback()
        print("Dry run finished.")


if __name__ == "__main__":
    from pcapi.flask_app import app

    app.app_context().push()

    parser = argparse.ArgumentParser(description="Remove product ean duplicate")
    parser.add_argument("--not-dry", action="store_true", help="set to really process (dry-run by default)")
    args = parser.parse_args()

    if settings.IS_INTEGRATION:
        remove_product_ean_duplicate(args.not_dry)
    else:
        print("This script has been implemented to run in the integration environment only.")
