[tool.black]
extend-exclude = '''
(
  /(
    | \.mypy_cache
    | \.pytest_cache
    | \.venv
  )/
)
'''
include = '\.pyi?$'
line-length = 120
target-version = ['py310']


[tool.coverage.report]
omit = [
    "tests/*",
    "venv/*",
    "alembic/*",
    ".circle/*",
    "snippets/*",
    "static/*",
]


[tool.isort]
combine_as_imports = true
ensure_newline_before_comments = true
force_grid_wrap = 0
force_single_line = true
force_sort_within_sections = true
include_trailing_comma = true
known_tests = ["tests"]
line_length = 120
lines_after_imports = 2
multi_line_output = 3
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,TESTS,LOCALFOLDER"
use_parentheses = true

[tool.mypy]
python_version = "3.10"
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
show_column_numbers = true
warn_unused_ignores = true
show_error_codes = true
warn_redundant_casts = true
plugins="sqlalchemy.ext.mypy.plugin, pydantic.mypy"
exclude = """
(?x)(
    tests/.*
    | src/pcapi/alembic/.*
  )
"""
# FIXME (dbaty, 2022-11-08): this is temporary until we fix typing
# annotations that break with the new default value (true).
no_implicit_optional = false
# FIXME (dbaty, 2022-11-08): this is temporary until we find a
# solution to type hybrid_property-decorated methods. Otherwise, mypy
# reports a "truthy-function" error on code that uses these methods.
disable_error_code = [
    "truthy-function",
]


[tool.pylint.MASTER]
# Include info messages into score so that pylint fails if we have
# such messages (e.g. "useless-suppression").
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention + info) / statement) * 10))"
extension-pkg-whitelist = [
    "pydantic",
]
load-plugins = [
    "pcapi.utils.pylint",
    "pylint_pydantic",
]

[tool.pylint."MESSAGES CONTROL"]
enable = [
    "use-symbolic-message-instead",
    "useless-suppression",
]
# FIXME (dbaty, 2020-11-03): we should enable back "line-too-long".
# Most cases that cannot be fixed or obviously disabled are test
# functions. And I believe that they really should be renamed to be
# less than 120 characters long.
#
# FIXME (dbaty, 2020-11-03): we probably could enable back
# "singleton-comparison". Most cases seem to be variations of:
#     assert some_boolean == True
#     Model.query.filter_by(Model.boolean_attr == None)
disable = [
    "arguments-differ",
    "arguments-renamed",
    "attribute-defined-outside-init",
    "consider-using-f-string",
    "cyclic-import",
    "duplicate-code",
    "fixme",
    "file-ignored",
    "import-outside-toplevel",
    "invalid-name",
    "line-too-long",
    "locally-disabled",
    "missing-docstring",
    "no-member",
    "protected-access",
    "raise-missing-from",
    "singleton-comparison",
    "superfluous-parens",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "ungrouped-imports",
    "unnecessary-lambda-assignment",
    "unused-argument",
    "use-dict-literal",
    "useless-return",
    "wrong-import-order",    # we have a custom isort config, which pylint can't grok
    "wrong-import-position",  # same reason
]

[tool.pylint.REPORTS]
msg-template = "{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}"

[tool.pylint.FORMAT]
max-line-length = 120


[tool.pytest.ini_options]
addopts = [
    "--verbose",
    "--tb=short",
    "--disable-socket",
    # FIXME (dbaty, 2022-12-01): use network range 172.16.0.0/12 once pytest-socket
    # supports it.
    "--allow-hosts=127.0.0.1,172.18.0.2,::1,172.20.0.2",  # allow connections to local Redis
]
filterwarnings = [
    # Mark warnings as errors
    "error",

    # -------------- Temporary ignored warnings due to SLQAlchemy bump to 1.4 -------------- #
    # FIXME (lixxday, 2022/06/09)
    # Warning on deprecated sqla function as_scalar()
    "ignore:The Query.as_scalar\\(\\) method is deprecated and will be removed in a future release:sqlalchemy.exc.SADeprecationWarning",
    # Warning on SELECT with IN. Fix: pass a select() construct explicitly
    "ignore:Coercing Subquery object into a select\\(\\) for use in IN\\(\\):sqlalchemy.exc.SAWarning",
    # ---------------------------- #

    # FIXME (rpaoloni, 2022-04-19): some of our dependencies (flask_limiter, at least) use `distutils.version.StrictVersion`,
    # which emits a deprecation warnings with setuptools >=59.6.0. Remove this when we update or remove those
    # dependencies.
    "ignore:distutils Version classes are deprecated. Use packaging.version instead.:DeprecationWarning",
    "ignore:The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives:DeprecationWarning",
    # FIXME (jsdupuis, 2022-04-25): flask_admin validators uses tuples for flags (eg. field_flags = ('unique', )),
    # which emits deprecation warnings in wtforms >=3.0.0a1.
    # Remove this when we remove flask_admin
    "ignore:Flags should be stored in dicts and not in tuples. The next version of WTForms will abandon support for flags in tuples.:DeprecationWarning",
    # FIXME (askorski, 2022-05-02): algoliasearch uses deprecated @coroutine decorator
    # Remove this when alogliasearch no more uses @coroutine
    'ignore:"@coroutine" decorator is deprecated since Python 3.8, use \"async def\" instead:DeprecationWarning',
    # FIXME (francois-seguin, 2022-08-23): requests-toolbelt uses deprecated urllib3.contrib.pyopenssl
    # see https://github.com/requests/toolbelt/issues/331
    # Remove this when requests-toolbelt fixes its use
    "ignore:'urllib3.contrib.pyopenssl' module is deprecated*:DeprecationWarning",
]
testpaths = ["tests"]
norecursedirs = [".git", "venv", ".pytest_cache"]
# Synchronize these globs with `TEST_FILES` in CircleCI configuration
python_files = ["*test.py", "test*.py"]
python_classes = ["*Test"]
python_functions = ["test_*", "when_*", "expect_*", "should_*"]
env_files = ["local_test_env_file"]
mocked-sessions = ["pcapi.models.db.session"]
junit_family = "xunit1"
markers = [
    "backoffice_v3"
]

[tool.poetry]
name = "pcapi"
version = "0.0.0"
description = "The backend of the pass Culture"
license = "MPL-2.0"
authors = ["Equipe pass Culture <contact@passculture.app>"]

[tool.poetry.dependencies]
python = "3.10.*"
alembic = "==1.8.0"
algoliasearch = "==2.4.0"
attrs = "==22.1.0"
authlib = "==0.15.5"
babel = "==2.9.1"
basecrm = "==1.2.9"
bcrypt = "==4.0.1"
beautifulsoup4 = "==4.11.2"
black = "*"
# `sentry_sdk.init()` uses `flask.signals`, which requires `blinker`
blinker = "==1.4"
boto3 = "==1.21.9"
click-option-group = "==0.5.5"
factory-boy = "*"
flask = "==2.0.*"
flask-admin = "==1.6.0"
flask-cors = "==3.0.10"
flask-jwt-extended = "==4.3.1"
flask-limiter = "==1.4"
flask-login = "==0.5.0"
flask-shell-ipython = "*"
flask-sqlalchemy = "==2.5.*"
flask-wtf = "==1.0.1"
freezegun = "==1.2.2"
google-api-python-client = "==2.41.0"
google-auth = "==2.6.2"
google-cloud-bigquery = "==3.4.2"
google-cloud-storage = "==2.2.1"
google-cloud-tasks = "==2.8.1"
gql = {extras = ["requests"], version = "*"}
gunicorn = "==20.0.4"
ipaddress = "*"
# XXX: Flask dependency
itsdangerous = "==2.0.1"
# XXX: Flask dependency
jinja2 = "==3.0.3"
# XXX: Flask dependency
markupsafe = "==2.0.1"
notion-client = "==1.0.0"
openpyxl = "*"
phonenumberslite = "==8.12.*"
# a tool not used in code. There is no point in pinning its version
pgcli = "*"
pillow = ">=8.1.1"
psycopg2 = "*"
pydantic = {version = "==1.10.2", extras = ["email"]}
pyjwt = {version = "==2.6.0", extras = ["crypto"]}
pysaml2 = "*"
python-dotenv = "==0.21.1"
pyyaml = "==6.0"
requests = "==2.28.2"
rq = "==1.12.0"
schwifty = "==2022.9.0"
semver = "==2.13.0"
sentry-sdk = "==1.8.0"
sib-api-v3-sdk = "*"
slack-sdk = "==3.13.0"
spectree = "==0.7.2"
# FIXME (dbaty, 2023-01-04): do not use 1.4.46 that has a new
# deprecation warning for which we're not ready
# (https://docs.sqlalchemy.org/en/20/changelog/changelog_14.html#change-e67bfa1efbe52ae40aa842124bc40c51).
sqlalchemy = {version = "==1.4.45", extras = ["mypy"]}
# Pin weasyprint to keep new versions from changing how our PDF files look.
weasyprint = "==56.1"
# XXX: Flask dependency
werkzeug = "==2.0.3"
# XXX: Flask dependency
wtforms = "==3.0.1"
# XXX: Flask dependency
wtforms-sqlalchemy = "==0.3"
xlsxwriter = "*"
zeep = "==4.1.0"

[tool.poetry.group.dev.dependencies]
debugpy = "*"
isort = "*"
mypy = "*"
pylint = "*"
pylint-pydantic = "*"
pytest = "*"
pytest-cov = "*"
pytest-dotenv = "*"
pytest-flask = "*"
pytest-flask-sqlalchemy = "*"
pytest-mock = "*"
pytest-socket = "*"
requests-mock = "*"
types-freezegun = "*"
types-python-dateutil = "*"
types-pytz = "*"
types-pyyaml = "*"
types-redis = "*"
types-requests = "*"
types-urllib3 = "*"
