[tool.black]
extend-exclude = '''
(
  /(
    | \.mypy_cache
    | \.pytest_cache
    | \.venv
  )/
)
'''
include = '\.pyi?$'
line-length = 120
target-version = ['py310']


[tool.coverage.report]
omit = [
    "tests/*",
    "venv/*",
    "alembic/*",
    ".circle/*",
    "snippets/*",
    "static/*",
]


[tool.isort]
combine_as_imports = true
ensure_newline_before_comments = true
force_grid_wrap = 0
force_single_line = true
force_sort_within_sections = true
include_trailing_comma = true
known_tests = ["tests"]
line_length = 120
lines_after_imports = 2
multi_line_output = 3
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,TESTS,LOCALFOLDER"
skip_gitignore = true
use_parentheses = true

[tool.mypy]
python_version = "3.10"
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
show_column_numbers = true
warn_unused_ignores = true
show_error_codes = true
plugins="sqlalchemy.ext.mypy.plugin"
exclude = """
(?x)(
    tests/.*
    | src/pcapi/alembic/.*
  )
"""



[tool.pylint.MASTER]
extension-pkg-whitelist = [
    "pydantic",
]
load-plugins = [
    "pcapi.utils.pylint",
    "pylint_strict_informational",
]

[tool.pylint."MESSAGES CONTROL"]
enable = [
    "use-symbolic-message-instead",
    "useless-suppression",
]
# FIXME (dbaty, 2020-11-03): we should enable back "line-too-long".
# Most cases that cannot be fixed or obviously disabled are test
# functions. And I believe that they really should be renamed to be
# less than 120 characters long.
#
# FIXME (dbaty, 2020-11-03): we probably could enable back
# "singleton-comparison". Most cases seem to be variations of:
#     assert some_boolean == True
#     Model.query.filter_by(Model.boolean_attr == None)
disable = [
    "arguments-differ",
    "arguments-renamed",
    "attribute-defined-outside-init",
    "consider-using-f-string",
    "cyclic-import",
    "duplicate-code",
    "fixme",
    "file-ignored",
    "import-outside-toplevel",
    "invalid-name",
    "line-too-long",
    "locally-disabled",
    "missing-docstring",
    "no-member",
    "protected-access",
    "raise-missing-from",
    "singleton-comparison",
    "superfluous-parens",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "ungrouped-imports",
    "unnecessary-lambda-assignment",
    "unused-argument",
    "useless-return",
    "wrong-import-order",    # we have a custom isort config, which pylint can't grok
    "wrong-import-position",  # same reason
]

[tool.pylint.REPORTS]
msg-template = "{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}"

[tool.pylint.FORMAT]
max-line-length = 120


[tool.pytest.ini_options]
addopts = ["--verbose", "--tb=short"]
filterwarnings = [
    # Mark warnings as errors
    "error",

    # -------------- Temporary ignored warnings due to SLQAlchemy bump to 1.4 -------------- #
    # FIXME (lixxday, 2022/06/09)
    # Warning on deprecated sqla function as_scalar()
    "ignore:The Query.as_scalar\\(\\) method is deprecated and will be removed in a future release:sqlalchemy.exc.SADeprecationWarning",
    # Warning on SELECT with IN. Fix: pass a select() construct explicitly
    "ignore:Coercing Subquery object into a select\\(\\) for use in IN\\(\\):sqlalchemy.exc.SAWarning",
    # ---------------------------- #

    # FIXME (rpaoloni, 2022-04-19): some of our dependencies (rq, at least) use `distutils.version.StrictVersion`,
    # which emits a deprecation warnings with setuptools >=59.6.0. Remove this when we update or remove those
    # dependencies.
    "ignore:distutils Version classes are deprecated. Use packaging.version instead.:DeprecationWarning",
    # FIXME (jsdupuis, 2022-04-25): flask_admin validators uses tuples for flags (eg. field_flags = ('unique', )),
    # which emits deprecation warnings in wtforms >=3.0.0a1.
    # Remove this when we remove flask_admin
    "ignore:Flags should be stored in dicts and not in tuples. The next version of WTForms will abandon support for flags in tuples.:DeprecationWarning",
    # FIXME (askorski, 2022-05-02): algoliasearch uses deprecated @coroutine decorator
    # Remove this when alogliasearch no more uses @coroutine
    'ignore:"@coroutine" decorator is deprecated since Python 3.8, use \"async def\" instead:DeprecationWarning',
]
testpaths = ["tests"]
norecursedirs = [".git", "venv", ".pytest_cache"]
# Synchronize these globs with `TEST_FILES` in CircleCI configuration
python_files = ["*test.py", "test*.py"]
python_classes = ["*Test"]
python_functions = ["test_*", "when_*", "expect_*", "should_*"]
env_files = ["local_test_env_file"]
mocked-sessions = ["pcapi.models.db.session"]
junit_family = "xunit1"
