[tool.poetry]
name = "pcapi"
version = "0.0.0"
description = "The backend of the pass Culture"
license = "MPL-2.0"
authors = ["Equipe pass Culture <contact@passculture.app>"]

[tool.poetry.dependencies]
python = "^3.11"
alembic = "1.13.1"
algoliasearch = "3.0.0"
amplitude-analytics = "^1.1.4"
attrs = "23.2.0"
authlib = "1.3.0"
babel = "2.14.0"
bcrypt = "4.1.2"
beautifulsoup4 = "4.12.3"
boto3 = "1.34.84"
boussole = "2.1.3"
click = "8.1.7"
click-option-group = "0.5.6"
cryptography = "42.0.5"
email-validator = "2.1.1"
factory-boy = "^3.3.0"
fiona = "^1.9.6"
flask = "==2.0.*"
flask-cors = "4.0.0"
flask-jwt-extended = "4.6.0"
flask-login = "0.5.0"
flask-shell-ipython = "^0.5.1"
flask-sqlalchemy = "==2.5.*"
flask-wtf = "1.2.1"
geoalchemy2 = "^0.15.1"
google-api-python-client = "2.127.0"
google-auth = "2.29.0"
google-cloud-bigquery = "3.21.0"
google-cloud-storage = "2.16.0"
google-cloud-tasks = "2.16.3"
googlemaps = "^4.10.0"
gql = { extras = ["requests"], version = "^3.5.0" }
gunicorn = "22.0.0"
jinja2 = "3.1.3"
libsass = "0.23.0"
markupsafe = "2.1.5"
openpyxl = "^3.1.2"
pgcli = "^4.0.1"
phonenumberslite = "==8.13.*"
pillow = ">=8.1.1"
prometheus-flask-exporter = "^0.23.0"
psycopg2 = "^2.9.9"
py7zr = "^0.21.0"
pydantic = { version = "==2.*", extras = ["email"] }
pyjwt = { version = "2.8.0", extras = ["crypto"] }
pyproj = "^3.6.1"
pysaml2 = "^7.5.0"
python-dateutil = "2.9.0.post0"
python-dotenv = "1.0.1"
pytz = "2024.1"
pyyaml = "6.0.1"
rapidfuzz = "^3.9.0"
requests = "2.31.0"
rq = "1.16.2"
schwifty = "2024.4.0"
semver = "3.0.2"
sentry-sdk = { version = "2.0.1", extras = ["flask"] }
sib-api-v3-sdk = "^7.6.0"
slack-sdk = "3.27.1"
spectree = "1.2.1"
# FIXME (dbaty, 2023-01-04): do not use 1.4.46 that has a new
# deprecation warning for which we're not ready
# (https://docs.sqlalchemy.org/en/20/changelog/changelog_14.html#change-e67bfa1efbe52ae40aa842124bc40c51).
sqlalchemy = { version = "1.4.45", extras = ["mypy"] }
time-machine = "^2.14.1"
weasyprint = "57.2"
werkzeug = "2.0.3"
wtforms = "3.1.2"
wtforms-sqlalchemy = "0.4.1"
xlsxwriter = "^3.2.0"
zeep = "4.2.1"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black = "^24.4.2"
commitizen = "^3.25.0"
debugpy = "^1.8.1"
djlint = "1.34.1"
fakeredis = "^2.22.0"
isort = "^5.13.2"
mypy = "1.10.0"
pylint = "3.1.0"
pylint-pydantic = "^0.3.2"
pytest = "^8.2.0"
pytest-dotenv = "^0.5.2"
pytest-flask = "^1.3.0"
pytest-flask-sqlalchemy = "^1.1.0"
pytest-socket = "^0.7.0"
requests-mock = "^1.12.1"
types-protobuf = "^5.26.0.20240422"
types-python-dateutil = "^2.9.0.20240316"
types-pytz = "^2024.1.0.20240417"
types-pyyaml = "^6.0.12.20240311"
types-redis = "^4.6.0.20240425"
types-requests = "<2.32.0"
types-urllib3 = "^1.26.25.14"

[tool.black]
extend-exclude = '''
(
  /(
    | \.mypy_cache
    | \.pytest_cache
    | \.venv
  )/
)
'''
include = '\.pyi?$'
line-length = 120
target-version = ['py310']


[tool.isort]
combine_as_imports = true
ensure_newline_before_comments = true
force_grid_wrap = 0
force_single_line = true
force_sort_within_sections = true
include_trailing_comma = true
known_tests = ["tests"]
line_length = 120
lines_after_imports = 2
multi_line_output = 3
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,TESTS,LOCALFOLDER"
use_parentheses = true


[tool.mypy]
python_version = "3.11"
mypy_path = "stubs/"
disallow_untyped_defs = true
follow_imports = "silent"
# The following line solves the internal mypy (v>1.4) error due to
# the usage of @declared_attr. See github issue here: 
# https://github.com/sqlalchemy/sqlalchemy/issues/10282
preserve_asts = true
ignore_missing_imports = true
show_column_numbers = true
warn_unused_ignores = true
show_error_codes = true
warn_redundant_casts = true
local_partial_types = true
plugins = "sqlalchemy.ext.mypy.plugin, pydantic.mypy"
exclude = """
(?x)(
    tests/.*
    | src/pcapi/alembic/.*
  )
"""
# FIXME (dbaty, 2022-11-08): this is temporary until we find a
# solution to type hybrid_property-decorated methods. Otherwise, mypy
# reports a "truthy-function" error on code that uses these methods.
disable_error_code = [
    "truthy-function",
]


[tool.pylint.MASTER]
# Include info messages into score so that pylint fails if we have
# such messages (e.g. "useless-suppression").
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention + info) / statement) * 10))"
extension-pkg-whitelist = [
    "pydantic",
]
load-plugins = [
    "pcapi.utils.pylint",
    "pylint_pydantic",
]

[tool.pylint."MESSAGES CONTROL"]
enable = [
    "use-symbolic-message-instead",
    "useless-suppression",
]
disable = [
    "arguments-differ",
    "arguments-renamed",
    "attribute-defined-outside-init",
    "consider-using-f-string",
    "cyclic-import",
    "duplicate-code",
    "fixme",
    "file-ignored",
    "import-outside-toplevel",
    "invalid-name",
    "line-too-long",
    "locally-disabled",
    "missing-docstring",
    "no-member",
    "protected-access",
    "raise-missing-from",
    "singleton-comparison",
    "superfluous-parens",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "ungrouped-imports",
    "unnecessary-lambda-assignment",
    "unused-argument",
    "use-dict-literal",
    "useless-return",
    "wrong-import-order", # we have a custom isort config, which pylint can't grok
    "wrong-import-position", # same reason
]

[tool.pylint.REPORTS]
msg-template = "{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}"

[tool.pylint.FORMAT]
max-line-length = 120


[tool.pytest.ini_options]
addopts = [
    "--verbose",
    "--tb=short",
    "--disable-socket",
    # FIXME (dbaty, 2022-12-01): use network range 172.16.0.0/12 once pytest-socket
    # supports it.
    "--allow-hosts=127.0.0.1,::1,172.18.0.2,172.18.0.3,172.18.0.4,172.19.0.2,172.19.0.3,172.19.0.4,172.20.0.2,172.20.0.3,172.20.0.4,172.21.0.2,192.168.16.2", # allow connections to local Redis
]
filterwarnings = [
    # Mark warnings as errors
    "error",
    # -------------- Temporary ignored warnings due to SLQAlchemy bump to 1.4 -------------- #
    # FIXME (lixxday, 2022/06/09)
    # Warning on deprecated sqla function as_scalar()
    "ignore:The Query.as_scalar\\(\\) method is deprecated and will be removed in a future release:sqlalchemy.exc.SADeprecationWarning",
    # Warning on SELECT with IN. Fix: pass a select() construct explicitly
    "ignore:Coercing Subquery object into a select\\(\\) for use in IN\\(\\):sqlalchemy.exc.SAWarning",
    # ---------------------------- #

    # FIXME (francois-seguin, 2023-10-17): zeep uses cgi, which is deprecated. When this commit (https://github.com/mvantellingen/python-zeep/commit/d0d737adbcd68213b940a5cc4f1da6cd43dfca81)
    # is in a release, we'll be able to bump zeep and remove this filter.
    "ignore:'cgi' is deprecated and slated for removal in Python 3.13:DeprecationWarning",
]
testpaths = ["tests"]
norecursedirs = [".git", "venv", ".pytest_cache"]
python_files = ["*test.py", "test*.py"]
python_classes = ["*Test"]
python_functions = ["test_*", "when_*", "expect_*", "should_*"]
env_files = ["local_test_env_file"]
mocked-sessions = ["pcapi.models.db.session"]
junit_family = "xunit1"
markers = [
    "backoffice"
]
requests_mock_case_sensitive = true