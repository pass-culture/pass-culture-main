name: "3 [on_workflow] Deploy"
on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      app_version:
        type: string
        required: true
      teleport_version:
        type: string
        required: true
      teleport_proxy:
        type: string
        required: true
      teleport_kubernetes_cluster:
        type: string
        required: true
      deploy_api:
        type: boolean
        required: false
        default: false
      deploy_pro:
        type: boolean
        required: false
        default: false
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_EHP_SERVICE_ACCOUNT:
        required: true

jobs:
  generate-pcapi-helm-secrets-file:
    name: "[pcapi] Generate helm secrets values file"
    runs-on: ubuntu-latest
    if: ${{ inputs.deploy_api }}
    environment: ${{ inputs.environment }}
    outputs:
      pcapi_helm_secrets_file_base64: ${{ steps.set-secrets-file-output.outputs.secrets_file_base64 }}
    steps:
      - uses: actions/checkout@v4.1.2
      - name: "Authentification to Google"
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
      - name: "OpenID Connect Authentication"
        id: "openid-auth"
        uses: 'google-github-actions/auth@v2'
        with:
          create_credentials_file: false
          token_format: 'access_token'
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: "Generate pcapi helm values file"
        id: "generate-secrets-file"
        uses: addnab/docker-run-action@v3
        with:
          options: --user 0 -v ${{ github.workspace }}:/workspace
          registry: 'europe-west1-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ steps.openid-auth.outputs.access_token }}'
          image: 'europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi:${{ inputs.app_version }}'
          run: |
            su pcapi -c "flask print_secret_keys | base64 -w 0 > /tmp/helm_secrets_file_base64"
            cp /tmp/helm_secrets_file_base64 /workspace/helm_secrets_file_base64
      - name: "Set pcapi helm secrets values file as output"
        id: "set-secrets-file-output"
        run: echo "secrets_file_base64=$(cat ${{ github.workspace }}/helm_secrets_file_base64)" | tee -a $GITHUB_OUTPUT

  deploy-image-resizing-ehp:
    name: "Deploy image-resizing EHP"
    permissions:
      contents: 'read'
      id-token: 'write'
    uses: ./.github/workflows/dev_on_workflow_deploy_app_engine_image_resizing.yml
    if: ${{ inputs.environment != 'production' }}
    with:
      workload_identity_provider_secret_name: passculture-metier-ehp/gcp_metier_ehp_workload_identity_provider
      service_account_secret_name: passculture-metier-ehp/app_engine_image_resizing_service_account
      image_resizing_url: https://image-resizing.testing.passculture.team
      environment: testing
      google_project: passculture-metier-ehp
      base_ref: ${{ github.ref }}
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
