name: "3 [on_workflow] Deploy"
on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      app_version:
        type: string
        required: true
      cluster_scope:
        type: string
        required: false
        default: metier
      cluster_environment:
        type: string
        required: false
        default: ehp
      workload_identity_provider_secret_name:
        type: string
        required: true
      apply_algolia_config:
        type: boolean
        required: false
        default: false
      deploy_api:
        type: boolean
        required: false
        default: false
      deploy_pro:
        type: boolean
        required: false
        default: false
      doc-api-entrypoint:
        type: string
        required: false
        default: "api/documentation"
      # Variables used for the new infra
      is_new_infra:
        type: boolean
        required: true
        default: false
      location:
        type: string
        required: false
        default: europe-west9
      cluster_name:
        type: string
        required: true
      gcp_project_id:
        type: string
        required: true
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_EHP_SERVICE_ACCOUNT:
        required: true
      PASSCULTURE_GITHUB_ACTION_APP_ID:
        required: true
        description: "Github Application ID to use to clone other repos"
      PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY:
        required: true
        description: "Private key for the Github application used to clone other repos"

jobs:
  deploy-api:
    name: "Deploy api"

    concurrency:
      group: deploy-pcapi-${{ inputs.environment }}
      cancel-in-progress: false
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: "Deploy API"
        if: ${{ inputs.deploy_api && !inputs.is_new_infra }}
        uses: ./.github/actions/deploy-api
        with:
          environment: ${{ inputs.environment }}
          app_version: ${{ inputs.app_version }}
          cluster_scope: ${{ inputs.cluster_scope }}
          cluster_environment: ${{ inputs.cluster_environment }}
          workload_identity_provider_secret_name: ${{ inputs.workload_identity_provider_secret_name }}
          gcp_ehp_workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          gcp_ehp_service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
          passculture_github_action_app_id: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_ID }}
          passculture_github_action_app_private_key: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY }}

      - name: "Deploy API To new Infra"
        if: ${{ inputs.deploy_api && inputs.is_new_infra }}
        uses: ./.github/actions/deploy-api-new-infra
        with:
          environment: ${{ inputs.environment }}
          app_version: ${{ inputs.app_version }}
          GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
          cluster_name: ${{ inputs.cluster_name }}
          gcp_project_id: ${{ inputs.gcp_project_id }}

  deploy-api-doc-on-firebase:
    name: "Deploy api doc on firebase"
    if: ${{ inputs.deploy_api && (inputs.environment != 'ops' && inputs.environment != 'integration') }}
    needs: deploy-api
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v5
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v3"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - uses: actions/setup-node@v6
        with:
          node-version-file: "${{ inputs.doc-api-entrypoint }}/package.json"
      - name: "Build documentation"
        run: |
          set -e
          npm install
          npm run build
        env:
          ENV: ${{ inputs.environment }}
        working-directory: "${{ inputs.doc-api-entrypoint }}"
      - name: "OpenID Connect Authentication"
        id: "openid-auth"
        uses: "google-github-actions/auth@v3"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v3"
        with:
          secrets: |-
            FIREBASE_TOKEN:passculture-metier-ehp/pc_doc_api_${{ inputs.environment }}_firebase_json

      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ steps.secrets.outputs.FIREBASE_TOKEN }}"
          projectId: "pc-doc-api-${{ inputs.environment }}"
          entryPoint: "${{ inputs.doc-api-entrypoint }}"
          channelId: "live"

  deploy-pro-on-firebase-testing:
    name: "Deploy pro on testing live channel"
    concurrency:
      group: deploy-pro-${{ inputs.environment }}
      cancel-in-progress: false
    needs: deploy-api
    if: |
      always() &&
      inputs.environment == 'testing' &&
      inputs.deploy_pro == true
    uses: ./.github/workflows/dev_on_workflow_deploy_pro_pr_version_generic.yml
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
    with:
      ENV: testing
      CHANNEL: "live"
      REF: ${{ github.ref }}
      CACHE_BUCKET_NAME: "passculture-infra-prod-github-runner-cache"

  deploy-pro-on-firebase:
    name: "Deploy pro"
    concurrency:
      group: deploy-pro-${{ inputs.environment }}
      cancel-in-progress: false
    needs: deploy-api
    if: |
      always() &&
      (needs.deploy-api.result == 'success' || needs.deploy-api.result == 'skipped') &&
      ( inputs.environment != 'testing' ) &&
      inputs.deploy_pro == true
    uses: ./.github/workflows/dev_on_workflow_configure_live_channel_pro_generic.yml
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
    with:
      ENV: ${{ inputs.environment }}
      VERSION: ${{ inputs.app_version }}

  apply-algolia-config:
    name: "apply Algolia settings"
    needs: deploy-api
    if: |
      inputs.apply_algolia_config == true &&
      (needs.deploy-api.result == 'success' || needs.deploy-api.result == 'skipped')
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v5
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v3"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: Authenticate through github app ghactionci
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: github-token
        with:
          app-id: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_ID }}
          private-key: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            pc-connect
            pc-firestore-cli
          permission-contents: read

      - name: "Get secrets"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v3"
        with:
          secrets: |-
            DEPLOYMENT_SA:passculture-metier-ehp/pcapi-${{ inputs.environment }}_deploy-service-account
            DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/${{ inputs.workload_identity_provider_secret_name }}

      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v3"
        with:
          service_account: ${{ steps.secrets.outputs.DEPLOYMENT_SA }}
          workload_identity_provider: ${{ steps.secrets.outputs.DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER }}

      - name: "Connect to cluster"
        uses: pass-culture/common-workflows/actions/pc-k8s-connect@pc-k8s-connect/v0.2.0
        with:
          cluster_scope: ${{ inputs.cluster_scope }}
          cluster_environment: ${{ inputs.cluster_environment }}
          api_token_github: ${{ steps.github-token.outputs.token }}

      - name: "Configure algolia"
        id: "set_algolia_settings"
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 3
          command: |
            ENV=${{ inputs.environment}}
            POD_NAME=$(kubectl -n $ENV get pods -l role=api --field-selector=status.phase==Running -o json | jq -r '.items[] | "\(.metadata.name)"' | head -n 1)
            FAIL=0
            echo "flask commands runs on ${POD_NAME}"

            if ! kubectl exec -it -n $ENV ${POD_NAME} -- flask set_algolia_settings artists --not-dry; then
                echo "Failed to apply algolia settings for artists"
                FAIL=1
            fi
            if ! kubectl exec -it -n $ENV ${POD_NAME} -- flask set_algolia_settings offers --not-dry; then
                echo "Failed to apply algolia settings for offers"
                FAIL=1
            fi
            if ! kubectl exec -it -n $ENV ${POD_NAME} -- flask set_algolia_settings collective_offers --not-dry; then
                echo "Failed to apply algolia settings for collective_offers"
                FAIL=1
            fi
            if ! kubectl exec -it -n $ENV ${POD_NAME} -- flask set_algolia_settings venues --not-dry; then
                echo "Failed to apply algolia settings for venues"
                FAIL=1
            fi
            exit $FAIL

  # Image resizing cannot be deployed as python 3.9 is not supported by app engine.
  # deploy-image-resizing-ehp:
  #   name: "Deploy image-resizing EHP"
  #   permissions:
  #     contents: "read"
  #     id-token: "write"
  #   uses: ./.github/workflows/dev_on_workflow_deploy_app_engine_image_resizing.yml
  #   if: ${{ inputs.environment != 'production' && inputs.environment != 'ops' }}
  #   with:
  #     workload_identity_provider_secret_name: passculture-metier-ehp/gcp_metier_ehp_workload_identity_provider
  #     service_account_secret_name: passculture-metier-ehp/app_engine_image_resizing_service_account
  #     image_resizing_url: https://image-resizing.testing.passculture.team
  #     environment: testing
  #     google_project: passculture-metier-ehp
  #     base_ref: ${{ github.ref }}
  #   secrets:
  #     GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
  #     GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}

  # deploy-image-resizing-production:
  #   name: "Deploy image-resizing production"
  #   permissions:
  #     contents: "read"
  #     id-token: "write"
  #   uses: ./.github/workflows/dev_on_workflow_deploy_app_engine_image_resizing.yml
  #   if: ${{ inputs.environment == 'production' }}
  #   with:
  #     workload_identity_provider_secret_name: passculture-metier-ehp/gcp_metier_prod_workload_identity_provider
  #     service_account_secret_name: passculture-metier-ehp/app_engine_prod_image_resizing_service_account
  #     image_resizing_url: https://image-resizing.passculture.app
  #     environment: production
  #     google_project: passculture-metier-prod
  #     base_ref: ${{ github.ref }}
  #   secrets:
  #     GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
  #     GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
