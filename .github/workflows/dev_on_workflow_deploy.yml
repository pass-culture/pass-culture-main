name: "Deploy"
on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      app_version:
        type: string
        required: true
      teleport_version:
        type: string
        required: true
      teleport_proxy:
        type: string
        required: true
      teleport_kubernetes_cluster:
        type: string
        required: true
      deploy_api:
        type: boolean
        required: false
        default: false
      deploy_pro:
        type: boolean
        required: false
        default: false
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_EHP_SERVICE_ACCOUNT:
        required: true

jobs:
  generate-pcapi-helm-secrets-file:
    name: "[pcapi] Generate helm secrets values file"
    runs-on: ubuntu-latest
    if: ${{ inputs.deploy_api }}
    environment: ${{ inputs.environment }}
    outputs:
      pcapi_helm_secrets_file_base64: ${{ steps.set-secrets-file-output.outputs.secrets_file_base64 }}
    steps:
      - uses: actions/checkout@v4.1.1
      - name: "Authentification to Google"
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
      - name: "OpenID Connect Authentication"
        id: "openid-auth"
        uses: 'google-github-actions/auth@v1'
        with:
          create_credentials_file: false
          token_format: 'access_token'
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: "Generate pcapi helm values file"
        id: "generate-secrets-file"
        uses: addnab/docker-run-action@v3
        with:
          options: --user 0 -v ${{ github.workspace }}:/workspace
          registry: 'europe-west1-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ steps.openid-auth.outputs.access_token }}'
          image: 'europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi:${{ inputs.app_version }}'
          run: |
            su pcapi -c "flask print_secret_keys | base64 -w 0 > /tmp/helm_secrets_file_base64"
            cp /tmp/helm_secrets_file_base64 /workspace/helm_secrets_file_base64
      - name: "Set pcapi helm secrets values file as output"
        id: "set-secrets-file-output"
        run: echo "secrets_file_base64=$(cat ${{ github.workspace }}/helm_secrets_file_base64)" | tee -a $GITHUB_OUTPUT

  deploy-api:
    name: "Deploy api"
    needs: generate-pcapi-helm-secrets-file
    if: ${{ inputs.deploy_api }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4.1.1
      - name: "Authentification to Google"
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            PASSCULTURE_SA_ACCESS_TOKEN:passculture-metier-ehp/passculture-main-sa-access-token
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
      - uses: actions/checkout@v4.1.1
        with:
          repository: pass-culture/pass-culture-deployment
          token: ${{ steps.secrets.outputs.PASSCULTURE_SA_ACCESS_TOKEN }}
          path: ./pass-culture-deployment
      - name: "OpenID Connect Authentication"
        id: "openid-auth-infra"
        uses: 'google-github-actions/auth@v1'
        with:
          create_credentials_file: false
          token_format: 'access_token'
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: "Install Teleport"
        uses: teleport-actions/setup@v1
        with:
          version: ${{ inputs.teleport_version }}
      - name: "Teleport Authentication"
        uses: teleport-actions/auth-k8s@v1
        with:
          proxy: ${{ inputs.teleport_proxy }}
          token: github-token
          certificate-ttl: 1h
          kubernetes-cluster: ${{ inputs.teleport_kubernetes_cluster }}
      - name: "Setup helmfile"
        uses: mamezou-tech/setup-helmfile@v1.0.0
        with:
          helmfile-version: "v0.147.0"
      - name: "Install Teleport"
        uses: teleport-actions/setup@v1
        with:
          version: ${{ inputs.teleport_version }}
      - name: "Teleport Authentication"
        id: "teleport-auth"
        uses: teleport-actions/auth-k8s@v1
        with:
          proxy: ${{ inputs.teleport_proxy }}
          token: github-token
          certificate-ttl: 1h
          kubernetes-cluster: ${{ inputs.teleport_kubernetes_cluster }}
      - name: "Play pre-migrations"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 30
          max_attempts: 3
          command: |
            set -e
            VERSION="${{ inputs.app_version }}"
            export ENVIRONMENT="${{ inputs.environment }}"
            IMAGE=$(kubectl get -n ${{ inputs.environment }} po -l role=api -o json |jq -r '.items[0].spec.containers[0].image'|awk -F':' '{print $1}')
            export IMAGE="${IMAGE}:${VERSION}"
            export DATE=$(date +"%Y-%m-%d--%H-%M-%S")
            envsubst < .github/workflows/templates/pre-upgrade-job.yaml | kubectl -n ${{ inputs.environment }} apply -f -
            while true;
            do
            kubectl logs -n ${{ inputs.environment }} -f jobs/pre-upgrade-${DATE} && break
            done
            kubectl wait --for=condition=complete --timeout=30s -n ${{ inputs.environment }} jobs/pre-upgrade-${DATE}
      - name: "Deploy pcapi"
        run: |
          PASSCULTURE_USERNAME="oauth2accesstoken" \
          PASSCULTURE_PASSWORD=${{ steps.openid-auth-infra.outputs.access_token }} \
          PCAPI_VALUES_FILE=./pass-culture-deployment/helm/pcapi/values.${{ inputs.environment }}.yaml \
          PCAPI_SECRETS_FILE=<(echo '${{ needs.generate-pcapi-helm-secrets-file.outputs.pcapi_helm_secrets_file_base64 }}' | base64 -d) \
          helmfile -e ${{ inputs.environment }} sync --set image.tag=${{ inputs.app_version }}
      - name: "Play post-migrations"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 30
          max_attempts: 3
          command: |
            set -e
            VERSION="${{ inputs.app_version }}"
            export ENVIRONMENT="${{ inputs.environment }}"
            IMAGE=$(kubectl get -n ${{ inputs.environment }} po -l role=api -o json |jq -r '.items[0].spec.containers[0].image'|awk -F':' '{print $1}')
            export IMAGE="${IMAGE}:${VERSION}"
            export DATE=$(date +"%Y-%m-%d--%H-%M-%S")
            envsubst < .github/workflows/templates/post-upgrade-job.yaml | kubectl -n ${{ inputs.environment }} apply -f -
            while true;
            do
            kubectl logs -n ${{ inputs.environment }} -f jobs/post-upgrade-${DATE} && break
            done
            kubectl wait --for=condition=complete --timeout=30s -n ${{ inputs.environment }} jobs/post-upgrade-${DATE}

  deploy-pro-on-testing-on-firebase:
    name: "Deploy pro on testing live channel"
    needs: deploy-api
    if: |
      always() &&
      (needs.deploy-api.result == 'success' || needs.deploy-api.result == 'skipped') &&
      inputs.environment == 'testing' &&
      inputs.deploy_pro == true
    uses: ./.github/workflows/dev_on_workflow_deploy_pro_pr_version_generic.yml
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
    with:
      ENV: testing
      CHANNEL: "live"
      REF: ${{ github.ref }}
      CACHE_BUCKET_NAME: "passculture-infra-prod-github-runner-cache"

  deploy-pro-on-firebase:
    name: "Deploy pro"
    needs: deploy-api
    if: |
      always() &&
      (needs.deploy-api.result == 'success' || needs.deploy-api.result == 'skipped') &&
      ( inputs.environment != 'testing' ) &&
      inputs.deploy_pro == true
    uses: ./.github/workflows/dev_on_workflow_configure_live_channel_pro_generic.yml
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
    with:
      ENV: ${{ inputs.environment }}
      VERSION: ${{ inputs.app_version }}

  apply-algolia-config:
    name: "apply Algolia settings"
    needs: deploy-api
    if: |
      (inputs.environment == 'staging' || inputs.environment == 'production') &&
      (needs.deploy-api.result == 'success' || needs.deploy-api.result == 'skipped')
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: "Install Teleport"
        uses: teleport-actions/setup@v1
        with:
          version: ${{ inputs.teleport_version }}
      - name: "Teleport Authentication"
        id: "teleport-auth"
        uses: teleport-actions/auth-k8s@v1
        with:
          proxy: ${{ inputs.teleport_proxy }}
          token: github-token
          certificate-ttl: 1h
          kubernetes-cluster: ${{ inputs.teleport_kubernetes_cluster }}
      - name: "Configure algolia"
        id: "set_algolia_settings"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 30
          max_attempts: 3
          command: |
            POD_NAME=$(kubectl -n ${{ inputs.environment }} get po -l role=api -o json |jq -r '.items[] | select(.spec.containers[0].image | contains("${{ inputs.app_version }}")) | "\(.metadata.name)"'|head -n 1)
            echo "flask commands runs on ${POD_NAME}"
            kubectl exec -it -n ${{ inputs.environment }} ${POD_NAME} -- flask set_algolia_settings offers --dry-run=false
            kubectl exec -it -n ${{ inputs.environment }} ${POD_NAME} -- flask set_algolia_settings collective_offers --dry-run=false
            kubectl exec -it -n ${{ inputs.environment }} ${POD_NAME} -- flask set_algolia_settings venues --dry-run=false

  deploy-image-resizing-ehp:
    name: "Deploy image-resizing EHP"
    permissions:
      contents: 'read'
      id-token: 'write'
    uses: ./.github/workflows/dev_on_workflow_deploy_app_engine_image_resizing.yml
    if: ${{ inputs.environment != 'production' }}
    with:
      workload_identity_provider_secret_name: passculture-metier-ehp/gcp_metier_ehp_workload_identity_provider
      service_account_secret_name: passculture-metier-ehp/app_engine_image_resizing_service_account
      image_resizing_url: https://image-resizing.testing.passculture.team
      environment: testing
      google_project: passculture-metier-ehp
      base_ref: ${{ github.ref }}
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}

  deploy-image-resizing-production:
    name: "Deploy image-resizing production"
    permissions:
      contents: 'read'
      id-token: 'write'
    uses: ./.github/workflows/dev_on_workflow_deploy_app_engine_image_resizing.yml
    if: ${{ inputs.environment == 'production' }}
    with:
      workload_identity_provider_secret_name: passculture-metier-ehp/gcp_metier_prod_workload_identity_provider
      service_account_secret_name: passculture-metier-ehp/app_engine_prod_image_resizing_service_account
      image_resizing_url: https://image-resizing.passculture.app
      environment: production
      google_project: passculture-metier-prod
      base_ref: ${{ github.ref }}
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}