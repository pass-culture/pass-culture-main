name: "3 [on_workflow] Deploy"
on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      app_version:
        type: string
        required: true
      cluster_scope:
        type: string
        required: false
        default: metier
      cluster_environment:
        type: string
        required: false
        default: ehp
      workload_identity_provider_secret_name:
        type: string
        required: true
      apply_algolia_config:
        type: boolean
        required: false
        default: false
      deploy_api:
        type: boolean
        required: false
        default: false
      deploy_pro:
        type: boolean
        required: false
        default: false
      doc-api-entrypoint:
        type: string
        required: false
        default: "api/documentation"
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_EHP_SERVICE_ACCOUNT:
        required: true
      PASSCULTURE_GITHUB_ACTION_APP_ID:
        required: true
        description: "Github Application ID to use to clone other repos"
      PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY:
        required: true
        description: "Private key for the Github application used to clone other repos"

jobs:
  deploy-api:
    name: "Deploy api"
    if: ${{ inputs.deploy_api }}
    concurrency:
      group: deploy-pcapi-${{ inputs.environment }}
      cancel-in-progress: false
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: "Get secrets (github)"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            DEPLOYMENT_SA:passculture-metier-ehp/pcapi-${{ inputs.environment }}_deploy-service-account
            DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/${{ inputs.workload_identity_provider_secret_name }}

      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          service_account: ${{ steps.secrets.outputs.DEPLOYMENT_SA }}
          workload_identity_provider: ${{ steps.secrets.outputs.DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Authenticate through github app ghactionci
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        id: github-token
        with:
          app-id: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_ID }}
          private-key: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          # Liste des repositories Ã  cloner
          repositories: |
            pass-culture-deployment
            pass-culture-main
            rendered-manifests
            pc-connect
          permission-contents: write

      - name: "Connect to cluster"
        uses: pass-culture/common-workflows/actions/pc-k8s-connect@pc-k8s-connect/v0.2.0
        with:
          cluster_scope: ${{ inputs.cluster_scope }}
          cluster_environment: ${{ inputs.cluster_environment }}
          api_token_github: ${{ steps.github-token.outputs.token }}

      - name: "Play pre-migrations"
        uses: pass-culture/common-workflows/actions/pcapi-migration@pcapi-migration/v0.2.4
        with:
          environment: ${{ inputs.environment }}
          app_version: ${{ inputs.app_version }}
          migration_type: pre

      # Get pcapi secrets from source code, to be passed later as a helmfile parameter.
      - name: "Generate pcapi secrets list"
        id: generate-pcapi-secrets-list
        run: |
          #Retrieve pcapi secrets list from source code
          PCAPI_SECRETS=$(cat api/src/pcapi/settings.py | grep "secrets_utils.getlist(" | awk -F'=' '{print $1}')
          PCAPI_SECRETS+=$(cat api/src/pcapi/settings.py | grep "secrets_utils.get(" | grep -oP '(?<=secrets_utils.get\(\").*?(?=\")')
          #Sort list
          PCAPI_SECRETS=$(echo $PCAPI_SECRETS | xargs -n1 | sort | xargs)
          #Transform list into helm readable parameter list (pattern: --set secrets={item1,item2,item3})
          PCAPI_SECRETS=secrets={$(echo $PCAPI_SECRETS | sed -r 's/ /,/g')}
          echo "PCAPI_SECRETS=$PCAPI_SECRETS" >> "$GITHUB_OUTPUT"

      # Checkout pass-culture-deployment repository containing pcapi helm value files
      - uses: actions/checkout@v4
        with:
          repository: pass-culture/pass-culture-deployment
          token: ${{ steps.github-token.outputs.token }}
          path: ./pass-culture-deployment

      # Commit and push app_version to matching pcapi environment helm value file.
      - name: "Update image.tag in pass-culture-deployment repository"
        run: |
          git config --global user.email "PassCulture-SA@passculture.team"
          git config --global user.name "PassCulture-SA"
          cd ./pass-culture-deployment/helm/pcapi/${{ inputs.environment }}
          sed -i '/^image:/,/^  tag:/{s/^  tag: .*/  tag: ${{ inputs.app_version }}/}' values.yaml.gotmpl
          git add values.yaml.gotmpl
          git diff-index --quiet HEAD || git commit -m "[${{ inputs.environment }}] Update pcapi image.tag (${{ inputs.app_version }}) (Github Actions Job : ${{ github.run_number }})"
          git pull -r
          git push origin master

      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      # Executes helmfile templating and push results to render-manifests repository
      - name: "Generate and push rendered manifests"
        uses: pass-culture/common-workflows/actions/render-push-manifests@render-push-manifests/v3.1.0
        with:
          environment: ${{ inputs.environment }}
          app_name: pcapi
          app_version: ${{ inputs.app_version }}
          additional_args: ${{ steps.generate-pcapi-secrets-list.outputs.PCAPI_SECRETS }}
          registry_workload_identity_secret_name: passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
          registry_service_account_secret_name: passculture-metier-ehp/passculture-main-artifact-registry-service-account
          api_token_github: ${{ steps.github-token.outputs.token }}
          chart_values_repository: ""
          helmfile_path: "./pass-culture-deployment/helm/pcapi"

      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          service_account: ${{ steps.secrets.outputs.DEPLOYMENT_SA }}
          workload_identity_provider: ${{ steps.secrets.outputs.DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER }}

      - name: "Connect to cluster"
        uses: pass-culture/common-workflows/actions/pc-k8s-connect@pc-k8s-connect/v0.2.0
        with:
          cluster_scope: ${{ inputs.cluster_scope }}
          cluster_environment: ${{ inputs.cluster_environment }}
          api_token_github: ${{ steps.github-token.outputs.token }}

      - name: "Sync ArgoCD application"
        uses: pass-culture/common-workflows/actions/argocd-sync@argocd-sync/v0.7.0
        with:
          app_name: pcapi-${{ inputs.environment }}
          sync_timeout: 1200

      - name: "Play post-migrations"
        uses: pass-culture/common-workflows/actions/pcapi-migration@pcapi-migration/v0.2.4
        with:
          environment: ${{ inputs.environment }}
          app_version: ${{ inputs.app_version }}
          migration_type: post

  deploy-api-doc-on-firebase:
    name: "Deploy api doc on firebase"
    if: ${{ inputs.deploy_api && (inputs.environment != 'ops' && inputs.environment != 'integration') }}
    needs: deploy-api
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: "${{ inputs.doc-api-entrypoint }}/.nvmrc"
      - name: "Build documentation"
        run: |
          set -e
          npm install
          npm run build
        env:
          ENV: ${{ inputs.environment }}
        working-directory: "${{ inputs.doc-api-entrypoint }}"
      - name: "OpenID Connect Authentication"
        id: "openid-auth"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            FIREBASE_TOKEN:passculture-metier-ehp/pc_doc_api_${{ inputs.environment }}_firebase_json

      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ steps.secrets.outputs.FIREBASE_TOKEN }}"
          projectId: "pc-doc-api-${{ inputs.environment }}"
          entryPoint: "${{ inputs.doc-api-entrypoint }}"
          channelId: "live"

  deploy-pro-on-firebase-testing:
    name: "Deploy pro on testing live channel"
    concurrency:
      group: deploy-pro-${{ inputs.environment }}
      cancel-in-progress: false
    needs: deploy-api
    if: |
      always() &&
      inputs.environment == 'testing' &&
      inputs.deploy_pro == true
    uses: ./.github/workflows/dev_on_workflow_deploy_pro_pr_version_generic.yml
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
    with:
      ENV: testing
      CHANNEL: "live"
      REF: ${{ github.ref }}
      CACHE_BUCKET_NAME: "passculture-infra-prod-github-runner-cache"

  deploy-pro-on-firebase:
    name: "Deploy pro"
    concurrency:
      group: deploy-pro-${{ inputs.environment }}
      cancel-in-progress: false
    needs: deploy-api
    if: |
      always() &&
      (needs.deploy-api.result == 'success' || needs.deploy-api.result == 'skipped') &&
      ( inputs.environment != 'testing' ) &&
      inputs.deploy_pro == true
    uses: ./.github/workflows/dev_on_workflow_configure_live_channel_pro_generic.yml
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
    with:
      ENV: ${{ inputs.environment }}
      VERSION: ${{ inputs.app_version }}

  apply-algolia-config:
    name: "apply Algolia settings"
    needs: deploy-api
    if: |
      inputs.apply_algolia_config == true &&
      (needs.deploy-api.result == 'success' || needs.deploy-api.result == 'skipped')
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: Authenticate through github app ghactionci
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        id: github-token
        with:
          app-id: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_ID }}
          private-key: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: pc-connect
          permission-contents: read

      - name: "Get secrets"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            DEPLOYMENT_SA:passculture-metier-ehp/pcapi-${{ inputs.environment }}_deploy-service-account
            DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/${{ inputs.workload_identity_provider_secret_name }}

      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          service_account: ${{ steps.secrets.outputs.DEPLOYMENT_SA }}
          workload_identity_provider: ${{ steps.secrets.outputs.DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER }}

      - name: "Connect to cluster"
        uses: pass-culture/common-workflows/actions/pc-k8s-connect@pc-k8s-connect/v0.2.0
        with:
          cluster_scope: ${{ inputs.cluster_scope }}
          cluster_environment: ${{ inputs.cluster_environment }}
          api_token_github: ${{ steps.github-token.outputs.token }}

      - name: "Configure algolia"
        id: "set_algolia_settings"
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 3
          command: |
            export POD_NAME=$(kubectl -n ${{ inputs.environment }} get po -l role=api --field-selector=status.phase==Running -o json |jq -r '.items[] | "\(.metadata.name)"'|head -n 1)
            echo "flask commands runs on ${POD_NAME}"
            kubectl exec -it -n ${{ inputs.environment }} ${POD_NAME} -- flask set_algolia_settings offers --not-dry
            kubectl exec -it -n ${{ inputs.environment }} ${POD_NAME} -- flask set_algolia_settings collective_offers --not-dry
            kubectl exec -it -n ${{ inputs.environment }} ${POD_NAME} -- flask set_algolia_settings venues --not-dry

  deploy-image-resizing-ehp:
    name: "Deploy image-resizing EHP"
    permissions:
      contents: "read"
      id-token: "write"
    uses: ./.github/workflows/dev_on_workflow_deploy_app_engine_image_resizing.yml
    if: ${{ inputs.environment != 'production' && inputs.environment != 'ops' }}
    with:
      workload_identity_provider_secret_name: passculture-metier-ehp/gcp_metier_ehp_workload_identity_provider
      service_account_secret_name: passculture-metier-ehp/app_engine_image_resizing_service_account
      image_resizing_url: https://image-resizing.testing.passculture.team
      environment: testing
      google_project: passculture-metier-ehp
      base_ref: ${{ github.ref }}
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}

  deploy-image-resizing-production:
    name: "Deploy image-resizing production"
    permissions:
      contents: "read"
      id-token: "write"
    uses: ./.github/workflows/dev_on_workflow_deploy_app_engine_image_resizing.yml
    if: ${{ inputs.environment == 'production' }}
    with:
      workload_identity_provider_secret_name: passculture-metier-ehp/gcp_metier_prod_workload_identity_provider
      service_account_secret_name: passculture-metier-ehp/app_engine_prod_image_resizing_service_account
      image_resizing_url: https://image-resizing.passculture.app
      environment: production
      google_project: passculture-metier-prod
      base_ref: ${{ github.ref }}
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
