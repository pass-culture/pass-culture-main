name: '3 [on_workflow] push docker image'

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string

      commit-hash:
        required: true
        type: string

      checksum-tag:
        required: true
        type: string

      prefix-tag:
        required: false
        type: string
        default: develop

      tag-latest:
        required: false
        type: boolean
        default: false

      artifact_registry_workload_identity_provider:
        required: false
        type: string
        default: passculture-metier-ehp/infra-prod-gcp-workload-identity-provider

      artifact_registry_service_account:
        required: false
        type: string
        default: passculture-metier-ehp/passculture-main-artifact-registry-service-account

      cosign_kms_key:
        required: false
        type: string
        default: passculture-metier-ehp/cosign_kms_key

      registry:
        required: false
        type: string
        default: europe-west1-docker.pkg.dev

      repository:
        required: false
        type: string
        default: passculture-infra-prod/pass-culture-artifact-registry

    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_EHP_SERVICE_ACCOUNT:
        required: true

jobs:
  push-docker-image:
    name: "Push Docker image"
    runs-on: ubuntu-22.04
    steps:
      - name: "Authentification to Google"
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER: ${{ inputs.artifact_registry_workload_identity_provider }}
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT: ${{ inputs.artifact_registry_service_account }}
            COSIGN_KMS_KEY: ${{ inputs.cosign_kms_key }}
      - name: "OpenID Connect Authentication"
        id: openid-auth
        uses: 'google-github-actions/auth@v2'
        with:
          create_credentials_file: true
          token_format: 'access_token'
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: 'Docker login'
        uses: 'docker/login-action@v3'
        id: "docker-login"
        with:
          registry: ${{ inputs.registry }}
          username: oauth2accesstoken
          password: '${{ steps.openid-auth.outputs.access_token }}'
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.2
      - name: "Compute docker image name:tag"
        id: compute-image-name
        run: echo "image_name=${{ inputs.registry }}/${{ inputs.repository }}/${{ inputs.image }}:${{ inputs.checksum-tag }}" | tee -a ${GITHUB_OUTPUT}
      - name: "Download artifact"
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.image }}-${{ inputs.checksum-tag }}.tar
          path: ${{ runner.temp }}
      - name: "Load and push docker image"
        run: |
          docker load --input ${{ runner.temp }}/${{ inputs.image }}-${{ inputs.checksum-tag }}.tar
          IMAGE_NAME=${{ inputs.registry }}/${{ inputs.repository }}/${{ inputs.image }}
          docker image tag ${{ steps.compute-image-name.outputs.image_name }} "$IMAGE_NAME:${{ inputs.commit-hash }}"
          docker image tag ${{ steps.compute-image-name.outputs.image_name }} "$IMAGE_NAME:${{ inputs.prefix-tag }}-${{ inputs.commit-hash }}"
          if [ ${{ inputs.tag-latest }} == 'true' ]; then
            docker image tag ${{ steps.compute-image-name.outputs.image_name }} "$IMAGE_NAME:latest"
          fi
          docker image push --all-tags $IMAGE_NAME
      - name: "Get the image digest"
        id: get_digest
        run: echo "digest=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.compute-image-name.outputs.image_name }})" >> $GITHUB_OUTPUT
      - name: Sign image with a kms key
        run: cosign sign --tlog-upload=false --key gcpkms://${{ steps.secrets.outputs.COSIGN_KMS_KEY }} ${{ steps.get_digest.outputs.digest }}
