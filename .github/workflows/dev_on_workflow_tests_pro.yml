name: "3 [on_workflow/PRO] Tests"

on:
  workflow_call:
    inputs:
      CACHE_BUCKET_NAME:
        type: string
        required: true
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_EHP_SERVICE_ACCOUNT:
        required: true

defaults:
  run:
    working-directory: pro

jobs:
  type-check:
    name: "Code/Type/Style Quality check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version-file: "pro/package.json"
      - name: "Cache the node_modules"
        id: "yarn-modules-cache"
        uses: pass-culture-github-actions/cache@v1.0.0
        with:
          compression-method: "gzip"
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            **/node_modules
          key: v1-yarn-pro-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-pro-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: "Install dependencies (3 attempts)"
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 2
          max_attempts: 3
          command: |
            cd pro
            yarn install --immutable

      - run: yarn tsc -b
      - run: yarn lint:dead-code
      - run: yarn lint:js --diagnostic-level=error
      - run: yarn lint:scss

  pro-run-tests:
    name: "Pro Unit tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v6
        with:
          node-version-file: "pro/package.json"

      - name: "OpenID Connect Authentication"
        uses: "google-github-actions/auth@v3"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: "Cache the node_modules"
        id: "yarn-modules-cache"
        uses: pass-culture-github-actions/cache@v1.0.0
        with:
          compression-method: "gzip"
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            **/node_modules
          key: v1-yarn-pro-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-pro-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: "Install dependencies (3 attempts)"
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 2
          max_attempts: 3
          command: |
            cd pro
            yarn install --immutable

      - name: Run tests with coverage
        run:
          yarn test:unit:ci --reporter=blob --reporter=allure-vitest/reporter --shard=${{ matrix.shardIndex }}/${{
          matrix.shardTotal }}

      - name: Upload blob report to GitHub Actions Artifacts
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: pro/.vitest-reports/
          include-hidden-files: true
          retention-days: 1

      - name: Rename coverage
        run: mv coverage/coverage-final.json coverage/coverage-${{matrix.shardIndex}}.json

      - name: Upload coverage report to GitHub Actions Artifacts
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.shardIndex }}
          path: pro/coverage/*.json
          include-hidden-files: true
          retention-days: 1

      - name: "Upload Allure results for pro tests"
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() && github.ref == 'refs/heads/master' }}
        with:
          name: allure-results-pro-unit-${{ matrix.shardIndex }}
          path: pro/allure-results

  merge-allure-reports:
    if: ${{ !cancelled() && github.ref == 'refs/heads/master' }}
    needs: [pro-run-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Download allure reports
        uses: actions/download-artifact@v6
        with:
          path: pro/allure-results
          pattern: allure-results-pro-unit-*

      - name: "Upload Allure results for pro tests"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-pro-unit
          path: pro/allure-results

      - name: "Install Allure CLI via Yarn"
        run: yarn global add allure-commandline

      - name: "Clone Allure Report Repository to Retrieve History"
        env:
          TOKEN: ${{ secrets.PAT_ALLURE_REPORTS_TEMP }}
        run: |
          git clone https://x-access-token:${TOKEN}@github.com/fseguin-pass/allure-reports-temp.git allure-report-temp
            mkdir -p allure-results/history
            if [ -d "allure-report-temp/history" ]; then
              cp -r allure-report-temp/history/* allure-results/history/
            fi

      - name: "Generate Allure Report with History"
        run: allure generate allure-results --single-file --clean -o allure-report

      - name: "Upload Allure Report as artifact"
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/index.html

  merge-reports:
    if: ${{ !cancelled() }}
    needs: [pro-run-tests]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v6
        with:
          node-version-file: "pro/package.json"

      - name: "Cache the node_modules"
        id: "yarn-modules-cache"
        uses: pass-culture-github-actions/cache@v1.0.0
        with:
          compression-method: "gzip"
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            **/node_modules
          key: v1-yarn-pro-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-pro-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: "Install dependencies (3 attempts)"
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 2
          max_attempts: 3
          command: |
            cd pro
            yarn install --immutable

      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v6
        with:
          path: pro/.vitest-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge reports
        run: npx vitest --merge-reports

      - name: Download coverage reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v6
        with:
          path: pro/coverage
          pattern: coverage-report-*
          merge-multiple: true

      - name: Merge coverage reports
        run: |
          npx nyc merge coverage coverage/coverage-merged.json
          npx nyc report -t coverage --report-dir coverage --reporter lcov

      - name: "OpenID Connect Authentication"
        uses: "google-github-actions/auth@v3"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: "Get Secret"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v3"
        with:
          secrets: |-
            SONAR_TOKEN:passculture-metier-ehp/passculture-main-sonar-token

      - name: SonarCloud scan
        uses: SonarSource/sonarqube-scan-action@master
        if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ steps.secrets.outputs.SONAR_TOKEN }}
        with:
          projectBaseDir: pro
          args: -Dsonar.qualitygate.wait=${{ github.event_name == 'pull_request' && 'true' || 'false'  }}

  notify-failure:
    name: "Notification of any check failure"
    needs: [type-check, pro-run-tests]
    if: always() && github.ref == 'refs/heads/master' && contains(needs.*.result, 'failure')
    uses: ./.github/workflows/dev_on_workflow_post_slack_message.yml
    with:
      channel: ${{vars.SLACK_DEV_CHANNEL_ID}}
      color: "#A30002"
      message:
        ":github-failure: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|Pro Unit Tests> a
        échoué sur `master`"
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
