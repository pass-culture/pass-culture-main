name: "2 [on_schedule] deploy main and pro"

on:
  workflow_dispatch:
  schedule:
    # This cron is defined in UTC timezone. It means that it will run :
    # - during summer hours between 8:28am - 7:28pm
    # - during winter hours between 7:28am - 6:28pm
    # we cannot yet specify timezone : 
    # https://github.com/orgs/community/discussions/13454
    # Why 28? Choosing an exact hour or half-hour is discouraged by GitHub due to high load.
    # Cron jobs might be delayed or even completely skipped.
    - cron: "28 6-17 * * 1-5"


env:
  docker_registry: "europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry"
  GIT_CONFIG_EMAIL: github-actions-bot@passculture.app
  GIT_CONFIG_NAME: scheduled-testing-deployment

jobs:
  pcapi-init-job:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    outputs: 
        checksum-tag: ${{ steps.pcapi-tags.outputs.checksum-tag }}
    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            fetch-tags: false
            ref: 'master'
        - name: "Define pcapi image tags."
          id: pcapi-tags
          run: |
            DOCKER_IMAGE="${{ env.docker_registry }}/pcapi"
            API_CHECKSUM=`tar --sort=name --owner=0 --group=0 --mtime='UTC 2019-01-01' -cf - api | sha1sum | awk '{ print $1 }'`
            PUSH_TAGS="push-tags=$DOCKER_IMAGE:${{ github.sha }},$DOCKER_IMAGE:$API_CHECKSUM,$DOCKER_IMAGE:latest"
            API_TAG="checksum-tag=$API_CHECKSUM"
            echo "PUSH_TAGS=$PUSH_TAGS"
            echo "API_TAG=$API_TAG"
            echo $PUSH_TAGS >> "$GITHUB_OUTPUT"
            echo $API_TAG >> "$GITHUB_OUTPUT"
        # Check checksum tag is not working well, we have a 401 during api call
        - name: "pcapi"
          id: check-checksum-tag
          run: ./.github/workflows/scripts/check-image-tag-exists.sh
          env:
            image: pcapi
            tag: ${{ steps.pcapi-tags.outputs.checksum-tag }}
            token: ${{ steps.openid-auth.outputs.access_token }}
        - name: "Authentification to Google"
          uses: "google-github-actions/auth@v2"
          with:
            workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
            service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
        - name: "Get Secret"
          id: secrets
          uses: "google-github-actions/get-secretmanager-secrets@v2"
          with:
            secrets: |-
              SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
              ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
              ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
        - name: "OpenID Connect Authentication"
          id: "openid-auth"
          uses: "google-github-actions/auth@v2"
          with:
            create_credentials_file: false
            token_format: "access_token"
            workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}
            service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
        - name: "Docker login"
          id: "docker-login"
          uses: "docker/login-action@v3"
          with:
            registry: "europe-west1-docker.pkg.dev"
            username: "oauth2accesstoken"
            password: "${{ steps.openid-auth.outputs.access_token }}"
        - name: "pcapi-console"
          id: check-console-checksum-tag
          run: ./.github/workflows/scripts/check-image-tag-exists.sh
          env:
            image: pcapi-console
            tag: ${{ steps.pcapi-tags.outputs.checksum-tag }}
            token: ${{ steps.openid-auth.outputs.access_token }}
        - name: "Summary"
          run: |
            echo "[pcapi] push-tags : ${{ steps.pcapi-tags.outputs.push-tags }}"
            echo "[pcapi] checksum-tag : ${{ steps.pcapi-tags.outputs.checksum-tag }}"
            echo "[pcapi] image tag ${{ steps.pcapi-tags.outputs.checksum-tag }} exists : ${{ steps.check-checksum-tag.outputs.tag-exists }}"
            echo "[pcapi-console] image tag ${{ steps.pcapi-tags.outputs.checksum-tag }} exists : ${{ steps.check-console-checksum-tag.outputs.tag-exists }}"
  
  # Theses steps builds pcapi and pcapi-console image, tags them with the last commit sha then
  # pushes them to the registry
  build-pcapi:
    name: "[pcapi] build docker image."
    needs: [pcapi-init-job]
    uses: ./.github/workflows/dev_on_workflow_build_docker_image.yml
    with:
      ref: ${{ github.sha }}
      image: pcapi
      tag: ${{ needs.pcapi-init-job.outputs.checksum-tag }}
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  build-pcapi-console:
    name: "[pcapi-console] build docker image."
    needs: [pcapi-init-job]
    if: |
    uses: ./.github/workflows/dev_on_workflow_build_docker_image.yml
    with:
      ref: ${{ github.sha }}
      image: pcapi-console
      tag: ${{ needs.pcapi-init-job.outputs.checksum-tag }}
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  push-pcapi:
    name: "Push pcapi docker image to registry"
    needs: [build-pcapi, pcapi-init-job]
    uses: ./.github/workflows/dev_on_workflow_push_docker_image.yml
    with:
      image: pcapi
      commit-hash: ${{ github.sha }}
      checksum-tag: ${{ needs.pcapi-init-job.outputs.checksum-tag }}
      tag-latest: true
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  push-pcapi-console:
    name: "Push pcapi-console docker image to registry"
    needs: [build-pcapi-console, pcapi-init-job]
    uses: ./.github/workflows/dev_on_workflow_push_docker_image.yml
    with:
      image: pcapi-console
      commit-hash: ${{ github.sha }}
      checksum-tag: ${{ needs.pcapi-init-job.outputs.checksum-tag }}
      tag-latest: true
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
        
  deploy-to-testing:
    permissions:
      id-token: 'write'
      contents: 'read'
    name: "Deploy to testing"
    needs: [pcapi-init-job, push-pcapi-console, push-pcapi]
    uses: ./.github/workflows/dev_on_workflow_deploy.yml
    with:
      environment: testing
      app_version: ${{ github.sha }}
      cluster_scope: metier
      cluster_environment: ehp
      workload_identity_provider_secret_name: gcp_metier_ehp_workload_identity_provider
      apply_algolia_config: true
      deploy_api: true
      deploy_pro: true
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  deploy-to-ops:
    permissions:
      id-token: 'write'
      contents: 'read'
    name: "Deploy to ops"
    needs: [pcapi-init-job, push-pcapi-console, push-pcapi, deploy-to-testing]
    uses: ./.github/workflows/dev_on_workflow_deploy.yml
    with:
      environment: ops
      app_version: ${{ github.sha }}
      cluster_scope: metier
      cluster_environment: ops
      workload_identity_provider_secret_name: gcp_metier_ops_workload_identity_provider
      deploy_api: true
      deploy_pro: false
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  slack-notify:
      name: "Slack notification"
      runs-on: ubuntu-22.04
      if: ${{ failure() }}
      needs: deploy-to-testing
      steps:
        - uses: technote-space/workflow-conclusion-action@v3
        - name: "Authentification to Google"
          uses: "google-github-actions/auth@v2"
          with:
            workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
            service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
        - name: "Get Secret"
          id: "secrets"
          uses: "google-github-actions/get-secretmanager-secrets@v2"
          with:
            secrets: |-
              SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
        - name: "Post to a Slack channel"
          uses: slackapi/slack-github-action@v1.27.0
          with:
            # channel #alertes-deploiement
            channel-id: "CQAMNFVPS"
            payload: |
              {
                "attachments": [
                  {
                    "mrkdwn_in": ["text"],
                    "color": "#A30002",
                    "author_name": "${{github.actor}}",
                    "author_link": "https://github.com/${{github.actor}}",
                    "author_icon": "https://github.com/${{github.actor}}.png",
                    "title": "PCAPI Deployment",
                    "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                    "text": "Le déploiement de la version `master` a échoué sur `testing` :boom:"
                  }
                ],
                "unfurl_links": false,
                "unfurl_media": false
              }
          env:
            SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}
