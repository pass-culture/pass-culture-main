name: "0 [on_dispatch] Delete PR deployment"

on:
  workflow_dispatch:
    inputs:
      pullrequest_id:
        description: "Pullrequest ID to delete deployment for"
        required: true

jobs:
  delete-pullrequest-deployment:
    name: "Delete PR deployment"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      # Get github api token
      - name: "Get secrets (github)"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            DEPLOYMENT_SA:passculture-metier-ehp/pcapi-testing_deploy-service-account
            DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/gcp_metier_ehp_workload_identity_provider

      - name: Authenticate through github app ghactionci
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        id: github-token
        with:
          app-id: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_ID }}
          private-key: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          # Liste des repositories Ã  cloner
          repositories: |
            pass-culture-deployment
            pass-culture-main
            rendered-manifests
            pc-connect
          permission-contents: write
      # Checkout rendered-manifests repository
      - uses: actions/checkout@v4
        with:
          repository: pass-culture/rendered-manifests
          token: ${{ steps.github-token.outputs.token }}
          path: ./rendered-manifests
          ref: "pcapi/pullrequests"

      - name: "Delete PR deployment"
        run: |
          git config --global user.email "PassCulture-SA@passculture.team"
          git config --global user.name "PassCulture-SA"
          cd ./rendered-manifests
          files_modified=false
          [[ -d "testing-pr-${{ inputs.pullrequest_id }}" ]] && { git rm -r testing-pr-${{ inputs.pullrequest_id }}; files_modified=true; } || echo "path testing-pr-${{ inputs.pullrequest_id }} does not exist"
          [[ -d "postgresql-pr-${{ inputs.pullrequest_id }}" ]] && { git rm -r postgresql-pr-${{ inputs.pullrequest_id }}; files_modified=true; } || echo "path postgresql-pr-${{ inputs.pullrequest_id }} does not exist"
          [[ -d "redis-pr-${{ inputs.pullrequest_id }}" ]] && { git rm -r redis-pr-${{ inputs.pullrequest_id }}; files_modified=true; } || echo "path redis-pr-${{ inputs.pullrequest_id }} does not exist"
          if [ "$files_modified" = true ]; then
            git add .
            git commit -m "[PR-${{ inputs.pullrequest_id }}] Delete deployment"
            git push
          fi

      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          service_account: ${{ steps.secrets.outputs.DEPLOYMENT_SA }}
          workload_identity_provider: ${{ steps.secrets.outputs.DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER }}

      - name: "Connect to cluster"
        uses: pass-culture/common-workflows/actions/pc-k8s-connect@pc-k8s-connect/v0.2.0
        with:
          cluster_scope: metier
          cluster_environment: ehp
          api_token_github: ${{ steps.github-token.outputs.token }}

      - name: "Wait for argocd applications to be deleted; delete namespace"
        continue-on-error: true
        run: |
          set +e
          while true; do
            kubectl get application -n argocd | grep ${{ inputs.pullrequest_id }}
            [[ $? -eq 0 ]] && sleep 5 || break
          done
          # Check for PR namespace and delete it
          kubectl get ns pcapi-pr-${{ inputs.pullrequest_id }}
          [[ $? -eq 0 ]] && kubectl delete ns pcapi-pr-${{ inputs.pullrequest_id }} || echo "namespace pcapi-pr-${{ inputs.pullrequest_id }} does not exist"
