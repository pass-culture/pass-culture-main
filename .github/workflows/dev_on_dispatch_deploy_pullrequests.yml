name: "0 [on_dispatch] Deploy preview environment"

on:
  workflow_dispatch:
    inputs:
      sandbox:
        description: "Sandbox installed"
        required: true
        default: "empty"
        type: choice
        options:
          - empty
          - industrial
      sandbox-args:
        description: "Arguments passed to the sandbox command"
        required: false
        default: ""
        type: string
      front-only:
        description: "Deploy only frontend (skip API deploy)"
        required: false
        default: false
        type: boolean
      deployment_source_branch:
        description: "Branch of pass-culture-deployment repository to use for helm charts."
        required: false
        default: "master"

permissions: write-all

env:
  docker_registry: "europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry"

jobs:
  deploy-preview-env-init:
    name: "Init"
    runs-on: ubuntu-latest
    outputs:
      # checksum-tag is the sha1sum of the api folder. It is used to tag the docker image
      checksum-tag: ${{ steps.pcapi-tags.outputs.checksum-tag }}
      # resource_label names every resources created by this workflow. It is the sha1sum of the branch name
      resource_label: ${{ steps.set_resource_label.outputs.resource_label }}
      pcapi-exists: ${{ steps.check-checksum-tag.outputs.tag-exists }}
      # testing_label controls wether we connect to testing backend or a preview backend
      testing_label: ${{ steps.set_resource_label.outputs.testing_label }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-tags: false
          ref: ${{ github.ref_name }}
      - name: "Set resources label name"
        id: "set_resource_label"
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          BRANCH_SHA1=$(echo -n "${BRANCH_NAME}" | sha1sum | awk '{print $1}' | cut -c1-7)
          echo "resource_label=$BRANCH_SHA1" >> $GITHUB_OUTPUT
          if [ "${{ inputs.front-only }}" == "true" ]; then
            echo "testing_label=" >> $GITHUB_OUTPUT
          else
            echo "testing_label=$BRANCH_SHA1" >> $GITHUB_OUTPUT
          fi
      - name: "Define pcapi image tags."
        id: pcapi-tags
        run: |
          DOCKER_IMAGE="${{ env.docker_registry }}/pcapi"
          API_CHECKSUM=`tar --sort=name --owner=0 --group=0 --mtime='UTC 2019-01-01' -cf - api | sha1sum | awk '{ print $1 }'`
          PUSH_TAGS="push-tags=$DOCKER_IMAGE:${{ github.sha }},$DOCKER_IMAGE:$API_CHECKSUM,$DOCKER_IMAGE:latest"
          API_TAG="checksum-tag=$API_CHECKSUM"
          echo "PUSH_TAGS=$PUSH_TAGS"
          echo "API_TAG=$API_TAG"
          echo $PUSH_TAGS >> "$GITHUB_OUTPUT"
          echo $API_TAG >> "$GITHUB_OUTPUT"
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v3"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: secrets
        uses: "google-github-actions/get-secretmanager-secrets@v3"
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
      - name: "OpenID Connect Authentication"
        id: "openid-auth"
        uses: "google-github-actions/auth@v3"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: "Check if pcapi already exists"
        id: check-checksum-tag
        run: ./.github/workflows/scripts/check-image-tag-exists.sh
        env:
          image: pcapi
          tag: ${{ steps.pcapi-tags.outputs.checksum-tag }}
          token: ${{ steps.openid-auth.outputs.access_token }}

  deploy-pro-on-firebase-preview-env:
    name: "[PRO] Deploy PR version for validation pr preview backend"
    needs: [deploy-preview-env-init]
    uses: ./.github/workflows/dev_on_workflow_deploy_pro_pr_version_generic.yml
    permissions:
      id-token: write
      contents: read
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
    with:
      ENV: "testing"
      CHANNEL: ${{ needs.deploy-preview-env-init.outputs.resource_label }}
      REF: "${{ github.ref }}"
      CACHE_BUCKET_NAME: "passculture-infra-prod-github-runner-cache"
      resource_label: ${{ needs.deploy-preview-env-init.outputs.testing_label }}

  build-pcapi:
    name: "[pcapi] build docker image."
    needs: [deploy-preview-env-init]
    if: needs.deploy-preview-env-init.outputs.pcapi-exists == 'false' && inputs.front-only == false
    uses: ./.github/workflows/dev_on_workflow_build_docker_image.yml
    with:
      image: pcapi
      tag: ${{ github.sha }}

  push-pcapi-to-europe-west1:
    name: Push pcapi docker image to artifact registry europe-west1-docker.pkg.dev
    needs:
      - deploy-preview-env-init
      - build-pcapi
    if: needs.deploy-preview-env-init.outputs.pcapi-exists == 'false' && inputs.front-only == false
    uses: ./.github/workflows/dev_on_workflow_push_docker_image.yml
    with:
      image: pcapi
      tag: ${{ github.sha }}
      tag_latest: true
      registry: europe-west1-docker.pkg.dev
      project_id: passculture-infra-prod
      repository: pass-culture-artifact-registry
      artifact_registry_workload_identity_provider_secret_name: passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
      artifact_registry_service_account_secret_name: passculture-metier-ehp/passculture-main-artifact-registry-service-account
      cosign_kms_key_secret_name: passculture-metier-ehp/cosign_kms_key
#    secrets:
#      workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
#      service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  push-pcapi-to-europe:
    name: Push pcapi docker image to artifact registry europe-docker.pkg.dev
    needs:
      - deploy-preview-env-init
      - build-pcapi
    if: needs.deploy-preview-env-init.outputs.pcapi-exists == 'false' && inputs.front-only == false
    uses: ./.github/workflows/dev_on_workflow_push_docker_image.yml
    with:
      image: pcapi
      tag: ${{ github.sha }}
      tag_latest: true
      registry: europe-docker.pkg.dev
      project_id: pc-infra-prd
      repository: pass-culture-artifact-registry
      artifact_registry_workload_identity_provider_secret_name: passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
      artifact_registry_service_account_secret_name: passculture-metier-ehp/passculture-main-artifact-registry-service-account
      cosign_kms_key_secret_name: pc-infra-prd/cosign_kms_key
#    secrets:
#      workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
#      service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  deploy-api:
    name: Deploy pullrequest
    runs-on: ubuntu-latest
    needs:
      - deploy-preview-env-init
      - push-pcapi-to-europe-west1
      - push-pcapi-to-europe
      - deploy-pro-on-firebase-preview-env
    if: always() && !failure() && !cancelled() && inputs.front-only == false
    environment: pullrequest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{github.ref}}
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v3"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      # Get github api token that will be used to commit and push api_version to pass-culture-deployment repository
      - name: "Get secrets (github)"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v3"
        with:
          secrets: |-
            DEPLOYMENT_SA:passculture-metier-ehp/pcapi-testing_deploy-service-account
            DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/gcp_metier_ehp_workload_identity_provider

      - name: Authenticate through github app ghactionci
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: github-token
        with:
          app-id: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_ID }}
          private-key: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          # Liste des repositories Ã  cloner
          repositories: |
            pass-culture-deployment
            pass-culture-main
            rendered-manifests
            pc-render-manifests
            pc-connect
            pc-firestore-cli
          permission-contents: write

      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v3"
        id: google-auth
        with:
          create_credentials_file: true
          token_format: "access_token"
          service_account: ${{ steps.secrets.outputs.DEPLOYMENT_SA }}
          workload_identity_provider: ${{ steps.secrets.outputs.DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER }}

      - name: "Connect to cluster"
        uses: pass-culture/common-workflows/actions/pc-k8s-connect@pc-k8s-connect/v0.2.0
        with:
          cluster_scope: metier
          cluster_environment: ehp
          api_token_github: ${{ steps.github-token.outputs.token }}

      # Get pcapi secrets from source code, to be passed later as a helmfile parameter.
      - name: "Generate pcapi secrets list"
        id: generate-pcapi-secrets-list
        run: |
          # Retrieve pcapi secrets list from source code
          PCAPI_SECRETS=$(cat api/src/pcapi/settings.py | grep "secrets_utils.get(" | sed -n 's/.*secrets_utils.get("\([^"]*\)".*/\1/p' | grep -v '^GOOGLE_CLIENT_ID$' | grep -v 'GOOGLE_CLIENT_SECRET$')
          echo $PCAPI_SECRETS
          # Sort list
          PCAPI_SECRETS=$(echo $PCAPI_SECRETS | xargs -n1 | sort | xargs)
          #Transform list into helm readable parameter list (pattern: --set secrets={item1,item2,item3})
          PCAPI_SECRETS=secrets={$(echo $PCAPI_SECRETS | sed -r 's/ /,/g')}
          echo "PCAPI_SECRETS=$PCAPI_SECRETS" >> "$GITHUB_OUTPUT"

      # Create pullrequest namespace and externalsecret containing pgsql credentials
      - name: "Installing Pullrequest deployment prerequisites"
        run: |
          set -e
          export PRID=${{ needs.deploy-preview-env-init.outputs.resource_label }}
          envsubst < .github/workflows/templates/pullrequest-namespace.yaml | kubectl apply -f -
          envsubst < .github/workflows/templates/pullrequest-pgsql-externalsecret.yaml | kubectl apply -f -

      - name: "Docker login"
        id: "docker-login"
        uses: "docker/login-action@v3"
        with:
          registry: "europe-west1-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.google-auth.outputs.access_token }}"

      - name: "Setup helmfile"
        uses: mamezou-tech/setup-helmfile@v2.1.0
        with:
          helmfile-version: "v1.1.3"

      # Executes helmfile templating and push results to render-manifests repository
      - name: "Setup pc-render-manifests"
        uses: pass-culture/common-workflows/actions/setup-pc-render-manifests@IC-284-use-pc-render-manifest-binary
        with:
          token: ${{ steps.github-token.outputs.token }}
          version: "v0.7.1"

      - name: "Generate and push rendered manifests"
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_TOKEN: ${{ steps.github-token.outputs.token }}
          PRID: ${{ needs.deploy-preview-env-init.outputs.resource_label }}
          PRO_URL: ${{ needs.deploy-pro-on-firebase-preview-env.outputs.pro_url }}
        run: |
          pc-render-manifests render \
            -a pcapi \
            -e pullrequest \
            --sourceRepoURL https://github.com/pass-culture/pass-culture-deployment.git \
            --sourcePath helm/pcapi \
            --sourceRepoRef ${{ inputs.deployment_source_branch }} \
            --destinationRepoRef pcapi/pullrequests \
            --additionalStateValues "pcapi.image.tag=${{ github.sha }}" \
            --additionalStateValues "prId=${PRID}" \
            --additionalStateValues "proUrl=${PRO_URL}" \
            --additionalArg "--set ${{ steps.generate-pcapi-secrets-list.outputs.PCAPI_SECRETS }}" \
            --destinationPathTemplate "{{ .OutputDir }}/{{.Release.Name}}-pr-${PRID}" \
            --commitMsg "pcapi(pr-${PRID}) : manifests for app_version=${{ github.sha }}" \
            --clean=false \
            --push \
            --silent

      - name: "Connect to cluster"
        uses: pass-culture/common-workflows/actions/pc-k8s-connect@pc-k8s-connect/v0.2.0
        with:
          cluster_scope: metier
          cluster_environment: ehp
          api_token_github: ${{ steps.github-token.outputs.token }}

      # Wait for ApplicationSet Controller to create applications
      # TODO : Change to webhook once appset controller ingress gets proper Health endpoint
      # PC-33270-pr-enable-argocd-applicationset-webhook
      # Releated issue : https://github.com/argoproj/argo-cd/pull/17691
      - name: "Wait for argocd applications to create"
        continue-on-error: true
        run: |
          set +e
          while true; do
            kubectl get application -n argocd | grep postgresql-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
            [[ $? -eq 0 ]] && break || sleep 5
          done
          while true; do
            kubectl get application -n argocd | grep redis-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
            [[ $? -eq 0 ]] && break || sleep 5
          done
          while true; do
            kubectl get application -n argocd | grep testing-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
            [[ $? -eq 0 ]] && break || sleep 5
          done
          {
            echo "### :rocket: Applications Argocd"
            echo "| Argocd       | Link |"
            echo "| ------------ | ---- |"
            echo "| Applications | https://argocd.ehp.passculture.team/applications?showFavorites=false&proj=pcapi-pullrequest&sync=&autoSync=&health=&namespace=&cluster=&labels=&search=pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} |"
          } >> $GITHUB_STEP_SUMMARY

      - name: "Namespace monitoring"
        run: |
          {
            echo "### :rocket: Pullrequest Namespace monitoring"
            echo "| Namespace                                        | Link |"
            echo "| ------------------------------------------------ | ---- |"
            echo "| pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} | https://monitoring.ehp.passculture.team/d/pods-dashboard/k8s-resource-monitoring-pods?orgId=1&var-Filters=namespace%7C%3D%7Cpcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}&from=now-1h&to=now |"
          } >> $GITHUB_STEP_SUMMARY

      - name: "Sync ArgoCD Pgsql application"
        uses: pass-culture/common-workflows/actions/argocd-sync@argocd-sync/v0.8.0
        with:
          app_name: postgresql-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
          argocd_app_wait: true

      - name: "Sync ArgoCD Redis application"
        uses: pass-culture/common-workflows/actions/argocd-sync@argocd-sync/v0.8.0
        with:
          app_name: redis-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
          argocd_app_wait: true

      - name: "Sync ArgoCD pcapi configmaps and secrets"
        uses: pass-culture/common-workflows/actions/argocd-sync@argocd-sync/v0.8.0
        with:
          app_name: testing-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
          argocd_app_wait: false
          prune: true
          extra_flags: --resource ':ConfigMap:*' --resource '*:ExternalSecret:*'

      - name: "Init local database"
        run: |
          set -e
          VERSION="${{ github.sha }}"
          export ENVIRONMENT="pullrequest"
          IMAGE="europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi"
          export IMAGE="${IMAGE}:${VERSION}"
          export PRID=${{ needs.deploy-preview-env-init.outputs.resource_label }}

          echo "=== exec: flask install_postgres_extensions"
          export DATE=$(date +"%Y-%m-%d-%H-%M-%S")
          start=$(date +%s.%N)
          envsubst < .github/workflows/templates/pullrequest-db-init.yaml | kubectl -n pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} apply -f -
          while true;
          do
            kubectl logs -n pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} -f jobs/pullrequest-db-init-${DATE} && break
          done
          kubectl wait --for=condition=complete --timeout=300s -n pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} jobs/pullrequest-db-init-${DATE}
          end=$(date +%s.%N)
          duration=`date -d@$(bc <<< "$end - $start") -u +%H:%M:%S`
          {
            echo "### :rocket: Init local database summary"
            echo "| Command                              | Duration |"
            echo "| ------------------------------------ | ----- |"
            echo "| flask install_postgres_extensions    |  $duration |"
          } >> $GITHUB_STEP_SUMMARY

      - name: "Sync ArgoCD pcapi application"
        uses: pass-culture/common-workflows/actions/argocd-sync@argocd-sync/v0.8.0
        with:
          app_name: testing-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
          argocd_app_wait: true
          prune: true

      - name: "Run sandbox"
        if: inputs.sandbox != 'empty'
        run: |
          set -e
          VERSION="${{ github.sha }}"
          export ENVIRONMENT="pullrequest"
          IMAGE="europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi"
          export IMAGE="${IMAGE}:${VERSION}"
          export PRID=${{ needs.deploy-preview-env-init.outputs.resource_label }}

          echo "=== exec: flask sandbox -n ${{ inputs.sandbox }} ${{ inputs.sandbox-args }}"
          export DATE=$(date +"%Y-%m-%d-%H-%M-%S")
          export SANDBOX_ARGS='${{ inputs.sandbox-args }}'
          start=$(date +%s.%N)
          envsubst < .github/workflows/templates/pullrequest-db-init-sandbox.yaml | kubectl -n pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} apply -f -
          while true;
          do
          kubectl logs -n pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} -f jobs/pullrequest-db-init-sandbox-${DATE} && break
          done
          kubectl wait --for=condition=complete --timeout=1800s -n pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} jobs/pullrequest-db-init-sandbox-${DATE}
          end=$(date +%s.%N)
          duration=`date -d@$(bc <<< "$end - $start") -u +%H:%M:%S`
          {
            echo "### :rocket: Run sandbox summary"
            echo "| Command                                                              | Duration  |"
            echo "| -------------------------------------------------------------------- | --------- |"
            echo "| flask sandbox -n ${{ inputs.sandbox }} ${{ inputs.sandbox-args }}    | $duration |"
          } >> $GITHUB_STEP_SUMMARY

      - name: "Publish Summary"
        run: |
          {
            echo "### :rocket: Deploy PRO summary"
            echo "| Results                              | Value |"
            echo "| ------------------------------------ | ----- |"
            echo "| [Pro] url                            |  ${{ needs.deploy-pro-on-firebase-preview-env.outputs.pro_url }} |"
            echo "| [Back] url                           |  https://backend-${{ needs.deploy-preview-env-init.outputs.resource_label }}.testing.passculture.team/ |"
            echo "| [BO] url                             |  https://backoffice-${{ needs.deploy-preview-env-init.outputs.resource_label }}.testing.passculture.team/ |"
          } >> $GITHUB_STEP_SUMMARY
