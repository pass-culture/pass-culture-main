name: "0 [on_dispatch] Deploy preview environment"

on:
  workflow_dispatch:
    inputs:
      sandbox:
        description: 'Sandbox installed'
        required: true
        default: 'empty'
        type: choice
        options:
          - empty
          - industrial

permissions: write-all

env:
  docker_registry: "europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry"

jobs:
  deploy-preview-env-init:
    name: 'Init'
    runs-on: ubuntu-latest
    outputs: 
      checksum-tag: ${{ steps.pcapi-tags.outputs.checksum-tag }}
      resource_label: ${{ steps.set_resource_label.outputs.resource_label }}
      pcapi-exists: ${{ steps.check-checksum-tag.outputs.tag-exists }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: false
          ref: ${{ github.ref_name }}
      - name: "Set resources label name"
        id: "set_resource_label"
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          BRANCH_SHA1=$(echo -n "${BRANCH_NAME}" | sha1sum | awk '{print $1}' | cut -c1-7)
          echo "resource_label=$BRANCH_SHA1" >> $GITHUB_OUTPUT
      - name: "Define pcapi image tags."
        id: pcapi-tags
        run: |
          DOCKER_IMAGE="${{ env.docker_registry }}/pcapi"
          API_CHECKSUM=`tar --sort=name --owner=0 --group=0 --mtime='UTC 2019-01-01' -cf - api | sha1sum | awk '{ print $1 }'`
          PUSH_TAGS="push-tags=$DOCKER_IMAGE:${{ github.sha }},$DOCKER_IMAGE:$API_CHECKSUM,$DOCKER_IMAGE:latest"
          API_TAG="checksum-tag=$API_CHECKSUM"
          echo "PUSH_TAGS=$PUSH_TAGS"
          echo "API_TAG=$API_TAG"
          echo $PUSH_TAGS >> "$GITHUB_OUTPUT"
          echo $API_TAG >> "$GITHUB_OUTPUT"
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: secrets
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
      - name: "OpenID Connect Authentication"
        id: "openid-auth"
        uses: "google-github-actions/auth@v2"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: "pcapi"
        id: check-checksum-tag
        run: ./.github/workflows/scripts/check-image-tag-exists.sh
        env:
          image: pcapi
          tag: ${{ steps.pcapi-tags.outputs.checksum-tag }}
          token: ${{ steps.openid-auth.outputs.access_token }}

  deploy-pro-on-firebase-preview-env:
    name: "[PRO] Deploy PR version for validation pr preview backend"
    needs: [deploy-preview-env-init]
    uses: ./.github/workflows/dev_on_workflow_deploy_pro_pr_version_generic.yml
    permissions:
      id-token: write
      contents: read
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
    with:
      ENV: "testing"
      CHANNEL: ${{ needs.deploy-preview-env-init.outputs.resource_label }}
      REF: "${{ github.ref }}"
      CACHE_BUCKET_NAME: "passculture-infra-prod-github-runner-cache"
      resource_label: ${{ needs.deploy-preview-env-init.outputs.resource_label }}

  build-pcapi:
    name: "[pcapi] build docker image."
    needs: [deploy-preview-env-init]
    if: needs.deploy-preview-env-init.outputs.pcapi-exists == 'false'
    uses: ./.github/workflows/dev_on_workflow_build_docker_image.yml
    with:
      ref: ${{ github.sha }}
      image: pcapi
      tag: ${{ needs.deploy-preview-env-init.outputs.checksum-tag }}
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  push-pcapi:
    name: "Push pcapi docker image to registry"
    needs: [deploy-preview-env-init, build-pcapi]
    if: needs.deploy-preview-env-init.outputs.pcapi-exists == 'false'
    uses: ./.github/workflows/dev_on_workflow_push_docker_image.yml
    with:
      image: pcapi
      commit-hash: ${{ github.sha }}
      checksum-tag: ${{ needs.deploy-preview-env-init.outputs.checksum-tag }}
      tag-latest: true
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}


  deploy-api:
    name: "Deploy pullrequest"
    runs-on: ubuntu-latest
    needs: [deploy-preview-env-init, push-pcapi, deploy-pro-on-firebase-preview-env]
    environment: pullrequest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "Echo resource label"
        run: echo "${{ needs.deploy-preview-env-init.outputs.resource_label }}"

      - uses: actions/checkout@v4.2.1
        with:
          ref: ${{github.ref}}
      - name: "Authentification to Google"
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      # Get github api token that will be used to commit and push api_version to pass-culture-deployment repository
      - name: "Get secrets (github)"
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            API_TOKEN_GITHUB:passculture-metier-ehp/passculture-main-sa-access-token
            DEPLOYMENT_SA:passculture-metier-ehp/pcapi-testing_deploy-service-account
            DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/gcp_metier_ehp_workload_identity_provider

      - name: "Authentification to Google"
        uses: 'google-github-actions/auth@v2'
        with:
          service_account : ${{ steps.secrets.outputs.DEPLOYMENT_SA }}
          workload_identity_provider: ${{ steps.secrets.outputs.DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER }}

      - name: "Connect to cluster"
        uses: pass-culture/common-workflows/actions/pc-k8s-connect@pc-k8s-connect/v0.1.0
        with:
          cluster_scope: metier
          cluster_environment: ehp
          api_token_github: ${{ steps.secrets.outputs.API_TOKEN_GITHUB }}

      # Checkout pass-culture-deployment repository containing pcapi helm value files
      - uses: actions/checkout@v4.2.1
        with:
          repository: pass-culture/pass-culture-deployment
          ref: master
          token: ${{ steps.secrets.outputs.API_TOKEN_GITHUB }}
          path: ./pass-culture-deployment

      # Get pcapi secrets from source code, to be passed later as a helmfile parameter.
      - name: "Generate pcapi secrets list"
        id: generate-pcapi-secrets-list
        run: |
          #Retrieve pcapi secrets list from source code
          PCAPI_SECRETS=$(cat api/src/pcapi/settings.py | grep "secrets_utils.getlist(" | awk -F'=' '{print $1}')
          PCAPI_SECRETS+=$(cat api/src/pcapi/settings.py | grep "secrets_utils.get(" | grep -oP '(?<=secrets_utils.get\(\").*?(?=\")')
          #Sort list
          PCAPI_SECRETS=$(echo $PCAPI_SECRETS | xargs -n1 | sort | xargs)
          #Transform list into helm readable parameter list (pattern: --set secrets={item1,item2,item3})
          PCAPI_SECRETS=secrets={$(echo $PCAPI_SECRETS | sed -r 's/ /,/g')}
          echo "PCAPI_SECRETS=$PCAPI_SECRETS" >> "$GITHUB_OUTPUT"

      # Create pullrequest namespace and externalsecret containing pgsql credentials 
      - name: "Installing Pullrequest deployment prerequisites"
        run: |
          set -e
          export PRID=${{ needs.deploy-preview-env-init.outputs.resource_label }}
          envsubst < .github/workflows/templates/pullrequest-namespace.yaml | kubectl apply -f -
          envsubst < .github/workflows/templates/pullrequest-pgsql-externalsecret.yaml | kubectl apply -f -

      # Executes helmfile templating and push results to render-manifests repository
      - name: "Generate and push rendered manifests"
        uses: pass-culture/common-workflows/actions/render-push-manifests@render-push-manifests/v2.4.6
        with:
          environment: pullrequest
          app_name: pcapi
          app_version: ${{ github.sha }}
          additional_args: ${{ steps.generate-pcapi-secrets-list.outputs.PCAPI_SECRETS }}
          registry_workload_identity_secret_name: passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
          registry_service_account_secret_name: passculture-metier-ehp/passculture-main-artifact-registry-service-account
          api_token_github_secret_name: passculture-metier-ehp/passculture-main-sa-access-token
          chart_values_repository: ""
          helmfile_path: "./pass-culture-deployment/helm/pcapi"
          rendered_manifests_target_branch: "pcapi/pullrequests"
          is_pull_request: true
          pro_url: ${{ needs.deploy-pro-on-firebase-preview-env.outputs.pro_url }}
          resource_label: ${{ needs.deploy-preview-env-init.outputs.resource_label }}

      # We have to reauthenticate to GCP because render-manifests removes previous authenthication
      - name: "Authentification to Google"
        uses: 'google-github-actions/auth@v2'
        with:
          service_account : ${{ steps.secrets.outputs.DEPLOYMENT_SA }}
          workload_identity_provider: ${{ steps.secrets.outputs.DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER }}

      - name: "Connect to cluster"
        uses: pass-culture/common-workflows/actions/pc-k8s-connect@pc-k8s-connect/v0.1.0
        with:
          cluster_scope: metier
          cluster_environment: ehp
          api_token_github: ${{ steps.secrets.outputs.API_TOKEN_GITHUB }}

      # Wait for ApplicationSet Controller to create applications
      # TODO : Change to webhook once appset controller ingress gets proper Health endpoint
      # PC-33270-pr-enable-argocd-applicationset-webhook
      # Releated issue : https://github.com/argoproj/argo-cd/pull/17691
      - name: "Wait for argocd applications to create"
        continue-on-error: true
        run: |
          set +e
          while true; do
            kubectl get application -n argocd | grep postgresql-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
            [[ $? -eq 0 ]] && break || sleep 5
          done
          while true; do
            kubectl get application -n argocd | grep redis-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
            [[ $? -eq 0 ]] && break || sleep 5
          done
          while true; do
            kubectl get application -n argocd | grep pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
            [[ $? -eq 0 ]] && break || sleep 5
          done
          {
            echo "### :rocket: Applications Argocd"
            echo "| Argocd       | Link |"
            echo "| ------------ | ---- |"
            echo "| Applications | https://argocd.ehp.passculture.team/applications?showFavorites=false&proj=pcapi-pullrequest&sync=&autoSync=&health=&namespace=&cluster=&labels=&search=pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} |"
          } >> $GITHUB_STEP_SUMMARY

      - name: "Namespace monitoring"
        run: |
          {
            echo "### :rocket: Pullrequest Namespace monitoring"
            echo "| Namespace                                        | Link |"
            echo "| ------------------------------------------------ | ---- |"
            echo "| pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} | https://monitoring.ehp.passculture.team/d/pods-dashboard/k8s-resource-monitoring-pods?orgId=1&var-Filters=namespace%7C%3D%7Cpcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}&from=now-1h&to=now |"
          } >> $GITHUB_STEP_SUMMARY

      - name: "Sync ArgoCD Pgsql application"
        uses: pass-culture/common-workflows/actions/argocd-sync@argocd-sync/v0.7.0
        with:
          app_name: postgresql-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
          argocd_app_wait: true

      - name: "Sync ArgoCD Redis application"
        uses: pass-culture/common-workflows/actions/argocd-sync@argocd-sync/v0.7.0
        with:
          app_name: redis-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
          argocd_app_wait: true

      - name: "Sync ArgoCD pcapi configmaps and secrets"
        uses: pass-culture/common-workflows/actions/argocd-sync@argocd-sync/v0.7.0
        with:
          app_name: pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
          argocd_app_wait: false
          prune: true
          extra_flags: --resource ':ConfigMap:*' --resource '*:ExternalSecret:*'

      - name: "Init local database"
        run: |
          set -e
          VERSION="${{ github.sha }}"
          export ENVIRONMENT="pullrequest"
          IMAGE="europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi"
          export IMAGE="${IMAGE}:${VERSION}"
          export PRID=${{ needs.deploy-preview-env-init.outputs.resource_label }}

          echo "=== exec: flask install_postgres_extensions"
          export DATE=$(date +"%Y-%m-%d-%H-%M-%S")
          start=$(date +%s.%N)
          envsubst < .github/workflows/templates/pullrequest-db-init.yaml | kubectl -n pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} apply -f -
          while true;
          do
            kubectl logs -n pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} -f jobs/pullrequest-db-init-${DATE} && break
          done
          kubectl wait --for=condition=complete --timeout=300s -n pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} jobs/pullrequest-db-init-${DATE}
          end=$(date +%s.%N)
          duration=`date -d@$(bc <<< "$end - $start") -u +%H:%M:%S`
          {
            echo "### :rocket: Init local database summary"
            echo "| Command                              | Duration |"
            echo "| ------------------------------------ | ----- |"
            echo "| flask install_postgres_extensions    |  $duration |"
          } >> $GITHUB_STEP_SUMMARY

      - name: "Sync ArgoCD pcapi application"
        uses: pass-culture/common-workflows/actions/argocd-sync@argocd-sync/v0.7.0
        with:
          app_name: pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }}
          argocd_app_wait: true
          prune: true

      - name: "Run sandbox"
        if: inputs.sandbox != 'empty'
        run: |
          set -e
          VERSION="${{ github.sha }}"
          export ENVIRONMENT="pullrequest"
          IMAGE="europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi"
          export IMAGE="${IMAGE}:${VERSION}"
          export PRID=${{ needs.deploy-preview-env-init.outputs.resource_label }}

          echo "=== exec: flask sandbox -n ${{ inputs.sandbox }}"
          export DATE=$(date +"%Y-%m-%d-%H-%M-%S")
          start=$(date +%s.%N)
          envsubst < .github/workflows/templates/pullrequest-db-init-sandbox.yaml | kubectl -n pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} apply -f -
          while true;
          do
          kubectl logs -n pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} -f jobs/pullrequest-db-init-sandbox-${DATE} && break
          done
          kubectl wait --for=condition=complete --timeout=1800s -n pcapi-pr-${{ needs.deploy-preview-env-init.outputs.resource_label }} jobs/pullrequest-db-init-sandbox-${DATE}
          end=$(date +%s.%N)
          duration=`date -d@$(bc <<< "$end - $start") -u +%H:%M:%S`
          {
            echo "| flask sandbox -n industrial    |  $duration |"
          } >> $GITHUB_STEP_SUMMARY
