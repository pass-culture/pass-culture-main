name: "2 [on_schedule] tag and deploy staging"

on:
  schedule:
    # Uncomment this before monday 15-09 : 10h30 French time
    # # Winter time (CET, UTC+1): from start of november to end of March
    # # Monday and Wednesday 10:30 in France = 09:30 UTC
    # - cron: '30 9 * 1-3,11-12 1,3'

    # # Summer time (CEST, UTC+2): from start of April to end of October
    # # Monday and Wednesday 10:30 in France = 08:30 UTC
    # - cron: '30 8 * 4-10 1,3'

    # Ma 09/09 - 8:30 UTC 
    - cron: '30 8 9 9 *'

    # Je 11/09 - 12:00 UTC
    - cron: '0 12 11 9 *'

permissions: write-all

jobs:
  get-version-and-trigger-release:
    runs-on: ubuntu-latest
    outputs:
      releaseNumber: ${{ steps.version.outputs.releaseNumber }}
      versionName: ${{ steps.version.outputs.versionName }}
      commitHash: ${{ steps.rc_commit.outputs.commitHash }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --tags

      - name: Get releaseNumber major version
        id: version
        run: |
          # Get all with format vX.X.X, sort them and get the last one
          latest_tag=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1)

          # Extract major version
          major=$(echo "$latest_tag" | sed -E 's/^v([0-9]+)\..*/\1/')

          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "major=$major" >> $GITHUB_OUTPUT

          releaseNumber=$((major + 1))
          echo "releaseNumber=$releaseNumber" >> $GITHUB_OUTPUT

          versionName="v${releaseNumber}.0.0"
          echo "versionName=$versionName" >> $GITHUB_OUTPUT

      - name: Get commit hash from RC tag
        id: rc_commit
        run: |
          rc_tag=$(git tag -l "rc" | tail -n 1)
          if [ -z "$rc_tag" ]; then
            echo "Pas de tag RC trouvé"
            exit 1
          fi
          commit_hash=$(git rev-list -n 1 "$rc_tag")
          echo "commitHash=$commit_hash" >> $GITHUB_OUTPUT

  create-staging-release:
    needs: get-version-and-trigger-release
    uses: ./.github/workflows/dev_on_call_release_build.yml
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
    with:
      releaseNumber: ${{ needs.get-version-and-trigger-release.outputs.releaseNumber }}
      commitHash: ${{ needs.get-version-and-trigger-release.outputs.commitHash }}

  deploy-staging:
    name: "Deploy on staging environnement"
    needs: [create-staging-release, get-version-and-trigger-release]
    uses: ./.github/workflows/dev_on_workflow_deploy.yml
    with:
      environment: staging
      app_version: ${{ needs.get-version-and-trigger-release.outputs.versionName }}
      cluster_scope: metier
      cluster_environment: ehp
      workload_identity_provider_secret_name: gcp_metier_ehp_workload_identity_provider
      apply_algolia_config: true
      deploy_api: true
      deploy_pro: true
      doc-api-entrypoint: "api/documentation"
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      PASSCULTURE_GITHUB_ACTION_APP_ID: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_ID }}
      PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY }}

  slack-notification:
    name: "Send Slack notification"
    runs-on: ubuntu-22.04
    if: always()
    needs: [deploy-staging, get-version-and-trigger-release]
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
      - name: "Post outcome on #alertes-deploiement"
        if: always()
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{vars.SLACK_ALERTES_DEPLOIEMENT_CHANNEL_ID}}
            attachments:
              - color: "${{ fromJSON('["#36a64f", "#A30002"]')[ env.WORKFLOW_CONCLUSION == 'failure'] }}"
                blocks:
                  - type: "context"
                    elements:
                      - type: "image"
                        image_url: "https://github.com/${{github.actor}}.png"
                        alt_text: "image de profil Github de ${{github.actor}}"
                      - type: "mrkdwn"
                        text: "*${{github.actor}}*"
                  - type: "section"
                    text:
                      type: "mrkdwn"
                      text: "Le <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|déploiement> de la version `v${{ needs.version.outputs.APP_VERSION }}` a ${{ fromJSON('["réussi", "échoué"]')[env.WORKFLOW_CONCLUSION != 'success'] }} sur `${{ github.event.inputs.target_environment }}`"
      - name: "Post success on #shérif"
        if: env.WORKFLOW_CONCLUSION == 'success'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{vars.SLACK_SHERIF_CHANNEL_ID}}
            attachments:
              - color: "#36A64F"
                blocks:
                  - type: "context"
                    elements:
                      - type: "image"
                        image_url: "https://github.com/${{github.actor}}.png"
                        alt_text: "image de profil Github de ${{github.actor}}"
                      - type: "mrkdwn"
                        text: "*${{github.actor}}*"
                  - type: "section"
                    text:
                      type: "mrkdwn"
                      text: "La version `v${{ needs.get-version-and-trigger-release.outputs.versionName }}` a été <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|déployée> en `staging`"
