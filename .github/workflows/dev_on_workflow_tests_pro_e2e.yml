name: "3 [on_workflow] Tests E2E"

on:
  workflow_call:
    inputs:
      ENV:
        type: string
        required: true
      image:
        type: string
        required: false
        default: pcapi-tests
      tag:
        type: string
        required: true
      CACHE_BUCKET_NAME:
        type: string
        required: true
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_EHP_SERVICE_ACCOUNT:
        required: true

env:
  registry: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry

defaults:
  run:
    working-directory: pro

jobs:
  install:
    name: "Install E2E ðŸ”§"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: technote-space/workflow-conclusion-action@v3

      - uses: actions/setup-node@v4
        with:
          node-version-file: "pro/.nvmrc"

      - name: "Cache the node_modules"
        id: "yarn-modules-cache"
        uses: pass-culture-github-actions/cache@v1.0.0
        with:
          compression-method: "gzip"
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            ~/.cache/Cypress
            **/node_modules
          key: v1-yarn-pro-cypress-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-pro-cypress-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: "Install dependencies (3 attempts)"
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 2
          max_attempts: 3
          command: |
            cd pro
            yarn install --immutable

      - name: "Build vite application"
        run: yarn build:${{ inputs.ENV }}

      - name: Save build folder
        uses: actions/upload-artifact@v4
        with:
          name: build
          if-no-files-found: error
          path: pro/build

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Cache Poetry
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ hashFiles('**/poetry.lock') }}

  setup:
    name: Setup E2E ðŸ”§
    runs-on: ubuntu-24.04
    outputs:
      # will contain a json string with an array of n elements, each being a string of spec files delimited by ,
      test-chunks: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
    steps:
      - uses: actions/checkout@v4
      - id: set-test-chunks
        name: Set Chunks
        # get all spec files from the e2e directory, group them to be at most 3 at a time and transform them to json
        # this will output something like ["cypress/integration/test1.spec.ts, cypress/integration/test2.spec.ts, cypress/integration/test3.spec.ts", "cypress/integration/test4.spec.ts,etc.."]
        run: echo "test-chunks=$(find cypress/e2e -type f -name "*.cy.ts" | xargs -n4 | tr ' ' ',' | jq -R . | jq -s -cM .)" >> $GITHUB_OUTPUT

  cypress-run:
    name: "Run E2E"
    runs-on: ubuntu-24.04
    needs: [setup, install]
    strategy:
      # don't fail the entire matrix on failure
      fail-fast: false
      max-parallel: 5
      matrix:
        chunk: ${{ fromJson(needs.setup.outputs['test-chunks']) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: "Get Secret"
        id: secrets
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
            CYPRESS_CLOUD_RECORD_KEY:passculture-metier-ehp/e2e-tests-pro-cypress-cloud-record-key
            CYPRESS_CLOUD_PROJECT_ID:passculture-metier-ehp/e2e-tests-pro-cypress-cloud-project-id

      - uses: actions/setup-node@v4
        with:
          node-version-file: "pro/.nvmrc"

      - uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: "2.23.3"

      - name: "Fix local permissions"
        run: sudo chown -R $PCAPI_UID:$PCAPI_GID .
        working-directory: api
        env:
          PCAPI_UID: 1000
          PCAPI_GID: 1000

      - name: "Install dependencies (3 attempts)"
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 2
          max_attempts: 3
          command: |
            cd pro
            yarn install --immutable

      - name: "OpenID Connect Authentication"
        id: openid-auth
        uses: "google-github-actions/auth@v2"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER  }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}

      - name: "Docker login"
        id: docker-login
        uses: "docker/login-action@v3"
        with:
          registry: "europe-west1-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.openid-auth.outputs.access_token }}"

      - name: "Compute docker image name:tag"
        id: compute-image-name
        run: |
          echo "image_name=${{ env.registry }}/${{ inputs.image }}:${{ inputs.tag }}" | tee -a ${GITHUB_OUTPUT}
          echo "::notice:: Running e2e-tests with ${{ env.registry }}/${{ inputs.image }}:${{ inputs.tag }}"

      - name: "Run postgres and redis server"
        run: docker-compose -f ../docker-compose-backend.yml up postgres redis -d

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"

      - name: "Download artifact"
        if: ${{ inputs.tag != 'latest' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.image }}-${{ inputs.tag }}.tar
          path: ${{ runner.temp }}

      - name: "Run API server"
        run: |
          if [ "${{ inputs.tag }}" != "latest" ]; then
            docker load --input ${{ runner.temp }}/${{ inputs.image }}-${{ inputs.tag }}.tar
          fi
          docker run \
            --name pc-api \
            --workdir /usr/src/app \
            --volume ./../api:/usr/src/app \
            --env-file ./../env_file \
            --tty \
            --detach \
            --network pass-culture-main_db_nw \
            --publish 5001:5001 \
            --publish 10002:10002 \
            --entrypoint bash \
            ${{ steps.compute-image-name.outputs.image_name }} \
            -c "set -e ; flask install_postgres_extensions ; alembic upgrade pre@head ; alembic upgrade post@head ; flask install_data ; FLASK_USE_RELOADER=0 python src/pcapi/app.py"

      - name: "Wait for migrations to be run"
        uses: iFaxity/wait-on-action@v1
        with:
          resource: http://localhost:5001/health/api
          timeout: 120000

      - name: Download the build folder
        uses: actions/download-artifact@v4
        with:
          name: build
          path: pro/build

      - name: "Serve vite preview"
        run: yarn serve &

      # Using wait-on does not work well for this service, we use curl
      - name: "Wait for front-end to listen"
        run: |
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3001)" != "200" ]]; do sleep 5; done' || false

      - name: "Cypress run"
        uses: cypress-io/github-action@v6
        with:
          wait-on: "http://localhost:5001/health/api,http://localhost:5001/health/database"
          wait-on-timeout: 120 # 2 minutes is enough for API/DB to be ready
          working-directory: pro
          browser: chrome
          config-file: cypress/cypress.config.ts
          env: TAGS="@P0"
          spec: ${{ matrix.chunk }}
          record: ${{ github.ref == 'refs/heads/master' }} # for Cypress
        env:
          CYPRESS_RECORD_KEY: ${{ steps.secrets.outputs.CYPRESS_CLOUD_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ steps.secrets.outputs.CYPRESS_CLOUD_PROJECT_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #DEBUG: 'cypress:server:socket-base,cypress:server:socket-e2e'
          # see https://github.com/cypress-io/github-action/issues/1408#issuecomment-2744425883
          NODE_OPTIONS: "--no-experimental-require-module --no-experimental-detect-module"

      - name: "Move cypress videos"
        if: always() && failure() && github.ref != 'refs/heads/master' # useless on master bc Cypress Cloud
        run: |
          mkdir -p cypress/videos/${{ github.ref }}/${{ github.sha }} && \
          mv cypress/videos/*.mp4 cypress/videos/${{ github.ref }}/${{ github.sha }}/
      - name: "Archive E2E results"
        if: always() && failure() && github.ref != 'refs/heads/master' # useless on master bc Cypress Cloud
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: "pro/cypress/videos"
          destination: "${{ inputs.CACHE_BUCKET_NAME }}/pro/cypress/videos/e2e-artifacts"

      - name: "Show pcapi log when it fails"
        if: failure()
        run: docker logs pc-api

  notify-cypress-failure:
    name: "Notification of Cypress tests failure"
    needs: cypress-run
    if: always() && needs.cypress-run.result == 'failure' && github.ref == 'refs/heads/master'
    uses: ./.github/workflows/dev_on_workflow_post_slack_message.yml
    with:
      channel: ${{vars.SLACK_DEV_CHANNEL_ID}}
      color: "#A30002"
      message: ":github-failure: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|Pro E2E Tests> a Ã©chouÃ© sur `master`"
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
