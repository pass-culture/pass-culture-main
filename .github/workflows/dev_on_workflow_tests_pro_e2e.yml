name: E2E Tests

on:
  workflow_call:
    inputs:
      image:
        type: string
        required: false
        default: pcapi
      tag:
        type: string
        required: true
      CACHE_BUCKET_NAME:
        type: string
        required: true
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_EHP_SERVICE_ACCOUNT:
        required: true

env:
  registry: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry

defaults:
  run:
    working-directory: pro

jobs:
  # Install job that prepares the build artifacts (dist)
  install:
    name: "Prepare Build Artifacts"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4.2.2

      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: "Docker login"
        uses: "docker/login-action@v3"
        with:
          registry: "europe-west1-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.openid-auth.outputs.access_token }}"

      - name: "Compute docker image name:tag"
        run: |
          echo "image_name=${{ env.registry }}/${{ inputs.image }}:${{ inputs.tag }}" | tee -a ${GITHUB_OUTPUT}

      - name: "Download artifact"
        if: ${{ inputs.tag != 'latest' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.image }}-${{ inputs.tag }}.tar
          path: ${{ runner.temp }}

      - name: "Run API server"
        run: |
          if [ "${{ inputs.tag }}" != "latest" ]; then
            docker load --input ${{ runner.temp }}/${{ inputs.image }}-${{ inputs.tag }}.tar
          fi
          docker run \
            --name pc-api \
            --workdir /usr/src/app \
            --volume ./../api:/usr/src/app \
            --env-file ./../env_file \
            --tty \
            --detach \
            --network pass-culture-main_db_nw \
            --publish 5001:5001 \
            --entrypoint bash \
            ${{ steps.compute-image-name.outputs.image_name }} \
            -c "flask install_postgres_extensions ; alembic upgrade pre@head ; alembic upgrade post@head ; flask install_data ; python src/pcapi/app.py"

      - name: "Build vite application"
        run: yarn build:development

      - name: "Upload dist artifact"
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./dist

  # Worker job: "cypress-run" that will run Cypress tests in parallel (with containers 1 to 5)
  cypress-run:
    name: "Run Cypress Tests (Parallel with Containers)"
    runs-on: ubuntu-24.04
    needs: install # Ensures the "install" job is done first
    strategy:
      matrix:
        containers: [1, 2, 3, 4, 5] # Parallelization with 5 containers
      fail-fast: false # Don't fail the entire matrix if one container fails

    steps:
      - uses: actions/checkout@v4.2.2

      # Download the artifact (dist directory) from the install job
      - name: "Download dist artifact"
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./dist

      # Setup Node and Cypress
      - uses: actions/setup-node@v4
        with:
          node-version: "16" # Adjust if you need a specific Node.js version

      - name: "Install dependencies"
        run: |
          yarn install --immutable

      - name: "Run Cypress tests"
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          spec: "cypress/e2e/*"
          config-file: cypress/cypress.config.ts
          record: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Log container ID"
        run: echo "Running tests on container ${{ matrix.containers }}"
