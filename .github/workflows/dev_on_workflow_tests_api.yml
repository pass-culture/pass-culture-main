name: "3 [on_workflow/API] Tests"

on:
  workflow_call:
    inputs:
      image:
        type: string
        required: false
        default: pcapi-tests
      tag:
        type: string
        required: true
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_EHP_SERVICE_ACCOUNT:
        required: true

env:
  registry: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry

defaults:
  run:
    working-directory: api

jobs:
  quality-checks:
    name: "Quality checks"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - name: "Compute docker image name:tag"
        id: compute-image-name
        run: |
          echo "image_name=${{ env.registry }}/${{ inputs.image }}:${{ inputs.tag }}" | tee -a ${GITHUB_OUTPUT}
          echo "::notice:: Running tests api with ${{ env.registry }}/${{ inputs.image }}:${{ inputs.tag }}"
      - name: "Download artifact"
        if: ${{ inputs.tag }} != 'latest'
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.image }}-${{ inputs.tag }}.tar
      - name: "Docker load artifact."
        if: ${{ inputs.tag }} != 'latest'
        run: |
          docker load --input $GITHUB_WORKSPACE/${{ inputs.image }}-${{ inputs.tag }}.tar
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: secrets
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
      - name: "OpenID Connect Authentication"
        id: openid-auth
        uses: "google-github-actions/auth@v2"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER  }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: "Docker login"
        id: docker-login
        uses: "docker/login-action@v1"
        with:
          registry: "europe-west1-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.openid-auth.outputs.access_token }}"
      - name: "Show installed Python packages"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          run: pip freeze
      - name: "Check imports are well organized with isort"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          run: isort . --check-only
      - name: "Check code is well formatted with black"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          run: black . --check
      - name: "Run mypy"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          run: mypy src
      - name: "Slack Notification"
        if: ${{ failure() && github.ref == 'refs/heads/master'  }}
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # channel #dev
          channel-id: "CPZ7U1CNP"
          payload: |
            {
            "attachments": [
              {
                "mrkdwn_in": ["text"],
                "color": "#A30002",
                "author_name": "${{github.actor}}",
                "author_link": "https://github.com/${{github.actor}}",
                "author_icon": "https://github.com/${{github.actor}}.png",
                "title": "Api tests",
                "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                "text": "Les tests quality-checks échouent sur `master` :boom:"
              }
            ],
            "unfurl_links": false,
            "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}

  pylint-check:
    name: "Pylint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - name: "Compute docker image name:tag"
        id: compute-image-name
        run: echo "image_name=${{ env.registry }}/${{ inputs.image }}:${{ inputs.tag }}" | tee -a ${GITHUB_OUTPUT}
      - name: "Download artifact"
        if: ${{ inputs.tag }} != 'latest'
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.image }}-${{ inputs.tag }}.tar
      - name: "Docker load artifact."
        if: ${{ inputs.tag }} != 'latest'
        run: |
          docker load --input $GITHUB_WORKSPACE/${{ inputs.image }}-${{ inputs.tag }}.tar
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: secrets
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
      - name: "OpenID Connect Authentication"
        id: openid-auth
        uses: "google-github-actions/auth@v2"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER  }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: "Docker login"
        id: docker-login
        uses: "docker/login-action@v1"
        with:
          registry: "europe-west1-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.openid-auth.outputs.access_token }}"
      - name: "Show installed Python packages"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          run: pip freeze
      - name: "Run pylint"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          run: pylint src tests --jobs=15
      - name: "Slack Notification"
        if: ${{ failure() && github.ref == 'refs/heads/master'  }}
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # channel #dev
          channel-id: "CPZ7U1CNP"
          payload: |
            {
            "attachments": [
              {
                "mrkdwn_in": ["text"],
                "color": "#A30002",
                "author_name": "${{github.actor}}",
                "author_link": "https://github.com/${{github.actor}}",
                "author_icon": "https://github.com/${{github.actor}}.png",
                "title": "Api tests",
                "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                "text": "Les tests pylint-checks échouent sur `master` :boom:"
              }
            ],
            "unfurl_links": false,
            "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}

  tests-database:
    name: "Test database schema"
    env:
      RUN_ENV: tests
      DATABASE_URL_TEST: postgresql://pytest:pytest@postgres:5432/pass_culture
      REDIS_URL: redis://redis:6379
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:15-3.4-alpine
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: pytest
          POSTGRES_PASSWORD: pytest
          POSTGRES_DB: pass_culture
    steps:
      - uses: actions/checkout@v4.1.7
        with:
          # On a feature branch, we must fetch the whole history to
          # find the common ancestor with master (see `git merge-base`
          # below). On master, the latest commit is enough.
          fetch-depth: ${{ github.ref == 'master' && 1 || 0 }}
          # By default, on a feature branch, the GitHub Action checks
          # out a merge commit of the pull request (i.e. an artificial
          # commit that would be the result of the merge of the
          # feature branch on top of the master branch). We don't want
          # that, we want the latest commit of the branch.
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      - name: "Checkout HEAD (on master) or the parent of the first commit (pull request)"
        run: |
          if [[ "${{ github.ref }}" == "master" ]];
          then SHA="HEAD"
          else
            git fetch origin master
            SHA=$(git merge-base HEAD origin/master)
          fi
          git checkout ${SHA}
      - name: "Get base alembic pre and post heads"
        id: "base_heads"
        run: |
          pre=$(head --lines 1 alembic_version_conflict_detection.txt | cut --fields 1 --delimiter " ")
          post=$(tail --lines 1 alembic_version_conflict_detection.txt | cut --fields 1 --delimiter " ")
          echo "pre=$pre" >> $GITHUB_OUTPUT
          echo "post=$post" >> $GITHUB_OUTPUT
      - name: "Compute docker image name:tag"
        id: compute-image-name
        run: echo "image_name=${{ env.registry }}/${{ inputs.image }}:${{ inputs.tag }}" | tee -a ${GITHUB_OUTPUT}
      - name: "Download artifact"
        if: ${{ inputs.tag }} != 'latest'
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.image }}-${{ inputs.tag }}.tar
      - name: "Docker load artifact."
        if: ${{ inputs.tag }} != 'latest'
        run: |
          docker load --input $GITHUB_WORKSPACE/${{ inputs.image }}-${{ inputs.tag }}.tar
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: secrets
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
      - name: "OpenID Connect Authentication"
        id: openid-auth
        uses: "google-github-actions/auth@v2"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER  }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: "Docker login"
        id: docker-login
        uses: "docker/login-action@v1"
        with:
          registry: "europe-west1-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.openid-auth.outputs.access_token }}"
      - name: "Check for alembic multiple heads"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          shell: bash
          run: |
            LINE_COUNT=$(wc -l <<< "$(alembic heads)")
            echo "Found "$LINE_COUNT" head(s)"
            if [ ${LINE_COUNT} -ne 2 ]; then echo "There must be two heads";exit 1;fi
      - name: "Check database and model are aligned"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST
          run: |
            set -e
            flask install_postgres_extensions
            alembic upgrade pre@head
            alembic upgrade post@head
            flask install_data
            alembic check
      - name: "Check that downgrade scripts are correctly written"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST
          run: |
            set -e
            alembic downgrade post@f460dc2c9f93
            alembic downgrade pre@f460dc2c9f93
            alembic upgrade pre@head
            alembic upgrade post@head
      - name: "Lint migration upgrades"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST
          run: |
            set -uo pipefail
            status_code=0
            alembic upgrade ${{ steps.base_heads.outputs.pre }}:pre@head --sql |
              sed '/squawk:ignore-next-statement/,/;$/d' |
              squawk --config .squawk.toml ||
              status_code=1
            alembic upgrade ${{ steps.base_heads.outputs.post }}:post@head --sql |
              sed '/squawk:ignore-next-statement/,/;$/d' |
              squawk --config .squawk.toml ||
              status_code=1
            YELLOW='\033[0;33m'
            RESET='\033[0m'
            if [ ${status_code} -ne 0 ];then
              echo -e "${YELLOW}Hint: An SQL statement can be ignored if preceded by \`-- squawk:ignore-next-statement\`.${RESET}" 
              echo -e "${YELLOW}See https://github.com/pass-culture/pass-culture-main/blob/master/api/src/pcapi/alembic/CONTRIBUTING.md#lint${RESET}";
            fi
            exit $status_code
      - name: "Lint migration downgrades"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST
          run: |
            set -uo pipefail
            status_code=0
            alembic downgrade pre@head:${{ steps.base_heads.outputs.pre }} --sql |
              sed '/squawk:ignore-next-statement/,/;$/d' |
              squawk --config .squawk.toml ||
              status_code=1
            alembic downgrade post@head:${{ steps.base_heads.outputs.post }} --sql |
              sed '/squawk:ignore-next-statement/,/;$/d' |
              squawk --config .squawk.toml ||
              status_code=1
            exit $status_code
      - name: "Slack Notification"
        if: ${{ failure() && github.ref == 'refs/heads/master'  }}
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # channel #dev
          channel-id: "CPZ7U1CNP"
          payload: |
            {
            "attachments": [
              {
                "mrkdwn_in": ["text"],
                "color": "#A30002",
                "author_name": "${{github.actor}}",
                "author_link": "https://github.com/${{github.actor}}",
                "author_icon": "https://github.com/${{github.actor}}.png",
                "title": "Api tests",
                "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                "text": "Les tests database échouent sur `master` :boom:"
              }
            ],
            "unfurl_links": false,
            "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}

  pytest:
    name: "Pytest"
    env:
      RUN_ENV: tests
      DATABASE_URL_TEST: postgresql://pytest:pytest@postgres:5432/pass_culture
      REDIS_URL: redis://redis:6379
      # Remove this environment variable when SQLAlchemy 2.0 
      # is successfully bump
      SQLALCHEMY_WARN_20: 1
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pytest_args:
          [
            "tests/core/bookings tests/core/offers tests/core/finance",
            "tests/core --ignore=tests/core/bookings --ignore=tests/core/offers --ignore=tests/core/finance",
            "tests/routes -m 'not backoffice'",
            "tests --ignore=tests/core --ignore=tests/routes",
            "tests/routes/backoffice -m 'backoffice'",
          ]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgis/postgis:15-3.4-alpine
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: pytest
          POSTGRES_PASSWORD: pytest
          POSTGRES_DB: pass_culture
    steps:
      - uses: actions/checkout@v4.1.7
      - name: "Compute docker image name:tag"
        id: compute-image-name
        run: echo "image_name=${{ env.registry }}/${{ inputs.image }}:${{ inputs.tag }}" | tee -a ${GITHUB_OUTPUT}
      - name: "Download artifact"
        if: ${{ inputs.tag }} != 'latest'
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.image }}-${{ inputs.tag }}.tar
      - name: "Docker load artifact."
        if: ${{ inputs.tag }} != 'latest'
        run: |
          docker load --input $GITHUB_WORKSPACE/${{ inputs.image }}-${{ inputs.tag }}.tar
      - name: "Authentification to Google"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: secrets
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
      - name: "OpenID Connect Authentication"
        id: openid-auth
        uses: "google-github-actions/auth@v2"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER  }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: "Docker login"
        id: docker-login
        uses: "docker/login-action@v1"
        with:
          registry: "europe-west1-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.openid-auth.outputs.access_token }}"
      - name: "Setup database"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST
          run: |
            set -e
            flask install_postgres_extensions
            alembic upgrade pre@head
            alembic upgrade post@head
            flask install_data
      - name: "Mount a Volume with pcapi rights"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST -e REDIS_URL -v ${{ runner.workspace }}/pass-culture-main/api/tests/:/tests -u 0
          run: |
            echo "Changing owner and group fort directory test"
            chown -R pcapi:pcapi /tests
      - name: "Run tests"
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.compute-image-name.outputs.image_name }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST -e REDIS_URL -e SQLALCHEMY_WARN_20 -v ${{ runner.workspace }}/pass-culture-main/api/tests/:/tests
          run: |
            pytest ${{ matrix.pytest_args }} --durations=10 --junitxml='/tests/junit.xml' -vv
      - name: "Publish Test Report"
        uses: mikepenz/action-junit-report@v4
        if: always() # always run even if the previous step fails
        with:
          report_paths: "${{ runner.workspace }}/pass-culture-main/api/tests/junit.xml"
          check_name: "Pytest Report"
          fail_on_failure: true
      - name: "Slack Notification"
        if: ${{ failure() && github.ref == 'refs/heads/master'  }}
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # channel #dev
          channel-id: "CPZ7U1CNP"
          payload: |
            {
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "color": "#A30002",
                  "author_name": "${{github.actor}}",
                  "author_link": "https://github.com/${{github.actor}}",
                  "author_icon": "https://github.com/${{github.actor}}.png",
                  "title": "Api tests",
                  "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                  "text": "Les tests pytest échouent sur `master` :boom:"
                }
              ],
              "unfurl_links": false,
              "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}
