name: Tests E2E pro
on:
  workflow_call:
    inputs:
      CACHE_BUCKET_NAME:
        type: string
        required: true

env:
  region: europe-west1
  tests_docker_image: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi:${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}


defaults:
  run:
    working-directory: pro

permissions:
  contents: "read"
  id-token: "write"

jobs:
  tests-pro-e2e-tests:
    name: "E2E tests"
    env:
      RUN_ENV: tests
      DATABASE_URL_TEST: postgresql://pytest:pytest@postgres:5432/pass_culture
      REDIS_URL: redis://redis:6379
    runs-on: [self-hosted, linux, x64]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: cimg/postgres:12.9-postgis
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: pytest
          POSTGRES_PASSWORD: pytest
          POSTGRES_DB: pass_culture

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: "pro/.nvmrc"
      - name: Authentification to Google
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: Get Secret
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v1'
        with:
          secrets: |-
            INFRA_PROD_GCP_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/passculture-main-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token

      - id: openid-auth
        name: "OpenID Connect Authentication"
        uses: "google-github-actions/auth@v1"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.INFRA_PROD_GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - uses: docker/login-action@v2
        with:
          registry: "${{ env.region }}-docker.pkg.dev"
          username: oauth2accesstoken
          password: ${{ steps.openid-auth.outputs.access_token }}
      - run: docker pull ${{ env.tests_docker_image }}
      - name: Setup database
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST
          run: |
            set -e
            flask install_postgres_extensions
            alembic upgrade pre@head
            alembic upgrade post@head
            flask install_data
      - name: start api server
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST -e REDIS_URL -d
          run: |
            set -e
            python src/pcapi/app.py
      # - name: Wait for migrations to be run
      #   uses: iFaxity/wait-on-action@v1
      #   with:
      #     resource: http://localhost:5001/health/api
      #     timeout: 30000  
      - name: Load sandbox
        run: ../pc sandbox -n industrial
      # Doc : https://github.com/cypress-io/github-action
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          build: yarn build:development
          start: yarn serve
          config: baseUrl=http://localhost:3001
          browser: chrome
          wait-on: "http://localhost:3001,http://localhost:5001/health/api,http://localhost:5001/health/database"
          wait-on-timeout: 600
          working-directory: pro
      - name: Archive E2E results
        if: always()
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: "pro/cypress/videos"
          destination: "${{ inputs.CACHE_BUCKET_NAME }}/pro/cypress/videos/e2e-artifacts"

  notification:
    name: "Notification"
    runs-on: [self-hosted, linux, x64]
    if: ${{ failure() && github.ref == 'refs/heads/master' }}
    needs:
      - tests-pro-e2e-tests
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - name: Authentification to Google
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: Get Secret
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v1'
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token

      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # channel #dev
          channel-id: "CPZ7U1CNP"
          payload: |
            {
            "attachments": [
              {
                "mrkdwn_in": ["text"],
                "color": "#A30002",
                "author_name": "${{github.actor}}",
                "author_link": "https://github.com/${{github.actor}}",
                "author_icon": "https://github.com/${{github.actor}}.png",
                "title": "Tests pro E2E",
                "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                "text": "Les tests pro E2E Ã©chouent sur `master` :boom:"
              }
            ],
            "unfurl_links": false,
            "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}
