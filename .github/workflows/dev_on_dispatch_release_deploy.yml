name: "0 [on_dispatch/CD] Deploy release or hotfix"

run-name: "Deploy ${{ github.ref }} to ${{ github.event.inputs.target_environment }} by @${{ github.actor }}"

on:
  workflow_dispatch:
    inputs:
      target_environment:
        type: choice
        description: "Environnement cible"
        required: true
        options:
          - staging
          - production
          - testing

permissions: write-all

jobs:
  check-workflow-ref:
    name: "Check workflow ref"
    runs-on: ubuntu-22.04
    steps:
      - name: "Check workflow ref"
        run: |
          echo "Deploying to ${{ github.event.inputs.target_environment }} from ref: ${{ github.ref }}"
          if ! [[ ${{ github.ref }} == refs\/tags\/v* ]]; then
            echo "This workflow can only be triggered from a tag (starting with a 'v')"
            exit 1
          fi

  ask-for-review-on-slack:
    name: "Ask for deployment review on Slack"
    needs: check-workflow-ref
    continue-on-error: true
    uses: ./.github/workflows/dev_on_workflow_post_slack_message.yml
    with:
      channel_id: ${{ vars.SLACK_SHERIF_CHANNEL_ID }}
      color: "#D4AD3B"
      message: ":github-pending: Un <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|déploiement> de `${{ github.ref_name }}` a été demandé sur `${{ github.event.inputs.target_environment }}`"


  version:
    name: "Version"
    needs: check-workflow-ref
    # `deploy` is an artificial environment with protection rules, which allows a single required review instead of many
    environment: ${{ fromJSON('["deploy", "testing"]')[github.event.inputs.target_environment == 'testing'] }}
    runs-on: ubuntu-22.04
    outputs:
      APP_VERSION: ${{ steps.app-version.outputs.APP_VERSION }}
    steps:
      - name: "Checkout Release"
        uses: actions/checkout@v4
        with:
          ref: "${{ github.ref }}"
          fetch-depth: 0
      - name: "Get app version"
        id: "app-version"
        run: echo APP_VERSION="$(cat ./api/version.txt)" | tee -a $GITHUB_OUTPUT

  deploy-ehp:
    name: "Deploy on EHP environnement"
    needs: version
    if: github.event.inputs.target_environment != 'production'
    uses: ./.github/workflows/dev_on_workflow_deploy.yml
    with:
      environment: ${{ github.event.inputs.target_environment }}
      app_version: ${{ needs.version.outputs.APP_VERSION }}
      cluster_scope: metier
      cluster_environment: ehp
      workload_identity_provider_secret_name: gcp_metier_ehp_workload_identity_provider
      apply_algolia_config: true
      deploy_api: true
      deploy_pro: true
      doc-api-entrypoint: 'api/documentation'
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  deploy-integration:
    name: "Deploy on integration environnement"
    needs: version
    if: github.event.inputs.target_environment == 'production'
    uses: ./.github/workflows/dev_on_workflow_deploy.yml
    with:
      environment: integration
      app_version: ${{ needs.version.outputs.APP_VERSION }}
      cluster_scope: metier
      cluster_environment: ehp
      workload_identity_provider_secret_name: gcp_metier_ehp_workload_identity_provider
      apply_algolia_config: true
      deploy_api: true
      deploy_pro: true
      doc-api-entrypoint: 'api/documentation'
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  deploy-prod:
    name: "Deploy on production environnement"
    needs: version
    if: github.event.inputs.target_environment == 'production'
    uses: ./.github/workflows/dev_on_workflow_deploy.yml
    with:
      environment: ${{ github.event.inputs.target_environment }}
      app_version: ${{ needs.version.outputs.APP_VERSION }}
      cluster_scope: metier
      cluster_environment: prod
      workload_identity_provider_secret_name: gcp_metier_prod_workload_identity_provider
      apply_algolia_config: true
      deploy_api: true
      deploy_pro: true
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  slack-notification:
    name: "Send Slack notification"
    runs-on: ubuntu-22.04
    if: always()
    needs:
      - version
      - deploy-prod
      - deploy-ehp
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - name: "Authentification to Google"
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
      - name: "Post outcome on #alertes-deploiement"
        if: always()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{vars.SLACK_ALERTES_DEPLOIEMENT_CHANNEL_ID}}
            attachments:
              - color: ${{ fromJSON('["#36a64f", "#A30002"]')[ env.WORKFLOW_CONCLUSION == 'failure'] }}
                  blocks:
                      - type: "context"
                        elements:
                          - type: "image"
                            image_url: "https://github.com/${{github.actor}}.png"
                            alt_text: "image de profil Github de ${{github.actor}}"
                          - type: "mrkdwn"
                            text: "<https://github.com/${{github.actor}}|*${{github.actor}}*>"
                          - type: "section"
                        text:
                          type: "mrkdwn"
                          text: " Le déploiement de la version `v${{ needs.version.outputs.APP_VERSION }}` a ${{ fromJSON('["réussi", "échoué"]')[env.WORKFLOW_CONCLUSION != 'success'] }} sur `${{ github.event.inputs.target_environment }}`"
      - name: "Post success on #shérif"
        if: env.WORKFLOW_CONCLUSION == 'success'
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{vars.SLACK_SHERIF_CHANNEL_ID}}
            attachments:
              -  color: "#36A64F"
                blocks:
                  - type: "context"
                    elements:
                      - type: "image"
                        image_url: "https://github.com/${{github.actor}}.png"
                        alt_text: "image de profil Github de ${{github.actor}}"
                      - type: "mrkdwn"
                        text: "*${{github.actor}}*"
                  - type: "section"
                    text:
                      type: "mrkdwn"
                      text: "La version `v${{ needs.version.outputs.APP_VERSION }}` a été déployée sur `${{ github.event.inputs.target_environment }}"


