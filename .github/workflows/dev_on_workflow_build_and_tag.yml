name: "[reusable] build and tag"

# This reusable workflow should be called by another workflow.
# It builds then tags the release so it's ready to deploy.

on:
  workflow_call:
    inputs:
      base_ref:
        # The base ref to tag from.
        # Can be a branch name, a tag or a commit.
        required: true
        type: string

      tag_number:
        # 200.0.2 for example.
        required: true
        type: string

      base_ref_is_a_branch:
        required: false
        type: boolean
        default: false
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_EHP_SERVICE_ACCOUNT:
        required: true

jobs:
  build-and-tag-version:
    runs-on: ubuntu-latest
    env:
      GIT_CONFIG_EMAIL: github-actions-bot@passculture.app
      GIT_CONFIG_NAME: ${{ github.actor }}
      TAG_NAME: v${{ inputs.tag_number }}
    steps:
      - name: "Authentification to Google"
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v1'
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
            PUSH_TOKEN:passculture-metier-ehp/passculture-main-push-token
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/passculture-main-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
      - name: "Checkout ref"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.base_ref }}
          token: ${{ steps.secrets.outputs.PUSH_TOKEN }}
      - name: "Configure git author"
        run: |
          git config --global user.email "$GIT_CONFIG_EMAIL"
          git config --global user.name "$GIT_CONFIG_NAME"
      - name: "Add version to api"
        working-directory: api
        run: |
          echo "${{ inputs.tag_number }}" > version.txt
          git add version.txt
      - name: "Add version to pro"
        working-directory: pro
        run: |
          yarn version --new-version "${{ inputs.tag_number }}"
          git add package.json
      - name: "Add version to image-resizing"
        working-directory: app-engine/image-resizing
        run: |
          echo "${{ inputs.tag_number }}" > version.txt
          git add version.txt
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker
      - name: "OpenID Connect Authentication"
        id: "openid-auth"
        uses: "google-github-actions/auth@v1"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: "Docker login"
        id: "docker-login"
        uses: "docker/login-action@v3"
        with:
          registry: "europe-west1-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.openid-auth.outputs.access_token }}"
      - name: "Build and push pcapi image"
        uses: docker/build-push-action@v5
        with:
          context: api
          push: true
          target: pcapi
          tags: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi:${{ inputs.tag_number }}
      - name: "Build and push pcapi-console image"
        uses: docker/build-push-action@v5
        with:
          context: api
          push: true
          target: pcapi-console
          tags: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi-console:${{ inputs.tag_number }}
      - name: "Tag Release"
        run: |
          git commit -m "ðŸš€ $TAG_NAME" -n
          git tag -a "$TAG_NAME" -m "ðŸš€ $TAG_NAME"
          git push origin "$TAG_NAME"
      - name: "Push tag to base ref"
        if: ${{ inputs.base_ref_is_a_branch }}
        run: git push origin "${{ inputs.base_ref }}"

  slack-notification:
    runs-on: ubuntu-latest
    needs: build-and-tag-version
    if: always()
    env:
      TAG_NAME: v${{ inputs.tag_number }}
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - name: "Authentification to Google"
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v1'
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
      - name: "Slack output"
        id: "slack-text"
        run: |
          if [ "${{ env.WORKFLOW_CONCLUSION }}" == "failure" ]; then
            echo text="La pose du tag *${{ env.TAG_NAME }}* a Ã©chouÃ© :x: DÃ©tails sur <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Github>" | tee -a $GITHUB_OUTPUT
          elif [ "${{ env.WORKFLOW_CONCLUSION }}" == "skipped" ]; then
            echo text="La pose du tag a Ã©tÃ© annulÃ©e. DÃ©tails sur <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Github>" | tee -a $GITHUB_OUTPUT
          else
            echo text="La pose du tag *${{ env.TAG_NAME }}* a rÃ©ussi. rdv sur <https://github.com/pass-culture/pass-culture-main/actions/workflows/dev_on_dispatch_release_deploy.yml|cette action github> pour le dÃ©ployer :rocket:" | tee -a $GITHUB_OUTPUT
          fi
      - name: "Post to a Slack channel"
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: CU0SQ8Y58
          payload: |
            {
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "color": "${{ fromJSON('["#36a64f", "#A30002"]')[ env.WORKFLOW_CONCLUSION == 'failure'] }}",
                  "author_name": "${{github.actor}}",
                  "author_link": "https://github.com/${{github.actor}}",
                  "author_icon": "https://github.com/${{github.actor}}.png",
                  "title": "PCAPI Deployment",
                  "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                  "text": "${{ steps.slack-text.outputs.text }}"
                }
              ],
              "unfurl_links": false,
              "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}