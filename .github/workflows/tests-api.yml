name: Tests api
on: workflow_call

env:
  region: europe-west1
  tests_docker_image: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi-tests:${{ github.sha }}

defaults:
  run:
    working-directory: api

jobs:
  quality-checks:
    name: Quality checks
    runs-on: [self-hosted, linux, x64]
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Authentification to Google
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: Get Secret
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v1'
        with:
          secrets: |-
            INFRA_PROD_GCP_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/passculture-main-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token

      - id: openid-auth
        name: "OpenID Connect Authentication"
        uses: "google-github-actions/auth@v1"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.INFRA_PROD_GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - uses: docker/login-action@v2
        with:
          registry: "${{ env.region }}-docker.pkg.dev"
          username: oauth2accesstoken
          password: ${{ steps.openid-auth.outputs.access_token }}
      - run: docker pull ${{ env.tests_docker_image }}
      - name: Show installed Python packages
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          run: pip freeze
      - name: Check imports are well organized with isort
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          run: isort . --check-only
      - name: Check code is well formatted with black
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          run: black . --check
      - name: Run mypy
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          run: mypy src
      - name: Slack Notification
        if: ${{ failure() && github.ref == 'refs/heads/master'  }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # channel #dev
          channel-id: "CPZ7U1CNP"
          payload: |
            {
            "attachments": [
              {
                "mrkdwn_in": ["text"],
                "color": "#A30002",
                "author_name": "${{github.actor}}",
                "author_link": "https://github.com/${{github.actor}}",
                "author_icon": "https://github.com/${{github.actor}}.png",
                "title": "Api tests",
                "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                "text": "Les tests quality-checks échouent sur `master` :boom:"
              }
            ],
            "unfurl_links": false,
            "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}

  pylint-check:
    name: Pylint
    runs-on: [self-hosted, linux, x64]
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Authentification to Google
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: Get Secret
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v1'
        with:
          secrets: |-
            INFRA_PROD_GCP_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/passculture-main-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token

      - id: openid-auth
        name: "OpenID Connect Authentication"
        uses: "google-github-actions/auth@v1"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.INFRA_PROD_GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - uses: docker/login-action@v2
        with:
          registry: "${{ env.region }}-docker.pkg.dev"
          username: oauth2accesstoken
          password: ${{ steps.openid-auth.outputs.access_token }}
      - run: docker pull ${{ env.tests_docker_image }}
      - name: Show installed Python packages
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          run: pip freeze
      - name: Run pylint
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          run: pylint src tests --jobs=15
      - name: Slack Notification
        if: ${{ failure() && github.ref == 'refs/heads/master'  }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # channel #dev
          channel-id: "CPZ7U1CNP"
          payload: |
            {
            "attachments": [
              {
                "mrkdwn_in": ["text"],
                "color": "#A30002",
                "author_name": "${{github.actor}}",
                "author_link": "https://github.com/${{github.actor}}",
                "author_icon": "https://github.com/${{github.actor}}.png",
                "title": "Api tests",
                "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                "text": "Les tests pylint-checks échouent sur `master` :boom:"
              }
            ],
            "unfurl_links": false,
            "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}

  tests-database:
    name: "Tests database schema"
    env:
      RUN_ENV: tests
      DATABASE_URL_TEST: postgresql://pytest:pytest@postgres:5432/pass_culture
      REDIS_URL: redis://redis:6379
    runs-on: [self-hosted, linux, x64]
    permissions:
      id-token: write
      contents: read
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: cimg/postgres:12.9-postgis
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: pytest
          POSTGRES_PASSWORD: pytest
          POSTGRES_DB: pass_culture
    steps:
      - uses: actions/checkout@v3

      - name: Authentification to Google
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: Get Secret
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v1'
        with:
          secrets: |-
            INFRA_PROD_GCP_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/passculture-main-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token

      - id: openid-auth
        name: "OpenID Connect Authentication"
        uses: "google-github-actions/auth@v1"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.INFRA_PROD_GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - uses: docker/login-action@v2
        with:
          registry: "${{ env.region }}-docker.pkg.dev"
          username: oauth2accesstoken
          password: ${{ steps.openid-auth.outputs.access_token }}
      - run: docker pull ${{ env.tests_docker_image }}
      - name: Check for alembic multiple heads
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          shell: bash
          run: |
            LINE_COUNT=$(wc -l <<< "$(alembic heads)")
            echo "Found "$LINE_COUNT" head(s)"
            if [ ${LINE_COUNT} -ne 2 ]; then echo "There must be two heads";exit 1;fi
      - name: Check database and model are aligned
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST
          run: |
            set -e
            flask install_postgres_extensions
            alembic upgrade pre@head
            alembic upgrade post@head
            flask install_data
            python tests/alembic/check_db_schema.py
      - name: Check that downgrade scripts are correctly written
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST
          run: |
            set -e
            alembic downgrade post@f460dc2c9f93
            alembic downgrade pre@f460dc2c9f93
            alembic upgrade pre@head
            alembic upgrade post@head
      - name: Slack Notification
        if: ${{ failure() && github.ref == 'refs/heads/master'  }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # channel #dev
          channel-id: "CPZ7U1CNP"
          payload: |
            {
            "attachments": [
              {
                "mrkdwn_in": ["text"],
                "color": "#A30002",
                "author_name": "${{github.actor}}",
                "author_link": "https://github.com/${{github.actor}}",
                "author_icon": "https://github.com/${{github.actor}}.png",
                "title": "Api tests",
                "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                "text": "Les tests database échouent sur `master` :boom:"
              }
            ],
            "unfurl_links": false,
            "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}

  pytest:
    name: "Pytest"
    env:
      RUN_ENV: tests
      DATABASE_URL_TEST: postgresql://pytest:pytest@postgres:5432/pass_culture
      REDIS_URL: redis://redis:6379
    runs-on: [self-hosted, linux, x64]
    strategy:
      fail-fast: false
      matrix:
        pytest_args:
          [
            "tests/core/bookings tests/core/offers tests/core/finance",
            "tests/core --ignore=tests/core/bookings --ignore=tests/core/offers --ignore=tests/core/finance",
            "tests/routes -m 'not backoffice'",
            "tests --ignore=tests/core --ignore=tests/routes",
            "tests/routes/backoffice -m 'backoffice'",
          ]
    permissions:
      id-token: write
      contents: read
      checks: write
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: cimg/postgres:12.9-postgis
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: pytest
          POSTGRES_PASSWORD: pytest
          POSTGRES_DB: pass_culture
    steps:
      - uses: actions/checkout@v3

      - name: Authentification to Google
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: Get Secret
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v1'
        with:
          secrets: |-
            INFRA_PROD_GCP_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/passculture-main-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token

      - id: openid-auth
        name: "OpenID Connect Authentication"
        uses: "google-github-actions/auth@v1"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.INFRA_PROD_GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - uses: docker/login-action@v2
        with:
          registry: "${{ env.region }}-docker.pkg.dev"
          username: oauth2accesstoken
          password: ${{ steps.openid-auth.outputs.access_token }}
      - run: docker pull ${{ env.tests_docker_image }}
      - name: Setup database
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST
          run: |
            set -e
            flask install_postgres_extensions
            alembic upgrade pre@head
            alembic upgrade post@head
            flask install_data
      - name: Mount a Volume with pcapi rights
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST -e REDIS_URL -v ${{ runner.workspace }}/pass-culture-main/api/tests/:/tests -u 0
          run: |
            echo "Changing owner and group fort directory test"
            chown -R pcapi:pcapi /tests
      - name: Run tests
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.tests_docker_image }}
          shell: bash
          options: -e RUN_ENV -e DATABASE_URL_TEST -e REDIS_URL -v ${{ runner.workspace }}/pass-culture-main/api/tests/:/tests
          run: |
            pytest ${{ matrix.pytest_args }} --durations=10 --junitxml='/tests/junit.xml'
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '${{ runner.workspace }}/pass-culture-main/api/tests/junit.xml'
          check_name: "Pytest Report"
          fail_on_failure: true
      - name: Slack Notification
        if: ${{ failure() && github.ref == 'refs/heads/master'  }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # channel #dev
          channel-id: "CPZ7U1CNP"
          payload: |
            {
            "attachments": [
              {
                "mrkdwn_in": ["text"],
                "color": "#A30002",
                "author_name": "${{github.actor}}",
                "author_link": "https://github.com/${{github.actor}}",
                "author_icon": "https://github.com/${{github.actor}}.png",
                "title": "Api tests",
                "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                "text": "Les tests pytest échouent sur `master` :boom:"
              }
            ],
            "unfurl_links": false,
            "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}
