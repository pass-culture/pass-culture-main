name: "1 [on_push] Initiate workflow"

on:
  push:
    branches:
      - master
      - "maint/**"

permissions: write-all

jobs:
  check-folders-changes:
    # Perform all changes checks at once to remove the need for multiple checkouts accross jobs
    name: "Check changes in folders"
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.check-api-changes.outputs.any_modified }}
      pro-changed: ${{ steps.check-pro-changes.outputs.any_modified }}
      maintenance-site-changed: ${{ steps.check-maintenance-site-changes.outputs.any_modified }}
      db-migrations-changed: ${{ steps.check-db-migrations-changes.outputs.any_modified }}
      dependencies-changed: ${{ steps.check-dependencies-changes.outputs.any_modified }}
      docker-image-tags: ${{ steps.define-image-tags.outputs.docker-image-tags }}
    steps:
      - uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0
          fetch-tags: false
      - name: "Check api folder changes"
        id: check-api-changes
        uses: tj-actions/changed-files@v44
        with:
          files: |
            api/**
            !api/src/pcapi/scripts/**/main.py
            !api/src/pcapi/scripts/**/main.sql
      - name: "Check pro folder changes"
        id: check-pro-changes
        uses: tj-actions/changed-files@v44
        with:
          files: pro/**
      - name: "Check maintenance-site folder changes"
        id: check-maintenance-site-changes
        uses: tj-actions/changed-files@v44
        with:
          files: maintenance-site/**
      - name: "Check db migration folder changes"
        id: check-db-migrations-changes
        uses: tj-actions/changed-files@v44
        with:
          files: |-
            api/src/pcapi/alembic/versions/**
            api/src/pcapi/alembic/run_migrations.py
      - name: "Check changes in dependencies (frontend + backend)"
        id: check-dependencies-changes
        uses: tj-actions/changed-files@v44
        with:
          files: |
            api/poetry.lock
            pro/yarn.lock
      - name: "Define docker image tags."
        id: define-image-tags
        run: |
          DOCKER_REGISTRY="europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry"
          OUTPUT="docker-image-tags="
          OUTPUT+="$DOCKER_REGISTRY/DOCKER_IMAGE:${{ github.sha }}"
          if [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
            OUTPUT+=",$DOCKER_REGISTRY/DOCKER_IMAGE:latest"
          fi
          echo $OUTPUT
          echo $OUTPUT >> "$GITHUB_OUTPUT"

  build-pcapi:
    name: "[pcapi] build and push docker image."
    needs: check-folders-changes
    if: needs.check-folders-changes.outputs.api-changed == 'true'
    uses: ./.github/workflows/dev_on_workflow_build_and_push_docker_images.yml
    with:
      ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      image: pcapi
      tags: ${{ needs.check-folders-changes.outputs.docker-image-tags }}
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  build-pcapi-console:
    name: "[pcapi-console] build and push docker image."
    needs: check-folders-changes
    if: |
      needs.check-folders-changes.outputs.api-changed == 'true' ||
      needs.check-folders-changes.outputs.pro-changed == 'true' ||
      github.ref == 'refs/heads/master'
    uses: ./.github/workflows/dev_on_workflow_build_and_push_docker_images.yml
    with:
      ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      image: pcapi-console
      tags: ${{ needs.check-folders-changes.outputs.docker-image-tags }}
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  build-pcapi-tests:
    name: "[pcapi-tests] build and push docker image."
    needs: check-folders-changes
    if: needs.check-folders-changes.outputs.api-changed == 'true' 
    uses: ./.github/workflows/dev_on_workflow_build_and_push_docker_images.yml
    with:
      ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      image: pcapi-tests
      tags: ${{ needs.check-folders-changes.outputs.docker-image-tags }}
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  prepare-cache-master:  # on "master" branch only
    name: "Reset cache on master on dependency update"
    needs: [check-folders-changes, build-pcapi]
    uses: ./.github/workflows/dev_on_workflow_update_api_client_template.yml
    if: github.ref == 'refs/heads/master'
    with:
      PCAPI_DOCKER_TAG: ${{ github.sha }}
      TRIGGER_ONLY_ON_API_CHANGE: false
      TRIGGER_ONLY_ON_DEPENDENCY_CHANGE: true
      CACHE_BUCKET_NAME: "passculture-infra-prod-github-runner-cache"
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}

  test-api:
    name: "Test api"
    needs: [check-folders-changes, build-pcapi-tests]
    if: needs.check-folders-changes.outputs.api-changed == 'true'
    uses: ./.github/workflows/dev_on_workflow_tests_api.yml
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  test-pro:
    name: "Tests pro"
    needs: check-folders-changes
    if: needs.check-folders-changes.outputs.pro-changed == 'true'
    uses: ./.github/workflows/dev_on_workflow_tests_pro.yml
    with:
      CACHE_BUCKET_NAME: "passculture-infra-prod-github-runner-cache"
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  test-pro-e2e:
    name: "Tests pro E2E"
    needs: [check-folders-changes, build-pcapi]
    if: |
      needs.check-folders-changes.outputs.api-changed == 'true' ||
      needs.check-folders-changes.outputs.pro-changed == 'true'
    uses: ./.github/workflows/dev_on_workflow_tests_pro_e2e.yml
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
    with:
      TAG: ${{ needs.check-folders-changes.outputs.api-changed == 'true' && github.sha || 'latest' }}
      CACHE_BUCKET_NAME: "passculture-infra-prod-github-runner-cache"

  deploy-storybook:
    name: "Deploy Storybook"
    needs: check-folders-changes
    if: ${{ github.ref == 'refs/heads/master' && needs.check-folders-changes.outputs.pro-changed == 'true' }}
    uses: ./.github/workflows/dev_on_workflow_deploy_storybook.yml

  deploy-to-testing:
    name: "Deploy to testing"
    needs: [test-api, test-pro]
    if: |
      always() &&
      github.ref == 'refs/heads/master' &&
      contains(fromJSON('["success", "skipped"]'), needs.test-api.result) &&
      contains(fromJSON('["success", "skipped"]'), needs.test-pro.result)
    uses: ./.github/workflows/dev_on_workflow_deploy.yml
    with:
      environment: testing
      app_version: ${{ github.sha }}
      teleport_version: 15.2.5
      teleport_proxy: teleport.ehp.passculture.team:443
      teleport_kubernetes_cluster: passculture-metier-ehp
      deploy_api: ${{ needs.test-api.result == 'success' }}
      deploy_pro: ${{ needs.test-pro.result == 'success' }}
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  deploy-to-ops:
    name: "Deploy to ops"
    needs: [test-api, test-pro]
    if: |
      always() &&
      github.ref == 'refs/heads/master' &&
      contains(fromJSON('["success", "skipped"]'), needs.test-api.result) &&
      contains(fromJSON('["success", "skipped"]'), needs.test-pro.result) &&
      vars.DISABLE_PCAPI_OPS_DEPLOY == 'false'
    uses: ./.github/workflows/dev_on_workflow_deploy.yml
    with:
      environment: ops
      app_version: ${{ github.sha }}
      teleport_version: 15.2.5
      teleport_proxy: teleport.ops.passculture.team:443
      teleport_kubernetes_cluster: passculture-metier-ops
      deploy_api: ${{ needs.test-api.result == 'success' }}
      deploy_pro: false
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  deploy-maintenance-site:
    name: "Deploy maintenance site"
    needs: check-folders-changes
    if: |
      always() &&
      github.ref == 'refs/heads/master' &&
      needs.check-folders-changes.outputs.maintenance-site-changed == 'true'
    uses: ./.github/workflows/dev_on_workflow_deploy_maintenance_site.yml
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}

  ping-data-team-on-slack:
    name: "Ping data team on slack"
    needs: check-folders-changes
    if: |
      always() &&
      github.ref == 'refs/heads/master' &&
      needs.check-folders-changes.outputs.db-migrations-changed == 'true'
    uses: ./.github/workflows/dev_on_workflow_ping_data_team.yml
    secrets:
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}

  update-jira-issue:
    name: "Update Jira issue"
    if: ${{ always() && github.ref == 'refs/heads/master' }}
    concurrency: update-jira-issue-${{ github.workflow }}-${{ github.ref }}
    uses: ./.github/workflows/dev_on_workflow_update_jira_issues.yml
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_EHP_SERVICE_ACCOUNT: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  slack-notify:
    name: "Slack notification"
    runs-on: ubuntu-latest
    if: ${{ failure() && github.ref == 'refs/heads/master' }}
    needs: deploy-to-testing
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - name: "Authentification to Google"
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
      - name: "Post to a Slack channel"
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # channel #alertes-deploiement
          channel-id: "CQAMNFVPS"
          payload: |
            {
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "color": "#A30002",
                  "author_name": "${{github.actor}}",
                  "author_link": "https://github.com/${{github.actor}}",
                  "author_icon": "https://github.com/${{github.actor}}.png",
                  "title": "PCAPI Deployment",
                  "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                  "text": "Le déploiement de la version `master` a échoué sur `testing` :boom:"
                }
              ],
              "unfurl_links": false,
              "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}
