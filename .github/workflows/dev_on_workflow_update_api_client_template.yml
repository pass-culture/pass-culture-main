name: "Update API Client template"

on:
  workflow_call:
    inputs:
      TRIGGER_ONLY_ON_API_CHANGE:
        required: true
        type: boolean
      TRIGGER_ONLY_ON_DEPENDENCY_CHANGE:
        required: true
        type: boolean
      CACHE_BUCKET_NAME:
        type: string
        required: true
    secrets:
      GCP_EHP_SERVICE_ACCOUNT:
        required: true
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true

jobs:
  update-api-client:
    name: "Update API Client template"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout üõéÔ∏è"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: "Check changes in API"
        id: "changes-api"
        uses: dorny/paths-filter@v2
        if: ${{ inputs.TRIGGER_ONLY_ON_API_CHANGE }}
        with:
          filters: |
            src:
              - 'api/**'
      - name: "Get changed files"
        id: "files"
        if: ${{ inputs.TRIGGER_ONLY_ON_DEPENDENCY_CHANGE }}
        uses: jitterbit/get-changed-files@v1
      - name: "Check if dependencies changed"
        id: check-dependency-change
        run: |
          for changed_file in ${{ steps.files.outputs.all }}; do
            if [[ "$changed_file" == "pro/yarn.lock" || "$changed_file" == "api/requirements.txt" ]]; then
              echo "dependency-change=true" | tee -a $GITHUB_OUTPUT
            fi
          done
      - name: "Should run cache"
        id: "evaluate-variables"
        run: |
          if ${{ (!inputs.TRIGGER_ONLY_ON_API_CHANGE && !inputs.TRIGGER_ONLY_ON_DEPENDENCY_CHANGE) || (inputs.TRIGGER_ONLY_ON_API_CHANGE && steps.changes-api.outputs.src == 'true') || (inputs.TRIGGER_ONLY_ON_DEPENDENCY_CHANGE && steps.check-dependency-change.outputs.dependency-change == 'true') }}; then
            echo "should-run-cache=true" | tee -a $GITHUB_OUTPUT
          else
            echo "should-run-cache=false" | tee -a $GITHUB_OUTPUT
          fi
      - uses: actions/setup-node@v2
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        with:
          node-version-file: "pro/.nvmrc"
      - name: "Install dockerize"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        run: ./scripts/install_dockerize.sh $DOCKERIZE_VERSION
      - name: "Cache"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: docker-cache-${{ hashFiles('api/requirements.txt') }}
          restore-keys: |
            docker-cache-${{ hashFiles('api/requirements.txt') }}
            docker-cache
      - name: "Run API"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        run: |
          sudo chown -R 1000:1000 .
          ./pc start-backend &
      - name: "Cache node dependencies"
        uses: pass-culture-github-actions/cache@v1.0.0
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          workload-identity-provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service-account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
          compression-method: gzip
          path: pro/node_modules
          key: v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: "Install dependencies PRO"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        working-directory: pro
        run: yarn install --immutable
      - name: "Wait for backend"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        run: dockerize -wait http://localhost:5001/health/api -timeout 10m -wait-retry-interval 5s
      - name: "Update api client"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            cd pro
            yarn generate:api:client:local
      - name: "Check if there are changes"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        id: "changes"
        working-directory: pro
        run: |
            diff="$(git diff -- src)"
            if [[ "${diff}" != "" ]]; then
              echo "Found changes in the API."
              echo "${diff}" | awk '{ print "\t" $0 }'
              echo "Please run 'yarn generate:api:client:local' and add the changes to the commit(s) that change the API."
              exit 1
            fi