name: "3 [on_workflow] Update API Client template"

on:
  workflow_call:
    inputs:
      TRIGGER_ONLY_ON_API_CHANGE:
        required: true
        type: boolean
      TRIGGER_ONLY_ON_DEPENDENCY_CHANGE:
        required: true
        type: boolean
      PCAPI_DOCKER_TAG:
        required: true
        type: string
      CACHE_BUCKET_NAME:
        type: string
        required: true
    secrets:
      GCP_EHP_SERVICE_ACCOUNT:
        required: true
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true

jobs:
  update-api-client:
    name: "Update API Client template"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout üõéÔ∏è"
        uses: actions/checkout@v4.1.4
        with:
          ref: ${{ github.head_ref }}
      - name: "Authentification to Google"
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get Secret"
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
      - name: "Should run cache"
        id: "evaluate-variables"
        run: |
          if ${{ (!inputs.TRIGGER_ONLY_ON_API_CHANGE && !inputs.TRIGGER_ONLY_ON_DEPENDENCY_CHANGE) || (inputs.TRIGGER_ONLY_ON_API_CHANGE && needs.check-folders-changed.outputs.api-changed == 'true') || (inputs.TRIGGER_ONLY_ON_DEPENDENCY_CHANGE && needs.check-folder-changes.outputs.dependencies-changed == 'true') }}; then
            echo "should-run-cache=true" | tee -a $GITHUB_OUTPUT
          else
            echo "should-run-cache=false" | tee -a $GITHUB_OUTPUT
          fi
      - name: "Fix local permissions"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        run: sudo chown -R $PCAPI_UID:$PCAPI_GID .
        working-directory: api
        env:
          PCAPI_UID: 1000
          PCAPI_GID: 1000
      - uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: '2.23.3'
      - name: "Run API"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        run: docker-compose -f docker-compose-backend.yml up postgres redis -d
      - id: 'openid-auth'
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        name: "OpenID Connect Authentication"
        uses: 'google-github-actions/auth@v2'
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER  }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: 'Set up Cloud SDK'
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        uses: 'google-github-actions/setup-gcloud@v2'
      - id: 'docker-login'
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        uses: "docker/login-action@v1"
        name: "Docker login"
        with:
          registry: "europe-west1-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.openid-auth.outputs.access_token }}"
      - name: "Run API server"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        run: |
          docker run \
            --name pc-api \
            --workdir /usr/src/app \
            --volume ./api:/usr/src/app \
            --env-file ./env_file \
            --tty \
            --detach \
            --network pass-culture-main_db_nw \
            --restart on-failure \
            --publish 5001:5001 \
            --publish 10002:10002 \
            --entrypoint bash \
            europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi:${{ inputs.PCAPI_DOCKER_TAG }} \
            -c "set -e ; flask install_postgres_extensions ; alembic upgrade pre@head ; alembic upgrade post@head ; flask install_data ; python src/pcapi/app.py"
      - name: "Wait for migrations to be run"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        uses: iFaxity/wait-on-action@v1
        with:
          resource: http://localhost:5001/health/api
          timeout: 120000
      - uses: actions/setup-node@v2
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        with:
          node-version-file: "pro/.nvmrc"
      - name: "Cache node dependencies"
        uses: pass-culture-github-actions/cache@v1.0.0
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          workload-identity-provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service-account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
          compression-method: gzip
          path: pro/node_modules
          key: v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: "Install dependencies PRO"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        working-directory: pro
        run: yarn install --immutable
      - name: "Update api client"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            cd pro
            yarn generate:api:client:local:no:docker
      - name: "Check if there are changes"
        if: steps.evaluate-variables.outputs.should-run-cache == 'true'
        id: "changes"
        working-directory: pro
        run: |
            diff="$(git diff -- src)"
            if [[ "${diff}" != "" ]]; then
              echo "Found changes in the API."
              echo "${diff}" | awk '{ print "\t" $0 }'
              echo "Please run 'yarn generate:api:client:local' and add the changes to the commit(s) that change the API."
              exit 1
            fi
      - name: 'Show pcapi log when it fails'
        if: failure()
        run: docker logs pc-api
