name: Tests pro
on: workflow_call

env:
  use_cache: ${{ github.ref != 'refs/heads/master' }}
  region: europe-west1

defaults:
  run:
    working-directory: pro

jobs:
  read-node-version:
    name: "[pro] Read node version from .nvmrc"
    runs-on: [self-hosted, linux, x64]
    outputs:
      node_version: ${{ steps.read-node-version.outputs.node_version }}
    steps:
      - uses: actions/checkout@v3
      - id: read-node-version
        run: echo "node_version=$(cat .nvmrc | sed -r -e 's/v?(.+)/\1/')" >> $GITHUB_OUTPUT

  type-check:
    name: "[pro] Type check"
    runs-on: [self-hosted, linux, x64]
    container:
      image: node:18
    needs: read-node-version
    steps:
      - uses: actions/checkout@v3
      - if: ${{ env.use_cache }}
        uses: actions/setup-node@v3
        with:
          cache: yarn
          cache-dependency-path: pro/yarn.lock
          node-version: ${{ needs.read-node-version.outputs.node_version }}
      - if: ${{ env.use_cache == false }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.read-node-version.outputs.node_version }}
      - run: yarn install
      - run: yarn tsc -b

  quality-check:
    name: "[pro] Quality check"
    runs-on: [self-hosted, linux, x64]
    container:
      image: node:18
    needs: read-node-version
    steps:
      - uses: actions/checkout@v3
      - if: ${{ env.use_cache }}
        uses: actions/setup-node@v3
        with:
          cache: yarn
          cache-dependency-path: pro/yarn.lock
          node-version: ${{ needs.read-node-version.outputs.node_version }}
      - if: ${{ env.use_cache == false }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.read-node-version.outputs.node_version }}
      - run: yarn install
      - run: yarn lint:js --max-warnings 0

  style-quality-check:
    name: "[pro] Style quality check"
    runs-on: [self-hosted, linux, x64]
    container:
      image: node:18
    needs: read-node-version
    steps:
      - uses: actions/checkout@v3
      - if: ${{ env.use_cache }}
        uses: actions/setup-node@v3
        with:
          cache: yarn
          cache-dependency-path: pro/yarn.lock
          node-version: ${{ needs.read-node-version.outputs.node_version }}
      - if: ${{ env.use_cache == false }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.read-node-version.outputs.node_version }}
      - run: yarn install
      - run: yarn lint:scss --max-warnings 0

  tests-pro-unit-tests:
    name: "[pro] Unit tests"
    runs-on: [self-hosted, linux, x64]
    container:
      image: node:18
    needs: read-node-version
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: |
          git config --global --add safe.directory /__w/pass-culture-main/pass-culture-main
          git fetch --no-tags origin +refs/heads/master:refs/remotes/origin/master
          git update-ref refs/heads/master refs/remotes/origin/master
      - if: ${{ env.use_cache }}
        uses: actions/setup-node@v3
        with:
          fetch-depth: 0
          cache: yarn
          cache-dependency-path: pro/yarn.lock
          node-version: ${{ needs.read-node-version.outputs.node_version }}
      - name: "Fetch master branch so that Jest can assert changes since master"
        run: |
          git fetch --no-tags origin +refs/heads/master:refs/remotes/origin/master
          git update-ref refs/heads/master refs/remotes/origin/master
      - if: ${{ env.use_cache == false }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.read-node-version.outputs.node_version }}
      - run: yarn install
      - name: Use Jest Cache
        id: jest-cache
        uses: actions/cache@v3
        with:
          path: ./${{ env.folder }}/.jest_cache
          key: node-${{ needs.read-node-version.outputs.node_version }}-jest-cache
      - name: Run tests with coverage
        run: yarn test:unit:ci --coverage
      - name: SonarCloud scan
        uses: SonarSource/sonarcloud-github-action@master
        if: ${{ github.actor != 'dependabot[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: pro
          args: -Dsonar.qualitygate.wait=${{ github.event_name == 'pull_request' && 'true' || 'false'  }}
      - if: ${{ failure() && github.ref == 'refs/heads/master'  }}
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # channel #dev
          channel-id: "CPZ7U1CNP"
          payload: |
            {
            "attachments": [
              {
                "mrkdwn_in": ["text"],
                "color": "#A30002",
                "author_name": "${{github.actor}}",
                "author_link": "https://github.com/${{github.actor}}",
                "author_icon": "https://github.com/${{github.actor}}.png",
                "title": "Pro tests",
                "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                "text": "Les tests unitaires de pro Ã©chouent sur `master` :boom:"
              }
            ],
            "unfurl_links": false,
            "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  tests-pro-e2e-tests:
    name: "[pro] E2E tests"
    runs-on: [self-hosted, linux, x64]
    needs: read-node-version
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - id: openid-auth
        name: "OpenID Connect Authentication"
        uses: 'google-github-actions/auth@v1'
        with:
          create_credentials_file: false
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - id: docker-login
        uses: 'docker/login-action@v1'
        name: 'Docker login'
        with:
          registry: '${{ env.region }}-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ steps.openid-auth.outputs.access_token }}'
      - if: ${{ env.use_cache == false }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.read-node-version.outputs.node_version }}
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
      - name: Run API server
        run: |
          cd ..
          cat docker-compose-app.yml | yq 'del(.services.flask.build)' | yq '.services.flask += {"image": "europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi-tests:${{ github.sha }}"}' | yq 'del(.services.flask.command)' | yq '.services.flask += {"entrypoint": "./start-api-when-database-is-ready.sh" }' | docker-compose -f - up -d
      - name: Wait for migrations to be run
        uses: iFaxity/wait-on-action@v1
        with:
          resource: http://localhost/health/api
      - name: Load sandbox
        run: ../pc sandbox -n industrial
      - name: Install dependancies
        run: yarn
      - name: Load front
        run: ../pc start-pro &
      - name: Wait for front to start
        uses: iFaxity/wait-on-action@v1
        with:
          resource: http://localhost:3001
      - name: Run cypress test
        continue-on-error: true
        run: |
          npm cache clean --force
          yarn cypress verify
          yarn cypress run --browser chrome
      - name: Archive E2E results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-artifacts
          path: pro/cypress/videos
