name: "Deploy PCAPI"
description: "Deploy the Pass Culture API to Kubernetes"
inputs:
  environment:
    description: "Target environment for deployment"
    required: true
  app_version:
    description: "Application version to deploy"
    required: true
  cluster_scope:
    description: "Cluster scope"
    required: false
    default: "metier"
  cluster_environment:
    description: "Cluster environment"
    required: false
    default: "ehp"
  workload_identity_provider_secret_name:
    description: "Workload identity provider secret name"
    required: true
  gcp_ehp_workload_identity_provider:
    description: "GCP EHP workload identity provider"
    required: true
  gcp_ehp_service_account:
    description: "GCP EHP service account"
    required: true
  passculture_github_action_app_id:
    description: "GitHub Application ID to use to clone other repos"
    required: true
  passculture_github_action_app_private_key:
    description: "Private key for the GitHub application used to clone other repos"
    required: true

runs:
  using: "composite"
  steps:
    - name: "Authentification to Google"
      uses: "google-github-actions/auth@v3"
      with:
        workload_identity_provider: ${{ inputs.gcp_ehp_workload_identity_provider }}
        service_account: ${{ inputs.gcp_ehp_service_account }}

    - name: "Get secrets (github)"
      id: "secrets"
      uses: "google-github-actions/get-secretmanager-secrets@v3"
      with:
        secrets: |-
          DEPLOYMENT_SA:passculture-metier-ehp/pcapi-${{ inputs.environment }}_deploy-service-account
          DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/${{ inputs.workload_identity_provider_secret_name }}

    - name: "Authentification to Google"
      uses: "google-github-actions/auth@v3"
      id: "google-auth"
      with:
        create_credentials_file: true
        token_format: "access_token"
        service_account: ${{ steps.secrets.outputs.DEPLOYMENT_SA }}
        workload_identity_provider: ${{ steps.secrets.outputs.DEPLOYMENT_WORKLOAD_IDENTITY_PROVIDER }}

    - name: "Docker login"
      id: "docker-login"
      uses: "docker/login-action@v3"
      with:
        registry: "europe-west1-docker.pkg.dev"
        username: "oauth2accesstoken"
        password: "${{ steps.google-auth.outputs.access_token }}"

    - name: Authenticate through github app ghactionci
      uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
      id: github-token
      with:
        app-id: ${{ inputs.passculture_github_action_app_id }}
        private-key: ${{ inputs.passculture_github_action_app_private_key }}
        owner: ${{ github.repository_owner }}
        # Liste des repositories Ã  cloner
        repositories: |
          pass-culture-deployment
          pass-culture-main
          rendered-manifests
          pc-connect
          pc-firestore-cli
          pc-render-manifests
        permission-contents: write

    - name: "Connect to cluster"
      uses: pass-culture/common-workflows/actions/pc-k8s-connect@pc-k8s-connect/v0.2.0
      with:
        cluster_scope: ${{ inputs.cluster_scope }}
        cluster_environment: ${{ inputs.cluster_environment }}
        api_token_github: ${{ steps.github-token.outputs.token }}

    - name: "Play pre-migrations"
      uses: pass-culture/common-workflows/actions/pcapi-migration@pcapi-migration/v0.2.4
      with:
        environment: ${{ inputs.environment }}
        app_version: ${{ inputs.app_version }}
        migration_type: pre

    # Get pcapi secrets from source code, to be passed later as a helmfile parameter.
    - name: "Generate pcapi secrets list"
      id: generate-pcapi-secrets-list
      shell: bash
      run: |
        #Retrieve pcapi secrets list from source code
        PCAPI_SECRETS=$(cat api/src/pcapi/settings.py | grep "secrets_utils.getlist(" | awk -F'=' '{print $1}')
        PCAPI_SECRETS+=$(cat api/src/pcapi/settings.py | grep "secrets_utils.get(" | grep -oP '(?<=secrets_utils.get\(\").*?(?=\")')
        #Sort list
        PCAPI_SECRETS=$(echo $PCAPI_SECRETS | xargs -n1 | sort | xargs)
        #Transform list into helm readable parameter list (pattern: --set secrets={item1,item2,item3})
        PCAPI_SECRETS=secrets={$(echo $PCAPI_SECRETS | sed -r 's/ /,/g')}
        echo "PCAPI_SECRETS=$PCAPI_SECRETS" | tee -a "$GITHUB_OUTPUT"

    # Checkout pass-culture-deployment repository containing pcapi helm value files
    - name: "Checkout pass-culture-deployment"
      uses: actions/checkout@v5
      with:
        repository: pass-culture/pass-culture-deployment
        token: ${{ steps.github-token.outputs.token }}
        path: ./pass-culture-deployment

    # Commit and push app_version to matching pcapi environment helm value file.
    - name: "Update image.tag in pass-culture-deployment repository"
      shell: bash
      run: |
        git config --global user.email "PassCulture-SA@passculture.team"
        git config --global user.name "PassCulture-SA"
        cd ./pass-culture-deployment/helm/pcapi/${{ inputs.environment }}
        sed -i '/^image:/,/^  tag:/{s/^  tag: .*/  tag: ${{ inputs.app_version }}/}' values.yaml.gotmpl
        git add values.yaml.gotmpl
        git diff-index --quiet HEAD || git commit -m "[${{ inputs.environment }}] Update pcapi image.tag (${{ inputs.app_version }}) (Github Actions Job : ${{ github.run_number }})"
        git pull -r
        git push origin master

    - name: "Setup helmfile"
      uses: mamezou-tech/setup-helmfile@v2.1.0
      with:
        helmfile-version: "v1.1.3"

    # Executes helmfile templating and push results to render-manifests repository
    - name: "Setup pc-render-manifests"
      uses: pass-culture/common-workflows/actions/setup-pc-render-manifests@setup-pc-render-manifests/v0.1.0
      with:
        token: ${{ steps.github-token.outputs.token }}
        version: "v0.7.1"

    - name: "Generate and push rendered manifests"
      shell: bash
      env:
        GITHUB_USERNAME: x-access-token
        GITHUB_TOKEN: ${{ steps.github-token.outputs.token }}
      run: |
        pc-render-manifests render \
          -a pcapi \
          -e ${{ inputs.environment }} \
          --sourceRepoURL https://github.com/pass-culture/pass-culture-deployment.git \
          --sourcePath helm/pcapi \
          --sourceRepoRef master \
          --additionalArg "--set ${{ steps.generate-pcapi-secrets-list.outputs.PCAPI_SECRETS }}" \
          --commitMsg "pcapi(${{ inputs.environment }}) : manifests for app_version=${{ inputs.app_version }}" \
          --clean=false \
          --push \
          --silent

    - name: "Connect to cluster"
      uses: pass-culture/common-workflows/actions/pc-k8s-connect@pc-k8s-connect/v0.2.0
      with:
        cluster_scope: ${{ inputs.cluster_scope }}
        cluster_environment: ${{ inputs.cluster_environment }}
        api_token_github: ${{ steps.github-token.outputs.token }}

    - name: "Sync ArgoCD application"
      uses: pass-culture/common-workflows/actions/argocd-sync@argocd-sync/v0.8.0
      with:
        app_name: pcapi-${{ inputs.environment }}
        sync_timeout: 900
        retry_limit: 1

    - name: "Play post-migrations"
      uses: pass-culture/common-workflows/actions/pcapi-migration@pcapi-migration/v0.2.4
      with:
        environment: ${{ inputs.environment }}
        app_version: ${{ inputs.app_version }}
        migration_type: post
