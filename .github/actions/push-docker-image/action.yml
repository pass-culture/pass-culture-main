name: Push docker image into Google Artifact Registry
description: Retrieve built image from Github Artifact and push it into Google Artifact Registry
inputs:
  image:
    description: The docker image name
    required: true
    type: string

  tag:
    description: The docker image tag
    required: true
    type: string

  tag_latest:
    description: Tag also image as latest
    required: false
    type: boolean
    default: false

  registry:
    description: Artifactory registry
    required: false
    type: string

  project_id:
    description: Project ID for Artifact Registry
    required: false
    type: string

  repository:
    description: Repository for Artifact Registry
    required: false
    type: string

  artifact_registry_workload_identity_provider_secret_name:
    description: Google Artifact Registry Workload identity provider secret name stored in secret manager
    required: false
    type: string

  artifact_registry_service_account_secret_name:
    description: Google Artifact Registry Service account secret name stored in secret manager
    required: false
    type: string

  cosign_kms_key_secret_name:
    description: Cosign KMS key secret name stored in secret manager
    required: false
    type: string

secrets:
  workload_identity_provider:
    description: Workload Identity Provider for fetching secrets in Secret Manager
    required: true

  service_account:
    description: Service Account for fetching secrets in Secret Manager
    required: true

runs:
  using: composite
  steps:
    - name: Authentification to Google
      uses: google-github-actions/auth@v3
      with:
        workload_identity_provider: ${{ secrets.workload_identity_provider }}
        service_account: ${{ secrets.service_account }}

    - name: Get Secret
      id: secrets
      uses: google-github-actions/get-secretmanager-secrets@v3
      with:
        secrets: |-
          artifact_registry_workload_identity_provider: ${{ inputs.artifact_registry_workload_identity_provider_secret_name }}
          artifact_registry_service_account: ${{ inputs.artifact_registry_service_account_secret_name }}
          cosign_kms_key: ${{ inputs.cosign_kms_key_secret_name }}

    - name: OpenID Connect Authentication
      id: openid-auth
      uses: google-github-actions/auth@v3
      with:
        create_credentials_file: true
        token_format: access_token
        workload_identity_provider: ${{ steps.secrets.outputs.artifact_registry_workload_identity_provider }}
        service_account: ${{ steps.secrets.outputs.artifact_registry_service_account }}

    - name: Docker login
      uses: docker/login-action@v3
      id: docker-login
      with:
        registry: ${{ inputs.registry }}
        username: oauth2accesstoken
        password: ${{ steps.openid-auth.outputs.access_token }}

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.10.0

    - name: Compute source docker image name and tag which is saved in artifact
      id: compute-source-image-name
      run: echo "image_name=${{ inputs.image }}:${{ inputs.tag }}" | tee -a ${GITHUB_OUTPUT}

    - name: Compute target docker image name and tag to push to Artifact Registry
      id: compute-target-image-name
      run: echo "image_name=${{ inputs.registry }}/${{ inputs.project_id }}/${{ inputs.repository }}/${{ inputs.image }}" | tee -a ${GITHUB_OUTPUT}

    - name: Download artifact
      uses: actions/download-artifact@v5
      with:
        name: ${{ inputs.image }}-${{ inputs.tag }}.tar
        path: ${{ runner.temp }}

    - name: Load docker image from artifact
      run: |
        docker load --input ${{ runner.temp }}/${{ inputs.image }}-${{ inputs.tag }}.tar
        docker images

    - name: Push docker images
      run: |
        docker image tag ${{ steps.compute-source-image-name.outputs.image_name }} "${{ steps.compute-target-image-name.outputs.image_name }}:${{ inputs.tag }}"

        if [ ${{ inputs.tag_latest }} == 'true' ]; then
          docker image tag ${{ steps.compute-source-image-name.outputs.image_name }} "${{ steps.compute-target-image-name.outputs.image_name }}:latest"
        fi

        docker image push --all-tags ${{ steps.compute-target-image-name.outputs.image_name }}

    - name: Get the image digest
      id: get_digest
      run: echo "digest=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.compute-source-image-name.outputs.image_name }})" >> $GITHUB_OUTPUT

    - name: Sign image with a kms key
      run: cosign sign --tlog-upload=false --key gcpkms://${{ steps.secrets.outputs.cosign_kms_key }} ${{ steps.get_digest.outputs.digest }}
