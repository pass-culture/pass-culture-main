[project]
name = "pcproxy"
version = "0.0.0"
description = "fast proxy to data backend"
authors = [{name = "Equipe pass Culture", email= "contact@passculture.app"}]
requires-python = ">=3.11,<4.0"

dependencies = [
    "aiodns==3.2.0",
    "aiohappyeyeballs==2.4.4",
    "aiohttp==3.11.11",
    "aiosignal==1.3.2",
    "annotated-types==0.7.0",
    "anyio==4.8.0",
    "attrs==24.3.0",
    "Brotli==1.1.0",
    "certifi==2024.12.14",
    "cffi==1.17.1",
    "cryptography==44.0.1",
    "fastapi==0.115.6",
    "frozenlist==1.5.0",
    "idna==3.10",
    "multidict==6.1.0",
    "propcache==0.2.1",
    "pycares==4.5.0",
    "pycparser==2.22",
    "pydantic==2.10.5",
    "pydantic_core==2.27.2",
    "PyJWT==2.10.1",
    "sentry-sdk==2.20.0",
    "sniffio==1.3.1",
    "starlette==0.41.3",
    "typing_extensions==4.12.2",
    "urllib3==2.3.0",
    "yarl==1.18.3",
]


[project.optional-dependencies]
dev=[
    "black==24.10.0",
    "fastapi[standard]==0.115.6",
    "commitizen==4.1.0",
    "isort==5.13.2",
    "mypy==1.13.0",
    "mypy-extensions==1.0.0",
    "pylint==3.3.3",
    "pylint-plugin-utils==0.8.2",
    "pylint-pydantic==0.3.5",
    "pytest==8.3.4",
    "pytest-asyncio==0.25.2",
    "pytest-dotenv==0.5.2",
    "pytest-mock==3.14.0",
]

[tool.black]
extend-exclude = '''
(
  /(
    | \.mypy_cache
    | \.pytest_cache
    | \.venv
  )/
)
'''
include = '\.pyi?$'
line-length = 120
target-version = ['py310']


[tool.isort]
combine_as_imports = true
ensure_newline_before_comments = true
force_grid_wrap = 0
force_single_line = true
force_sort_within_sections = true
include_trailing_comma = true
known_tests = ["tests"]
line_length = 120
lines_after_imports = 2
multi_line_output = 3
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,TESTS,LOCALFOLDER"
use_parentheses = true


[tool.mypy]
python_version = "3.11"
mypy_path = "stubs/"
disallow_untyped_defs = true
follow_imports = "silent"
preserve_asts = true
ignore_missing_imports = true
show_column_numbers = true
warn_unused_ignores = true
show_error_codes = true
warn_redundant_casts = true
local_partial_types = true
plugins = "pydantic.mypy"


[tool.pylint.MASTER]
# Include info messages into score so that pylint fails if we have
# such messages (e.g. "useless-suppression").
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention + info) / statement) * 10))"
extension-pkg-whitelist = ["pydantic"]
load-plugins = ["pylint_pydantic"]
ignore-paths = [
    # Many "too-many-positional-arguments" warnings in tests because of fixtures.
    # Let's disable pylint for tests since the folder is already excluded in mypy configuration below.
    "^tests/",
]

[tool.pylint."MESSAGES CONTROL"]
enable = ["use-symbolic-message-instead", "useless-suppression"]
disable = [
    "arguments-differ",
    "arguments-renamed",
    "attribute-defined-outside-init",
    "consider-using-f-string",
    "cyclic-import",
    "duplicate-code",
    "fixme",
    "file-ignored",
    "import-outside-toplevel",
    "invalid-name",
    "line-too-long",
    "locally-disabled",
    "missing-docstring",
    "no-member",
    "protected-access",
    "raise-missing-from",
    "singleton-comparison",
    "superfluous-parens",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "ungrouped-imports",
    "unnecessary-lambda-assignment",
    "unused-argument",
    "use-dict-literal",
    "wrong-import-order",             # we have a custom isort config, which pylint can't grok
    "wrong-import-position",          # same reason
]

[tool.pylint.REPORTS]
msg-template = "{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}"

[tool.pylint.FORMAT]
max-line-length = 120


[tool.pytest.ini_options]
addopts = [
    "--verbose",
    "--tb=short",
    "-p no:warnings",
]
filterwarnings = [
    # Mark warnings as errors
    "error",
]
testpaths = ["tests"]
norecursedirs = [".git", "venv", ".pytest_cache"]
python_files = ["*test.py", "test*.py"]
python_classes = ["*Test"]
python_functions = ["test_*", "when_*", "expect_*", "should_*"]
env_files = ["local_test_env_file"]
junit_family = "xunit1"
markers = ["backoffice", "features", "settings"]
requests_mock_case_sensitive = true
asyncio_default_fixture_loop_scope = "session"
