version: 2.1

###################
#  EXECUTORS
###################

executors:

  node-gcp:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/node-gcp:12
        auth:
          username: _json_key  # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

###################
#  COMMANDS
###################

commands:

  authenticate_gcp:
    description: Authenticate to a GCP project
    parameters:
      gcp_key_name:
        type: env_var_name
    steps:
      - run: echo ${<< parameters.gcp_key_name >>} > ${HOME}/gcp-key.json
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${GCP_PROJECT}


  build:
    description: Build the webapp
    parameters:
      node_env:
        type: string
    steps:
      - run: |
          cd ~/pass-culture-main/webapp
          yarn install

          set -a; source ~/pass-culture-main/config/run_envs/<< parameters.node_env >>;
          # TODO : Remove once env variables are cleaned in every app
          export NODE_ENV=<< parameters.node_env >>

          yarn build

  push-to-bucket:
    description: Push the built webapp to a cloudstorage bucket
    parameters:
      bucket_name:
        type: string
      build_path:
        type: string
    steps:
      - run: |
          set +eo pipefail
          gsutil rsync -r << parameters.build_path >> gs://<< parameters.bucket_name >>
          true

###################
#  JOBS
###################

jobs:
  test:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/
    steps:
      - run:
          name: Initialization environment
          command: |
            git clone --single-branch --branch $CIRCLE_BRANCH https://github.com/betagouv/pass-culture-main.git pass-culture-main || git clone https://github.com/betagouv/pass-culture-main.git pass-culture-main
            cd pass-culture-main
            git clone --single-branch --branch $CIRCLE_BRANCH https://github.com/betagouv/pass-culture-api.git api || git clone https://github.com/betagouv/pass-culture-api.git api
            ./install_lib_ci_with_chrome.sh
      - checkout:
          path: ~/pass-culture-main/webapp
      - run:
          name: Running Unit Tests
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/webapp
            nvm install
            yarn install
            yarn test:unit --coverage
            yarn coveralls || echo "Encountered an error while running coveralls"
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Running API server
          command: |
            cd ~/pass-culture-main
            ./pc start-backend
          background: true
      - run:
          name: Running Frontend
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/webapp
            nvm install
            yarn start
          background: true
      - run:
          name: Running industrial sandbox
          command: |
            cd pass-culture-main
            dockerize -wait http://localhost/health/api -timeout 5m -wait-retry-interval 5s
            dockerize -wait http://localhost/health/database -timeout 5m -wait-retry-interval 5s
            ./pc sandbox --name=industrial
      - run:
          name: Running end2end tests
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/pass-culture-main/webapp
            nvm install
            yarn test:cafe
      - store_artifacts:
          path: ~/pass-culture-main/webapp/testcafe_screenshots

  deploy-webapp:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/
    steps:
      - run:
          name: Checkout main
          command: |
            git clone --single-branch --branch $CIRCLE_BRANCH https://github.com/betagouv/pass-culture-main.git pass-culture-main || git clone https://github.com/betagouv/pass-culture-main.git pass-culture-main
      - checkout:
          path: ~/pass-culture-main/webapp
      - run:
          name: Install Lib CI
          command: ~/pass-culture-main/install_lib_ci.sh
      - run:
          name: Build and Deploy
          command: |
            cd ~/pass-culture-main/webapp
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
            nvm install
            yarn install

            set -a; source ~/pass-culture-main/config/run_envs/testing;
            # TODO : Remove once env variables are cleaned in every app
            export NODE_ENV=testing

            yarn build
            npm install -g netlify-cli@2.46.0
            netlify deploy -s "${NETLIFY_SITE_ID_WEBAPP}" -a "${NETLIFY_TOKEN}" -d build/ --prod

  deploy-webapp-gcp:
    executor: node-gcp
    steps:
      - run:
          name: Checkout main
          command: |
            git clone --single-branch --branch $CIRCLE_BRANCH https://github.com/betagouv/pass-culture-main.git ~/pass-culture-main || git clone https://github.com/betagouv/pass-culture-main.git ~/pass-culture-main
      - checkout:
          path: ~/pass-culture-main/webapp
      - authenticate_gcp:
          gcp_key_name: GCP_METIER_KEY
      - build:
          node_env: testing
      - push-to-bucket:
          build_path: ~/pass-culture-main/webapp/build/
          bucket_name: ${GCP_PROJECT}-testing-webapp


###################
#  WORKFLOWS
###################

workflows:
  version: 2
  commit:
    jobs:
      - test
      - deploy-webapp:
          filters:
            branches:
              only:
                - master
          requires:
            - test

  gcp:
    jobs:
      - deploy-webapp-gcp:
          filters:
            branches:
              only:
                - master
          context:
            - GCP
            - GCP_EHP
