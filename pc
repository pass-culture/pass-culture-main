#!/bin/bash

set -o nounset

# =============================================
#  Helper that describes all functionalities
# =============================================

if [[ $# -eq 0 ]] || [[ "$1" == "-h" ]]; then
  echo "$(basename "$0") [-h] [-e env -b backend -f file -r region c] -- program to deal with Pass Culture ecosystem
where:
  -h  show this help text
  -e  specify environment to target (default: development)
  -b  specify backend to connect with local app (default: localhost)
  -f  file to upload to scalingo off-container
  -r  region
  -t  specify version you want to deploy (create tag with this name)
  -c  command that you want to run"
  exit 0
fi


# =============================================
# Get script parameters
# =============================================

if [[ $# -gt 2 ]] && [[ "$1" == "-e" ]]; then
  ENV=$2
  shift 2
else
  ENV=${ENV:-'development'}
fi

if [[ $# -gt 2 ]] && [[ "$1" == "-b" ]]; then
  BACKEND=$2
  shift 2
else
  BACKEND=${BACKEND:-'localhost'}
fi

if [[ $# -gt 2 ]] && [[ "$1" == "-f" ]]; then
  FILE_TO_UPLOAD=$2
  shift 2
else
  FILE_TO_UPLOAD=${FILE_TO_UPLOAD:-'none'}
fi

if [[ $# -gt 2 ]] && [[ "$1" == "-r" ]]; then
  export SCALINGO_REGION=$2
  shift 2
else
  export SCALINGO_REGION=agora-fr1
fi

if [[ $# -gt 2 ]] && [[ "$1" == "-t" ]]; then

  if [[ "$2" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
    TAG_NAME=$2
  else
    echo "tag format should be Semantic Versioning compliant x.x.x"
    exit 1
  fi

  shift 2
else
  TAG_NAME=${TAG_NAME:-'not-set'}
fi

CMD="$1"
shift

# =============================================
# Set variables for env
# =============================================

if [[ "$ENV" == "production" ]]; then
  SCALINGO_APP=pass-culture-api
elif [[ "$ENV" == "testing" ]]; then
  SCALINGO_APP=pass-culture-api-dev
elif [[ "$ENV" == "datalake" ]]; then
  SCALINGO_APP=pass-culture-api-datalake
elif [[  ! -z "$ENV" ]]; then
  SCALINGO_APP=pass-culture-api-"$ENV"
fi

# =============================================
# Utilities functions
# =============================================
RED='\033[0;31m'
ORANGE='\033[0;33m'
WARNING_COLOR='\e[38;5;197m'
NO_COLOR='\033[0m'

PRG="$BASH_SOURCE"

while [ -h "$PRG" ] ; do
  ls=$(ls -ld "$PRG")
  link=$(expr "$ls" : '.*-> \(.*\)$')
  if expr "$link" : '/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=$(dirname "$PRG")"/$link"
  fi
done

UNAME_OUT="$(uname -s)"
case "${UNAME_OUT}" in
    Linux*)     MACHINE=Linux;;
    Darwin*)    MACHINE=Mac;;
    CYGWIN*)    MACHINE=Cygwin;;
    MINGW*)     MACHINE=MinGw;;
    *)          MACHINE="UNKNOWN:${UNAME_OUT}"
esac

ROOT_PATH=$(realpath "$(dirname "$PRG")")
INFRA_SCRIPTS_PATH="$ROOT_PATH"/infra/pc_scripts/

function confirm {
  read -p "$1 (y/n) : " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit
  fi
}

function ensure_remote {
  if [[ "$ENV" == "development" ]]; then
    echo "$1"
    exit 3
  fi
}

function echo_error {
  echo -e "${RED}""$1""${NO_COLOR}"
}

function echo_warning {
  echo -e "${ORANGE}""$1""${NO_COLOR}"
}

current_branch=$(git symbolic-ref -q HEAD)
current_branch=${current_branch##refs/heads/}

function update_deploy_branches {
  git fetch
  git checkout master
  git reset --hard origin/master || exit_error_restoring_branch
  git submodule update || exit_error_restoring_branch
  git checkout staging
  git reset --hard origin/staging || exit_error_restoring_branch
  git submodule update || exit_error_restoring_branch
  git checkout integration
  git reset --hard origin/integration || exit_error_restoring_branch
  git submodule update || exit_error_restoring_branch
  git checkout production
  git reset --hard origin/production || exit_error_restoring_branch
  git submodule update || exit_error_restoring_branch
}

function tag_frontend_component {
  component="$1"
  tag_name="$2"
  tag_version="v$tag_name"
  cd "$ROOT_PATH"/"$component"
  yarn version --new-version "$tag_name"
  git push origin "$current_branch"
  git push origin "$tag_version"
}

function open_build_status_page {
  cd "$ROOT_PATH"
  env_to_deploy="$1"
  commit_to_deploy="$2"
  source scripts/open_build_status_page.sh "$env_to_deploy" "$commit_to_deploy"
}

function exit_error_restoring_branch {
  git checkout "$current_branch"
  exit 1
}

function exit_success_restoring_branch {
  git checkout "$current_branch"
  exit 0
}

# =============================================
# Local commands : use Docker
# =============================================

# Run alembic migration
# Need to specify what alembic command you want to execute
# Example: ./pc alembic upgrade head
if [[ "$CMD" == "alembic" ]]; then
  RUN='docker exec pc-flask bash -c "cd /opt/services/flaskapp/src && PYTHONPATH=. alembic '"$*"'"'

# Connect to API container
elif [[ "$CMD" == "bash" ]]; then
  if [[ "$ENV" == "development" ]]; then
    RUN='docker exec -it pc-flask bash'
  else
    if [ "$FILE_TO_UPLOAD" == 'none' ]; then
      scalingo -a "$SCALINGO_APP" run bash
    else
      scalingo -a "$SCALINGO_APP" run --file "$FILE_TO_UPLOAD" bash
    fi
    exit
  fi

# Create diff output between schema in staging & local backend
elif [[ "$CMD" == "diff-schema" ]]; then
  docker exec pc-postgres pg_dump -d pass_culture -U pass_culture -s > /tmp/pc_schema_local
  scalingo -a pass-culture-api-staging run 'dbclient-fetcher postgresql 10.4 && pg_dump "$SCALINGO_POSTGRESQL_URL" -s' > /tmp/pc_schema_staging
  diff /tmp/pc_schema_staging /tmp/pc_schema_local
  exit

# Dump pass_culture database into pgdump file
elif [[ "$CMD" == "dump-db" ]]; then
  RUN='mkdir -p "$ROOT_PATH/db_dumps";
    docker exec pc-postgres pg_dump -d pass_culture -U pass_culture -F c > "$ROOT_PATH"/db_dumps/`date +%Y%m%d_%H%M%S`.pgdump'

# Force docker-compose to build the docker images
elif [[ "$CMD" == "rebuild-backend" ]]; then
  RUN='docker-compose build --no-cache;
    sudo rm -rf $ROOT_PATH/api/static/object_store_data;
    docker-compose down --volumes'

# Execute request from specified file
elif [[ "$CMD" == "psql-file" ]]; then
  COLUMNS=${COLUMNS:-''};
  RUN='docker exec -t pc-postgres bash -c "COLUMNS=\"'$COLUMNS'\" psql -U pass_culture pass_culture -f $1"'

# Restart API after removing the database and files
elif [[ "$CMD" == "restart-backend" ]]; then
  source "$INFRA_SCRIPTS_PATH"start_backend.sh
  restart_backend

# Clear all data in postgresql database
elif [[ "$CMD" == "reset-all-db" ]]; then
  RUN='docker exec -it pc-flask bash -c "rm -rf /opt/services/flaskapp/src/static/object_store_data/*";
    docker exec pc-flask bash -c "cd /opt/services/flaskapp/src/ && PYTHONPATH=. python scripts/pc.py clean"'

# Remove all booking & reco from database
elif [[ "$CMD" == "reset-reco-db" ]]; then
  RUN='docker exec -it pc-postgres bash -c "psql -U pass_culture pass_culture -c \"TRUNCATE booking,recommendation RESTART IDENTITY;\""'

# Remove all booking, reco & user_offerer from database
elif [[ "$CMD" == "reset-users-db" ]]; then
  RUN='docker exec -it pc-postgres bash -c "psql -U pass_culture pass_culture -c \"TRUNCATE \\\"user\\\",booking,recommendation,user_offerer RESTART IDENTITY CASCADE;\""'

# Delete all local images
elif [[ "$CMD" == "reset-all-storage" ]]; then
  RUN='sudo rm -rf $ROOT_PATH/flask/static/object_store_data;'

# Restore a postgresql database from file (and anonymize data)
elif [[ "$CMD" == "restore-db" ]]; then
  confirm "Warning: your database will be wiped. Is this OK ?"
  "$ROOT_PATH"/pc -e "$ENV" reset-all-db
  if [[ $# == 0 ]]; then
    echo "Usage : pc restore-db <backup_file> [arguments]"
    exit
  fi
  backup_file="$1"
  RUN='cat "'$backup_file'" | docker exec -i pc-postgres pg_restore -d pass_culture -U pass_culture -c;
    ./api/scalingo/anonymize_database.sh -p Password_ ;
    rm $backup_file'

# Restore a postgresql database from file (non anonymized)
elif [[ "$CMD" == "restore-db-intact" ]]; then
  source "$INFRA_SCRIPTS_PATH"/restore_db.sh
  restore_db_intact $1

# Prepare backend for local use
elif [[ "$CMD" == "set-backend" ]]; then
  RUN='cd "$ROOT_PATH";
    ./pc update-mocks;
    ./pc update_providables -m -p SpreadsheetExpVenues;
    ./pc update_providables -m -p SpreadsheetExpOffers;
    ./pc sandbox --name=light;'

# Start API server with database and nginx server
elif [[ "$CMD" == "start-backend" ]]; then
    source "$INFRA_SCRIPTS_PATH"start_backend.sh
    start_backend

# Start webapp or pro application
elif [[ "$CMD" == "start-webapp" ]] || [[ "$CMD" == "start-pro" ]]; then
  if [[ "$CMD" == "start-webapp" ]]; then
    RUN='cd $ROOT_PATH/webapp'
  else
    RUN='cd $ROOT_PATH/pro'
  fi
  if [[ "$BACKEND" == "testing" ]]; then
    RUN="$RUN"' && export THUMBS_URL=https://storage.gra3.cloud.ovh.net/v1/AUTH_810600e32fdc4cb49a8d15332b68d2cc/storage-pc/thumbs && export API_URL=https://backend.passculture-testing.beta.gouv.fr'
  elif [[ "$BACKEND" == "ngrok" ]]; then
    RUN="$RUN"' && NGROK_API_URL='$(node "$ROOT_PATH"/webapp/scripts/ngrok.js)
  elif [[ "$BACKEND" != "localhost" ]]; then
    echo "Can only set backend as localhost or testing for developping your front app."
    exit
  fi
  RUN="$RUN"' && yarn start'

# Create symlink for shared folder in webapp & pro
elif [[ "$CMD" == "shared" ]]; then
  RUN='cd $ROOT_PATH/shared && yarn run compile;
    cd $ROOT_PATH/webapp/node_modules && ln -sf ../../shared pass-culture-shared;
    cd $ROOT_PATH/pro/node_modules && ln -sf ../../shared pass-culture-shared;'

# Run tests for API
# Need start-backend to be successful and delete all data
elif [[ "$CMD" == "test-backend" ]]; then
  source "$INFRA_SCRIPTS_PATH"test_backend.sh
  test_backend $*

# Run only local providers tests for API
elif [[ "$CMD" == "test-backend-provider" ]]; then
  RUN='"$ROOT_PATH"/pc test-backend tests/10_local_providers.py::test_15_spreadsheet_exp_venue_provider tests/10_local_providers.py::test_15_spreadsheet_exp_stocks_provider tests/10_local_providers.py::test_16_openagenda_events_provider'

# Run functional tests for webapp or pro application
# Need to run start-backend & start-frontend
elif [[ "$CMD" == "test-cafe-webapp" ]] || [[ "$CMD" == "test-cafe-pro" ]]; then
  if [[ "$CMD" == "test-cafe-webapp"  ]]; then
    APP_PATH="$ROOT_PATH"/webapp
  else
    APP_PATH="$ROOT_PATH"/pro
  fi
  if [[ $# == 0 ]]; then
    if [[ "$MACHINE" == "Mac" ]]; then
      BROWSER="chrome"
    else
      BROWSER="chromium"
    fi
    confirm "Warning: your database will be wiped. Is this OK ?"
    "$ROOT_PATH"/pc -e "$ENV" sandbox --name=industrial
    RUN='cd $APP_PATH && ./scripts/manager.js testcafe -b $BROWSER:headless'
  else
    RUN='cd $APP_PATH && ./scripts/manager.js testcafe '"$*"
  fi

# Start Metabase container with sandbox data
elif [[ "$CMD" == "start-metabase" ]]; then
  source "$INFRA_SCRIPTS_PATH"start-metabase.sh
  start_metabase

# Restart volumes and start Metabase container with sandbox data
elif [[ "$CMD" == "restart-metabase" ]]; then
  source "$INFRA_SCRIPTS_PATH"start-metabase.sh
  restart_metabase


# =============================================
# Deploy commands
# =============================================

# Tag commit on the current branch of API/Webapp/Pro
elif [[ "$CMD" == "tag-version-backend" ]] \
  || [[ "$CMD" == "tag-version-webapp" ]] \
  || [[ "$CMD" == "tag-version-pro" ]]; then

  if [[ "$CMD" == "tag-version-webapp"  ]]; then
    APP_PATH="$ROOT_PATH"/webapp
  elif [[ "$CMD" == "tag-version-pro"  ]]; then
    APP_PATH="$ROOT_PATH"/pro
  else
    APP_PATH="$ROOT_PATH"/api
  fi

  cd "$APP_PATH"

  if [[ "$TAG_NAME" ]]; then
    TAG_VERSION="v$TAG_NAME"
    if [[ "$CMD" == "tag-version-backend" ]]; then
      git tag "$TAG_VERSION"
    else
      yarn version --new-version "$TAG_NAME"
      git push origin "$current_branch"
    fi
    git push origin "$TAG_VERSION"
    exit_success_restoring_branch
  fi

# Tag new hotfix version using main repo
elif [[ "$CMD" == "tag-hotfix" ]]; then
  if [[ "$TAG_NAME" ]]; then
    source "$INFRA_SCRIPTS_PATH"/hotfix.sh
    tag_hotfix $TAG_NAME
    exit 0
  fi

# Tag new version using main repo
elif [[ "$CMD" == "tag" ]]; then
  if [[ "$TAG_NAME" ]]; then
    TAG_VERSION="v$TAG_NAME"

    # TAG API
    cd "$ROOT_PATH"/api
    echo "$TAG_VERSION" > version.txt
    git add version.txt
    git commit -m "🚀 $TAG_VERSION"
    git push origin "$current_branch"
    git tag "$TAG_VERSION"
    git push origin "$TAG_VERSION"

    # TAG WEBAPP
    tag_frontend_component webapp "$TAG_NAME"

    # TAG PRO
    tag_frontend_component pro "$TAG_NAME"

    # TAG MAIN
    cd "$ROOT_PATH"
    git add .
    git commit -m "🚀 $TAG_VERSION"
    git push origin master
    git tag "$TAG_VERSION"
    git push origin "$TAG_VERSION"

    echo "New version tagged : $TAG_NAME"

    exit_success_restoring_branch
  fi

# Deploy all components using main repo
elif [[ "$CMD" == "deploy" ]]; then
  ensure_remote "Deploy cannot be run on the local environment. Use (for example) \"pc -e staging -t X.Y.Z "$CMD"\"."

  if [[ ! "$ENV" == 'production' ]] \
  && [[ ! "$ENV" == 'staging' ]] \
  && [[ ! "$ENV" == 'datalake' ]] \
  && [[ ! "$ENV" == 'integration' ]]; then
     echo_error "Can only deploy in datalake, staging, integration and production"
     exit 1
  fi

  if [[ "$TAG_NAME" == 'not-set' ]]; then
    echo_error "ERROR: You need to specify an existing tag to deploy"
    exit_error_restoring_branch
  fi

  echo "$TAG_NAME will be deployed to $ENV"
  cd "$ROOT_PATH"
  update_deploy_branches

  if [[ ! -z $(git ls-remote --tags origin refs/tags/v"$TAG_NAME") ]]; then
    git checkout "v$TAG_NAME"
    git submodule update
  else
    echo_error "ERROR: You need to specify an existing remote tag to deploy"
    exit_error_restoring_branch
  fi

  commit_to_deploy=$(git log -n 1 --pretty=format:%H)
  if [[ "$ENV" == "production" ]]; then
    confirm "Warning: code will be deployed to PRODUCTION. Are you sure ?"
    staging_commit=$(git log -n 1 --pretty=format:%H staging)
    echo "$staging_commit"
    if [[ "$staging_commit" != "$commit_to_deploy" ]]; then
      echo_error "ERROR: Can only deploy in production commits that are also deployed in staging"
      exit_error_restoring_branch
    fi
  fi

  git push -f origin HEAD:"$ENV"

  #  Follow build status
  open_build_status_page "$ENV" "$commit_to_deploy"

  if [[ "$ENV" == 'production' ]]; then
    echo -e "$WARNING_COLOR""/!\\ You just deployed to production. Was the version also delivered to integration ?""${NO_COLOR}"
  fi

  exit_success_restoring_branch

# Deploy current version of API/Webapp/Pro to specified environment
elif [[ "$CMD" == "deploy-backend" ]] \
  || [[ "$CMD" == "deploy-frontend-webapp" ]] \
  || [[ "$CMD" == "deploy-frontend-pro" ]]; then

  ensure_remote "Deploy backend cannot be run on the local environment. Use (for example) \"pc -e staging -t X.Y.Z "$CMD"\"."

  if [[ ! "$ENV" == 'production' ]] \
  && [[ ! "$ENV" == 'staging' ]] \
  && [[ ! "$ENV" == 'integration' ]]; then
    echo_error "Can only deploy-backend in staging, integration and production"
    exit 1
  fi

  if [[ "$TAG_NAME" == 'not-set' ]]; then
    echo_error "ERROR: You need to specify an existing tag to deploy"
    exit_error_restoring_branch
  fi

  if [[ "$CMD" == "deploy-frontend-webapp"  ]]; then
    APP_PATH="$ROOT_PATH"/webapp
  elif [[ "$CMD" == "deploy-frontend-pro"  ]]; then
    APP_PATH="$ROOT_PATH"/pro
  else
    APP_PATH="$ROOT_PATH"/api
  fi

  cd "$APP_PATH"
  echo "$TAG_NAME will be deployed to $ENV"
  commit_to_deploy=$(git log -n 1 --pretty=format:%H)

  update_deploy_branches

  if [[ ! -z $(git ls-remote --tags origin refs/tags/v"$TAG_NAME") ]]; then
    git checkout "v$TAG_NAME"
  else
    echo_error "ERROR: You need to specify an existing remote tag to deploy"
    exit_error_restoring_branch
  fi

  if [[ "$ENV" == "production" ]]; then
    staging_commit=$(git log -n 1 --pretty=format:%H staging)
    echo "$staging_commit"
    if [[ "$staging_commit" != "$commit_to_deploy" ]]; then
      echo_error "ERROR: Can only deploy in production commits that are also deployed in staging"
      exit_error_restoring_branch
    fi
  fi

  git push -f origin HEAD:"$ENV"

  if [[ "$CMD" == "deploy-frontend-webapp" ]] \
  || [[ "$CMD" == "deploy-frontend-pro" ]]; then
     rm -rf "$APP_PATH"/node_modules "$APP_PATH"/build && yarn
     (set -a; source "$ROOT_PATH/config/run_envs/$ENV" && yarn build) || exit

     url_is_set=$(cat build/static/js/*.js | grep -E backend.passculture*)
     if [  -z "$url_is_set" ]; then
        echo_error "URL not found in build artifact. Problem with environment variables"
        exit_error_restoring_branch
     fi
     netlify deploy -e "$ENV"
  fi

  if [[ "$ENV" == 'production' ]]; then
     echo -e "$WARNING_COLOR""/!\\ You just deployed to production. Was the version also delivered to integration ?""${NO_COLOR}"
  fi

  exit_success_restoring_branch

# =============================================
# Initialization commands
# =============================================

# Install new local environment
elif [[ "$CMD" == "install" ]]; then
  RUN='cd $ROOT_PATH;
    git submodule init;
    git submodule update;
    git submodule foreach git checkout master;
    cd $ROOT_PATH/shared && yarn;
    cd $ROOT_PATH/webapp && yarn;
    cd $ROOT_PATH/pro && yarn;
    cd $ROOT_PATH && ./pc install-private;
    ./pc install-hooks'

# Decrypt data from gpg private file
elif [[ "$CMD" == "install-private" ]]; then
  RUN='cd $ROOT_PATH/api;
    rm -rf private;
    gpg --passphrase $PC_GPG_PRIVATE --batch --output private.tar.gz -d private.tar.gz.gpg;
    tar xf private.tar.gz;
    rm private.tar.gz'

# Install local git hook for pre-push actions
elif [[ "$CMD" == "install-hooks" ]]; then
  RUN='cd $ROOT_PATH;
    ln -s -f ../../../../hooks/pre-push .git/modules/api/hooks/pre-push'

# Create symlink to use "pc" command (admin rights may be needed)
elif [[ "$CMD" == "symlink" ]]; then
  RUN='cd /usr/local/bin && ln -sf '"$(pwd)"'/pc pc && chmod +x pc && chmod +x '"$(pwd)"'/pc'

# =============================================
# Administration commands
# =============================================

# List pip licences
elif [[ "$CMD" == "api-licenses" ]]; then
  COLUMNS=${COLUMNS:-''};
  if [[ "$ENV" == "development" ]]; then
    RUN='docker exec -it pc-flask bash -c "cd /opt/services/flaskapp/src/ && PYTHONPATH=. pip-licenses --format-html >> licenses.html"'
  else
    echo_error "These command is only available in DEV"
    exit
  fi

# Display logs from API
elif [[ "$CMD" == "logs" ]]; then
  source "$INFRA_SCRIPTS_PATH"logs.sh
  logs $*

# Display logs from Database
elif [[ "$CMD" == "access-db-logs" ]]; then
  source "$INFRA_SCRIPTS_PATH"/access_db_logs.sh
  access_db_logs $SCALINGO_APP

# Connect to Postgresql database in command line using psql
elif [[ "$CMD" == "psql" ]]; then
  COLUMNS=${COLUMNS:-''};
  if [[ "$ENV" == "development" ]]; then
    RUN='docker exec -it pc-postgres bash -c "COLUMNS=\"'$COLUMNS'\" psql -U pass_culture pass_culture $*"'
  else
    scalingo -a "$SCALINGO_APP" pgsql-console
    exit
  fi

# Connect to Postgresql test database in command line using psql
elif [[ "$CMD" == "psql-test" ]]; then
  COLUMNS=${COLUMNS:-''};
  if [[ "$ENV" == "development" ]]; then
    RUN='docker exec -it pc-postgres-pytest bash -c "COLUMNS=\"'$COLUMNS'\" psql -U pytest pass_culture $*"'
  else
      echo "Only available in development environment"
    exit
  fi

# Connect to Postgresql database in command line using pgcli
elif [[ "$CMD" == "pgcli" ]]; then
  COLUMNS=${COLUMNS:-''};
  if [[ "$ENV" == "development" ]]; then
    source "$ROOT_PATH"/env_file
    RUN='docker exec -it pc-flask bash -c "pgcli $DATABASE_URL"'
  else
    scalingo -a "$SCALINGO_APP" run 'pgcli $DATABASE_URL'
    exit
  fi


# Open a python prompt in the specified environment
elif [[ "$CMD" == "python" ]]; then
    COLUMNS=${COLUMNS:-''};
	if [[ "$ENV" == "development" ]]; then
		RUN='docker exec -it pc-flask bash -c "cd /opt/services/flaskapp/src/ && PYTHONPATH=. python -i scripts/interact.py '"$CMD $*"'"'
	else
    if [ "$FILE_TO_UPLOAD" == 'none' ]; then
      scalingo -a "$SCALINGO_APP" run "python -i scripts/interact.py"
		else
      scalingo -a "$SCALINGO_APP" run --file "$FILE_TO_UPLOAD" "python -i scripts/interact.py"
		fi
		exit
	fi


# Connect to administration instances
elif [[ "$CMD" == "ssh" ]]; then
  if [[ "$ENV" == "production" ]]; then
    ssh deploy@api.passculture.beta.gouv.fr
  elif [[ "$ENV" == "staging" ]]; then
    ssh deploy@api.passculture-staging.beta.gouv.fr
  fi


# Display environement database restore infos
elif [[ "$CMD" == "db_restore_infos" ]]; then
  source "$INFRA_SCRIPTS_PATH"get_restore_infos.sh
  get_restore_infos



# =============================================
# Python Scripts commands
# =============================================

# Run python scripts from api/scripts
else
  if [[ "$ENV" == "development" ]]; then
    RUN='docker exec pc-flask bash -c "cd /opt/services/flaskapp/src/ && PYTHONPATH=. python scripts/pc.py '"$CMD $*"'"'
  else
    if [ "$FILE_TO_UPLOAD" == 'none' ]; then
      scalingo -a "$SCALINGO_APP" run 'python scripts/pc.py '"$CMD $*"''
    else
      scalingo -a "$SCALINGO_APP" run --file "$FILE_TO_UPLOAD" 'python scripts/pc.py '"$CMD $*"''
    fi
    exit
  fi
fi

# =============================================
# Execute command
# =============================================

if [[ $PWD == "/home/deploy/pass-culture-main" ]]; then
  echo $RUN
  eval $RUN
else
  if [[ "$ENV" == "production" ]] || [[ "$ENV" == "staging" ]]; then
    echo "$RUN" | ssh deploy@api.passculture.beta.gouv.fr bash
  elif [[ "$ENV" == "wordpress" ]]; then
    ssh debian@passculture.beta.gouv.fr
  else
    echo $RUN
    eval $RUN
  fi
fi
